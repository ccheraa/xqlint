// This file was generated on Mon Aug 22, 2022 14:43 (UTC+03) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 228:                       // 'xquery'
      lookahead2W(203);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'version' | 'where' | 'while' | 'xquery' | '{' | '|' |
                                    // '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 30948                 // 'xquery' 'encoding'
     || lk == 57060)                // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    switch (l1)
    {
    case 163:                       // 'module'
      lookahead2W(194);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 42147)                // 'module' 'namespace'
    {
      lk = memoized(0, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_LibraryModule();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(0, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(228);                   // 'xquery'
    lookahead1W(103);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 120:                       // 'encoding'
      consume(120);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(222);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(95);              // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 120)                // 'encoding'
      {
        consume(120);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(121);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function try_LibraryModule()
  {
    try_ModuleDecl();
    lookahead1W(121);               // S^WS | EOF | '(:' | 'declare' | 'import'
    try_Prolog();
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(163);                   // 'module'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(164);                   // 'namespace'
    lookahead1W(157);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function try_ModuleDecl()
  {
    consumeT(163);                  // 'module'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consumeT(164);                  // 'namespace'
    lookahead1W(157);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    try_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consumeT(60);                   // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    try_Separator();
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(187);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(213);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'base-uri' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'construction' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'revalidation' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                    // 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||'
        break;
      case 140:                     // 'import'
        lookahead2W(197);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk == 27498               // 'declare' 'default'
       || lk == 41868               // 'import' 'module'
       || lk == 42090)              // 'declare' 'namespace'
      {
        lk = memoized(1, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 106:               // 'declare'
              lookahead2W(150);     // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering' |
                                    // 'revalidation'
              break;
            default:
              lk = l1;
            }
            if (lk == 27498)        // 'declare' 'default'
            {
              lk = memoized(2, e0);
              if (lk == 0)
              {
                var b0B = b0; var e0B = e0; var l1B = l1;
                var b1B = b1; var e1B = e1; var l2B = l2;
                var b2B = b2; var e2B = e2;
                try
                {
                  try_DefaultNamespaceDecl();
                  memoize(2, e0B, -1);
                  lk = -5;
                }
                catch (p1B)
                {
                  lk = -2;
                  b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                  b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                  b2 = b2B; e2 = e2B; end = e2B; }}
                  memoize(2, e0B, -2);
                }
              }
            }
            switch (lk)
            {
            case -1:
              try_DefaultNamespaceDecl();
              break;
            case 42090:             // 'declare' 'namespace'
              try_NamespaceDecl();
              break;
            case 140:               // 'import'
              try_Import();
              break;
            case -5:
              break;
            default:
              try_Setter();
            }
            lookahead1W(31);        // S^WS | '(:' | ';'
            try_Separator();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(1, e0, lk);
        }
      }
      if (lk != -1
       && lk != 22122               // 'declare' 'base-uri'
       && lk != 22634               // 'declare' 'boundary-space'
       && lk != 25194               // 'declare' 'construction'
       && lk != 26218               // 'declare' 'copy-namespaces'
       && lk != 26730               // 'declare' 'decimal-format'
       && lk != 45674               // 'declare' 'ordering'
       && lk != 49514               // 'declare' 'revalidation'
       && lk != 50060)              // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(150);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering' |
                                    // 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 27498)              // 'declare' 'default'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(2, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 42090:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 140:                     // 'import'
        whitespace();
        parse_Import();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(187);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(206);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'context' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'xquery' | '{' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk == 8298                // 'declare' '%'
       || lk == 33898               // 'declare' 'function'
       || lk == 56682)              // 'declare' 'variable'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 106:               // 'declare'
              lookahead2W(145);     // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
              break;
            default:
              lk = l1;
            }
            switch (lk)
            {
            case 25450:             // 'declare' 'context'
              try_ContextItemDecl();
              break;
            case 44650:             // 'declare' 'option'
              try_OptionDecl();
              break;
            default:
              try_AnnotatedDecl();
            }
            lookahead1W(31);        // S^WS | '(:' | ';'
            try_Separator();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 25450               // 'declare' 'context'
       && lk != 44650               // 'declare' 'option'
       && lk != 55914)              // 'declare' 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(145);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 25450:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 44650:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function try_Prolog()
  {
    for (;;)
    {
      lookahead1W(187);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(213);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'base-uri' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'construction' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'revalidation' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                    // 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||'
        break;
      case 140:                     // 'import'
        lookahead2W(197);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk == 27498               // 'declare' 'default'
       || lk == 41868               // 'import' 'module'
       || lk == 42090)              // 'declare' 'namespace'
      {
        lk = memoized(1, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 106:               // 'declare'
              lookahead2W(150);     // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering' |
                                    // 'revalidation'
              break;
            default:
              lk = l1;
            }
            if (lk == 27498)        // 'declare' 'default'
            {
              lk = memoized(2, e0);
              if (lk == 0)
              {
                var b0B = b0; var e0B = e0; var l1B = l1;
                var b1B = b1; var e1B = e1; var l2B = l2;
                var b2B = b2; var e2B = e2;
                try
                {
                  try_DefaultNamespaceDecl();
                  memoize(2, e0B, -1);
                  lk = -5;
                }
                catch (p1B)
                {
                  lk = -2;
                  b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                  b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                  b2 = b2B; e2 = e2B; end = e2B; }}
                  memoize(2, e0B, -2);
                }
              }
            }
            switch (lk)
            {
            case -1:
              try_DefaultNamespaceDecl();
              break;
            case 42090:             // 'declare' 'namespace'
              try_NamespaceDecl();
              break;
            case 140:               // 'import'
              try_Import();
              break;
            case -5:
              break;
            default:
              try_Setter();
            }
            lookahead1W(31);        // S^WS | '(:' | ';'
            try_Separator();
            memoize(1, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(1, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 22122               // 'declare' 'base-uri'
       && lk != 22634               // 'declare' 'boundary-space'
       && lk != 25194               // 'declare' 'construction'
       && lk != 26218               // 'declare' 'copy-namespaces'
       && lk != 26730               // 'declare' 'decimal-format'
       && lk != 45674               // 'declare' 'ordering'
       && lk != 49514               // 'declare' 'revalidation'
       && lk != 50060)              // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(150);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'namespace' | 'ordering' |
                                    // 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 27498)              // 'declare' 'default'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            try_DefaultNamespaceDecl();
            memoize(2, e0B, -1);
            lk = -5;
          }
          catch (p1B)
          {
            lk = -2;
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(2, e0B, -2);
          }
        }
      }
      switch (lk)
      {
      case -1:
        try_DefaultNamespaceDecl();
        break;
      case 42090:                   // 'declare' 'namespace'
        try_NamespaceDecl();
        break;
      case 140:                     // 'import'
        try_Import();
        break;
      case -5:
        break;
      default:
        try_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      try_Separator();
    }
    for (;;)
    {
      lookahead1W(187);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(206);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'context' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'xquery' | '{' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk == 8298                // 'declare' '%'
       || lk == 33898               // 'declare' 'function'
       || lk == 56682)              // 'declare' 'variable'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 106:               // 'declare'
              lookahead2W(145);     // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
              break;
            default:
              lk = l1;
            }
            switch (lk)
            {
            case 25450:             // 'declare' 'context'
              try_ContextItemDecl();
              break;
            case 44650:             // 'declare' 'option'
              try_OptionDecl();
              break;
            default:
              try_AnnotatedDecl();
            }
            lookahead1W(31);        // S^WS | '(:' | ';'
            try_Separator();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 25450               // 'declare' 'context'
       && lk != 44650               // 'declare' 'option'
       && lk != 55914)              // 'declare' 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 106:                     // 'declare'
        lookahead2W(145);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 25450:                   // 'declare' 'context'
        try_ContextItemDecl();
        break;
      case 44650:                   // 'declare' 'option'
        try_OptionDecl();
        break;
      default:
        try_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      try_Separator();
    }
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function try_Separator()
  {
    consumeT(52);                   // ';'
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 106:                       // 'declare'
      lookahead2W(146);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 27498)                // 'declare' 'default'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case 22634:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 22122:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 25194:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 45674:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 49514:                     // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 26218:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function try_Setter()
  {
    switch (l1)
    {
    case 106:                       // 'declare'
      lookahead2W(146);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 27498)                // 'declare' 'default'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          memoize(4, e0A, -2);
          lk = -10;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            memoize(4, e0A, -6);
            lk = -10;
          }
          catch (p6A)
          {
            lk = -9;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -9);
          }
        }
      }
    }
    switch (lk)
    {
    case 22634:                     // 'declare' 'boundary-space'
      try_BoundarySpaceDecl();
      break;
    case -2:
      try_DefaultCollationDecl();
      break;
    case 22122:                     // 'declare' 'base-uri'
      try_BaseURIDecl();
      break;
    case 25194:                     // 'declare' 'construction'
      try_ConstructionDecl();
      break;
    case 45674:                     // 'declare' 'ordering'
      try_OrderingModeDecl();
      break;
    case -6:
      try_EmptyOrderDecl();
      break;
    case 49514:                     // 'declare' 'revalidation'
      try_RevalidationDecl();
      break;
    case 26218:                     // 'declare' 'copy-namespaces'
      try_CopyNamespacesDecl();
      break;
    case -10:
      break;
    default:
      try_DecimalFormatDecl();
    }
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(193);                   // 'revalidation'
    lookahead1W(131);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 204:                       // 'strict'
      consume(204);                 // 'strict'
      break;
    case 153:                       // 'lax'
      consume(153);                 // 'lax'
      break;
    default:
      consume(199);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function try_RevalidationDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consumeT(193);                  // 'revalidation'
    lookahead1W(131);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 204:                       // 'strict'
      consumeT(204);                // 'strict'
      break;
    case 153:                       // 'lax'
      consumeT(153);                // 'lax'
      break;
    default:
      consumeT(199);                // 'skip'
    }
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'boundary-space'
    consume(88);                    // 'boundary-space'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 186:                       // 'preserve'
      consume(186);                 // 'preserve'
      break;
    default:
      consume(205);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function try_BoundarySpaceDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'boundary-space'
    consumeT(88);                   // 'boundary-space'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 186:                       // 'preserve'
      consumeT(186);                // 'preserve'
      break;
    default:
      consumeT(205);                // 'strip'
    }
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(107);                   // 'default'
    lookahead1W(39);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consumeT(107);                  // 'default'
    lookahead1W(39);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(34);                // S^WS | '(:' | 'base-uri'
    consume(86);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function try_BaseURIDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(34);                // S^WS | '(:' | 'base-uri'
    consumeT(86);                   // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(40);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 205:                       // 'strip'
      consume(205);                 // 'strip'
      break;
    default:
      consume(186);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function try_ConstructionDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(40);                // S^WS | '(:' | 'construction'
    consumeT(98);                   // 'construction'
    lookahead1W(116);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 205:                       // 'strip'
      consumeT(205);                // 'strip'
      break;
    default:
      consumeT(186);                // 'preserve'
    }
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'ordering'
    consume(178);                   // 'ordering'
    lookahead1W(115);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 177:                       // 'ordered'
      consume(177);                 // 'ordered'
      break;
    default:
      consume(217);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function try_OrderingModeDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'ordering'
    consumeT(178);                  // 'ordering'
    lookahead1W(115);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 177:                       // 'ordered'
      consumeT(177);                // 'ordered'
      break;
    default:
      consumeT(217);                // 'unordered'
    }
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(107);                   // 'default'
    lookahead1W(59);                // S^WS | '(:' | 'order'
    consume(176);                   // 'order'
    lookahead1W(47);                // S^WS | '(:' | 'empty'
    consume(118);                   // 'empty'
    lookahead1W(107);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 134:                       // 'greatest'
      consume(134);                 // 'greatest'
      break;
    default:
      consume(155);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consumeT(107);                  // 'default'
    lookahead1W(59);                // S^WS | '(:' | 'order'
    consumeT(176);                  // 'order'
    lookahead1W(47);                // S^WS | '(:' | 'empty'
    consumeT(118);                  // 'empty'
    lookahead1W(107);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 134:                       // 'greatest'
      consumeT(134);                // 'greatest'
      break;
    default:
      consumeT(155);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(42);                // S^WS | '(:' | 'copy-namespaces'
    consume(102);                   // 'copy-namespaces'
    lookahead1W(112);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(108);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function try_CopyNamespacesDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(42);                // S^WS | '(:' | 'copy-namespaces'
    consumeT(102);                  // 'copy-namespaces'
    lookahead1W(112);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    try_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(108);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    try_InheritMode();
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 186:                       // 'preserve'
      consume(186);                 // 'preserve'
      break;
    default:
      consume(169);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function try_PreserveMode()
  {
    switch (l1)
    {
    case 186:                       // 'preserve'
      consumeT(186);                // 'preserve'
      break;
    default:
      consumeT(169);                // 'no-preserve'
    }
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 143:                       // 'inherit'
      consume(143);                 // 'inherit'
      break;
    default:
      consume(168);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function try_InheritMode()
  {
    switch (l1)
    {
    case 143:                       // 'inherit'
      consumeT(143);                // 'inherit'
      break;
    default:
      consumeT(168);                // 'no-inherit'
    }
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(101);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 104:                       // 'decimal-format'
      consume(104);                 // 'decimal-format'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(107);                 // 'default'
      lookahead1W(43);              // S^WS | '(:' | 'decimal-format'
      consume(104);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(155);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function try_DecimalFormatDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(101);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 104:                       // 'decimal-format'
      consumeT(104);                // 'decimal-format'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_EQName();
      break;
    default:
      consumeT(107);                // 'default'
      lookahead1W(43);              // S^WS | '(:' | 'decimal-format'
      consumeT(104);                // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(155);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      try_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consumeT(60);                 // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 105:                       // 'decimal-separator'
      consume(105);                 // 'decimal-separator'
      break;
    case 136:                       // 'grouping-separator'
      consume(136);                 // 'grouping-separator'
      break;
    case 142:                       // 'infinity'
      consume(142);                 // 'infinity'
      break;
    case 160:                       // 'minus-sign'
      consume(160);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 182:                       // 'percent'
      consume(182);                 // 'percent'
      break;
    case 181:                       // 'per-mille'
      consume(181);                 // 'per-mille'
      break;
    case 229:                       // 'zero-digit'
      consume(229);                 // 'zero-digit'
      break;
    case 112:                       // 'digit'
      consume(112);                 // 'digit'
      break;
    case 180:                       // 'pattern-separator'
      consume(180);                 // 'pattern-separator'
      break;
    default:
      consume(126);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function try_DFPropertyName()
  {
    switch (l1)
    {
    case 105:                       // 'decimal-separator'
      consumeT(105);                // 'decimal-separator'
      break;
    case 136:                       // 'grouping-separator'
      consumeT(136);                // 'grouping-separator'
      break;
    case 142:                       // 'infinity'
      consumeT(142);                // 'infinity'
      break;
    case 160:                       // 'minus-sign'
      consumeT(160);                // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consumeT(68);                 // 'NaN'
      break;
    case 182:                       // 'percent'
      consumeT(182);                // 'percent'
      break;
    case 181:                       // 'per-mille'
      consumeT(181);                // 'per-mille'
      break;
    case 229:                       // 'zero-digit'
      consumeT(229);                // 'zero-digit'
      break;
    case 112:                       // 'digit'
      consumeT(112);                // 'digit'
      break;
    case 180:                       // 'pattern-separator'
      consumeT(180);                // 'pattern-separator'
      break;
    default:
      consumeT(126);                // 'exponent-separator'
    }
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 140:                       // 'import'
      lookahead2W(110);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 50060:                     // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function try_Import()
  {
    switch (l1)
    {
    case 140:                       // 'import'
      lookahead2W(110);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 50060:                     // 'import' 'schema'
      try_SchemaImport();
      break;
    default:
      try_ModuleImport();
    }
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(140);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(195);                   // 'schema'
    lookahead1W(120);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consume(84);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(85);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function try_SchemaImport()
  {
    consumeT(140);                  // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consumeT(195);                  // 'schema'
    lookahead1W(120);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      try_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consumeT(84);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      for (;;)
      {
        lookahead1W(85);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
    }
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 164:                       // 'namespace'
      consume(164);                 // 'namespace'
      lookahead1W(157);             // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(107);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'element'
      consume(116);                 // 'element'
      lookahead1W(55);              // S^WS | '(:' | 'namespace'
      consume(164);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function try_SchemaPrefix()
  {
    switch (l1)
    {
    case 164:                       // 'namespace'
      consumeT(164);                // 'namespace'
      lookahead1W(157);             // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      try_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consumeT(60);                 // '='
      break;
    default:
      consumeT(107);                // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'element'
      consumeT(116);                // 'element'
      lookahead1W(55);              // S^WS | '(:' | 'namespace'
      consumeT(164);                // 'namespace'
    }
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(140);                   // 'import'
    lookahead1W(54);                // S^WS | '(:' | 'module'
    consume(163);                   // 'module'
    lookahead1W(75);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 164)                  // 'namespace'
    {
      consume(164);                 // 'namespace'
      lookahead1W(157);             // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consume(84);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(85);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function try_ModuleImport()
  {
    consumeT(140);                  // 'import'
    lookahead1W(54);                // S^WS | '(:' | 'module'
    consumeT(163);                  // 'module'
    lookahead1W(75);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 164)                  // 'namespace'
    {
      consumeT(164);                // 'namespace'
      lookahead1W(157);             // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      try_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consumeT(60);                 // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(94);                // S^WS | '(:' | ';' | 'at'
    if (l1 == 84)                   // 'at'
    {
      consumeT(84);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      for (;;)
      {
        lookahead1W(85);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
    }
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(164);                   // 'namespace'
    lookahead1W(157);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function try_NamespaceDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consumeT(164);                  // 'namespace'
    lookahead1W(157);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    try_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consumeT(60);                   // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consume(107);                   // 'default'
    lookahead1W(102);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 116:                       // 'element'
      consume(116);                 // 'element'
      break;
    default:
      consume(132);                 // 'function'
    }
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consume(164);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'default'
    consumeT(107);                  // 'default'
    lookahead1W(102);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 116:                       // 'element'
      consumeT(116);                // 'element'
      break;
    default:
      consumeT(132);                // 'function'
    }
    lookahead1W(55);                // S^WS | '(:' | 'namespace'
    consumeT(164);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(106);                   // 'declare'
    for (;;)
    {
      lookahead1W(134);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 218)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 218:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 221:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function try_AnnotatedDecl()
  {
    consumeT(106);                  // 'declare'
    for (;;)
    {
      lookahead1W(134);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 218)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 218:                     // 'updating'
        try_CompatibilityAnnotation();
        break;
      default:
        try_Annotation();
      }
    }
    switch (l1)
    {
    case 221:                       // 'variable'
      try_VarDecl();
      break;
    default:
      try_FunctionDecl();
    }
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(218);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function try_CompatibilityAnnotation()
  {
    consumeT(218);                  // 'updating'
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(141);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(133);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(133);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_EQName();
    lookahead1W(141);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(133);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(133);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(221);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(127);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(127);                 // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function try_VarDecl()
  {
    consumeT(221);                  // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(127);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consumeT(51);                 // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_VarValue();
      break;
    default:
      consumeT(127);                // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consumeT(51);               // ':='
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_VarDefaultValue();
      }
    }
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function try_VarValue()
  {
    try_ExprSingle();
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function try_VarDefaultValue()
  {
    try_ExprSingle();
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'context'
    consume(99);                    // 'context'
    lookahead1W(51);                // S^WS | '(:' | 'item'
    consume(150);                   // 'item'
    lookahead1W(127);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(127);                 // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function try_ContextItemDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'context'
    consumeT(99);                   // 'context'
    lookahead1W(51);                // S^WS | '(:' | 'item'
    consumeT(150);                  // 'item'
    lookahead1W(127);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 82)                   // 'as'
    {
      consumeT(82);                 // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_ItemType();
    }
    lookahead1W(93);                // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consumeT(51);                 // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_VarValue();
      break;
    default:
      consumeT(127);                // 'external'
      lookahead1W(91);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consumeT(51);               // ':='
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_VarDefaultValue();
      }
    }
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(132);                   // 'function'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(78);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(129);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(105);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(127);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function try_FunctionDecl()
  {
    consumeT(132);                  // 'function'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(78);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(129);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 82)                   // 'as'
    {
      consumeT(82);                 // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(105);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      try_FunctionBody();
      break;
    default:
      consumeT(127);                // 'external'
    }
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(83);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(83);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(124);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_EQName();
    lookahead1W(124);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(230);                   // '{'
    lookahead1W(184);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 234)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(234);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(230);                  // '{'
    lookahead1W(184);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 234)                  // '}'
    {
      try_Expr();
    }
    consumeT(234);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(106);                   // 'declare'
    lookahead1W(58);                // S^WS | '(:' | 'option'
    consume(174);                   // 'option'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function try_OptionDecl()
  {
    consumeT(106);                  // 'declare'
    lookahead1W(58);                // S^WS | '(:' | 'option'
    consumeT(174);                  // 'option'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  function parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(188);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(182);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 35:                      // '(#'
        lookahead2(166);            // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 46:                      // '//'
        lookahead2W(178);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      case 53:                      // '<'
        lookahead2(164);            // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 54:                      // '<!--'
        lookahead2(3);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(0);              // PITarget
        break;
      case 65:                      // '?'
        lookahead2W(161);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
        break;
      case 67:                      // '@'
        lookahead2W(169);           // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      case 69:                      // '['
        lookahead2W(183);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 73:                      // '``['
        lookahead2(1);              // StringConstructorChars
        break;
      case 101:                     // 'copy'
        lookahead2W(23);            // S^WS | '$' | '(:'
        break;
      case 131:                     // 'for'
        lookahead2W(207);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'tumbling' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
        break;
      case 148:                     // 'invoke'
        lookahead2W(68);            // S^WS | '(:' | 'updating'
        break;
      case 189:                     // 'rename'
        lookahead2W(109);           // S^WS | '(:' | 'json' | 'node'
        break;
      case 190:                     // 'replace'
        lookahead2W(114);           // S^WS | '(:' | 'node' | 'value'
        break;
      case 219:                     // 'validate'
        lookahead2W(208);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'lax' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(180);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 108:                     // 'delete'
      case 144:                     // 'insert'
        lookahead2W(130);           // S^WS | '(:' | 'json' | 'node' | 'nodes'
        break;
      case 164:                     // 'namespace'
      case 188:                     // 'processing-instruction'
        lookahead2W(200);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!' |
                                    // '!=' | '#' | '$' | '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '?' | '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                    // 'following' | 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 1:                       // IntegerLiteral
      case 2:                       // DecimalLiteral
      case 3:                       // DoubleLiteral
      case 4:                       // StringLiteral
      case 21:                      // Wildcard
      case 43:                      // '.'
      case 44:                      // '..'
      case 45:                      // '/'
        lookahead2W(195);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 77:                      // 'ancestor'
      case 78:                      // 'ancestor-or-self'
      case 85:                      // 'attribute'
      case 95:                      // 'child'
      case 109:                     // 'descendant'
      case 110:                     // 'descendant-or-self'
      case 129:                     // 'following'
      case 130:                     // 'following-sibling'
      case 179:                     // 'parent'
      case 184:                     // 'preceding'
      case 185:                     // 'preceding-sibling'
      case 198:                     // 'self'
        lookahead2W(201);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 5:                       // URIQualifiedName
      case 15:                      // QName^Token
      case 79:                      // 'and'
      case 81:                      // 'array'
      case 83:                      // 'ascending'
      case 91:                      // 'case'
      case 92:                      // 'cast'
      case 93:                      // 'castable'
      case 96:                      // 'collation'
      case 97:                      // 'comment'
      case 103:                     // 'count'
      case 106:                     // 'declare'
      case 107:                     // 'default'
      case 111:                     // 'descending'
      case 113:                     // 'div'
      case 114:                     // 'document'
      case 115:                     // 'document-node'
      case 116:                     // 'element'
      case 117:                     // 'else'
      case 118:                     // 'empty'
      case 119:                     // 'empty-sequence'
      case 121:                     // 'end'
      case 122:                     // 'eq'
      case 123:                     // 'every'
      case 124:                     // 'except'
      case 132:                     // 'function'
      case 133:                     // 'ge'
      case 135:                     // 'group'
      case 137:                     // 'gt'
      case 138:                     // 'idiv'
      case 139:                     // 'if'
      case 140:                     // 'import'
      case 145:                     // 'instance'
      case 146:                     // 'intersect'
      case 149:                     // 'is'
      case 150:                     // 'item'
      case 154:                     // 'le'
      case 156:                     // 'let'
      case 158:                     // 'lt'
      case 159:                     // 'map'
      case 161:                     // 'mod'
      case 163:                     // 'module'
      case 165:                     // 'namespace-node'
      case 166:                     // 'ne'
      case 170:                     // 'node'
      case 173:                     // 'only'
      case 175:                     // 'or'
      case 176:                     // 'order'
      case 177:                     // 'ordered'
      case 191:                     // 'return'
      case 194:                     // 'satisfies'
      case 196:                     // 'schema-attribute'
      case 197:                     // 'schema-element'
      case 201:                     // 'some'
      case 202:                     // 'stable'
      case 203:                     // 'start'
      case 206:                     // 'switch'
      case 207:                     // 'text'
      case 209:                     // 'to'
      case 211:                     // 'treat'
      case 212:                     // 'try'
      case 215:                     // 'typeswitch'
      case 216:                     // 'union'
      case 217:                     // 'unordered'
      case 224:                     // 'where'
      case 228:                     // 'xquery'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 290                 // '(' IntegerLiteral
       || lk == 295                 // '+' IntegerLiteral
       || lk == 297                 // '-' IntegerLiteral
       || lk == 301                 // '/' IntegerLiteral
       || lk == 302                 // '//' IntegerLiteral
       || lk == 321                 // '?' IntegerLiteral
       || lk == 325                 // '[' IntegerLiteral
       || lk == 546                 // '(' DecimalLiteral
       || lk == 551                 // '+' DecimalLiteral
       || lk == 553                 // '-' DecimalLiteral
       || lk == 557                 // '/' DecimalLiteral
       || lk == 558                 // '//' DecimalLiteral
       || lk == 581                 // '[' DecimalLiteral
       || lk == 802                 // '(' DoubleLiteral
       || lk == 807                 // '+' DoubleLiteral
       || lk == 809                 // '-' DoubleLiteral
       || lk == 813                 // '/' DoubleLiteral
       || lk == 814                 // '//' DoubleLiteral
       || lk == 837                 // '[' DoubleLiteral
       || lk == 1058                // '(' StringLiteral
       || lk == 1063                // '+' StringLiteral
       || lk == 1065                // '-' StringLiteral
       || lk == 1069                // '/' StringLiteral
       || lk == 1070                // '//' StringLiteral
       || lk == 1093                // '[' StringLiteral
       || lk == 1311                // '$' URIQualifiedName
       || lk == 1312                // '%' URIQualifiedName
       || lk == 1314                // '(' URIQualifiedName
       || lk == 1315                // '(#' URIQualifiedName
       || lk == 1319                // '+' URIQualifiedName
       || lk == 1321                // '-' URIQualifiedName
       || lk == 1325                // '/' URIQualifiedName
       || lk == 1326                // '//' URIQualifiedName
       || lk == 1347                // '@' URIQualifiedName
       || lk == 1349                // '[' URIQualifiedName
       || lk == 1365                // 'attribute' URIQualifiedName
       || lk == 1396                // 'element' URIQualifiedName
       || lk == 3131                // '<?' PITarget
       || lk == 3649                // '?' NCName^Token
       || lk == 3748                // 'namespace' NCName^Token
       || lk == 3772                // 'processing-instruction' NCName^Token
       || lk == 3871                // '$' QName^Token
       || lk == 3872                // '%' QName^Token
       || lk == 3874                // '(' QName^Token
       || lk == 3875                // '(#' QName^Token
       || lk == 3879                // '+' QName^Token
       || lk == 3881                // '-' QName^Token
       || lk == 3885                // '/' QName^Token
       || lk == 3886                // '//' QName^Token
       || lk == 3893                // '<' QName^Token
       || lk == 3907                // '@' QName^Token
       || lk == 3909                // '[' QName^Token
       || lk == 3925                // 'attribute' QName^Token
       || lk == 3956                // 'element' QName^Token
       || lk == 4169                // '``[' StringConstructorChars
       || lk == 4387                // '(#' S
       || lk == 5410                // '(' Wildcard
       || lk == 5415                // '+' Wildcard
       || lk == 5417                // '-' Wildcard
       || lk == 5421                // '/' Wildcard
       || lk == 5422                // '//' Wildcard
       || lk == 5443                // '@' Wildcard
       || lk == 5445                // '[' Wildcard
       || lk == 5686                // '<!--' DirCommentContents
       || lk == 6657                // IntegerLiteral '!'
       || lk == 6658                // DecimalLiteral '!'
       || lk == 6659                // DoubleLiteral '!'
       || lk == 6660                // StringLiteral '!'
       || lk == 6661                // URIQualifiedName '!'
       || lk == 6671                // QName^Token '!'
       || lk == 6677                // Wildcard '!'
       || lk == 6699                // '.' '!'
       || lk == 6700                // '..' '!'
       || lk == 6701                // '/' '!'
       || lk == 6733                // 'ancestor' '!'
       || lk == 6734                // 'ancestor-or-self' '!'
       || lk == 6735                // 'and' '!'
       || lk == 6737                // 'array' '!'
       || lk == 6739                // 'ascending' '!'
       || lk == 6741                // 'attribute' '!'
       || lk == 6747                // 'case' '!'
       || lk == 6748                // 'cast' '!'
       || lk == 6749                // 'castable' '!'
       || lk == 6751                // 'child' '!'
       || lk == 6752                // 'collation' '!'
       || lk == 6753                // 'comment' '!'
       || lk == 6759                // 'count' '!'
       || lk == 6762                // 'declare' '!'
       || lk == 6763                // 'default' '!'
       || lk == 6765                // 'descendant' '!'
       || lk == 6766                // 'descendant-or-self' '!'
       || lk == 6767                // 'descending' '!'
       || lk == 6769                // 'div' '!'
       || lk == 6770                // 'document' '!'
       || lk == 6771                // 'document-node' '!'
       || lk == 6772                // 'element' '!'
       || lk == 6773                // 'else' '!'
       || lk == 6774                // 'empty' '!'
       || lk == 6775                // 'empty-sequence' '!'
       || lk == 6777                // 'end' '!'
       || lk == 6778                // 'eq' '!'
       || lk == 6779                // 'every' '!'
       || lk == 6780                // 'except' '!'
       || lk == 6785                // 'following' '!'
       || lk == 6786                // 'following-sibling' '!'
       || lk == 6787                // 'for' '!'
       || lk == 6788                // 'function' '!'
       || lk == 6789                // 'ge' '!'
       || lk == 6791                // 'group' '!'
       || lk == 6793                // 'gt' '!'
       || lk == 6794                // 'idiv' '!'
       || lk == 6795                // 'if' '!'
       || lk == 6796                // 'import' '!'
       || lk == 6801                // 'instance' '!'
       || lk == 6802                // 'intersect' '!'
       || lk == 6805                // 'is' '!'
       || lk == 6806                // 'item' '!'
       || lk == 6810                // 'le' '!'
       || lk == 6812                // 'let' '!'
       || lk == 6814                // 'lt' '!'
       || lk == 6815                // 'map' '!'
       || lk == 6817                // 'mod' '!'
       || lk == 6819                // 'module' '!'
       || lk == 6820                // 'namespace' '!'
       || lk == 6821                // 'namespace-node' '!'
       || lk == 6822                // 'ne' '!'
       || lk == 6826                // 'node' '!'
       || lk == 6829                // 'only' '!'
       || lk == 6831                // 'or' '!'
       || lk == 6832                // 'order' '!'
       || lk == 6833                // 'ordered' '!'
       || lk == 6835                // 'parent' '!'
       || lk == 6840                // 'preceding' '!'
       || lk == 6841                // 'preceding-sibling' '!'
       || lk == 6844                // 'processing-instruction' '!'
       || lk == 6847                // 'return' '!'
       || lk == 6850                // 'satisfies' '!'
       || lk == 6852                // 'schema-attribute' '!'
       || lk == 6853                // 'schema-element' '!'
       || lk == 6854                // 'self' '!'
       || lk == 6857                // 'some' '!'
       || lk == 6858                // 'stable' '!'
       || lk == 6859                // 'start' '!'
       || lk == 6862                // 'switch' '!'
       || lk == 6863                // 'text' '!'
       || lk == 6865                // 'to' '!'
       || lk == 6867                // 'treat' '!'
       || lk == 6868                // 'try' '!'
       || lk == 6871                // 'typeswitch' '!'
       || lk == 6872                // 'union' '!'
       || lk == 6873                // 'unordered' '!'
       || lk == 6875                // 'validate' '!'
       || lk == 6880                // 'where' '!'
       || lk == 6884                // 'xquery' '!'
       || lk == 6913                // IntegerLiteral '!='
       || lk == 6914                // DecimalLiteral '!='
       || lk == 6915                // DoubleLiteral '!='
       || lk == 6916                // StringLiteral '!='
       || lk == 6917                // URIQualifiedName '!='
       || lk == 6927                // QName^Token '!='
       || lk == 6933                // Wildcard '!='
       || lk == 6955                // '.' '!='
       || lk == 6956                // '..' '!='
       || lk == 6957                // '/' '!='
       || lk == 6989                // 'ancestor' '!='
       || lk == 6990                // 'ancestor-or-self' '!='
       || lk == 6991                // 'and' '!='
       || lk == 6993                // 'array' '!='
       || lk == 6995                // 'ascending' '!='
       || lk == 6997                // 'attribute' '!='
       || lk == 7003                // 'case' '!='
       || lk == 7004                // 'cast' '!='
       || lk == 7005                // 'castable' '!='
       || lk == 7007                // 'child' '!='
       || lk == 7008                // 'collation' '!='
       || lk == 7009                // 'comment' '!='
       || lk == 7015                // 'count' '!='
       || lk == 7018                // 'declare' '!='
       || lk == 7019                // 'default' '!='
       || lk == 7021                // 'descendant' '!='
       || lk == 7022                // 'descendant-or-self' '!='
       || lk == 7023                // 'descending' '!='
       || lk == 7025                // 'div' '!='
       || lk == 7026                // 'document' '!='
       || lk == 7027                // 'document-node' '!='
       || lk == 7028                // 'element' '!='
       || lk == 7029                // 'else' '!='
       || lk == 7030                // 'empty' '!='
       || lk == 7031                // 'empty-sequence' '!='
       || lk == 7033                // 'end' '!='
       || lk == 7034                // 'eq' '!='
       || lk == 7035                // 'every' '!='
       || lk == 7036                // 'except' '!='
       || lk == 7041                // 'following' '!='
       || lk == 7042                // 'following-sibling' '!='
       || lk == 7043                // 'for' '!='
       || lk == 7044                // 'function' '!='
       || lk == 7045                // 'ge' '!='
       || lk == 7047                // 'group' '!='
       || lk == 7049                // 'gt' '!='
       || lk == 7050                // 'idiv' '!='
       || lk == 7051                // 'if' '!='
       || lk == 7052                // 'import' '!='
       || lk == 7057                // 'instance' '!='
       || lk == 7058                // 'intersect' '!='
       || lk == 7061                // 'is' '!='
       || lk == 7062                // 'item' '!='
       || lk == 7066                // 'le' '!='
       || lk == 7068                // 'let' '!='
       || lk == 7070                // 'lt' '!='
       || lk == 7071                // 'map' '!='
       || lk == 7073                // 'mod' '!='
       || lk == 7075                // 'module' '!='
       || lk == 7076                // 'namespace' '!='
       || lk == 7077                // 'namespace-node' '!='
       || lk == 7078                // 'ne' '!='
       || lk == 7082                // 'node' '!='
       || lk == 7085                // 'only' '!='
       || lk == 7087                // 'or' '!='
       || lk == 7088                // 'order' '!='
       || lk == 7089                // 'ordered' '!='
       || lk == 7091                // 'parent' '!='
       || lk == 7096                // 'preceding' '!='
       || lk == 7097                // 'preceding-sibling' '!='
       || lk == 7100                // 'processing-instruction' '!='
       || lk == 7103                // 'return' '!='
       || lk == 7106                // 'satisfies' '!='
       || lk == 7108                // 'schema-attribute' '!='
       || lk == 7109                // 'schema-element' '!='
       || lk == 7110                // 'self' '!='
       || lk == 7113                // 'some' '!='
       || lk == 7114                // 'stable' '!='
       || lk == 7115                // 'start' '!='
       || lk == 7118                // 'switch' '!='
       || lk == 7119                // 'text' '!='
       || lk == 7121                // 'to' '!='
       || lk == 7123                // 'treat' '!='
       || lk == 7124                // 'try' '!='
       || lk == 7127                // 'typeswitch' '!='
       || lk == 7128                // 'union' '!='
       || lk == 7129                // 'unordered' '!='
       || lk == 7131                // 'validate' '!='
       || lk == 7136                // 'where' '!='
       || lk == 7140                // 'xquery' '!='
       || lk == 7429                // URIQualifiedName '#'
       || lk == 7439                // QName^Token '#'
       || lk == 7501                // 'ancestor' '#'
       || lk == 7502                // 'ancestor-or-self' '#'
       || lk == 7503                // 'and' '#'
       || lk == 7505                // 'array' '#'
       || lk == 7507                // 'ascending' '#'
       || lk == 7509                // 'attribute' '#'
       || lk == 7515                // 'case' '#'
       || lk == 7516                // 'cast' '#'
       || lk == 7517                // 'castable' '#'
       || lk == 7519                // 'child' '#'
       || lk == 7520                // 'collation' '#'
       || lk == 7521                // 'comment' '#'
       || lk == 7527                // 'count' '#'
       || lk == 7530                // 'declare' '#'
       || lk == 7531                // 'default' '#'
       || lk == 7533                // 'descendant' '#'
       || lk == 7534                // 'descendant-or-self' '#'
       || lk == 7535                // 'descending' '#'
       || lk == 7537                // 'div' '#'
       || lk == 7538                // 'document' '#'
       || lk == 7539                // 'document-node' '#'
       || lk == 7540                // 'element' '#'
       || lk == 7541                // 'else' '#'
       || lk == 7542                // 'empty' '#'
       || lk == 7543                // 'empty-sequence' '#'
       || lk == 7545                // 'end' '#'
       || lk == 7546                // 'eq' '#'
       || lk == 7547                // 'every' '#'
       || lk == 7548                // 'except' '#'
       || lk == 7553                // 'following' '#'
       || lk == 7554                // 'following-sibling' '#'
       || lk == 7555                // 'for' '#'
       || lk == 7556                // 'function' '#'
       || lk == 7557                // 'ge' '#'
       || lk == 7559                // 'group' '#'
       || lk == 7561                // 'gt' '#'
       || lk == 7562                // 'idiv' '#'
       || lk == 7563                // 'if' '#'
       || lk == 7564                // 'import' '#'
       || lk == 7569                // 'instance' '#'
       || lk == 7570                // 'intersect' '#'
       || lk == 7573                // 'is' '#'
       || lk == 7574                // 'item' '#'
       || lk == 7578                // 'le' '#'
       || lk == 7580                // 'let' '#'
       || lk == 7582                // 'lt' '#'
       || lk == 7583                // 'map' '#'
       || lk == 7585                // 'mod' '#'
       || lk == 7587                // 'module' '#'
       || lk == 7588                // 'namespace' '#'
       || lk == 7589                // 'namespace-node' '#'
       || lk == 7590                // 'ne' '#'
       || lk == 7594                // 'node' '#'
       || lk == 7597                // 'only' '#'
       || lk == 7599                // 'or' '#'
       || lk == 7600                // 'order' '#'
       || lk == 7601                // 'ordered' '#'
       || lk == 7603                // 'parent' '#'
       || lk == 7608                // 'preceding' '#'
       || lk == 7609                // 'preceding-sibling' '#'
       || lk == 7612                // 'processing-instruction' '#'
       || lk == 7615                // 'return' '#'
       || lk == 7618                // 'satisfies' '#'
       || lk == 7620                // 'schema-attribute' '#'
       || lk == 7621                // 'schema-element' '#'
       || lk == 7622                // 'self' '#'
       || lk == 7625                // 'some' '#'
       || lk == 7626                // 'stable' '#'
       || lk == 7627                // 'start' '#'
       || lk == 7630                // 'switch' '#'
       || lk == 7631                // 'text' '#'
       || lk == 7633                // 'to' '#'
       || lk == 7635                // 'treat' '#'
       || lk == 7636                // 'try' '#'
       || lk == 7639                // 'typeswitch' '#'
       || lk == 7640                // 'union' '#'
       || lk == 7641                // 'unordered' '#'
       || lk == 7643                // 'validate' '#'
       || lk == 7648                // 'where' '#'
       || lk == 7652                // 'xquery' '#'
       || lk == 7970                // '(' '$'
       || lk == 7975                // '+' '$'
       || lk == 7977                // '-' '$'
       || lk == 7981                // '/' '$'
       || lk == 7982                // '//' '$'
       || lk == 8005                // '[' '$'
       || lk == 8037                // 'copy' '$'
       || lk == 8059                // 'every' '$'
       || lk == 8067                // 'for' '$'
       || lk == 8092                // 'let' '$'
       || lk == 8137                // 'some' '$'
       || lk == 8226                // '(' '%'
       || lk == 8231                // '+' '%'
       || lk == 8233                // '-' '%'
       || lk == 8237                // '/' '%'
       || lk == 8238                // '//' '%'
       || lk == 8261                // '[' '%'
       || lk == 8705                // IntegerLiteral '('
       || lk == 8706                // DecimalLiteral '('
       || lk == 8707                // DoubleLiteral '('
       || lk == 8708                // StringLiteral '('
       || lk == 8709                // URIQualifiedName '('
       || lk == 8719                // QName^Token '('
       || lk == 8738                // '(' '('
       || lk == 8743                // '+' '('
       || lk == 8745                // '-' '('
       || lk == 8747                // '.' '('
       || lk == 8749                // '/' '('
       || lk == 8750                // '//' '('
       || lk == 8769                // '?' '('
       || lk == 8773                // '[' '('
       || lk == 8781                // 'ancestor' '('
       || lk == 8782                // 'ancestor-or-self' '('
       || lk == 8783                // 'and' '('
       || lk == 8787                // 'ascending' '('
       || lk == 8789                // 'attribute' '('
       || lk == 8795                // 'case' '('
       || lk == 8796                // 'cast' '('
       || lk == 8797                // 'castable' '('
       || lk == 8799                // 'child' '('
       || lk == 8800                // 'collation' '('
       || lk == 8801                // 'comment' '('
       || lk == 8807                // 'count' '('
       || lk == 8810                // 'declare' '('
       || lk == 8811                // 'default' '('
       || lk == 8813                // 'descendant' '('
       || lk == 8814                // 'descendant-or-self' '('
       || lk == 8815                // 'descending' '('
       || lk == 8817                // 'div' '('
       || lk == 8818                // 'document' '('
       || lk == 8819                // 'document-node' '('
       || lk == 8820                // 'element' '('
       || lk == 8821                // 'else' '('
       || lk == 8822                // 'empty' '('
       || lk == 8825                // 'end' '('
       || lk == 8826                // 'eq' '('
       || lk == 8827                // 'every' '('
       || lk == 8828                // 'except' '('
       || lk == 8833                // 'following' '('
       || lk == 8834                // 'following-sibling' '('
       || lk == 8835                // 'for' '('
       || lk == 8836                // 'function' '('
       || lk == 8837                // 'ge' '('
       || lk == 8839                // 'group' '('
       || lk == 8841                // 'gt' '('
       || lk == 8842                // 'idiv' '('
       || lk == 8843                // 'if' '('
       || lk == 8844                // 'import' '('
       || lk == 8849                // 'instance' '('
       || lk == 8850                // 'intersect' '('
       || lk == 8853                // 'is' '('
       || lk == 8858                // 'le' '('
       || lk == 8860                // 'let' '('
       || lk == 8862                // 'lt' '('
       || lk == 8865                // 'mod' '('
       || lk == 8867                // 'module' '('
       || lk == 8868                // 'namespace' '('
       || lk == 8869                // 'namespace-node' '('
       || lk == 8870                // 'ne' '('
       || lk == 8874                // 'node' '('
       || lk == 8877                // 'only' '('
       || lk == 8879                // 'or' '('
       || lk == 8880                // 'order' '('
       || lk == 8881                // 'ordered' '('
       || lk == 8883                // 'parent' '('
       || lk == 8888                // 'preceding' '('
       || lk == 8889                // 'preceding-sibling' '('
       || lk == 8892                // 'processing-instruction' '('
       || lk == 8895                // 'return' '('
       || lk == 8898                // 'satisfies' '('
       || lk == 8900                // 'schema-attribute' '('
       || lk == 8901                // 'schema-element' '('
       || lk == 8902                // 'self' '('
       || lk == 8905                // 'some' '('
       || lk == 8906                // 'stable' '('
       || lk == 8907                // 'start' '('
       || lk == 8910                // 'switch' '('
       || lk == 8911                // 'text' '('
       || lk == 8913                // 'to' '('
       || lk == 8915                // 'treat' '('
       || lk == 8916                // 'try' '('
       || lk == 8919                // 'typeswitch' '('
       || lk == 8920                // 'union' '('
       || lk == 8921                // 'unordered' '('
       || lk == 8923                // 'validate' '('
       || lk == 8928                // 'where' '('
       || lk == 8932                // 'xquery' '('
       || lk == 8994                // '(' '(#'
       || lk == 8999                // '+' '(#'
       || lk == 9001                // '-' '(#'
       || lk == 9029                // '[' '(#'
       || lk == 9506                // '(' ')'
       || lk == 9729                // IntegerLiteral '*'
       || lk == 9730                // DecimalLiteral '*'
       || lk == 9731                // DoubleLiteral '*'
       || lk == 9732                // StringLiteral '*'
       || lk == 9733                // URIQualifiedName '*'
       || lk == 9743                // QName^Token '*'
       || lk == 9749                // Wildcard '*'
       || lk == 9771                // '.' '*'
       || lk == 9772                // '..' '*'
       || lk == 9773                // '/' '*'
       || lk == 9793                // '?' '*'
       || lk == 9805                // 'ancestor' '*'
       || lk == 9806                // 'ancestor-or-self' '*'
       || lk == 9807                // 'and' '*'
       || lk == 9809                // 'array' '*'
       || lk == 9811                // 'ascending' '*'
       || lk == 9813                // 'attribute' '*'
       || lk == 9819                // 'case' '*'
       || lk == 9820                // 'cast' '*'
       || lk == 9821                // 'castable' '*'
       || lk == 9823                // 'child' '*'
       || lk == 9824                // 'collation' '*'
       || lk == 9825                // 'comment' '*'
       || lk == 9831                // 'count' '*'
       || lk == 9834                // 'declare' '*'
       || lk == 9835                // 'default' '*'
       || lk == 9837                // 'descendant' '*'
       || lk == 9838                // 'descendant-or-self' '*'
       || lk == 9839                // 'descending' '*'
       || lk == 9841                // 'div' '*'
       || lk == 9842                // 'document' '*'
       || lk == 9843                // 'document-node' '*'
       || lk == 9844                // 'element' '*'
       || lk == 9845                // 'else' '*'
       || lk == 9846                // 'empty' '*'
       || lk == 9847                // 'empty-sequence' '*'
       || lk == 9849                // 'end' '*'
       || lk == 9850                // 'eq' '*'
       || lk == 9851                // 'every' '*'
       || lk == 9852                // 'except' '*'
       || lk == 9857                // 'following' '*'
       || lk == 9858                // 'following-sibling' '*'
       || lk == 9859                // 'for' '*'
       || lk == 9860                // 'function' '*'
       || lk == 9861                // 'ge' '*'
       || lk == 9863                // 'group' '*'
       || lk == 9865                // 'gt' '*'
       || lk == 9866                // 'idiv' '*'
       || lk == 9867                // 'if' '*'
       || lk == 9868                // 'import' '*'
       || lk == 9873                // 'instance' '*'
       || lk == 9874                // 'intersect' '*'
       || lk == 9877                // 'is' '*'
       || lk == 9878                // 'item' '*'
       || lk == 9882                // 'le' '*'
       || lk == 9884                // 'let' '*'
       || lk == 9886                // 'lt' '*'
       || lk == 9887                // 'map' '*'
       || lk == 9889                // 'mod' '*'
       || lk == 9891                // 'module' '*'
       || lk == 9892                // 'namespace' '*'
       || lk == 9893                // 'namespace-node' '*'
       || lk == 9894                // 'ne' '*'
       || lk == 9898                // 'node' '*'
       || lk == 9901                // 'only' '*'
       || lk == 9903                // 'or' '*'
       || lk == 9904                // 'order' '*'
       || lk == 9905                // 'ordered' '*'
       || lk == 9907                // 'parent' '*'
       || lk == 9912                // 'preceding' '*'
       || lk == 9913                // 'preceding-sibling' '*'
       || lk == 9916                // 'processing-instruction' '*'
       || lk == 9919                // 'return' '*'
       || lk == 9922                // 'satisfies' '*'
       || lk == 9924                // 'schema-attribute' '*'
       || lk == 9925                // 'schema-element' '*'
       || lk == 9926                // 'self' '*'
       || lk == 9929                // 'some' '*'
       || lk == 9930                // 'stable' '*'
       || lk == 9931                // 'start' '*'
       || lk == 9934                // 'switch' '*'
       || lk == 9935                // 'text' '*'
       || lk == 9937                // 'to' '*'
       || lk == 9939                // 'treat' '*'
       || lk == 9940                // 'try' '*'
       || lk == 9943                // 'typeswitch' '*'
       || lk == 9944                // 'union' '*'
       || lk == 9945                // 'unordered' '*'
       || lk == 9947                // 'validate' '*'
       || lk == 9952                // 'where' '*'
       || lk == 9956                // 'xquery' '*'
       || lk == 9985                // IntegerLiteral '+'
       || lk == 9986                // DecimalLiteral '+'
       || lk == 9987                // DoubleLiteral '+'
       || lk == 9988                // StringLiteral '+'
       || lk == 9989                // URIQualifiedName '+'
       || lk == 9999                // QName^Token '+'
       || lk == 10005               // Wildcard '+'
       || lk == 10018               // '(' '+'
       || lk == 10023               // '+' '+'
       || lk == 10025               // '-' '+'
       || lk == 10027               // '.' '+'
       || lk == 10028               // '..' '+'
       || lk == 10029               // '/' '+'
       || lk == 10053               // '[' '+'
       || lk == 10061               // 'ancestor' '+'
       || lk == 10062               // 'ancestor-or-self' '+'
       || lk == 10063               // 'and' '+'
       || lk == 10065               // 'array' '+'
       || lk == 10067               // 'ascending' '+'
       || lk == 10069               // 'attribute' '+'
       || lk == 10075               // 'case' '+'
       || lk == 10076               // 'cast' '+'
       || lk == 10077               // 'castable' '+'
       || lk == 10079               // 'child' '+'
       || lk == 10080               // 'collation' '+'
       || lk == 10081               // 'comment' '+'
       || lk == 10087               // 'count' '+'
       || lk == 10090               // 'declare' '+'
       || lk == 10091               // 'default' '+'
       || lk == 10093               // 'descendant' '+'
       || lk == 10094               // 'descendant-or-self' '+'
       || lk == 10095               // 'descending' '+'
       || lk == 10097               // 'div' '+'
       || lk == 10098               // 'document' '+'
       || lk == 10099               // 'document-node' '+'
       || lk == 10100               // 'element' '+'
       || lk == 10101               // 'else' '+'
       || lk == 10102               // 'empty' '+'
       || lk == 10103               // 'empty-sequence' '+'
       || lk == 10105               // 'end' '+'
       || lk == 10106               // 'eq' '+'
       || lk == 10107               // 'every' '+'
       || lk == 10108               // 'except' '+'
       || lk == 10113               // 'following' '+'
       || lk == 10114               // 'following-sibling' '+'
       || lk == 10115               // 'for' '+'
       || lk == 10116               // 'function' '+'
       || lk == 10117               // 'ge' '+'
       || lk == 10119               // 'group' '+'
       || lk == 10121               // 'gt' '+'
       || lk == 10122               // 'idiv' '+'
       || lk == 10123               // 'if' '+'
       || lk == 10124               // 'import' '+'
       || lk == 10129               // 'instance' '+'
       || lk == 10130               // 'intersect' '+'
       || lk == 10133               // 'is' '+'
       || lk == 10134               // 'item' '+'
       || lk == 10138               // 'le' '+'
       || lk == 10140               // 'let' '+'
       || lk == 10142               // 'lt' '+'
       || lk == 10143               // 'map' '+'
       || lk == 10145               // 'mod' '+'
       || lk == 10147               // 'module' '+'
       || lk == 10148               // 'namespace' '+'
       || lk == 10149               // 'namespace-node' '+'
       || lk == 10150               // 'ne' '+'
       || lk == 10154               // 'node' '+'
       || lk == 10157               // 'only' '+'
       || lk == 10159               // 'or' '+'
       || lk == 10160               // 'order' '+'
       || lk == 10161               // 'ordered' '+'
       || lk == 10163               // 'parent' '+'
       || lk == 10168               // 'preceding' '+'
       || lk == 10169               // 'preceding-sibling' '+'
       || lk == 10172               // 'processing-instruction' '+'
       || lk == 10175               // 'return' '+'
       || lk == 10178               // 'satisfies' '+'
       || lk == 10180               // 'schema-attribute' '+'
       || lk == 10181               // 'schema-element' '+'
       || lk == 10182               // 'self' '+'
       || lk == 10185               // 'some' '+'
       || lk == 10186               // 'stable' '+'
       || lk == 10187               // 'start' '+'
       || lk == 10190               // 'switch' '+'
       || lk == 10191               // 'text' '+'
       || lk == 10193               // 'to' '+'
       || lk == 10195               // 'treat' '+'
       || lk == 10196               // 'try' '+'
       || lk == 10199               // 'typeswitch' '+'
       || lk == 10200               // 'union' '+'
       || lk == 10201               // 'unordered' '+'
       || lk == 10203               // 'validate' '+'
       || lk == 10208               // 'where' '+'
       || lk == 10212               // 'xquery' '+'
       || lk == 10497               // IntegerLiteral '-'
       || lk == 10498               // DecimalLiteral '-'
       || lk == 10499               // DoubleLiteral '-'
       || lk == 10500               // StringLiteral '-'
       || lk == 10501               // URIQualifiedName '-'
       || lk == 10511               // QName^Token '-'
       || lk == 10517               // Wildcard '-'
       || lk == 10530               // '(' '-'
       || lk == 10535               // '+' '-'
       || lk == 10537               // '-' '-'
       || lk == 10539               // '.' '-'
       || lk == 10540               // '..' '-'
       || lk == 10541               // '/' '-'
       || lk == 10565               // '[' '-'
       || lk == 10573               // 'ancestor' '-'
       || lk == 10574               // 'ancestor-or-self' '-'
       || lk == 10575               // 'and' '-'
       || lk == 10577               // 'array' '-'
       || lk == 10579               // 'ascending' '-'
       || lk == 10581               // 'attribute' '-'
       || lk == 10587               // 'case' '-'
       || lk == 10588               // 'cast' '-'
       || lk == 10589               // 'castable' '-'
       || lk == 10591               // 'child' '-'
       || lk == 10592               // 'collation' '-'
       || lk == 10593               // 'comment' '-'
       || lk == 10599               // 'count' '-'
       || lk == 10602               // 'declare' '-'
       || lk == 10603               // 'default' '-'
       || lk == 10605               // 'descendant' '-'
       || lk == 10606               // 'descendant-or-self' '-'
       || lk == 10607               // 'descending' '-'
       || lk == 10609               // 'div' '-'
       || lk == 10610               // 'document' '-'
       || lk == 10611               // 'document-node' '-'
       || lk == 10612               // 'element' '-'
       || lk == 10613               // 'else' '-'
       || lk == 10614               // 'empty' '-'
       || lk == 10615               // 'empty-sequence' '-'
       || lk == 10617               // 'end' '-'
       || lk == 10618               // 'eq' '-'
       || lk == 10619               // 'every' '-'
       || lk == 10620               // 'except' '-'
       || lk == 10625               // 'following' '-'
       || lk == 10626               // 'following-sibling' '-'
       || lk == 10627               // 'for' '-'
       || lk == 10628               // 'function' '-'
       || lk == 10629               // 'ge' '-'
       || lk == 10631               // 'group' '-'
       || lk == 10633               // 'gt' '-'
       || lk == 10634               // 'idiv' '-'
       || lk == 10635               // 'if' '-'
       || lk == 10636               // 'import' '-'
       || lk == 10641               // 'instance' '-'
       || lk == 10642               // 'intersect' '-'
       || lk == 10645               // 'is' '-'
       || lk == 10646               // 'item' '-'
       || lk == 10650               // 'le' '-'
       || lk == 10652               // 'let' '-'
       || lk == 10654               // 'lt' '-'
       || lk == 10655               // 'map' '-'
       || lk == 10657               // 'mod' '-'
       || lk == 10659               // 'module' '-'
       || lk == 10660               // 'namespace' '-'
       || lk == 10661               // 'namespace-node' '-'
       || lk == 10662               // 'ne' '-'
       || lk == 10666               // 'node' '-'
       || lk == 10669               // 'only' '-'
       || lk == 10671               // 'or' '-'
       || lk == 10672               // 'order' '-'
       || lk == 10673               // 'ordered' '-'
       || lk == 10675               // 'parent' '-'
       || lk == 10680               // 'preceding' '-'
       || lk == 10681               // 'preceding-sibling' '-'
       || lk == 10684               // 'processing-instruction' '-'
       || lk == 10687               // 'return' '-'
       || lk == 10690               // 'satisfies' '-'
       || lk == 10692               // 'schema-attribute' '-'
       || lk == 10693               // 'schema-element' '-'
       || lk == 10694               // 'self' '-'
       || lk == 10697               // 'some' '-'
       || lk == 10698               // 'stable' '-'
       || lk == 10699               // 'start' '-'
       || lk == 10702               // 'switch' '-'
       || lk == 10703               // 'text' '-'
       || lk == 10705               // 'to' '-'
       || lk == 10707               // 'treat' '-'
       || lk == 10708               // 'try' '-'
       || lk == 10711               // 'typeswitch' '-'
       || lk == 10712               // 'union' '-'
       || lk == 10713               // 'unordered' '-'
       || lk == 10715               // 'validate' '-'
       || lk == 10720               // 'where' '-'
       || lk == 10724               // 'xquery' '-'
       || lk == 11042               // '(' '.'
       || lk == 11047               // '+' '.'
       || lk == 11049               // '-' '.'
       || lk == 11053               // '/' '.'
       || lk == 11054               // '//' '.'
       || lk == 11077               // '[' '.'
       || lk == 11298               // '(' '..'
       || lk == 11303               // '+' '..'
       || lk == 11305               // '-' '..'
       || lk == 11309               // '/' '..'
       || lk == 11310               // '//' '..'
       || lk == 11333               // '[' '..'
       || lk == 11521               // IntegerLiteral '/'
       || lk == 11522               // DecimalLiteral '/'
       || lk == 11523               // DoubleLiteral '/'
       || lk == 11524               // StringLiteral '/'
       || lk == 11525               // URIQualifiedName '/'
       || lk == 11535               // QName^Token '/'
       || lk == 11541               // Wildcard '/'
       || lk == 11554               // '(' '/'
       || lk == 11559               // '+' '/'
       || lk == 11561               // '-' '/'
       || lk == 11563               // '.' '/'
       || lk == 11564               // '..' '/'
       || lk == 11589               // '[' '/'
       || lk == 11597               // 'ancestor' '/'
       || lk == 11598               // 'ancestor-or-self' '/'
       || lk == 11599               // 'and' '/'
       || lk == 11601               // 'array' '/'
       || lk == 11603               // 'ascending' '/'
       || lk == 11605               // 'attribute' '/'
       || lk == 11611               // 'case' '/'
       || lk == 11612               // 'cast' '/'
       || lk == 11613               // 'castable' '/'
       || lk == 11615               // 'child' '/'
       || lk == 11616               // 'collation' '/'
       || lk == 11617               // 'comment' '/'
       || lk == 11623               // 'count' '/'
       || lk == 11626               // 'declare' '/'
       || lk == 11627               // 'default' '/'
       || lk == 11629               // 'descendant' '/'
       || lk == 11630               // 'descendant-or-self' '/'
       || lk == 11631               // 'descending' '/'
       || lk == 11633               // 'div' '/'
       || lk == 11634               // 'document' '/'
       || lk == 11635               // 'document-node' '/'
       || lk == 11636               // 'element' '/'
       || lk == 11637               // 'else' '/'
       || lk == 11638               // 'empty' '/'
       || lk == 11639               // 'empty-sequence' '/'
       || lk == 11641               // 'end' '/'
       || lk == 11642               // 'eq' '/'
       || lk == 11643               // 'every' '/'
       || lk == 11644               // 'except' '/'
       || lk == 11649               // 'following' '/'
       || lk == 11650               // 'following-sibling' '/'
       || lk == 11651               // 'for' '/'
       || lk == 11652               // 'function' '/'
       || lk == 11653               // 'ge' '/'
       || lk == 11655               // 'group' '/'
       || lk == 11657               // 'gt' '/'
       || lk == 11658               // 'idiv' '/'
       || lk == 11659               // 'if' '/'
       || lk == 11660               // 'import' '/'
       || lk == 11665               // 'instance' '/'
       || lk == 11666               // 'intersect' '/'
       || lk == 11669               // 'is' '/'
       || lk == 11670               // 'item' '/'
       || lk == 11674               // 'le' '/'
       || lk == 11676               // 'let' '/'
       || lk == 11678               // 'lt' '/'
       || lk == 11679               // 'map' '/'
       || lk == 11681               // 'mod' '/'
       || lk == 11683               // 'module' '/'
       || lk == 11684               // 'namespace' '/'
       || lk == 11685               // 'namespace-node' '/'
       || lk == 11686               // 'ne' '/'
       || lk == 11690               // 'node' '/'
       || lk == 11693               // 'only' '/'
       || lk == 11695               // 'or' '/'
       || lk == 11696               // 'order' '/'
       || lk == 11697               // 'ordered' '/'
       || lk == 11699               // 'parent' '/'
       || lk == 11704               // 'preceding' '/'
       || lk == 11705               // 'preceding-sibling' '/'
       || lk == 11708               // 'processing-instruction' '/'
       || lk == 11711               // 'return' '/'
       || lk == 11714               // 'satisfies' '/'
       || lk == 11716               // 'schema-attribute' '/'
       || lk == 11717               // 'schema-element' '/'
       || lk == 11718               // 'self' '/'
       || lk == 11721               // 'some' '/'
       || lk == 11722               // 'stable' '/'
       || lk == 11723               // 'start' '/'
       || lk == 11726               // 'switch' '/'
       || lk == 11727               // 'text' '/'
       || lk == 11729               // 'to' '/'
       || lk == 11731               // 'treat' '/'
       || lk == 11732               // 'try' '/'
       || lk == 11735               // 'typeswitch' '/'
       || lk == 11736               // 'union' '/'
       || lk == 11737               // 'unordered' '/'
       || lk == 11739               // 'validate' '/'
       || lk == 11744               // 'where' '/'
       || lk == 11748               // 'xquery' '/'
       || lk == 11777               // IntegerLiteral '//'
       || lk == 11778               // DecimalLiteral '//'
       || lk == 11779               // DoubleLiteral '//'
       || lk == 11780               // StringLiteral '//'
       || lk == 11781               // URIQualifiedName '//'
       || lk == 11791               // QName^Token '//'
       || lk == 11797               // Wildcard '//'
       || lk == 11810               // '(' '//'
       || lk == 11815               // '+' '//'
       || lk == 11817               // '-' '//'
       || lk == 11819               // '.' '//'
       || lk == 11820               // '..' '//'
       || lk == 11845               // '[' '//'
       || lk == 11853               // 'ancestor' '//'
       || lk == 11854               // 'ancestor-or-self' '//'
       || lk == 11855               // 'and' '//'
       || lk == 11857               // 'array' '//'
       || lk == 11859               // 'ascending' '//'
       || lk == 11861               // 'attribute' '//'
       || lk == 11867               // 'case' '//'
       || lk == 11868               // 'cast' '//'
       || lk == 11869               // 'castable' '//'
       || lk == 11871               // 'child' '//'
       || lk == 11872               // 'collation' '//'
       || lk == 11873               // 'comment' '//'
       || lk == 11879               // 'count' '//'
       || lk == 11882               // 'declare' '//'
       || lk == 11883               // 'default' '//'
       || lk == 11885               // 'descendant' '//'
       || lk == 11886               // 'descendant-or-self' '//'
       || lk == 11887               // 'descending' '//'
       || lk == 11889               // 'div' '//'
       || lk == 11890               // 'document' '//'
       || lk == 11891               // 'document-node' '//'
       || lk == 11892               // 'element' '//'
       || lk == 11893               // 'else' '//'
       || lk == 11894               // 'empty' '//'
       || lk == 11895               // 'empty-sequence' '//'
       || lk == 11897               // 'end' '//'
       || lk == 11898               // 'eq' '//'
       || lk == 11899               // 'every' '//'
       || lk == 11900               // 'except' '//'
       || lk == 11905               // 'following' '//'
       || lk == 11906               // 'following-sibling' '//'
       || lk == 11907               // 'for' '//'
       || lk == 11908               // 'function' '//'
       || lk == 11909               // 'ge' '//'
       || lk == 11911               // 'group' '//'
       || lk == 11913               // 'gt' '//'
       || lk == 11914               // 'idiv' '//'
       || lk == 11915               // 'if' '//'
       || lk == 11916               // 'import' '//'
       || lk == 11921               // 'instance' '//'
       || lk == 11922               // 'intersect' '//'
       || lk == 11925               // 'is' '//'
       || lk == 11926               // 'item' '//'
       || lk == 11930               // 'le' '//'
       || lk == 11932               // 'let' '//'
       || lk == 11934               // 'lt' '//'
       || lk == 11935               // 'map' '//'
       || lk == 11937               // 'mod' '//'
       || lk == 11939               // 'module' '//'
       || lk == 11940               // 'namespace' '//'
       || lk == 11941               // 'namespace-node' '//'
       || lk == 11942               // 'ne' '//'
       || lk == 11946               // 'node' '//'
       || lk == 11949               // 'only' '//'
       || lk == 11951               // 'or' '//'
       || lk == 11952               // 'order' '//'
       || lk == 11953               // 'ordered' '//'
       || lk == 11955               // 'parent' '//'
       || lk == 11960               // 'preceding' '//'
       || lk == 11961               // 'preceding-sibling' '//'
       || lk == 11964               // 'processing-instruction' '//'
       || lk == 11967               // 'return' '//'
       || lk == 11970               // 'satisfies' '//'
       || lk == 11972               // 'schema-attribute' '//'
       || lk == 11973               // 'schema-element' '//'
       || lk == 11974               // 'self' '//'
       || lk == 11977               // 'some' '//'
       || lk == 11978               // 'stable' '//'
       || lk == 11979               // 'start' '//'
       || lk == 11982               // 'switch' '//'
       || lk == 11983               // 'text' '//'
       || lk == 11985               // 'to' '//'
       || lk == 11987               // 'treat' '//'
       || lk == 11988               // 'try' '//'
       || lk == 11991               // 'typeswitch' '//'
       || lk == 11992               // 'union' '//'
       || lk == 11993               // 'unordered' '//'
       || lk == 11995               // 'validate' '//'
       || lk == 12000               // 'where' '//'
       || lk == 12004               // 'xquery' '//'
       || lk == 12877               // 'ancestor' '::'
       || lk == 12878               // 'ancestor-or-self' '::'
       || lk == 12885               // 'attribute' '::'
       || lk == 12895               // 'child' '::'
       || lk == 12909               // 'descendant' '::'
       || lk == 12910               // 'descendant-or-self' '::'
       || lk == 12929               // 'following' '::'
       || lk == 12930               // 'following-sibling' '::'
       || lk == 12979               // 'parent' '::'
       || lk == 12984               // 'preceding' '::'
       || lk == 12985               // 'preceding-sibling' '::'
       || lk == 12998               // 'self' '::'
       || lk == 13569               // IntegerLiteral '<'
       || lk == 13570               // DecimalLiteral '<'
       || lk == 13571               // DoubleLiteral '<'
       || lk == 13572               // StringLiteral '<'
       || lk == 13573               // URIQualifiedName '<'
       || lk == 13583               // QName^Token '<'
       || lk == 13589               // Wildcard '<'
       || lk == 13602               // '(' '<'
       || lk == 13607               // '+' '<'
       || lk == 13609               // '-' '<'
       || lk == 13611               // '.' '<'
       || lk == 13612               // '..' '<'
       || lk == 13613               // '/' '<'
       || lk == 13614               // '//' '<'
       || lk == 13637               // '[' '<'
       || lk == 13645               // 'ancestor' '<'
       || lk == 13646               // 'ancestor-or-self' '<'
       || lk == 13647               // 'and' '<'
       || lk == 13649               // 'array' '<'
       || lk == 13651               // 'ascending' '<'
       || lk == 13653               // 'attribute' '<'
       || lk == 13659               // 'case' '<'
       || lk == 13660               // 'cast' '<'
       || lk == 13661               // 'castable' '<'
       || lk == 13663               // 'child' '<'
       || lk == 13664               // 'collation' '<'
       || lk == 13665               // 'comment' '<'
       || lk == 13671               // 'count' '<'
       || lk == 13674               // 'declare' '<'
       || lk == 13675               // 'default' '<'
       || lk == 13677               // 'descendant' '<'
       || lk == 13678               // 'descendant-or-self' '<'
       || lk == 13679               // 'descending' '<'
       || lk == 13681               // 'div' '<'
       || lk == 13682               // 'document' '<'
       || lk == 13683               // 'document-node' '<'
       || lk == 13684               // 'element' '<'
       || lk == 13685               // 'else' '<'
       || lk == 13686               // 'empty' '<'
       || lk == 13687               // 'empty-sequence' '<'
       || lk == 13689               // 'end' '<'
       || lk == 13690               // 'eq' '<'
       || lk == 13691               // 'every' '<'
       || lk == 13692               // 'except' '<'
       || lk == 13697               // 'following' '<'
       || lk == 13698               // 'following-sibling' '<'
       || lk == 13699               // 'for' '<'
       || lk == 13700               // 'function' '<'
       || lk == 13701               // 'ge' '<'
       || lk == 13703               // 'group' '<'
       || lk == 13705               // 'gt' '<'
       || lk == 13706               // 'idiv' '<'
       || lk == 13707               // 'if' '<'
       || lk == 13708               // 'import' '<'
       || lk == 13713               // 'instance' '<'
       || lk == 13714               // 'intersect' '<'
       || lk == 13717               // 'is' '<'
       || lk == 13718               // 'item' '<'
       || lk == 13722               // 'le' '<'
       || lk == 13724               // 'let' '<'
       || lk == 13726               // 'lt' '<'
       || lk == 13727               // 'map' '<'
       || lk == 13729               // 'mod' '<'
       || lk == 13731               // 'module' '<'
       || lk == 13732               // 'namespace' '<'
       || lk == 13733               // 'namespace-node' '<'
       || lk == 13734               // 'ne' '<'
       || lk == 13738               // 'node' '<'
       || lk == 13741               // 'only' '<'
       || lk == 13743               // 'or' '<'
       || lk == 13744               // 'order' '<'
       || lk == 13745               // 'ordered' '<'
       || lk == 13747               // 'parent' '<'
       || lk == 13752               // 'preceding' '<'
       || lk == 13753               // 'preceding-sibling' '<'
       || lk == 13756               // 'processing-instruction' '<'
       || lk == 13759               // 'return' '<'
       || lk == 13762               // 'satisfies' '<'
       || lk == 13764               // 'schema-attribute' '<'
       || lk == 13765               // 'schema-element' '<'
       || lk == 13766               // 'self' '<'
       || lk == 13769               // 'some' '<'
       || lk == 13770               // 'stable' '<'
       || lk == 13771               // 'start' '<'
       || lk == 13774               // 'switch' '<'
       || lk == 13775               // 'text' '<'
       || lk == 13777               // 'to' '<'
       || lk == 13779               // 'treat' '<'
       || lk == 13780               // 'try' '<'
       || lk == 13783               // 'typeswitch' '<'
       || lk == 13784               // 'union' '<'
       || lk == 13785               // 'unordered' '<'
       || lk == 13787               // 'validate' '<'
       || lk == 13792               // 'where' '<'
       || lk == 13796               // 'xquery' '<'
       || lk == 13858               // '(' '<!--'
       || lk == 13863               // '+' '<!--'
       || lk == 13865               // '-' '<!--'
       || lk == 13869               // '/' '<!--'
       || lk == 13870               // '//' '<!--'
       || lk == 13893               // '[' '<!--'
       || lk == 14593               // IntegerLiteral '<<'
       || lk == 14594               // DecimalLiteral '<<'
       || lk == 14595               // DoubleLiteral '<<'
       || lk == 14596               // StringLiteral '<<'
       || lk == 14597               // URIQualifiedName '<<'
       || lk == 14607               // QName^Token '<<'
       || lk == 14613               // Wildcard '<<'
       || lk == 14635               // '.' '<<'
       || lk == 14636               // '..' '<<'
       || lk == 14637               // '/' '<<'
       || lk == 14669               // 'ancestor' '<<'
       || lk == 14670               // 'ancestor-or-self' '<<'
       || lk == 14671               // 'and' '<<'
       || lk == 14673               // 'array' '<<'
       || lk == 14675               // 'ascending' '<<'
       || lk == 14677               // 'attribute' '<<'
       || lk == 14683               // 'case' '<<'
       || lk == 14684               // 'cast' '<<'
       || lk == 14685               // 'castable' '<<'
       || lk == 14687               // 'child' '<<'
       || lk == 14688               // 'collation' '<<'
       || lk == 14689               // 'comment' '<<'
       || lk == 14695               // 'count' '<<'
       || lk == 14698               // 'declare' '<<'
       || lk == 14699               // 'default' '<<'
       || lk == 14701               // 'descendant' '<<'
       || lk == 14702               // 'descendant-or-self' '<<'
       || lk == 14703               // 'descending' '<<'
       || lk == 14705               // 'div' '<<'
       || lk == 14706               // 'document' '<<'
       || lk == 14707               // 'document-node' '<<'
       || lk == 14708               // 'element' '<<'
       || lk == 14709               // 'else' '<<'
       || lk == 14710               // 'empty' '<<'
       || lk == 14711               // 'empty-sequence' '<<'
       || lk == 14713               // 'end' '<<'
       || lk == 14714               // 'eq' '<<'
       || lk == 14715               // 'every' '<<'
       || lk == 14716               // 'except' '<<'
       || lk == 14721               // 'following' '<<'
       || lk == 14722               // 'following-sibling' '<<'
       || lk == 14723               // 'for' '<<'
       || lk == 14724               // 'function' '<<'
       || lk == 14725               // 'ge' '<<'
       || lk == 14727               // 'group' '<<'
       || lk == 14729               // 'gt' '<<'
       || lk == 14730               // 'idiv' '<<'
       || lk == 14731               // 'if' '<<'
       || lk == 14732               // 'import' '<<'
       || lk == 14737               // 'instance' '<<'
       || lk == 14738               // 'intersect' '<<'
       || lk == 14741               // 'is' '<<'
       || lk == 14742               // 'item' '<<'
       || lk == 14746               // 'le' '<<'
       || lk == 14748               // 'let' '<<'
       || lk == 14750               // 'lt' '<<'
       || lk == 14751               // 'map' '<<'
       || lk == 14753               // 'mod' '<<'
       || lk == 14755               // 'module' '<<'
       || lk == 14756               // 'namespace' '<<'
       || lk == 14757               // 'namespace-node' '<<'
       || lk == 14758               // 'ne' '<<'
       || lk == 14762               // 'node' '<<'
       || lk == 14765               // 'only' '<<'
       || lk == 14767               // 'or' '<<'
       || lk == 14768               // 'order' '<<'
       || lk == 14769               // 'ordered' '<<'
       || lk == 14771               // 'parent' '<<'
       || lk == 14776               // 'preceding' '<<'
       || lk == 14777               // 'preceding-sibling' '<<'
       || lk == 14780               // 'processing-instruction' '<<'
       || lk == 14783               // 'return' '<<'
       || lk == 14786               // 'satisfies' '<<'
       || lk == 14788               // 'schema-attribute' '<<'
       || lk == 14789               // 'schema-element' '<<'
       || lk == 14790               // 'self' '<<'
       || lk == 14793               // 'some' '<<'
       || lk == 14794               // 'stable' '<<'
       || lk == 14795               // 'start' '<<'
       || lk == 14798               // 'switch' '<<'
       || lk == 14799               // 'text' '<<'
       || lk == 14801               // 'to' '<<'
       || lk == 14803               // 'treat' '<<'
       || lk == 14804               // 'try' '<<'
       || lk == 14807               // 'typeswitch' '<<'
       || lk == 14808               // 'union' '<<'
       || lk == 14809               // 'unordered' '<<'
       || lk == 14811               // 'validate' '<<'
       || lk == 14816               // 'where' '<<'
       || lk == 14820               // 'xquery' '<<'
       || lk == 14849               // IntegerLiteral '<='
       || lk == 14850               // DecimalLiteral '<='
       || lk == 14851               // DoubleLiteral '<='
       || lk == 14852               // StringLiteral '<='
       || lk == 14853               // URIQualifiedName '<='
       || lk == 14863               // QName^Token '<='
       || lk == 14869               // Wildcard '<='
       || lk == 14891               // '.' '<='
       || lk == 14892               // '..' '<='
       || lk == 14893               // '/' '<='
       || lk == 14925               // 'ancestor' '<='
       || lk == 14926               // 'ancestor-or-self' '<='
       || lk == 14927               // 'and' '<='
       || lk == 14929               // 'array' '<='
       || lk == 14931               // 'ascending' '<='
       || lk == 14933               // 'attribute' '<='
       || lk == 14939               // 'case' '<='
       || lk == 14940               // 'cast' '<='
       || lk == 14941               // 'castable' '<='
       || lk == 14943               // 'child' '<='
       || lk == 14944               // 'collation' '<='
       || lk == 14945               // 'comment' '<='
       || lk == 14951               // 'count' '<='
       || lk == 14954               // 'declare' '<='
       || lk == 14955               // 'default' '<='
       || lk == 14957               // 'descendant' '<='
       || lk == 14958               // 'descendant-or-self' '<='
       || lk == 14959               // 'descending' '<='
       || lk == 14961               // 'div' '<='
       || lk == 14962               // 'document' '<='
       || lk == 14963               // 'document-node' '<='
       || lk == 14964               // 'element' '<='
       || lk == 14965               // 'else' '<='
       || lk == 14966               // 'empty' '<='
       || lk == 14967               // 'empty-sequence' '<='
       || lk == 14969               // 'end' '<='
       || lk == 14970               // 'eq' '<='
       || lk == 14971               // 'every' '<='
       || lk == 14972               // 'except' '<='
       || lk == 14977               // 'following' '<='
       || lk == 14978               // 'following-sibling' '<='
       || lk == 14979               // 'for' '<='
       || lk == 14980               // 'function' '<='
       || lk == 14981               // 'ge' '<='
       || lk == 14983               // 'group' '<='
       || lk == 14985               // 'gt' '<='
       || lk == 14986               // 'idiv' '<='
       || lk == 14987               // 'if' '<='
       || lk == 14988               // 'import' '<='
       || lk == 14993               // 'instance' '<='
       || lk == 14994               // 'intersect' '<='
       || lk == 14997               // 'is' '<='
       || lk == 14998               // 'item' '<='
       || lk == 15002               // 'le' '<='
       || lk == 15004               // 'let' '<='
       || lk == 15006               // 'lt' '<='
       || lk == 15007               // 'map' '<='
       || lk == 15009               // 'mod' '<='
       || lk == 15011               // 'module' '<='
       || lk == 15012               // 'namespace' '<='
       || lk == 15013               // 'namespace-node' '<='
       || lk == 15014               // 'ne' '<='
       || lk == 15018               // 'node' '<='
       || lk == 15021               // 'only' '<='
       || lk == 15023               // 'or' '<='
       || lk == 15024               // 'order' '<='
       || lk == 15025               // 'ordered' '<='
       || lk == 15027               // 'parent' '<='
       || lk == 15032               // 'preceding' '<='
       || lk == 15033               // 'preceding-sibling' '<='
       || lk == 15036               // 'processing-instruction' '<='
       || lk == 15039               // 'return' '<='
       || lk == 15042               // 'satisfies' '<='
       || lk == 15044               // 'schema-attribute' '<='
       || lk == 15045               // 'schema-element' '<='
       || lk == 15046               // 'self' '<='
       || lk == 15049               // 'some' '<='
       || lk == 15050               // 'stable' '<='
       || lk == 15051               // 'start' '<='
       || lk == 15054               // 'switch' '<='
       || lk == 15055               // 'text' '<='
       || lk == 15057               // 'to' '<='
       || lk == 15059               // 'treat' '<='
       || lk == 15060               // 'try' '<='
       || lk == 15063               // 'typeswitch' '<='
       || lk == 15064               // 'union' '<='
       || lk == 15065               // 'unordered' '<='
       || lk == 15067               // 'validate' '<='
       || lk == 15072               // 'where' '<='
       || lk == 15076               // 'xquery' '<='
       || lk == 15138               // '(' '<?'
       || lk == 15143               // '+' '<?'
       || lk == 15145               // '-' '<?'
       || lk == 15149               // '/' '<?'
       || lk == 15150               // '//' '<?'
       || lk == 15173               // '[' '<?'
       || lk == 15361               // IntegerLiteral '='
       || lk == 15362               // DecimalLiteral '='
       || lk == 15363               // DoubleLiteral '='
       || lk == 15364               // StringLiteral '='
       || lk == 15365               // URIQualifiedName '='
       || lk == 15375               // QName^Token '='
       || lk == 15381               // Wildcard '='
       || lk == 15403               // '.' '='
       || lk == 15404               // '..' '='
       || lk == 15405               // '/' '='
       || lk == 15437               // 'ancestor' '='
       || lk == 15438               // 'ancestor-or-self' '='
       || lk == 15439               // 'and' '='
       || lk == 15441               // 'array' '='
       || lk == 15443               // 'ascending' '='
       || lk == 15445               // 'attribute' '='
       || lk == 15451               // 'case' '='
       || lk == 15452               // 'cast' '='
       || lk == 15453               // 'castable' '='
       || lk == 15455               // 'child' '='
       || lk == 15456               // 'collation' '='
       || lk == 15457               // 'comment' '='
       || lk == 15463               // 'count' '='
       || lk == 15466               // 'declare' '='
       || lk == 15467               // 'default' '='
       || lk == 15469               // 'descendant' '='
       || lk == 15470               // 'descendant-or-self' '='
       || lk == 15471               // 'descending' '='
       || lk == 15473               // 'div' '='
       || lk == 15474               // 'document' '='
       || lk == 15475               // 'document-node' '='
       || lk == 15476               // 'element' '='
       || lk == 15477               // 'else' '='
       || lk == 15478               // 'empty' '='
       || lk == 15479               // 'empty-sequence' '='
       || lk == 15481               // 'end' '='
       || lk == 15482               // 'eq' '='
       || lk == 15483               // 'every' '='
       || lk == 15484               // 'except' '='
       || lk == 15489               // 'following' '='
       || lk == 15490               // 'following-sibling' '='
       || lk == 15491               // 'for' '='
       || lk == 15492               // 'function' '='
       || lk == 15493               // 'ge' '='
       || lk == 15495               // 'group' '='
       || lk == 15497               // 'gt' '='
       || lk == 15498               // 'idiv' '='
       || lk == 15499               // 'if' '='
       || lk == 15500               // 'import' '='
       || lk == 15505               // 'instance' '='
       || lk == 15506               // 'intersect' '='
       || lk == 15509               // 'is' '='
       || lk == 15510               // 'item' '='
       || lk == 15514               // 'le' '='
       || lk == 15516               // 'let' '='
       || lk == 15518               // 'lt' '='
       || lk == 15519               // 'map' '='
       || lk == 15521               // 'mod' '='
       || lk == 15523               // 'module' '='
       || lk == 15524               // 'namespace' '='
       || lk == 15525               // 'namespace-node' '='
       || lk == 15526               // 'ne' '='
       || lk == 15530               // 'node' '='
       || lk == 15533               // 'only' '='
       || lk == 15535               // 'or' '='
       || lk == 15536               // 'order' '='
       || lk == 15537               // 'ordered' '='
       || lk == 15539               // 'parent' '='
       || lk == 15544               // 'preceding' '='
       || lk == 15545               // 'preceding-sibling' '='
       || lk == 15548               // 'processing-instruction' '='
       || lk == 15551               // 'return' '='
       || lk == 15554               // 'satisfies' '='
       || lk == 15556               // 'schema-attribute' '='
       || lk == 15557               // 'schema-element' '='
       || lk == 15558               // 'self' '='
       || lk == 15561               // 'some' '='
       || lk == 15562               // 'stable' '='
       || lk == 15563               // 'start' '='
       || lk == 15566               // 'switch' '='
       || lk == 15567               // 'text' '='
       || lk == 15569               // 'to' '='
       || lk == 15571               // 'treat' '='
       || lk == 15572               // 'try' '='
       || lk == 15575               // 'typeswitch' '='
       || lk == 15576               // 'union' '='
       || lk == 15577               // 'unordered' '='
       || lk == 15579               // 'validate' '='
       || lk == 15584               // 'where' '='
       || lk == 15588               // 'xquery' '='
       || lk == 15617               // IntegerLiteral '=>'
       || lk == 15618               // DecimalLiteral '=>'
       || lk == 15619               // DoubleLiteral '=>'
       || lk == 15620               // StringLiteral '=>'
       || lk == 15621               // URIQualifiedName '=>'
       || lk == 15631               // QName^Token '=>'
       || lk == 15637               // Wildcard '=>'
       || lk == 15659               // '.' '=>'
       || lk == 15660               // '..' '=>'
       || lk == 15661               // '/' '=>'
       || lk == 15693               // 'ancestor' '=>'
       || lk == 15694               // 'ancestor-or-self' '=>'
       || lk == 15695               // 'and' '=>'
       || lk == 15697               // 'array' '=>'
       || lk == 15699               // 'ascending' '=>'
       || lk == 15701               // 'attribute' '=>'
       || lk == 15707               // 'case' '=>'
       || lk == 15708               // 'cast' '=>'
       || lk == 15709               // 'castable' '=>'
       || lk == 15711               // 'child' '=>'
       || lk == 15712               // 'collation' '=>'
       || lk == 15713               // 'comment' '=>'
       || lk == 15719               // 'count' '=>'
       || lk == 15722               // 'declare' '=>'
       || lk == 15723               // 'default' '=>'
       || lk == 15725               // 'descendant' '=>'
       || lk == 15726               // 'descendant-or-self' '=>'
       || lk == 15727               // 'descending' '=>'
       || lk == 15729               // 'div' '=>'
       || lk == 15730               // 'document' '=>'
       || lk == 15731               // 'document-node' '=>'
       || lk == 15732               // 'element' '=>'
       || lk == 15733               // 'else' '=>'
       || lk == 15734               // 'empty' '=>'
       || lk == 15735               // 'empty-sequence' '=>'
       || lk == 15737               // 'end' '=>'
       || lk == 15738               // 'eq' '=>'
       || lk == 15739               // 'every' '=>'
       || lk == 15740               // 'except' '=>'
       || lk == 15745               // 'following' '=>'
       || lk == 15746               // 'following-sibling' '=>'
       || lk == 15747               // 'for' '=>'
       || lk == 15748               // 'function' '=>'
       || lk == 15749               // 'ge' '=>'
       || lk == 15751               // 'group' '=>'
       || lk == 15753               // 'gt' '=>'
       || lk == 15754               // 'idiv' '=>'
       || lk == 15755               // 'if' '=>'
       || lk == 15756               // 'import' '=>'
       || lk == 15761               // 'instance' '=>'
       || lk == 15762               // 'intersect' '=>'
       || lk == 15765               // 'is' '=>'
       || lk == 15766               // 'item' '=>'
       || lk == 15770               // 'le' '=>'
       || lk == 15772               // 'let' '=>'
       || lk == 15774               // 'lt' '=>'
       || lk == 15775               // 'map' '=>'
       || lk == 15777               // 'mod' '=>'
       || lk == 15779               // 'module' '=>'
       || lk == 15780               // 'namespace' '=>'
       || lk == 15781               // 'namespace-node' '=>'
       || lk == 15782               // 'ne' '=>'
       || lk == 15786               // 'node' '=>'
       || lk == 15789               // 'only' '=>'
       || lk == 15791               // 'or' '=>'
       || lk == 15792               // 'order' '=>'
       || lk == 15793               // 'ordered' '=>'
       || lk == 15795               // 'parent' '=>'
       || lk == 15800               // 'preceding' '=>'
       || lk == 15801               // 'preceding-sibling' '=>'
       || lk == 15804               // 'processing-instruction' '=>'
       || lk == 15807               // 'return' '=>'
       || lk == 15810               // 'satisfies' '=>'
       || lk == 15812               // 'schema-attribute' '=>'
       || lk == 15813               // 'schema-element' '=>'
       || lk == 15814               // 'self' '=>'
       || lk == 15817               // 'some' '=>'
       || lk == 15818               // 'stable' '=>'
       || lk == 15819               // 'start' '=>'
       || lk == 15822               // 'switch' '=>'
       || lk == 15823               // 'text' '=>'
       || lk == 15825               // 'to' '=>'
       || lk == 15827               // 'treat' '=>'
       || lk == 15828               // 'try' '=>'
       || lk == 15831               // 'typeswitch' '=>'
       || lk == 15832               // 'union' '=>'
       || lk == 15833               // 'unordered' '=>'
       || lk == 15835               // 'validate' '=>'
       || lk == 15840               // 'where' '=>'
       || lk == 15844               // 'xquery' '=>'
       || lk == 15873               // IntegerLiteral '>'
       || lk == 15874               // DecimalLiteral '>'
       || lk == 15875               // DoubleLiteral '>'
       || lk == 15876               // StringLiteral '>'
       || lk == 15877               // URIQualifiedName '>'
       || lk == 15887               // QName^Token '>'
       || lk == 15893               // Wildcard '>'
       || lk == 15915               // '.' '>'
       || lk == 15916               // '..' '>'
       || lk == 15917               // '/' '>'
       || lk == 15949               // 'ancestor' '>'
       || lk == 15950               // 'ancestor-or-self' '>'
       || lk == 15951               // 'and' '>'
       || lk == 15953               // 'array' '>'
       || lk == 15955               // 'ascending' '>'
       || lk == 15957               // 'attribute' '>'
       || lk == 15963               // 'case' '>'
       || lk == 15964               // 'cast' '>'
       || lk == 15965               // 'castable' '>'
       || lk == 15967               // 'child' '>'
       || lk == 15968               // 'collation' '>'
       || lk == 15969               // 'comment' '>'
       || lk == 15975               // 'count' '>'
       || lk == 15978               // 'declare' '>'
       || lk == 15979               // 'default' '>'
       || lk == 15981               // 'descendant' '>'
       || lk == 15982               // 'descendant-or-self' '>'
       || lk == 15983               // 'descending' '>'
       || lk == 15985               // 'div' '>'
       || lk == 15986               // 'document' '>'
       || lk == 15987               // 'document-node' '>'
       || lk == 15988               // 'element' '>'
       || lk == 15989               // 'else' '>'
       || lk == 15990               // 'empty' '>'
       || lk == 15991               // 'empty-sequence' '>'
       || lk == 15993               // 'end' '>'
       || lk == 15994               // 'eq' '>'
       || lk == 15995               // 'every' '>'
       || lk == 15996               // 'except' '>'
       || lk == 16001               // 'following' '>'
       || lk == 16002               // 'following-sibling' '>'
       || lk == 16003               // 'for' '>'
       || lk == 16004               // 'function' '>'
       || lk == 16005               // 'ge' '>'
       || lk == 16007               // 'group' '>'
       || lk == 16009               // 'gt' '>'
       || lk == 16010               // 'idiv' '>'
       || lk == 16011               // 'if' '>'
       || lk == 16012               // 'import' '>'
       || lk == 16017               // 'instance' '>'
       || lk == 16018               // 'intersect' '>'
       || lk == 16021               // 'is' '>'
       || lk == 16022               // 'item' '>'
       || lk == 16026               // 'le' '>'
       || lk == 16028               // 'let' '>'
       || lk == 16030               // 'lt' '>'
       || lk == 16031               // 'map' '>'
       || lk == 16033               // 'mod' '>'
       || lk == 16035               // 'module' '>'
       || lk == 16036               // 'namespace' '>'
       || lk == 16037               // 'namespace-node' '>'
       || lk == 16038               // 'ne' '>'
       || lk == 16042               // 'node' '>'
       || lk == 16045               // 'only' '>'
       || lk == 16047               // 'or' '>'
       || lk == 16048               // 'order' '>'
       || lk == 16049               // 'ordered' '>'
       || lk == 16051               // 'parent' '>'
       || lk == 16056               // 'preceding' '>'
       || lk == 16057               // 'preceding-sibling' '>'
       || lk == 16060               // 'processing-instruction' '>'
       || lk == 16063               // 'return' '>'
       || lk == 16066               // 'satisfies' '>'
       || lk == 16068               // 'schema-attribute' '>'
       || lk == 16069               // 'schema-element' '>'
       || lk == 16070               // 'self' '>'
       || lk == 16073               // 'some' '>'
       || lk == 16074               // 'stable' '>'
       || lk == 16075               // 'start' '>'
       || lk == 16078               // 'switch' '>'
       || lk == 16079               // 'text' '>'
       || lk == 16081               // 'to' '>'
       || lk == 16083               // 'treat' '>'
       || lk == 16084               // 'try' '>'
       || lk == 16087               // 'typeswitch' '>'
       || lk == 16088               // 'union' '>'
       || lk == 16089               // 'unordered' '>'
       || lk == 16091               // 'validate' '>'
       || lk == 16096               // 'where' '>'
       || lk == 16100               // 'xquery' '>'
       || lk == 16129               // IntegerLiteral '>='
       || lk == 16130               // DecimalLiteral '>='
       || lk == 16131               // DoubleLiteral '>='
       || lk == 16132               // StringLiteral '>='
       || lk == 16133               // URIQualifiedName '>='
       || lk == 16143               // QName^Token '>='
       || lk == 16149               // Wildcard '>='
       || lk == 16171               // '.' '>='
       || lk == 16172               // '..' '>='
       || lk == 16173               // '/' '>='
       || lk == 16205               // 'ancestor' '>='
       || lk == 16206               // 'ancestor-or-self' '>='
       || lk == 16207               // 'and' '>='
       || lk == 16209               // 'array' '>='
       || lk == 16211               // 'ascending' '>='
       || lk == 16213               // 'attribute' '>='
       || lk == 16219               // 'case' '>='
       || lk == 16220               // 'cast' '>='
       || lk == 16221               // 'castable' '>='
       || lk == 16223               // 'child' '>='
       || lk == 16224               // 'collation' '>='
       || lk == 16225               // 'comment' '>='
       || lk == 16231               // 'count' '>='
       || lk == 16234               // 'declare' '>='
       || lk == 16235               // 'default' '>='
       || lk == 16237               // 'descendant' '>='
       || lk == 16238               // 'descendant-or-self' '>='
       || lk == 16239               // 'descending' '>='
       || lk == 16241               // 'div' '>='
       || lk == 16242               // 'document' '>='
       || lk == 16243               // 'document-node' '>='
       || lk == 16244               // 'element' '>='
       || lk == 16245               // 'else' '>='
       || lk == 16246               // 'empty' '>='
       || lk == 16247               // 'empty-sequence' '>='
       || lk == 16249               // 'end' '>='
       || lk == 16250               // 'eq' '>='
       || lk == 16251               // 'every' '>='
       || lk == 16252               // 'except' '>='
       || lk == 16257               // 'following' '>='
       || lk == 16258               // 'following-sibling' '>='
       || lk == 16259               // 'for' '>='
       || lk == 16260               // 'function' '>='
       || lk == 16261               // 'ge' '>='
       || lk == 16263               // 'group' '>='
       || lk == 16265               // 'gt' '>='
       || lk == 16266               // 'idiv' '>='
       || lk == 16267               // 'if' '>='
       || lk == 16268               // 'import' '>='
       || lk == 16273               // 'instance' '>='
       || lk == 16274               // 'intersect' '>='
       || lk == 16277               // 'is' '>='
       || lk == 16278               // 'item' '>='
       || lk == 16282               // 'le' '>='
       || lk == 16284               // 'let' '>='
       || lk == 16286               // 'lt' '>='
       || lk == 16287               // 'map' '>='
       || lk == 16289               // 'mod' '>='
       || lk == 16291               // 'module' '>='
       || lk == 16292               // 'namespace' '>='
       || lk == 16293               // 'namespace-node' '>='
       || lk == 16294               // 'ne' '>='
       || lk == 16298               // 'node' '>='
       || lk == 16301               // 'only' '>='
       || lk == 16303               // 'or' '>='
       || lk == 16304               // 'order' '>='
       || lk == 16305               // 'ordered' '>='
       || lk == 16307               // 'parent' '>='
       || lk == 16312               // 'preceding' '>='
       || lk == 16313               // 'preceding-sibling' '>='
       || lk == 16316               // 'processing-instruction' '>='
       || lk == 16319               // 'return' '>='
       || lk == 16322               // 'satisfies' '>='
       || lk == 16324               // 'schema-attribute' '>='
       || lk == 16325               // 'schema-element' '>='
       || lk == 16326               // 'self' '>='
       || lk == 16329               // 'some' '>='
       || lk == 16330               // 'stable' '>='
       || lk == 16331               // 'start' '>='
       || lk == 16334               // 'switch' '>='
       || lk == 16335               // 'text' '>='
       || lk == 16337               // 'to' '>='
       || lk == 16339               // 'treat' '>='
       || lk == 16340               // 'try' '>='
       || lk == 16343               // 'typeswitch' '>='
       || lk == 16344               // 'union' '>='
       || lk == 16345               // 'unordered' '>='
       || lk == 16347               // 'validate' '>='
       || lk == 16352               // 'where' '>='
       || lk == 16356               // 'xquery' '>='
       || lk == 16385               // IntegerLiteral '>>'
       || lk == 16386               // DecimalLiteral '>>'
       || lk == 16387               // DoubleLiteral '>>'
       || lk == 16388               // StringLiteral '>>'
       || lk == 16389               // URIQualifiedName '>>'
       || lk == 16399               // QName^Token '>>'
       || lk == 16405               // Wildcard '>>'
       || lk == 16427               // '.' '>>'
       || lk == 16428               // '..' '>>'
       || lk == 16429               // '/' '>>'
       || lk == 16461               // 'ancestor' '>>'
       || lk == 16462               // 'ancestor-or-self' '>>'
       || lk == 16463               // 'and' '>>'
       || lk == 16465               // 'array' '>>'
       || lk == 16467               // 'ascending' '>>'
       || lk == 16469               // 'attribute' '>>'
       || lk == 16475               // 'case' '>>'
       || lk == 16476               // 'cast' '>>'
       || lk == 16477               // 'castable' '>>'
       || lk == 16479               // 'child' '>>'
       || lk == 16480               // 'collation' '>>'
       || lk == 16481               // 'comment' '>>'
       || lk == 16487               // 'count' '>>'
       || lk == 16490               // 'declare' '>>'
       || lk == 16491               // 'default' '>>'
       || lk == 16493               // 'descendant' '>>'
       || lk == 16494               // 'descendant-or-self' '>>'
       || lk == 16495               // 'descending' '>>'
       || lk == 16497               // 'div' '>>'
       || lk == 16498               // 'document' '>>'
       || lk == 16499               // 'document-node' '>>'
       || lk == 16500               // 'element' '>>'
       || lk == 16501               // 'else' '>>'
       || lk == 16502               // 'empty' '>>'
       || lk == 16503               // 'empty-sequence' '>>'
       || lk == 16505               // 'end' '>>'
       || lk == 16506               // 'eq' '>>'
       || lk == 16507               // 'every' '>>'
       || lk == 16508               // 'except' '>>'
       || lk == 16513               // 'following' '>>'
       || lk == 16514               // 'following-sibling' '>>'
       || lk == 16515               // 'for' '>>'
       || lk == 16516               // 'function' '>>'
       || lk == 16517               // 'ge' '>>'
       || lk == 16519               // 'group' '>>'
       || lk == 16521               // 'gt' '>>'
       || lk == 16522               // 'idiv' '>>'
       || lk == 16523               // 'if' '>>'
       || lk == 16524               // 'import' '>>'
       || lk == 16529               // 'instance' '>>'
       || lk == 16530               // 'intersect' '>>'
       || lk == 16533               // 'is' '>>'
       || lk == 16534               // 'item' '>>'
       || lk == 16538               // 'le' '>>'
       || lk == 16540               // 'let' '>>'
       || lk == 16542               // 'lt' '>>'
       || lk == 16543               // 'map' '>>'
       || lk == 16545               // 'mod' '>>'
       || lk == 16547               // 'module' '>>'
       || lk == 16548               // 'namespace' '>>'
       || lk == 16549               // 'namespace-node' '>>'
       || lk == 16550               // 'ne' '>>'
       || lk == 16554               // 'node' '>>'
       || lk == 16557               // 'only' '>>'
       || lk == 16559               // 'or' '>>'
       || lk == 16560               // 'order' '>>'
       || lk == 16561               // 'ordered' '>>'
       || lk == 16563               // 'parent' '>>'
       || lk == 16568               // 'preceding' '>>'
       || lk == 16569               // 'preceding-sibling' '>>'
       || lk == 16572               // 'processing-instruction' '>>'
       || lk == 16575               // 'return' '>>'
       || lk == 16578               // 'satisfies' '>>'
       || lk == 16580               // 'schema-attribute' '>>'
       || lk == 16581               // 'schema-element' '>>'
       || lk == 16582               // 'self' '>>'
       || lk == 16585               // 'some' '>>'
       || lk == 16586               // 'stable' '>>'
       || lk == 16587               // 'start' '>>'
       || lk == 16590               // 'switch' '>>'
       || lk == 16591               // 'text' '>>'
       || lk == 16593               // 'to' '>>'
       || lk == 16595               // 'treat' '>>'
       || lk == 16596               // 'try' '>>'
       || lk == 16599               // 'typeswitch' '>>'
       || lk == 16600               // 'union' '>>'
       || lk == 16601               // 'unordered' '>>'
       || lk == 16603               // 'validate' '>>'
       || lk == 16608               // 'where' '>>'
       || lk == 16612               // 'xquery' '>>'
       || lk == 16641               // IntegerLiteral '?'
       || lk == 16642               // DecimalLiteral '?'
       || lk == 16643               // DoubleLiteral '?'
       || lk == 16644               // StringLiteral '?'
       || lk == 16674               // '(' '?'
       || lk == 16679               // '+' '?'
       || lk == 16681               // '-' '?'
       || lk == 16683               // '.' '?'
       || lk == 16685               // '/' '?'
       || lk == 16686               // '//' '?'
       || lk == 16709               // '[' '?'
       || lk == 17186               // '(' '@'
       || lk == 17191               // '+' '@'
       || lk == 17193               // '-' '@'
       || lk == 17197               // '/' '@'
       || lk == 17198               // '//' '@'
       || lk == 17221               // '[' '@'
       || lk == 17665               // IntegerLiteral '['
       || lk == 17666               // DecimalLiteral '['
       || lk == 17667               // DoubleLiteral '['
       || lk == 17668               // StringLiteral '['
       || lk == 17669               // URIQualifiedName '['
       || lk == 17679               // QName^Token '['
       || lk == 17685               // Wildcard '['
       || lk == 17698               // '(' '['
       || lk == 17703               // '+' '['
       || lk == 17705               // '-' '['
       || lk == 17707               // '.' '['
       || lk == 17708               // '..' '['
       || lk == 17709               // '/' '['
       || lk == 17710               // '//' '['
       || lk == 17733               // '[' '['
       || lk == 17741               // 'ancestor' '['
       || lk == 17742               // 'ancestor-or-self' '['
       || lk == 17743               // 'and' '['
       || lk == 17745               // 'array' '['
       || lk == 17747               // 'ascending' '['
       || lk == 17749               // 'attribute' '['
       || lk == 17755               // 'case' '['
       || lk == 17756               // 'cast' '['
       || lk == 17757               // 'castable' '['
       || lk == 17759               // 'child' '['
       || lk == 17760               // 'collation' '['
       || lk == 17761               // 'comment' '['
       || lk == 17767               // 'count' '['
       || lk == 17770               // 'declare' '['
       || lk == 17771               // 'default' '['
       || lk == 17773               // 'descendant' '['
       || lk == 17774               // 'descendant-or-self' '['
       || lk == 17775               // 'descending' '['
       || lk == 17777               // 'div' '['
       || lk == 17778               // 'document' '['
       || lk == 17779               // 'document-node' '['
       || lk == 17780               // 'element' '['
       || lk == 17781               // 'else' '['
       || lk == 17782               // 'empty' '['
       || lk == 17783               // 'empty-sequence' '['
       || lk == 17785               // 'end' '['
       || lk == 17786               // 'eq' '['
       || lk == 17787               // 'every' '['
       || lk == 17788               // 'except' '['
       || lk == 17793               // 'following' '['
       || lk == 17794               // 'following-sibling' '['
       || lk == 17795               // 'for' '['
       || lk == 17796               // 'function' '['
       || lk == 17797               // 'ge' '['
       || lk == 17799               // 'group' '['
       || lk == 17801               // 'gt' '['
       || lk == 17802               // 'idiv' '['
       || lk == 17803               // 'if' '['
       || lk == 17804               // 'import' '['
       || lk == 17809               // 'instance' '['
       || lk == 17810               // 'intersect' '['
       || lk == 17813               // 'is' '['
       || lk == 17814               // 'item' '['
       || lk == 17818               // 'le' '['
       || lk == 17820               // 'let' '['
       || lk == 17822               // 'lt' '['
       || lk == 17823               // 'map' '['
       || lk == 17825               // 'mod' '['
       || lk == 17827               // 'module' '['
       || lk == 17828               // 'namespace' '['
       || lk == 17829               // 'namespace-node' '['
       || lk == 17830               // 'ne' '['
       || lk == 17834               // 'node' '['
       || lk == 17837               // 'only' '['
       || lk == 17839               // 'or' '['
       || lk == 17840               // 'order' '['
       || lk == 17841               // 'ordered' '['
       || lk == 17843               // 'parent' '['
       || lk == 17848               // 'preceding' '['
       || lk == 17849               // 'preceding-sibling' '['
       || lk == 17852               // 'processing-instruction' '['
       || lk == 17855               // 'return' '['
       || lk == 17858               // 'satisfies' '['
       || lk == 17860               // 'schema-attribute' '['
       || lk == 17861               // 'schema-element' '['
       || lk == 17862               // 'self' '['
       || lk == 17865               // 'some' '['
       || lk == 17866               // 'stable' '['
       || lk == 17867               // 'start' '['
       || lk == 17870               // 'switch' '['
       || lk == 17871               // 'text' '['
       || lk == 17873               // 'to' '['
       || lk == 17875               // 'treat' '['
       || lk == 17876               // 'try' '['
       || lk == 17879               // 'typeswitch' '['
       || lk == 17880               // 'union' '['
       || lk == 17881               // 'unordered' '['
       || lk == 17883               // 'validate' '['
       || lk == 17888               // 'where' '['
       || lk == 17892               // 'xquery' '['
       || lk == 17989               // '[' ']'
       || lk == 18722               // '(' '``['
       || lk == 18727               // '+' '``['
       || lk == 18729               // '-' '``['
       || lk == 18733               // '/' '``['
       || lk == 18734               // '//' '``['
       || lk == 18757               // '[' '``['
       || lk == 19743               // '$' 'ancestor'
       || lk == 19744               // '%' 'ancestor'
       || lk == 19746               // '(' 'ancestor'
       || lk == 19747               // '(#' 'ancestor'
       || lk == 19751               // '+' 'ancestor'
       || lk == 19753               // '-' 'ancestor'
       || lk == 19757               // '/' 'ancestor'
       || lk == 19758               // '//' 'ancestor'
       || lk == 19765               // '<' 'ancestor'
       || lk == 19779               // '@' 'ancestor'
       || lk == 19781               // '[' 'ancestor'
       || lk == 19797               // 'attribute' 'ancestor'
       || lk == 19828               // 'element' 'ancestor'
       || lk == 19999               // '$' 'ancestor-or-self'
       || lk == 20000               // '%' 'ancestor-or-self'
       || lk == 20002               // '(' 'ancestor-or-self'
       || lk == 20003               // '(#' 'ancestor-or-self'
       || lk == 20007               // '+' 'ancestor-or-self'
       || lk == 20009               // '-' 'ancestor-or-self'
       || lk == 20013               // '/' 'ancestor-or-self'
       || lk == 20014               // '//' 'ancestor-or-self'
       || lk == 20021               // '<' 'ancestor-or-self'
       || lk == 20035               // '@' 'ancestor-or-self'
       || lk == 20037               // '[' 'ancestor-or-self'
       || lk == 20053               // 'attribute' 'ancestor-or-self'
       || lk == 20084               // 'element' 'ancestor-or-self'
       || lk == 20225               // IntegerLiteral 'and'
       || lk == 20226               // DecimalLiteral 'and'
       || lk == 20227               // DoubleLiteral 'and'
       || lk == 20228               // StringLiteral 'and'
       || lk == 20229               // URIQualifiedName 'and'
       || lk == 20239               // QName^Token 'and'
       || lk == 20245               // Wildcard 'and'
       || lk == 20255               // '$' 'and'
       || lk == 20256               // '%' 'and'
       || lk == 20258               // '(' 'and'
       || lk == 20259               // '(#' 'and'
       || lk == 20263               // '+' 'and'
       || lk == 20265               // '-' 'and'
       || lk == 20267               // '.' 'and'
       || lk == 20268               // '..' 'and'
       || lk == 20269               // '/' 'and'
       || lk == 20270               // '//' 'and'
       || lk == 20277               // '<' 'and'
       || lk == 20289               // '?' 'and'
       || lk == 20291               // '@' 'and'
       || lk == 20293               // '[' 'and'
       || lk == 20301               // 'ancestor' 'and'
       || lk == 20302               // 'ancestor-or-self' 'and'
       || lk == 20303               // 'and' 'and'
       || lk == 20305               // 'array' 'and'
       || lk == 20307               // 'ascending' 'and'
       || lk == 20309               // 'attribute' 'and'
       || lk == 20315               // 'case' 'and'
       || lk == 20316               // 'cast' 'and'
       || lk == 20317               // 'castable' 'and'
       || lk == 20319               // 'child' 'and'
       || lk == 20320               // 'collation' 'and'
       || lk == 20321               // 'comment' 'and'
       || lk == 20327               // 'count' 'and'
       || lk == 20330               // 'declare' 'and'
       || lk == 20331               // 'default' 'and'
       || lk == 20333               // 'descendant' 'and'
       || lk == 20334               // 'descendant-or-self' 'and'
       || lk == 20335               // 'descending' 'and'
       || lk == 20337               // 'div' 'and'
       || lk == 20338               // 'document' 'and'
       || lk == 20339               // 'document-node' 'and'
       || lk == 20340               // 'element' 'and'
       || lk == 20341               // 'else' 'and'
       || lk == 20342               // 'empty' 'and'
       || lk == 20343               // 'empty-sequence' 'and'
       || lk == 20345               // 'end' 'and'
       || lk == 20346               // 'eq' 'and'
       || lk == 20347               // 'every' 'and'
       || lk == 20348               // 'except' 'and'
       || lk == 20353               // 'following' 'and'
       || lk == 20354               // 'following-sibling' 'and'
       || lk == 20355               // 'for' 'and'
       || lk == 20356               // 'function' 'and'
       || lk == 20357               // 'ge' 'and'
       || lk == 20359               // 'group' 'and'
       || lk == 20361               // 'gt' 'and'
       || lk == 20362               // 'idiv' 'and'
       || lk == 20363               // 'if' 'and'
       || lk == 20364               // 'import' 'and'
       || lk == 20369               // 'instance' 'and'
       || lk == 20370               // 'intersect' 'and'
       || lk == 20373               // 'is' 'and'
       || lk == 20374               // 'item' 'and'
       || lk == 20378               // 'le' 'and'
       || lk == 20380               // 'let' 'and'
       || lk == 20382               // 'lt' 'and'
       || lk == 20383               // 'map' 'and'
       || lk == 20385               // 'mod' 'and'
       || lk == 20387               // 'module' 'and'
       || lk == 20388               // 'namespace' 'and'
       || lk == 20389               // 'namespace-node' 'and'
       || lk == 20390               // 'ne' 'and'
       || lk == 20394               // 'node' 'and'
       || lk == 20397               // 'only' 'and'
       || lk == 20399               // 'or' 'and'
       || lk == 20400               // 'order' 'and'
       || lk == 20401               // 'ordered' 'and'
       || lk == 20403               // 'parent' 'and'
       || lk == 20408               // 'preceding' 'and'
       || lk == 20409               // 'preceding-sibling' 'and'
       || lk == 20412               // 'processing-instruction' 'and'
       || lk == 20415               // 'return' 'and'
       || lk == 20418               // 'satisfies' 'and'
       || lk == 20420               // 'schema-attribute' 'and'
       || lk == 20421               // 'schema-element' 'and'
       || lk == 20422               // 'self' 'and'
       || lk == 20425               // 'some' 'and'
       || lk == 20426               // 'stable' 'and'
       || lk == 20427               // 'start' 'and'
       || lk == 20430               // 'switch' 'and'
       || lk == 20431               // 'text' 'and'
       || lk == 20433               // 'to' 'and'
       || lk == 20435               // 'treat' 'and'
       || lk == 20436               // 'try' 'and'
       || lk == 20439               // 'typeswitch' 'and'
       || lk == 20440               // 'union' 'and'
       || lk == 20441               // 'unordered' 'and'
       || lk == 20443               // 'validate' 'and'
       || lk == 20448               // 'where' 'and'
       || lk == 20452               // 'xquery' 'and'
       || lk == 20767               // '$' 'array'
       || lk == 20768               // '%' 'array'
       || lk == 20770               // '(' 'array'
       || lk == 20771               // '(#' 'array'
       || lk == 20775               // '+' 'array'
       || lk == 20777               // '-' 'array'
       || lk == 20781               // '/' 'array'
       || lk == 20782               // '//' 'array'
       || lk == 20789               // '<' 'array'
       || lk == 20803               // '@' 'array'
       || lk == 20805               // '[' 'array'
       || lk == 20821               // 'attribute' 'array'
       || lk == 20852               // 'element' 'array'
       || lk == 21279               // '$' 'ascending'
       || lk == 21280               // '%' 'ascending'
       || lk == 21282               // '(' 'ascending'
       || lk == 21283               // '(#' 'ascending'
       || lk == 21287               // '+' 'ascending'
       || lk == 21289               // '-' 'ascending'
       || lk == 21293               // '/' 'ascending'
       || lk == 21294               // '//' 'ascending'
       || lk == 21301               // '<' 'ascending'
       || lk == 21313               // '?' 'ascending'
       || lk == 21315               // '@' 'ascending'
       || lk == 21317               // '[' 'ascending'
       || lk == 21333               // 'attribute' 'ascending'
       || lk == 21364               // 'element' 'ascending'
       || lk == 21412               // 'namespace' 'ascending'
       || lk == 21436               // 'processing-instruction' 'ascending'
       || lk == 21791               // '$' 'attribute'
       || lk == 21792               // '%' 'attribute'
       || lk == 21794               // '(' 'attribute'
       || lk == 21795               // '(#' 'attribute'
       || lk == 21799               // '+' 'attribute'
       || lk == 21801               // '-' 'attribute'
       || lk == 21805               // '/' 'attribute'
       || lk == 21806               // '//' 'attribute'
       || lk == 21813               // '<' 'attribute'
       || lk == 21827               // '@' 'attribute'
       || lk == 21829               // '[' 'attribute'
       || lk == 21845               // 'attribute' 'attribute'
       || lk == 21876               // 'element' 'attribute'
       || lk == 23327               // '$' 'case'
       || lk == 23328               // '%' 'case'
       || lk == 23330               // '(' 'case'
       || lk == 23331               // '(#' 'case'
       || lk == 23335               // '+' 'case'
       || lk == 23337               // '-' 'case'
       || lk == 23341               // '/' 'case'
       || lk == 23342               // '//' 'case'
       || lk == 23349               // '<' 'case'
       || lk == 23361               // '?' 'case'
       || lk == 23363               // '@' 'case'
       || lk == 23365               // '[' 'case'
       || lk == 23381               // 'attribute' 'case'
       || lk == 23412               // 'element' 'case'
       || lk == 23460               // 'namespace' 'case'
       || lk == 23484               // 'processing-instruction' 'case'
       || lk == 23553               // IntegerLiteral 'cast'
       || lk == 23554               // DecimalLiteral 'cast'
       || lk == 23555               // DoubleLiteral 'cast'
       || lk == 23556               // StringLiteral 'cast'
       || lk == 23557               // URIQualifiedName 'cast'
       || lk == 23567               // QName^Token 'cast'
       || lk == 23573               // Wildcard 'cast'
       || lk == 23583               // '$' 'cast'
       || lk == 23584               // '%' 'cast'
       || lk == 23586               // '(' 'cast'
       || lk == 23587               // '(#' 'cast'
       || lk == 23591               // '+' 'cast'
       || lk == 23593               // '-' 'cast'
       || lk == 23595               // '.' 'cast'
       || lk == 23596               // '..' 'cast'
       || lk == 23597               // '/' 'cast'
       || lk == 23598               // '//' 'cast'
       || lk == 23605               // '<' 'cast'
       || lk == 23617               // '?' 'cast'
       || lk == 23619               // '@' 'cast'
       || lk == 23621               // '[' 'cast'
       || lk == 23629               // 'ancestor' 'cast'
       || lk == 23630               // 'ancestor-or-self' 'cast'
       || lk == 23631               // 'and' 'cast'
       || lk == 23633               // 'array' 'cast'
       || lk == 23635               // 'ascending' 'cast'
       || lk == 23637               // 'attribute' 'cast'
       || lk == 23643               // 'case' 'cast'
       || lk == 23644               // 'cast' 'cast'
       || lk == 23645               // 'castable' 'cast'
       || lk == 23647               // 'child' 'cast'
       || lk == 23648               // 'collation' 'cast'
       || lk == 23649               // 'comment' 'cast'
       || lk == 23655               // 'count' 'cast'
       || lk == 23658               // 'declare' 'cast'
       || lk == 23659               // 'default' 'cast'
       || lk == 23661               // 'descendant' 'cast'
       || lk == 23662               // 'descendant-or-self' 'cast'
       || lk == 23663               // 'descending' 'cast'
       || lk == 23665               // 'div' 'cast'
       || lk == 23666               // 'document' 'cast'
       || lk == 23667               // 'document-node' 'cast'
       || lk == 23668               // 'element' 'cast'
       || lk == 23669               // 'else' 'cast'
       || lk == 23670               // 'empty' 'cast'
       || lk == 23671               // 'empty-sequence' 'cast'
       || lk == 23673               // 'end' 'cast'
       || lk == 23674               // 'eq' 'cast'
       || lk == 23675               // 'every' 'cast'
       || lk == 23676               // 'except' 'cast'
       || lk == 23681               // 'following' 'cast'
       || lk == 23682               // 'following-sibling' 'cast'
       || lk == 23683               // 'for' 'cast'
       || lk == 23684               // 'function' 'cast'
       || lk == 23685               // 'ge' 'cast'
       || lk == 23687               // 'group' 'cast'
       || lk == 23689               // 'gt' 'cast'
       || lk == 23690               // 'idiv' 'cast'
       || lk == 23691               // 'if' 'cast'
       || lk == 23692               // 'import' 'cast'
       || lk == 23697               // 'instance' 'cast'
       || lk == 23698               // 'intersect' 'cast'
       || lk == 23701               // 'is' 'cast'
       || lk == 23702               // 'item' 'cast'
       || lk == 23706               // 'le' 'cast'
       || lk == 23708               // 'let' 'cast'
       || lk == 23710               // 'lt' 'cast'
       || lk == 23711               // 'map' 'cast'
       || lk == 23713               // 'mod' 'cast'
       || lk == 23715               // 'module' 'cast'
       || lk == 23716               // 'namespace' 'cast'
       || lk == 23717               // 'namespace-node' 'cast'
       || lk == 23718               // 'ne' 'cast'
       || lk == 23722               // 'node' 'cast'
       || lk == 23725               // 'only' 'cast'
       || lk == 23727               // 'or' 'cast'
       || lk == 23728               // 'order' 'cast'
       || lk == 23729               // 'ordered' 'cast'
       || lk == 23731               // 'parent' 'cast'
       || lk == 23736               // 'preceding' 'cast'
       || lk == 23737               // 'preceding-sibling' 'cast'
       || lk == 23740               // 'processing-instruction' 'cast'
       || lk == 23743               // 'return' 'cast'
       || lk == 23746               // 'satisfies' 'cast'
       || lk == 23748               // 'schema-attribute' 'cast'
       || lk == 23749               // 'schema-element' 'cast'
       || lk == 23750               // 'self' 'cast'
       || lk == 23753               // 'some' 'cast'
       || lk == 23754               // 'stable' 'cast'
       || lk == 23755               // 'start' 'cast'
       || lk == 23758               // 'switch' 'cast'
       || lk == 23759               // 'text' 'cast'
       || lk == 23761               // 'to' 'cast'
       || lk == 23763               // 'treat' 'cast'
       || lk == 23764               // 'try' 'cast'
       || lk == 23767               // 'typeswitch' 'cast'
       || lk == 23768               // 'union' 'cast'
       || lk == 23769               // 'unordered' 'cast'
       || lk == 23771               // 'validate' 'cast'
       || lk == 23776               // 'where' 'cast'
       || lk == 23780               // 'xquery' 'cast'
       || lk == 23809               // IntegerLiteral 'castable'
       || lk == 23810               // DecimalLiteral 'castable'
       || lk == 23811               // DoubleLiteral 'castable'
       || lk == 23812               // StringLiteral 'castable'
       || lk == 23813               // URIQualifiedName 'castable'
       || lk == 23823               // QName^Token 'castable'
       || lk == 23829               // Wildcard 'castable'
       || lk == 23839               // '$' 'castable'
       || lk == 23840               // '%' 'castable'
       || lk == 23842               // '(' 'castable'
       || lk == 23843               // '(#' 'castable'
       || lk == 23847               // '+' 'castable'
       || lk == 23849               // '-' 'castable'
       || lk == 23851               // '.' 'castable'
       || lk == 23852               // '..' 'castable'
       || lk == 23853               // '/' 'castable'
       || lk == 23854               // '//' 'castable'
       || lk == 23861               // '<' 'castable'
       || lk == 23873               // '?' 'castable'
       || lk == 23875               // '@' 'castable'
       || lk == 23877               // '[' 'castable'
       || lk == 23885               // 'ancestor' 'castable'
       || lk == 23886               // 'ancestor-or-self' 'castable'
       || lk == 23887               // 'and' 'castable'
       || lk == 23889               // 'array' 'castable'
       || lk == 23891               // 'ascending' 'castable'
       || lk == 23893               // 'attribute' 'castable'
       || lk == 23899               // 'case' 'castable'
       || lk == 23900               // 'cast' 'castable'
       || lk == 23901               // 'castable' 'castable'
       || lk == 23903               // 'child' 'castable'
       || lk == 23904               // 'collation' 'castable'
       || lk == 23905               // 'comment' 'castable'
       || lk == 23911               // 'count' 'castable'
       || lk == 23914               // 'declare' 'castable'
       || lk == 23915               // 'default' 'castable'
       || lk == 23917               // 'descendant' 'castable'
       || lk == 23918               // 'descendant-or-self' 'castable'
       || lk == 23919               // 'descending' 'castable'
       || lk == 23921               // 'div' 'castable'
       || lk == 23922               // 'document' 'castable'
       || lk == 23923               // 'document-node' 'castable'
       || lk == 23924               // 'element' 'castable'
       || lk == 23925               // 'else' 'castable'
       || lk == 23926               // 'empty' 'castable'
       || lk == 23927               // 'empty-sequence' 'castable'
       || lk == 23929               // 'end' 'castable'
       || lk == 23930               // 'eq' 'castable'
       || lk == 23931               // 'every' 'castable'
       || lk == 23932               // 'except' 'castable'
       || lk == 23937               // 'following' 'castable'
       || lk == 23938               // 'following-sibling' 'castable'
       || lk == 23939               // 'for' 'castable'
       || lk == 23940               // 'function' 'castable'
       || lk == 23941               // 'ge' 'castable'
       || lk == 23943               // 'group' 'castable'
       || lk == 23945               // 'gt' 'castable'
       || lk == 23946               // 'idiv' 'castable'
       || lk == 23947               // 'if' 'castable'
       || lk == 23948               // 'import' 'castable'
       || lk == 23953               // 'instance' 'castable'
       || lk == 23954               // 'intersect' 'castable'
       || lk == 23957               // 'is' 'castable'
       || lk == 23958               // 'item' 'castable'
       || lk == 23962               // 'le' 'castable'
       || lk == 23964               // 'let' 'castable'
       || lk == 23966               // 'lt' 'castable'
       || lk == 23967               // 'map' 'castable'
       || lk == 23969               // 'mod' 'castable'
       || lk == 23971               // 'module' 'castable'
       || lk == 23972               // 'namespace' 'castable'
       || lk == 23973               // 'namespace-node' 'castable'
       || lk == 23974               // 'ne' 'castable'
       || lk == 23978               // 'node' 'castable'
       || lk == 23981               // 'only' 'castable'
       || lk == 23983               // 'or' 'castable'
       || lk == 23984               // 'order' 'castable'
       || lk == 23985               // 'ordered' 'castable'
       || lk == 23987               // 'parent' 'castable'
       || lk == 23992               // 'preceding' 'castable'
       || lk == 23993               // 'preceding-sibling' 'castable'
       || lk == 23996               // 'processing-instruction' 'castable'
       || lk == 23999               // 'return' 'castable'
       || lk == 24002               // 'satisfies' 'castable'
       || lk == 24004               // 'schema-attribute' 'castable'
       || lk == 24005               // 'schema-element' 'castable'
       || lk == 24006               // 'self' 'castable'
       || lk == 24009               // 'some' 'castable'
       || lk == 24010               // 'stable' 'castable'
       || lk == 24011               // 'start' 'castable'
       || lk == 24014               // 'switch' 'castable'
       || lk == 24015               // 'text' 'castable'
       || lk == 24017               // 'to' 'castable'
       || lk == 24019               // 'treat' 'castable'
       || lk == 24020               // 'try' 'castable'
       || lk == 24023               // 'typeswitch' 'castable'
       || lk == 24024               // 'union' 'castable'
       || lk == 24025               // 'unordered' 'castable'
       || lk == 24027               // 'validate' 'castable'
       || lk == 24032               // 'where' 'castable'
       || lk == 24036               // 'xquery' 'castable'
       || lk == 24351               // '$' 'child'
       || lk == 24352               // '%' 'child'
       || lk == 24354               // '(' 'child'
       || lk == 24355               // '(#' 'child'
       || lk == 24359               // '+' 'child'
       || lk == 24361               // '-' 'child'
       || lk == 24365               // '/' 'child'
       || lk == 24366               // '//' 'child'
       || lk == 24373               // '<' 'child'
       || lk == 24387               // '@' 'child'
       || lk == 24389               // '[' 'child'
       || lk == 24405               // 'attribute' 'child'
       || lk == 24436               // 'element' 'child'
       || lk == 24607               // '$' 'collation'
       || lk == 24608               // '%' 'collation'
       || lk == 24610               // '(' 'collation'
       || lk == 24611               // '(#' 'collation'
       || lk == 24615               // '+' 'collation'
       || lk == 24617               // '-' 'collation'
       || lk == 24621               // '/' 'collation'
       || lk == 24622               // '//' 'collation'
       || lk == 24629               // '<' 'collation'
       || lk == 24641               // '?' 'collation'
       || lk == 24643               // '@' 'collation'
       || lk == 24645               // '[' 'collation'
       || lk == 24661               // 'attribute' 'collation'
       || lk == 24692               // 'element' 'collation'
       || lk == 24740               // 'namespace' 'collation'
       || lk == 24764               // 'processing-instruction' 'collation'
       || lk == 24863               // '$' 'comment'
       || lk == 24864               // '%' 'comment'
       || lk == 24866               // '(' 'comment'
       || lk == 24867               // '(#' 'comment'
       || lk == 24871               // '+' 'comment'
       || lk == 24873               // '-' 'comment'
       || lk == 24877               // '/' 'comment'
       || lk == 24878               // '//' 'comment'
       || lk == 24885               // '<' 'comment'
       || lk == 24899               // '@' 'comment'
       || lk == 24901               // '[' 'comment'
       || lk == 24917               // 'attribute' 'comment'
       || lk == 24948               // 'element' 'comment'
       || lk == 25890               // '(' 'copy'
       || lk == 25925               // '[' 'copy'
       || lk == 26399               // '$' 'count'
       || lk == 26400               // '%' 'count'
       || lk == 26402               // '(' 'count'
       || lk == 26403               // '(#' 'count'
       || lk == 26407               // '+' 'count'
       || lk == 26409               // '-' 'count'
       || lk == 26413               // '/' 'count'
       || lk == 26414               // '//' 'count'
       || lk == 26421               // '<' 'count'
       || lk == 26433               // '?' 'count'
       || lk == 26435               // '@' 'count'
       || lk == 26437               // '[' 'count'
       || lk == 26453               // 'attribute' 'count'
       || lk == 26484               // 'element' 'count'
       || lk == 26532               // 'namespace' 'count'
       || lk == 26556               // 'processing-instruction' 'count'
       || lk == 27167               // '$' 'declare'
       || lk == 27168               // '%' 'declare'
       || lk == 27170               // '(' 'declare'
       || lk == 27171               // '(#' 'declare'
       || lk == 27175               // '+' 'declare'
       || lk == 27177               // '-' 'declare'
       || lk == 27181               // '/' 'declare'
       || lk == 27182               // '//' 'declare'
       || lk == 27189               // '<' 'declare'
       || lk == 27203               // '@' 'declare'
       || lk == 27205               // '[' 'declare'
       || lk == 27221               // 'attribute' 'declare'
       || lk == 27252               // 'element' 'declare'
       || lk == 27423               // '$' 'default'
       || lk == 27424               // '%' 'default'
       || lk == 27426               // '(' 'default'
       || lk == 27427               // '(#' 'default'
       || lk == 27431               // '+' 'default'
       || lk == 27433               // '-' 'default'
       || lk == 27437               // '/' 'default'
       || lk == 27438               // '//' 'default'
       || lk == 27445               // '<' 'default'
       || lk == 27457               // '?' 'default'
       || lk == 27459               // '@' 'default'
       || lk == 27461               // '[' 'default'
       || lk == 27477               // 'attribute' 'default'
       || lk == 27508               // 'element' 'default'
       || lk == 27556               // 'namespace' 'default'
       || lk == 27580               // 'processing-instruction' 'default'
       || lk == 27682               // '(' 'delete'
       || lk == 27717               // '[' 'delete'
       || lk == 27935               // '$' 'descendant'
       || lk == 27936               // '%' 'descendant'
       || lk == 27938               // '(' 'descendant'
       || lk == 27939               // '(#' 'descendant'
       || lk == 27943               // '+' 'descendant'
       || lk == 27945               // '-' 'descendant'
       || lk == 27949               // '/' 'descendant'
       || lk == 27950               // '//' 'descendant'
       || lk == 27957               // '<' 'descendant'
       || lk == 27971               // '@' 'descendant'
       || lk == 27973               // '[' 'descendant'
       || lk == 27989               // 'attribute' 'descendant'
       || lk == 28020               // 'element' 'descendant'
       || lk == 28191               // '$' 'descendant-or-self'
       || lk == 28192               // '%' 'descendant-or-self'
       || lk == 28194               // '(' 'descendant-or-self'
       || lk == 28195               // '(#' 'descendant-or-self'
       || lk == 28199               // '+' 'descendant-or-self'
       || lk == 28201               // '-' 'descendant-or-self'
       || lk == 28205               // '/' 'descendant-or-self'
       || lk == 28206               // '//' 'descendant-or-self'
       || lk == 28213               // '<' 'descendant-or-self'
       || lk == 28227               // '@' 'descendant-or-self'
       || lk == 28229               // '[' 'descendant-or-self'
       || lk == 28245               // 'attribute' 'descendant-or-self'
       || lk == 28276               // 'element' 'descendant-or-self'
       || lk == 28447               // '$' 'descending'
       || lk == 28448               // '%' 'descending'
       || lk == 28450               // '(' 'descending'
       || lk == 28451               // '(#' 'descending'
       || lk == 28455               // '+' 'descending'
       || lk == 28457               // '-' 'descending'
       || lk == 28461               // '/' 'descending'
       || lk == 28462               // '//' 'descending'
       || lk == 28469               // '<' 'descending'
       || lk == 28481               // '?' 'descending'
       || lk == 28483               // '@' 'descending'
       || lk == 28485               // '[' 'descending'
       || lk == 28501               // 'attribute' 'descending'
       || lk == 28532               // 'element' 'descending'
       || lk == 28580               // 'namespace' 'descending'
       || lk == 28604               // 'processing-instruction' 'descending'
       || lk == 28929               // IntegerLiteral 'div'
       || lk == 28930               // DecimalLiteral 'div'
       || lk == 28931               // DoubleLiteral 'div'
       || lk == 28932               // StringLiteral 'div'
       || lk == 28933               // URIQualifiedName 'div'
       || lk == 28943               // QName^Token 'div'
       || lk == 28949               // Wildcard 'div'
       || lk == 28959               // '$' 'div'
       || lk == 28960               // '%' 'div'
       || lk == 28962               // '(' 'div'
       || lk == 28963               // '(#' 'div'
       || lk == 28967               // '+' 'div'
       || lk == 28969               // '-' 'div'
       || lk == 28971               // '.' 'div'
       || lk == 28972               // '..' 'div'
       || lk == 28973               // '/' 'div'
       || lk == 28974               // '//' 'div'
       || lk == 28981               // '<' 'div'
       || lk == 28993               // '?' 'div'
       || lk == 28995               // '@' 'div'
       || lk == 28997               // '[' 'div'
       || lk == 29005               // 'ancestor' 'div'
       || lk == 29006               // 'ancestor-or-self' 'div'
       || lk == 29007               // 'and' 'div'
       || lk == 29009               // 'array' 'div'
       || lk == 29011               // 'ascending' 'div'
       || lk == 29013               // 'attribute' 'div'
       || lk == 29019               // 'case' 'div'
       || lk == 29020               // 'cast' 'div'
       || lk == 29021               // 'castable' 'div'
       || lk == 29023               // 'child' 'div'
       || lk == 29024               // 'collation' 'div'
       || lk == 29025               // 'comment' 'div'
       || lk == 29031               // 'count' 'div'
       || lk == 29034               // 'declare' 'div'
       || lk == 29035               // 'default' 'div'
       || lk == 29037               // 'descendant' 'div'
       || lk == 29038               // 'descendant-or-self' 'div'
       || lk == 29039               // 'descending' 'div'
       || lk == 29041               // 'div' 'div'
       || lk == 29042               // 'document' 'div'
       || lk == 29043               // 'document-node' 'div'
       || lk == 29044               // 'element' 'div'
       || lk == 29045               // 'else' 'div'
       || lk == 29046               // 'empty' 'div'
       || lk == 29047               // 'empty-sequence' 'div'
       || lk == 29049               // 'end' 'div'
       || lk == 29050               // 'eq' 'div'
       || lk == 29051               // 'every' 'div'
       || lk == 29052               // 'except' 'div'
       || lk == 29057               // 'following' 'div'
       || lk == 29058               // 'following-sibling' 'div'
       || lk == 29059               // 'for' 'div'
       || lk == 29060               // 'function' 'div'
       || lk == 29061               // 'ge' 'div'
       || lk == 29063               // 'group' 'div'
       || lk == 29065               // 'gt' 'div'
       || lk == 29066               // 'idiv' 'div'
       || lk == 29067               // 'if' 'div'
       || lk == 29068               // 'import' 'div'
       || lk == 29073               // 'instance' 'div'
       || lk == 29074               // 'intersect' 'div'
       || lk == 29077               // 'is' 'div'
       || lk == 29078               // 'item' 'div'
       || lk == 29082               // 'le' 'div'
       || lk == 29084               // 'let' 'div'
       || lk == 29086               // 'lt' 'div'
       || lk == 29087               // 'map' 'div'
       || lk == 29089               // 'mod' 'div'
       || lk == 29091               // 'module' 'div'
       || lk == 29092               // 'namespace' 'div'
       || lk == 29093               // 'namespace-node' 'div'
       || lk == 29094               // 'ne' 'div'
       || lk == 29098               // 'node' 'div'
       || lk == 29101               // 'only' 'div'
       || lk == 29103               // 'or' 'div'
       || lk == 29104               // 'order' 'div'
       || lk == 29105               // 'ordered' 'div'
       || lk == 29107               // 'parent' 'div'
       || lk == 29112               // 'preceding' 'div'
       || lk == 29113               // 'preceding-sibling' 'div'
       || lk == 29116               // 'processing-instruction' 'div'
       || lk == 29119               // 'return' 'div'
       || lk == 29122               // 'satisfies' 'div'
       || lk == 29124               // 'schema-attribute' 'div'
       || lk == 29125               // 'schema-element' 'div'
       || lk == 29126               // 'self' 'div'
       || lk == 29129               // 'some' 'div'
       || lk == 29130               // 'stable' 'div'
       || lk == 29131               // 'start' 'div'
       || lk == 29134               // 'switch' 'div'
       || lk == 29135               // 'text' 'div'
       || lk == 29137               // 'to' 'div'
       || lk == 29139               // 'treat' 'div'
       || lk == 29140               // 'try' 'div'
       || lk == 29143               // 'typeswitch' 'div'
       || lk == 29144               // 'union' 'div'
       || lk == 29145               // 'unordered' 'div'
       || lk == 29147               // 'validate' 'div'
       || lk == 29152               // 'where' 'div'
       || lk == 29156               // 'xquery' 'div'
       || lk == 29215               // '$' 'document'
       || lk == 29216               // '%' 'document'
       || lk == 29218               // '(' 'document'
       || lk == 29219               // '(#' 'document'
       || lk == 29223               // '+' 'document'
       || lk == 29225               // '-' 'document'
       || lk == 29229               // '/' 'document'
       || lk == 29230               // '//' 'document'
       || lk == 29237               // '<' 'document'
       || lk == 29251               // '@' 'document'
       || lk == 29253               // '[' 'document'
       || lk == 29269               // 'attribute' 'document'
       || lk == 29300               // 'element' 'document'
       || lk == 29471               // '$' 'document-node'
       || lk == 29472               // '%' 'document-node'
       || lk == 29474               // '(' 'document-node'
       || lk == 29475               // '(#' 'document-node'
       || lk == 29479               // '+' 'document-node'
       || lk == 29481               // '-' 'document-node'
       || lk == 29485               // '/' 'document-node'
       || lk == 29486               // '//' 'document-node'
       || lk == 29493               // '<' 'document-node'
       || lk == 29507               // '@' 'document-node'
       || lk == 29509               // '[' 'document-node'
       || lk == 29525               // 'attribute' 'document-node'
       || lk == 29556               // 'element' 'document-node'
       || lk == 29727               // '$' 'element'
       || lk == 29728               // '%' 'element'
       || lk == 29730               // '(' 'element'
       || lk == 29731               // '(#' 'element'
       || lk == 29735               // '+' 'element'
       || lk == 29737               // '-' 'element'
       || lk == 29741               // '/' 'element'
       || lk == 29742               // '//' 'element'
       || lk == 29749               // '<' 'element'
       || lk == 29763               // '@' 'element'
       || lk == 29765               // '[' 'element'
       || lk == 29781               // 'attribute' 'element'
       || lk == 29812               // 'element' 'element'
       || lk == 29983               // '$' 'else'
       || lk == 29984               // '%' 'else'
       || lk == 29986               // '(' 'else'
       || lk == 29987               // '(#' 'else'
       || lk == 29991               // '+' 'else'
       || lk == 29993               // '-' 'else'
       || lk == 29997               // '/' 'else'
       || lk == 29998               // '//' 'else'
       || lk == 30005               // '<' 'else'
       || lk == 30017               // '?' 'else'
       || lk == 30019               // '@' 'else'
       || lk == 30021               // '[' 'else'
       || lk == 30037               // 'attribute' 'else'
       || lk == 30068               // 'element' 'else'
       || lk == 30116               // 'namespace' 'else'
       || lk == 30140               // 'processing-instruction' 'else'
       || lk == 30239               // '$' 'empty'
       || lk == 30240               // '%' 'empty'
       || lk == 30242               // '(' 'empty'
       || lk == 30243               // '(#' 'empty'
       || lk == 30247               // '+' 'empty'
       || lk == 30249               // '-' 'empty'
       || lk == 30253               // '/' 'empty'
       || lk == 30254               // '//' 'empty'
       || lk == 30261               // '<' 'empty'
       || lk == 30273               // '?' 'empty'
       || lk == 30275               // '@' 'empty'
       || lk == 30277               // '[' 'empty'
       || lk == 30293               // 'attribute' 'empty'
       || lk == 30324               // 'element' 'empty'
       || lk == 30372               // 'namespace' 'empty'
       || lk == 30396               // 'processing-instruction' 'empty'
       || lk == 30495               // '$' 'empty-sequence'
       || lk == 30496               // '%' 'empty-sequence'
       || lk == 30498               // '(' 'empty-sequence'
       || lk == 30499               // '(#' 'empty-sequence'
       || lk == 30503               // '+' 'empty-sequence'
       || lk == 30505               // '-' 'empty-sequence'
       || lk == 30509               // '/' 'empty-sequence'
       || lk == 30510               // '//' 'empty-sequence'
       || lk == 30517               // '<' 'empty-sequence'
       || lk == 30531               // '@' 'empty-sequence'
       || lk == 30533               // '[' 'empty-sequence'
       || lk == 30549               // 'attribute' 'empty-sequence'
       || lk == 30580               // 'element' 'empty-sequence'
       || lk == 31007               // '$' 'end'
       || lk == 31008               // '%' 'end'
       || lk == 31010               // '(' 'end'
       || lk == 31011               // '(#' 'end'
       || lk == 31015               // '+' 'end'
       || lk == 31017               // '-' 'end'
       || lk == 31021               // '/' 'end'
       || lk == 31022               // '//' 'end'
       || lk == 31029               // '<' 'end'
       || lk == 31041               // '?' 'end'
       || lk == 31043               // '@' 'end'
       || lk == 31045               // '[' 'end'
       || lk == 31061               // 'attribute' 'end'
       || lk == 31092               // 'element' 'end'
       || lk == 31140               // 'namespace' 'end'
       || lk == 31164               // 'processing-instruction' 'end'
       || lk == 31233               // IntegerLiteral 'eq'
       || lk == 31234               // DecimalLiteral 'eq'
       || lk == 31235               // DoubleLiteral 'eq'
       || lk == 31236               // StringLiteral 'eq'
       || lk == 31237               // URIQualifiedName 'eq'
       || lk == 31247               // QName^Token 'eq'
       || lk == 31253               // Wildcard 'eq'
       || lk == 31263               // '$' 'eq'
       || lk == 31264               // '%' 'eq'
       || lk == 31266               // '(' 'eq'
       || lk == 31267               // '(#' 'eq'
       || lk == 31271               // '+' 'eq'
       || lk == 31273               // '-' 'eq'
       || lk == 31275               // '.' 'eq'
       || lk == 31276               // '..' 'eq'
       || lk == 31277               // '/' 'eq'
       || lk == 31278               // '//' 'eq'
       || lk == 31285               // '<' 'eq'
       || lk == 31297               // '?' 'eq'
       || lk == 31299               // '@' 'eq'
       || lk == 31301               // '[' 'eq'
       || lk == 31309               // 'ancestor' 'eq'
       || lk == 31310               // 'ancestor-or-self' 'eq'
       || lk == 31311               // 'and' 'eq'
       || lk == 31313               // 'array' 'eq'
       || lk == 31315               // 'ascending' 'eq'
       || lk == 31317               // 'attribute' 'eq'
       || lk == 31323               // 'case' 'eq'
       || lk == 31324               // 'cast' 'eq'
       || lk == 31325               // 'castable' 'eq'
       || lk == 31327               // 'child' 'eq'
       || lk == 31328               // 'collation' 'eq'
       || lk == 31329               // 'comment' 'eq'
       || lk == 31335               // 'count' 'eq'
       || lk == 31338               // 'declare' 'eq'
       || lk == 31339               // 'default' 'eq'
       || lk == 31341               // 'descendant' 'eq'
       || lk == 31342               // 'descendant-or-self' 'eq'
       || lk == 31343               // 'descending' 'eq'
       || lk == 31345               // 'div' 'eq'
       || lk == 31346               // 'document' 'eq'
       || lk == 31347               // 'document-node' 'eq'
       || lk == 31348               // 'element' 'eq'
       || lk == 31349               // 'else' 'eq'
       || lk == 31350               // 'empty' 'eq'
       || lk == 31351               // 'empty-sequence' 'eq'
       || lk == 31353               // 'end' 'eq'
       || lk == 31354               // 'eq' 'eq'
       || lk == 31355               // 'every' 'eq'
       || lk == 31356               // 'except' 'eq'
       || lk == 31361               // 'following' 'eq'
       || lk == 31362               // 'following-sibling' 'eq'
       || lk == 31363               // 'for' 'eq'
       || lk == 31364               // 'function' 'eq'
       || lk == 31365               // 'ge' 'eq'
       || lk == 31367               // 'group' 'eq'
       || lk == 31369               // 'gt' 'eq'
       || lk == 31370               // 'idiv' 'eq'
       || lk == 31371               // 'if' 'eq'
       || lk == 31372               // 'import' 'eq'
       || lk == 31377               // 'instance' 'eq'
       || lk == 31378               // 'intersect' 'eq'
       || lk == 31381               // 'is' 'eq'
       || lk == 31382               // 'item' 'eq'
       || lk == 31386               // 'le' 'eq'
       || lk == 31388               // 'let' 'eq'
       || lk == 31390               // 'lt' 'eq'
       || lk == 31391               // 'map' 'eq'
       || lk == 31393               // 'mod' 'eq'
       || lk == 31395               // 'module' 'eq'
       || lk == 31396               // 'namespace' 'eq'
       || lk == 31397               // 'namespace-node' 'eq'
       || lk == 31398               // 'ne' 'eq'
       || lk == 31402               // 'node' 'eq'
       || lk == 31405               // 'only' 'eq'
       || lk == 31407               // 'or' 'eq'
       || lk == 31408               // 'order' 'eq'
       || lk == 31409               // 'ordered' 'eq'
       || lk == 31411               // 'parent' 'eq'
       || lk == 31416               // 'preceding' 'eq'
       || lk == 31417               // 'preceding-sibling' 'eq'
       || lk == 31420               // 'processing-instruction' 'eq'
       || lk == 31423               // 'return' 'eq'
       || lk == 31426               // 'satisfies' 'eq'
       || lk == 31428               // 'schema-attribute' 'eq'
       || lk == 31429               // 'schema-element' 'eq'
       || lk == 31430               // 'self' 'eq'
       || lk == 31433               // 'some' 'eq'
       || lk == 31434               // 'stable' 'eq'
       || lk == 31435               // 'start' 'eq'
       || lk == 31438               // 'switch' 'eq'
       || lk == 31439               // 'text' 'eq'
       || lk == 31441               // 'to' 'eq'
       || lk == 31443               // 'treat' 'eq'
       || lk == 31444               // 'try' 'eq'
       || lk == 31447               // 'typeswitch' 'eq'
       || lk == 31448               // 'union' 'eq'
       || lk == 31449               // 'unordered' 'eq'
       || lk == 31451               // 'validate' 'eq'
       || lk == 31456               // 'where' 'eq'
       || lk == 31460               // 'xquery' 'eq'
       || lk == 31519               // '$' 'every'
       || lk == 31520               // '%' 'every'
       || lk == 31522               // '(' 'every'
       || lk == 31523               // '(#' 'every'
       || lk == 31527               // '+' 'every'
       || lk == 31529               // '-' 'every'
       || lk == 31533               // '/' 'every'
       || lk == 31534               // '//' 'every'
       || lk == 31541               // '<' 'every'
       || lk == 31555               // '@' 'every'
       || lk == 31557               // '[' 'every'
       || lk == 31573               // 'attribute' 'every'
       || lk == 31604               // 'element' 'every'
       || lk == 31745               // IntegerLiteral 'except'
       || lk == 31746               // DecimalLiteral 'except'
       || lk == 31747               // DoubleLiteral 'except'
       || lk == 31748               // StringLiteral 'except'
       || lk == 31749               // URIQualifiedName 'except'
       || lk == 31759               // QName^Token 'except'
       || lk == 31765               // Wildcard 'except'
       || lk == 31775               // '$' 'except'
       || lk == 31776               // '%' 'except'
       || lk == 31778               // '(' 'except'
       || lk == 31779               // '(#' 'except'
       || lk == 31783               // '+' 'except'
       || lk == 31785               // '-' 'except'
       || lk == 31787               // '.' 'except'
       || lk == 31788               // '..' 'except'
       || lk == 31789               // '/' 'except'
       || lk == 31790               // '//' 'except'
       || lk == 31797               // '<' 'except'
       || lk == 31809               // '?' 'except'
       || lk == 31811               // '@' 'except'
       || lk == 31813               // '[' 'except'
       || lk == 31821               // 'ancestor' 'except'
       || lk == 31822               // 'ancestor-or-self' 'except'
       || lk == 31823               // 'and' 'except'
       || lk == 31825               // 'array' 'except'
       || lk == 31827               // 'ascending' 'except'
       || lk == 31829               // 'attribute' 'except'
       || lk == 31835               // 'case' 'except'
       || lk == 31836               // 'cast' 'except'
       || lk == 31837               // 'castable' 'except'
       || lk == 31839               // 'child' 'except'
       || lk == 31840               // 'collation' 'except'
       || lk == 31841               // 'comment' 'except'
       || lk == 31847               // 'count' 'except'
       || lk == 31850               // 'declare' 'except'
       || lk == 31851               // 'default' 'except'
       || lk == 31853               // 'descendant' 'except'
       || lk == 31854               // 'descendant-or-self' 'except'
       || lk == 31855               // 'descending' 'except'
       || lk == 31857               // 'div' 'except'
       || lk == 31858               // 'document' 'except'
       || lk == 31859               // 'document-node' 'except'
       || lk == 31860               // 'element' 'except'
       || lk == 31861               // 'else' 'except'
       || lk == 31862               // 'empty' 'except'
       || lk == 31863               // 'empty-sequence' 'except'
       || lk == 31865               // 'end' 'except'
       || lk == 31866               // 'eq' 'except'
       || lk == 31867               // 'every' 'except'
       || lk == 31868               // 'except' 'except'
       || lk == 31873               // 'following' 'except'
       || lk == 31874               // 'following-sibling' 'except'
       || lk == 31875               // 'for' 'except'
       || lk == 31876               // 'function' 'except'
       || lk == 31877               // 'ge' 'except'
       || lk == 31879               // 'group' 'except'
       || lk == 31881               // 'gt' 'except'
       || lk == 31882               // 'idiv' 'except'
       || lk == 31883               // 'if' 'except'
       || lk == 31884               // 'import' 'except'
       || lk == 31889               // 'instance' 'except'
       || lk == 31890               // 'intersect' 'except'
       || lk == 31893               // 'is' 'except'
       || lk == 31894               // 'item' 'except'
       || lk == 31898               // 'le' 'except'
       || lk == 31900               // 'let' 'except'
       || lk == 31902               // 'lt' 'except'
       || lk == 31903               // 'map' 'except'
       || lk == 31905               // 'mod' 'except'
       || lk == 31907               // 'module' 'except'
       || lk == 31908               // 'namespace' 'except'
       || lk == 31909               // 'namespace-node' 'except'
       || lk == 31910               // 'ne' 'except'
       || lk == 31914               // 'node' 'except'
       || lk == 31917               // 'only' 'except'
       || lk == 31919               // 'or' 'except'
       || lk == 31920               // 'order' 'except'
       || lk == 31921               // 'ordered' 'except'
       || lk == 31923               // 'parent' 'except'
       || lk == 31928               // 'preceding' 'except'
       || lk == 31929               // 'preceding-sibling' 'except'
       || lk == 31932               // 'processing-instruction' 'except'
       || lk == 31935               // 'return' 'except'
       || lk == 31938               // 'satisfies' 'except'
       || lk == 31940               // 'schema-attribute' 'except'
       || lk == 31941               // 'schema-element' 'except'
       || lk == 31942               // 'self' 'except'
       || lk == 31945               // 'some' 'except'
       || lk == 31946               // 'stable' 'except'
       || lk == 31947               // 'start' 'except'
       || lk == 31950               // 'switch' 'except'
       || lk == 31951               // 'text' 'except'
       || lk == 31953               // 'to' 'except'
       || lk == 31955               // 'treat' 'except'
       || lk == 31956               // 'try' 'except'
       || lk == 31959               // 'typeswitch' 'except'
       || lk == 31960               // 'union' 'except'
       || lk == 31961               // 'unordered' 'except'
       || lk == 31963               // 'validate' 'except'
       || lk == 31968               // 'where' 'except'
       || lk == 31972               // 'xquery' 'except'
       || lk == 33055               // '$' 'following'
       || lk == 33056               // '%' 'following'
       || lk == 33058               // '(' 'following'
       || lk == 33059               // '(#' 'following'
       || lk == 33063               // '+' 'following'
       || lk == 33065               // '-' 'following'
       || lk == 33069               // '/' 'following'
       || lk == 33070               // '//' 'following'
       || lk == 33077               // '<' 'following'
       || lk == 33091               // '@' 'following'
       || lk == 33093               // '[' 'following'
       || lk == 33109               // 'attribute' 'following'
       || lk == 33140               // 'element' 'following'
       || lk == 33311               // '$' 'following-sibling'
       || lk == 33312               // '%' 'following-sibling'
       || lk == 33314               // '(' 'following-sibling'
       || lk == 33315               // '(#' 'following-sibling'
       || lk == 33319               // '+' 'following-sibling'
       || lk == 33321               // '-' 'following-sibling'
       || lk == 33325               // '/' 'following-sibling'
       || lk == 33326               // '//' 'following-sibling'
       || lk == 33333               // '<' 'following-sibling'
       || lk == 33347               // '@' 'following-sibling'
       || lk == 33349               // '[' 'following-sibling'
       || lk == 33365               // 'attribute' 'following-sibling'
       || lk == 33396               // 'element' 'following-sibling'
       || lk == 33567               // '$' 'for'
       || lk == 33568               // '%' 'for'
       || lk == 33570               // '(' 'for'
       || lk == 33571               // '(#' 'for'
       || lk == 33575               // '+' 'for'
       || lk == 33577               // '-' 'for'
       || lk == 33581               // '/' 'for'
       || lk == 33582               // '//' 'for'
       || lk == 33589               // '<' 'for'
       || lk == 33601               // '?' 'for'
       || lk == 33603               // '@' 'for'
       || lk == 33605               // '[' 'for'
       || lk == 33621               // 'attribute' 'for'
       || lk == 33652               // 'element' 'for'
       || lk == 33700               // 'namespace' 'for'
       || lk == 33724               // 'processing-instruction' 'for'
       || lk == 33823               // '$' 'function'
       || lk == 33824               // '%' 'function'
       || lk == 33826               // '(' 'function'
       || lk == 33827               // '(#' 'function'
       || lk == 33831               // '+' 'function'
       || lk == 33833               // '-' 'function'
       || lk == 33837               // '/' 'function'
       || lk == 33838               // '//' 'function'
       || lk == 33845               // '<' 'function'
       || lk == 33859               // '@' 'function'
       || lk == 33861               // '[' 'function'
       || lk == 33877               // 'attribute' 'function'
       || lk == 33908               // 'element' 'function'
       || lk == 34049               // IntegerLiteral 'ge'
       || lk == 34050               // DecimalLiteral 'ge'
       || lk == 34051               // DoubleLiteral 'ge'
       || lk == 34052               // StringLiteral 'ge'
       || lk == 34053               // URIQualifiedName 'ge'
       || lk == 34063               // QName^Token 'ge'
       || lk == 34069               // Wildcard 'ge'
       || lk == 34079               // '$' 'ge'
       || lk == 34080               // '%' 'ge'
       || lk == 34082               // '(' 'ge'
       || lk == 34083               // '(#' 'ge'
       || lk == 34087               // '+' 'ge'
       || lk == 34089               // '-' 'ge'
       || lk == 34091               // '.' 'ge'
       || lk == 34092               // '..' 'ge'
       || lk == 34093               // '/' 'ge'
       || lk == 34094               // '//' 'ge'
       || lk == 34101               // '<' 'ge'
       || lk == 34113               // '?' 'ge'
       || lk == 34115               // '@' 'ge'
       || lk == 34117               // '[' 'ge'
       || lk == 34125               // 'ancestor' 'ge'
       || lk == 34126               // 'ancestor-or-self' 'ge'
       || lk == 34127               // 'and' 'ge'
       || lk == 34129               // 'array' 'ge'
       || lk == 34131               // 'ascending' 'ge'
       || lk == 34133               // 'attribute' 'ge'
       || lk == 34139               // 'case' 'ge'
       || lk == 34140               // 'cast' 'ge'
       || lk == 34141               // 'castable' 'ge'
       || lk == 34143               // 'child' 'ge'
       || lk == 34144               // 'collation' 'ge'
       || lk == 34145               // 'comment' 'ge'
       || lk == 34151               // 'count' 'ge'
       || lk == 34154               // 'declare' 'ge'
       || lk == 34155               // 'default' 'ge'
       || lk == 34157               // 'descendant' 'ge'
       || lk == 34158               // 'descendant-or-self' 'ge'
       || lk == 34159               // 'descending' 'ge'
       || lk == 34161               // 'div' 'ge'
       || lk == 34162               // 'document' 'ge'
       || lk == 34163               // 'document-node' 'ge'
       || lk == 34164               // 'element' 'ge'
       || lk == 34165               // 'else' 'ge'
       || lk == 34166               // 'empty' 'ge'
       || lk == 34167               // 'empty-sequence' 'ge'
       || lk == 34169               // 'end' 'ge'
       || lk == 34170               // 'eq' 'ge'
       || lk == 34171               // 'every' 'ge'
       || lk == 34172               // 'except' 'ge'
       || lk == 34177               // 'following' 'ge'
       || lk == 34178               // 'following-sibling' 'ge'
       || lk == 34179               // 'for' 'ge'
       || lk == 34180               // 'function' 'ge'
       || lk == 34181               // 'ge' 'ge'
       || lk == 34183               // 'group' 'ge'
       || lk == 34185               // 'gt' 'ge'
       || lk == 34186               // 'idiv' 'ge'
       || lk == 34187               // 'if' 'ge'
       || lk == 34188               // 'import' 'ge'
       || lk == 34193               // 'instance' 'ge'
       || lk == 34194               // 'intersect' 'ge'
       || lk == 34197               // 'is' 'ge'
       || lk == 34198               // 'item' 'ge'
       || lk == 34202               // 'le' 'ge'
       || lk == 34204               // 'let' 'ge'
       || lk == 34206               // 'lt' 'ge'
       || lk == 34207               // 'map' 'ge'
       || lk == 34209               // 'mod' 'ge'
       || lk == 34211               // 'module' 'ge'
       || lk == 34212               // 'namespace' 'ge'
       || lk == 34213               // 'namespace-node' 'ge'
       || lk == 34214               // 'ne' 'ge'
       || lk == 34218               // 'node' 'ge'
       || lk == 34221               // 'only' 'ge'
       || lk == 34223               // 'or' 'ge'
       || lk == 34224               // 'order' 'ge'
       || lk == 34225               // 'ordered' 'ge'
       || lk == 34227               // 'parent' 'ge'
       || lk == 34232               // 'preceding' 'ge'
       || lk == 34233               // 'preceding-sibling' 'ge'
       || lk == 34236               // 'processing-instruction' 'ge'
       || lk == 34239               // 'return' 'ge'
       || lk == 34242               // 'satisfies' 'ge'
       || lk == 34244               // 'schema-attribute' 'ge'
       || lk == 34245               // 'schema-element' 'ge'
       || lk == 34246               // 'self' 'ge'
       || lk == 34249               // 'some' 'ge'
       || lk == 34250               // 'stable' 'ge'
       || lk == 34251               // 'start' 'ge'
       || lk == 34254               // 'switch' 'ge'
       || lk == 34255               // 'text' 'ge'
       || lk == 34257               // 'to' 'ge'
       || lk == 34259               // 'treat' 'ge'
       || lk == 34260               // 'try' 'ge'
       || lk == 34263               // 'typeswitch' 'ge'
       || lk == 34264               // 'union' 'ge'
       || lk == 34265               // 'unordered' 'ge'
       || lk == 34267               // 'validate' 'ge'
       || lk == 34272               // 'where' 'ge'
       || lk == 34276               // 'xquery' 'ge'
       || lk == 34591               // '$' 'group'
       || lk == 34592               // '%' 'group'
       || lk == 34594               // '(' 'group'
       || lk == 34595               // '(#' 'group'
       || lk == 34599               // '+' 'group'
       || lk == 34601               // '-' 'group'
       || lk == 34605               // '/' 'group'
       || lk == 34606               // '//' 'group'
       || lk == 34613               // '<' 'group'
       || lk == 34625               // '?' 'group'
       || lk == 34627               // '@' 'group'
       || lk == 34629               // '[' 'group'
       || lk == 34645               // 'attribute' 'group'
       || lk == 34676               // 'element' 'group'
       || lk == 34724               // 'namespace' 'group'
       || lk == 34748               // 'processing-instruction' 'group'
       || lk == 35073               // IntegerLiteral 'gt'
       || lk == 35074               // DecimalLiteral 'gt'
       || lk == 35075               // DoubleLiteral 'gt'
       || lk == 35076               // StringLiteral 'gt'
       || lk == 35077               // URIQualifiedName 'gt'
       || lk == 35087               // QName^Token 'gt'
       || lk == 35093               // Wildcard 'gt'
       || lk == 35103               // '$' 'gt'
       || lk == 35104               // '%' 'gt'
       || lk == 35106               // '(' 'gt'
       || lk == 35107               // '(#' 'gt'
       || lk == 35111               // '+' 'gt'
       || lk == 35113               // '-' 'gt'
       || lk == 35115               // '.' 'gt'
       || lk == 35116               // '..' 'gt'
       || lk == 35117               // '/' 'gt'
       || lk == 35118               // '//' 'gt'
       || lk == 35125               // '<' 'gt'
       || lk == 35137               // '?' 'gt'
       || lk == 35139               // '@' 'gt'
       || lk == 35141               // '[' 'gt'
       || lk == 35149               // 'ancestor' 'gt'
       || lk == 35150               // 'ancestor-or-self' 'gt'
       || lk == 35151               // 'and' 'gt'
       || lk == 35153               // 'array' 'gt'
       || lk == 35155               // 'ascending' 'gt'
       || lk == 35157               // 'attribute' 'gt'
       || lk == 35163               // 'case' 'gt'
       || lk == 35164               // 'cast' 'gt'
       || lk == 35165               // 'castable' 'gt'
       || lk == 35167               // 'child' 'gt'
       || lk == 35168               // 'collation' 'gt'
       || lk == 35169               // 'comment' 'gt'
       || lk == 35175               // 'count' 'gt'
       || lk == 35178               // 'declare' 'gt'
       || lk == 35179               // 'default' 'gt'
       || lk == 35181               // 'descendant' 'gt'
       || lk == 35182               // 'descendant-or-self' 'gt'
       || lk == 35183               // 'descending' 'gt'
       || lk == 35185               // 'div' 'gt'
       || lk == 35186               // 'document' 'gt'
       || lk == 35187               // 'document-node' 'gt'
       || lk == 35188               // 'element' 'gt'
       || lk == 35189               // 'else' 'gt'
       || lk == 35190               // 'empty' 'gt'
       || lk == 35191               // 'empty-sequence' 'gt'
       || lk == 35193               // 'end' 'gt'
       || lk == 35194               // 'eq' 'gt'
       || lk == 35195               // 'every' 'gt'
       || lk == 35196               // 'except' 'gt'
       || lk == 35201               // 'following' 'gt'
       || lk == 35202               // 'following-sibling' 'gt'
       || lk == 35203               // 'for' 'gt'
       || lk == 35204               // 'function' 'gt'
       || lk == 35205               // 'ge' 'gt'
       || lk == 35207               // 'group' 'gt'
       || lk == 35209               // 'gt' 'gt'
       || lk == 35210               // 'idiv' 'gt'
       || lk == 35211               // 'if' 'gt'
       || lk == 35212               // 'import' 'gt'
       || lk == 35217               // 'instance' 'gt'
       || lk == 35218               // 'intersect' 'gt'
       || lk == 35221               // 'is' 'gt'
       || lk == 35222               // 'item' 'gt'
       || lk == 35226               // 'le' 'gt'
       || lk == 35228               // 'let' 'gt'
       || lk == 35230               // 'lt' 'gt'
       || lk == 35231               // 'map' 'gt'
       || lk == 35233               // 'mod' 'gt'
       || lk == 35235               // 'module' 'gt'
       || lk == 35236               // 'namespace' 'gt'
       || lk == 35237               // 'namespace-node' 'gt'
       || lk == 35238               // 'ne' 'gt'
       || lk == 35242               // 'node' 'gt'
       || lk == 35245               // 'only' 'gt'
       || lk == 35247               // 'or' 'gt'
       || lk == 35248               // 'order' 'gt'
       || lk == 35249               // 'ordered' 'gt'
       || lk == 35251               // 'parent' 'gt'
       || lk == 35256               // 'preceding' 'gt'
       || lk == 35257               // 'preceding-sibling' 'gt'
       || lk == 35260               // 'processing-instruction' 'gt'
       || lk == 35263               // 'return' 'gt'
       || lk == 35266               // 'satisfies' 'gt'
       || lk == 35268               // 'schema-attribute' 'gt'
       || lk == 35269               // 'schema-element' 'gt'
       || lk == 35270               // 'self' 'gt'
       || lk == 35273               // 'some' 'gt'
       || lk == 35274               // 'stable' 'gt'
       || lk == 35275               // 'start' 'gt'
       || lk == 35278               // 'switch' 'gt'
       || lk == 35279               // 'text' 'gt'
       || lk == 35281               // 'to' 'gt'
       || lk == 35283               // 'treat' 'gt'
       || lk == 35284               // 'try' 'gt'
       || lk == 35287               // 'typeswitch' 'gt'
       || lk == 35288               // 'union' 'gt'
       || lk == 35289               // 'unordered' 'gt'
       || lk == 35291               // 'validate' 'gt'
       || lk == 35296               // 'where' 'gt'
       || lk == 35300               // 'xquery' 'gt'
       || lk == 35329               // IntegerLiteral 'idiv'
       || lk == 35330               // DecimalLiteral 'idiv'
       || lk == 35331               // DoubleLiteral 'idiv'
       || lk == 35332               // StringLiteral 'idiv'
       || lk == 35333               // URIQualifiedName 'idiv'
       || lk == 35343               // QName^Token 'idiv'
       || lk == 35349               // Wildcard 'idiv'
       || lk == 35359               // '$' 'idiv'
       || lk == 35360               // '%' 'idiv'
       || lk == 35362               // '(' 'idiv'
       || lk == 35363               // '(#' 'idiv'
       || lk == 35367               // '+' 'idiv'
       || lk == 35369               // '-' 'idiv'
       || lk == 35371               // '.' 'idiv'
       || lk == 35372               // '..' 'idiv'
       || lk == 35373               // '/' 'idiv'
       || lk == 35374               // '//' 'idiv'
       || lk == 35381               // '<' 'idiv'
       || lk == 35393               // '?' 'idiv'
       || lk == 35395               // '@' 'idiv'
       || lk == 35397               // '[' 'idiv'
       || lk == 35405               // 'ancestor' 'idiv'
       || lk == 35406               // 'ancestor-or-self' 'idiv'
       || lk == 35407               // 'and' 'idiv'
       || lk == 35409               // 'array' 'idiv'
       || lk == 35411               // 'ascending' 'idiv'
       || lk == 35413               // 'attribute' 'idiv'
       || lk == 35419               // 'case' 'idiv'
       || lk == 35420               // 'cast' 'idiv'
       || lk == 35421               // 'castable' 'idiv'
       || lk == 35423               // 'child' 'idiv'
       || lk == 35424               // 'collation' 'idiv'
       || lk == 35425               // 'comment' 'idiv'
       || lk == 35431               // 'count' 'idiv'
       || lk == 35434               // 'declare' 'idiv'
       || lk == 35435               // 'default' 'idiv'
       || lk == 35437               // 'descendant' 'idiv'
       || lk == 35438               // 'descendant-or-self' 'idiv'
       || lk == 35439               // 'descending' 'idiv'
       || lk == 35441               // 'div' 'idiv'
       || lk == 35442               // 'document' 'idiv'
       || lk == 35443               // 'document-node' 'idiv'
       || lk == 35444               // 'element' 'idiv'
       || lk == 35445               // 'else' 'idiv'
       || lk == 35446               // 'empty' 'idiv'
       || lk == 35447               // 'empty-sequence' 'idiv'
       || lk == 35449               // 'end' 'idiv'
       || lk == 35450               // 'eq' 'idiv'
       || lk == 35451               // 'every' 'idiv'
       || lk == 35452               // 'except' 'idiv'
       || lk == 35457               // 'following' 'idiv'
       || lk == 35458               // 'following-sibling' 'idiv'
       || lk == 35459               // 'for' 'idiv'
       || lk == 35460               // 'function' 'idiv'
       || lk == 35461               // 'ge' 'idiv'
       || lk == 35463               // 'group' 'idiv'
       || lk == 35465               // 'gt' 'idiv'
       || lk == 35466               // 'idiv' 'idiv'
       || lk == 35467               // 'if' 'idiv'
       || lk == 35468               // 'import' 'idiv'
       || lk == 35473               // 'instance' 'idiv'
       || lk == 35474               // 'intersect' 'idiv'
       || lk == 35477               // 'is' 'idiv'
       || lk == 35478               // 'item' 'idiv'
       || lk == 35482               // 'le' 'idiv'
       || lk == 35484               // 'let' 'idiv'
       || lk == 35486               // 'lt' 'idiv'
       || lk == 35487               // 'map' 'idiv'
       || lk == 35489               // 'mod' 'idiv'
       || lk == 35491               // 'module' 'idiv'
       || lk == 35492               // 'namespace' 'idiv'
       || lk == 35493               // 'namespace-node' 'idiv'
       || lk == 35494               // 'ne' 'idiv'
       || lk == 35498               // 'node' 'idiv'
       || lk == 35501               // 'only' 'idiv'
       || lk == 35503               // 'or' 'idiv'
       || lk == 35504               // 'order' 'idiv'
       || lk == 35505               // 'ordered' 'idiv'
       || lk == 35507               // 'parent' 'idiv'
       || lk == 35512               // 'preceding' 'idiv'
       || lk == 35513               // 'preceding-sibling' 'idiv'
       || lk == 35516               // 'processing-instruction' 'idiv'
       || lk == 35519               // 'return' 'idiv'
       || lk == 35522               // 'satisfies' 'idiv'
       || lk == 35524               // 'schema-attribute' 'idiv'
       || lk == 35525               // 'schema-element' 'idiv'
       || lk == 35526               // 'self' 'idiv'
       || lk == 35529               // 'some' 'idiv'
       || lk == 35530               // 'stable' 'idiv'
       || lk == 35531               // 'start' 'idiv'
       || lk == 35534               // 'switch' 'idiv'
       || lk == 35535               // 'text' 'idiv'
       || lk == 35537               // 'to' 'idiv'
       || lk == 35539               // 'treat' 'idiv'
       || lk == 35540               // 'try' 'idiv'
       || lk == 35543               // 'typeswitch' 'idiv'
       || lk == 35544               // 'union' 'idiv'
       || lk == 35545               // 'unordered' 'idiv'
       || lk == 35547               // 'validate' 'idiv'
       || lk == 35552               // 'where' 'idiv'
       || lk == 35556               // 'xquery' 'idiv'
       || lk == 35615               // '$' 'if'
       || lk == 35616               // '%' 'if'
       || lk == 35618               // '(' 'if'
       || lk == 35619               // '(#' 'if'
       || lk == 35623               // '+' 'if'
       || lk == 35625               // '-' 'if'
       || lk == 35629               // '/' 'if'
       || lk == 35630               // '//' 'if'
       || lk == 35637               // '<' 'if'
       || lk == 35651               // '@' 'if'
       || lk == 35653               // '[' 'if'
       || lk == 35669               // 'attribute' 'if'
       || lk == 35700               // 'element' 'if'
       || lk == 35871               // '$' 'import'
       || lk == 35872               // '%' 'import'
       || lk == 35874               // '(' 'import'
       || lk == 35875               // '(#' 'import'
       || lk == 35879               // '+' 'import'
       || lk == 35881               // '-' 'import'
       || lk == 35885               // '/' 'import'
       || lk == 35886               // '//' 'import'
       || lk == 35893               // '<' 'import'
       || lk == 35907               // '@' 'import'
       || lk == 35909               // '[' 'import'
       || lk == 35925               // 'attribute' 'import'
       || lk == 35956               // 'element' 'import'
       || lk == 36898               // '(' 'insert'
       || lk == 36933               // '[' 'insert'
       || lk == 37121               // IntegerLiteral 'instance'
       || lk == 37122               // DecimalLiteral 'instance'
       || lk == 37123               // DoubleLiteral 'instance'
       || lk == 37124               // StringLiteral 'instance'
       || lk == 37125               // URIQualifiedName 'instance'
       || lk == 37135               // QName^Token 'instance'
       || lk == 37141               // Wildcard 'instance'
       || lk == 37151               // '$' 'instance'
       || lk == 37152               // '%' 'instance'
       || lk == 37154               // '(' 'instance'
       || lk == 37155               // '(#' 'instance'
       || lk == 37159               // '+' 'instance'
       || lk == 37161               // '-' 'instance'
       || lk == 37163               // '.' 'instance'
       || lk == 37164               // '..' 'instance'
       || lk == 37165               // '/' 'instance'
       || lk == 37166               // '//' 'instance'
       || lk == 37173               // '<' 'instance'
       || lk == 37185               // '?' 'instance'
       || lk == 37187               // '@' 'instance'
       || lk == 37189               // '[' 'instance'
       || lk == 37197               // 'ancestor' 'instance'
       || lk == 37198               // 'ancestor-or-self' 'instance'
       || lk == 37199               // 'and' 'instance'
       || lk == 37201               // 'array' 'instance'
       || lk == 37203               // 'ascending' 'instance'
       || lk == 37205               // 'attribute' 'instance'
       || lk == 37211               // 'case' 'instance'
       || lk == 37212               // 'cast' 'instance'
       || lk == 37213               // 'castable' 'instance'
       || lk == 37215               // 'child' 'instance'
       || lk == 37216               // 'collation' 'instance'
       || lk == 37217               // 'comment' 'instance'
       || lk == 37223               // 'count' 'instance'
       || lk == 37226               // 'declare' 'instance'
       || lk == 37227               // 'default' 'instance'
       || lk == 37229               // 'descendant' 'instance'
       || lk == 37230               // 'descendant-or-self' 'instance'
       || lk == 37231               // 'descending' 'instance'
       || lk == 37233               // 'div' 'instance'
       || lk == 37234               // 'document' 'instance'
       || lk == 37235               // 'document-node' 'instance'
       || lk == 37236               // 'element' 'instance'
       || lk == 37237               // 'else' 'instance'
       || lk == 37238               // 'empty' 'instance'
       || lk == 37239               // 'empty-sequence' 'instance'
       || lk == 37241               // 'end' 'instance'
       || lk == 37242               // 'eq' 'instance'
       || lk == 37243               // 'every' 'instance'
       || lk == 37244               // 'except' 'instance'
       || lk == 37249               // 'following' 'instance'
       || lk == 37250               // 'following-sibling' 'instance'
       || lk == 37251               // 'for' 'instance'
       || lk == 37252               // 'function' 'instance'
       || lk == 37253               // 'ge' 'instance'
       || lk == 37255               // 'group' 'instance'
       || lk == 37257               // 'gt' 'instance'
       || lk == 37258               // 'idiv' 'instance'
       || lk == 37259               // 'if' 'instance'
       || lk == 37260               // 'import' 'instance'
       || lk == 37265               // 'instance' 'instance'
       || lk == 37266               // 'intersect' 'instance'
       || lk == 37269               // 'is' 'instance'
       || lk == 37270               // 'item' 'instance'
       || lk == 37274               // 'le' 'instance'
       || lk == 37276               // 'let' 'instance'
       || lk == 37278               // 'lt' 'instance'
       || lk == 37279               // 'map' 'instance'
       || lk == 37281               // 'mod' 'instance'
       || lk == 37283               // 'module' 'instance'
       || lk == 37284               // 'namespace' 'instance'
       || lk == 37285               // 'namespace-node' 'instance'
       || lk == 37286               // 'ne' 'instance'
       || lk == 37290               // 'node' 'instance'
       || lk == 37293               // 'only' 'instance'
       || lk == 37295               // 'or' 'instance'
       || lk == 37296               // 'order' 'instance'
       || lk == 37297               // 'ordered' 'instance'
       || lk == 37299               // 'parent' 'instance'
       || lk == 37304               // 'preceding' 'instance'
       || lk == 37305               // 'preceding-sibling' 'instance'
       || lk == 37308               // 'processing-instruction' 'instance'
       || lk == 37311               // 'return' 'instance'
       || lk == 37314               // 'satisfies' 'instance'
       || lk == 37316               // 'schema-attribute' 'instance'
       || lk == 37317               // 'schema-element' 'instance'
       || lk == 37318               // 'self' 'instance'
       || lk == 37321               // 'some' 'instance'
       || lk == 37322               // 'stable' 'instance'
       || lk == 37323               // 'start' 'instance'
       || lk == 37326               // 'switch' 'instance'
       || lk == 37327               // 'text' 'instance'
       || lk == 37329               // 'to' 'instance'
       || lk == 37331               // 'treat' 'instance'
       || lk == 37332               // 'try' 'instance'
       || lk == 37335               // 'typeswitch' 'instance'
       || lk == 37336               // 'union' 'instance'
       || lk == 37337               // 'unordered' 'instance'
       || lk == 37339               // 'validate' 'instance'
       || lk == 37344               // 'where' 'instance'
       || lk == 37348               // 'xquery' 'instance'
       || lk == 37377               // IntegerLiteral 'intersect'
       || lk == 37378               // DecimalLiteral 'intersect'
       || lk == 37379               // DoubleLiteral 'intersect'
       || lk == 37380               // StringLiteral 'intersect'
       || lk == 37381               // URIQualifiedName 'intersect'
       || lk == 37391               // QName^Token 'intersect'
       || lk == 37397               // Wildcard 'intersect'
       || lk == 37407               // '$' 'intersect'
       || lk == 37408               // '%' 'intersect'
       || lk == 37410               // '(' 'intersect'
       || lk == 37411               // '(#' 'intersect'
       || lk == 37415               // '+' 'intersect'
       || lk == 37417               // '-' 'intersect'
       || lk == 37419               // '.' 'intersect'
       || lk == 37420               // '..' 'intersect'
       || lk == 37421               // '/' 'intersect'
       || lk == 37422               // '//' 'intersect'
       || lk == 37429               // '<' 'intersect'
       || lk == 37441               // '?' 'intersect'
       || lk == 37443               // '@' 'intersect'
       || lk == 37445               // '[' 'intersect'
       || lk == 37453               // 'ancestor' 'intersect'
       || lk == 37454               // 'ancestor-or-self' 'intersect'
       || lk == 37455               // 'and' 'intersect'
       || lk == 37457               // 'array' 'intersect'
       || lk == 37459               // 'ascending' 'intersect'
       || lk == 37461               // 'attribute' 'intersect'
       || lk == 37467               // 'case' 'intersect'
       || lk == 37468               // 'cast' 'intersect'
       || lk == 37469               // 'castable' 'intersect'
       || lk == 37471               // 'child' 'intersect'
       || lk == 37472               // 'collation' 'intersect'
       || lk == 37473               // 'comment' 'intersect'
       || lk == 37479               // 'count' 'intersect'
       || lk == 37482               // 'declare' 'intersect'
       || lk == 37483               // 'default' 'intersect'
       || lk == 37485               // 'descendant' 'intersect'
       || lk == 37486               // 'descendant-or-self' 'intersect'
       || lk == 37487               // 'descending' 'intersect'
       || lk == 37489               // 'div' 'intersect'
       || lk == 37490               // 'document' 'intersect'
       || lk == 37491               // 'document-node' 'intersect'
       || lk == 37492               // 'element' 'intersect'
       || lk == 37493               // 'else' 'intersect'
       || lk == 37494               // 'empty' 'intersect'
       || lk == 37495               // 'empty-sequence' 'intersect'
       || lk == 37497               // 'end' 'intersect'
       || lk == 37498               // 'eq' 'intersect'
       || lk == 37499               // 'every' 'intersect'
       || lk == 37500               // 'except' 'intersect'
       || lk == 37505               // 'following' 'intersect'
       || lk == 37506               // 'following-sibling' 'intersect'
       || lk == 37507               // 'for' 'intersect'
       || lk == 37508               // 'function' 'intersect'
       || lk == 37509               // 'ge' 'intersect'
       || lk == 37511               // 'group' 'intersect'
       || lk == 37513               // 'gt' 'intersect'
       || lk == 37514               // 'idiv' 'intersect'
       || lk == 37515               // 'if' 'intersect'
       || lk == 37516               // 'import' 'intersect'
       || lk == 37521               // 'instance' 'intersect'
       || lk == 37522               // 'intersect' 'intersect'
       || lk == 37525               // 'is' 'intersect'
       || lk == 37526               // 'item' 'intersect'
       || lk == 37530               // 'le' 'intersect'
       || lk == 37532               // 'let' 'intersect'
       || lk == 37534               // 'lt' 'intersect'
       || lk == 37535               // 'map' 'intersect'
       || lk == 37537               // 'mod' 'intersect'
       || lk == 37539               // 'module' 'intersect'
       || lk == 37540               // 'namespace' 'intersect'
       || lk == 37541               // 'namespace-node' 'intersect'
       || lk == 37542               // 'ne' 'intersect'
       || lk == 37546               // 'node' 'intersect'
       || lk == 37549               // 'only' 'intersect'
       || lk == 37551               // 'or' 'intersect'
       || lk == 37552               // 'order' 'intersect'
       || lk == 37553               // 'ordered' 'intersect'
       || lk == 37555               // 'parent' 'intersect'
       || lk == 37560               // 'preceding' 'intersect'
       || lk == 37561               // 'preceding-sibling' 'intersect'
       || lk == 37564               // 'processing-instruction' 'intersect'
       || lk == 37567               // 'return' 'intersect'
       || lk == 37570               // 'satisfies' 'intersect'
       || lk == 37572               // 'schema-attribute' 'intersect'
       || lk == 37573               // 'schema-element' 'intersect'
       || lk == 37574               // 'self' 'intersect'
       || lk == 37577               // 'some' 'intersect'
       || lk == 37578               // 'stable' 'intersect'
       || lk == 37579               // 'start' 'intersect'
       || lk == 37582               // 'switch' 'intersect'
       || lk == 37583               // 'text' 'intersect'
       || lk == 37585               // 'to' 'intersect'
       || lk == 37587               // 'treat' 'intersect'
       || lk == 37588               // 'try' 'intersect'
       || lk == 37591               // 'typeswitch' 'intersect'
       || lk == 37592               // 'union' 'intersect'
       || lk == 37593               // 'unordered' 'intersect'
       || lk == 37595               // 'validate' 'intersect'
       || lk == 37600               // 'where' 'intersect'
       || lk == 37604               // 'xquery' 'intersect'
       || lk == 37922               // '(' 'invoke'
       || lk == 37957               // '[' 'invoke'
       || lk == 38145               // IntegerLiteral 'is'
       || lk == 38146               // DecimalLiteral 'is'
       || lk == 38147               // DoubleLiteral 'is'
       || lk == 38148               // StringLiteral 'is'
       || lk == 38149               // URIQualifiedName 'is'
       || lk == 38159               // QName^Token 'is'
       || lk == 38165               // Wildcard 'is'
       || lk == 38175               // '$' 'is'
       || lk == 38176               // '%' 'is'
       || lk == 38178               // '(' 'is'
       || lk == 38179               // '(#' 'is'
       || lk == 38183               // '+' 'is'
       || lk == 38185               // '-' 'is'
       || lk == 38187               // '.' 'is'
       || lk == 38188               // '..' 'is'
       || lk == 38189               // '/' 'is'
       || lk == 38190               // '//' 'is'
       || lk == 38197               // '<' 'is'
       || lk == 38209               // '?' 'is'
       || lk == 38211               // '@' 'is'
       || lk == 38213               // '[' 'is'
       || lk == 38221               // 'ancestor' 'is'
       || lk == 38222               // 'ancestor-or-self' 'is'
       || lk == 38223               // 'and' 'is'
       || lk == 38225               // 'array' 'is'
       || lk == 38227               // 'ascending' 'is'
       || lk == 38229               // 'attribute' 'is'
       || lk == 38235               // 'case' 'is'
       || lk == 38236               // 'cast' 'is'
       || lk == 38237               // 'castable' 'is'
       || lk == 38239               // 'child' 'is'
       || lk == 38240               // 'collation' 'is'
       || lk == 38241               // 'comment' 'is'
       || lk == 38247               // 'count' 'is'
       || lk == 38250               // 'declare' 'is'
       || lk == 38251               // 'default' 'is'
       || lk == 38253               // 'descendant' 'is'
       || lk == 38254               // 'descendant-or-self' 'is'
       || lk == 38255               // 'descending' 'is'
       || lk == 38257               // 'div' 'is'
       || lk == 38258               // 'document' 'is'
       || lk == 38259               // 'document-node' 'is'
       || lk == 38260               // 'element' 'is'
       || lk == 38261               // 'else' 'is'
       || lk == 38262               // 'empty' 'is'
       || lk == 38263               // 'empty-sequence' 'is'
       || lk == 38265               // 'end' 'is'
       || lk == 38266               // 'eq' 'is'
       || lk == 38267               // 'every' 'is'
       || lk == 38268               // 'except' 'is'
       || lk == 38273               // 'following' 'is'
       || lk == 38274               // 'following-sibling' 'is'
       || lk == 38275               // 'for' 'is'
       || lk == 38276               // 'function' 'is'
       || lk == 38277               // 'ge' 'is'
       || lk == 38279               // 'group' 'is'
       || lk == 38281               // 'gt' 'is'
       || lk == 38282               // 'idiv' 'is'
       || lk == 38283               // 'if' 'is'
       || lk == 38284               // 'import' 'is'
       || lk == 38289               // 'instance' 'is'
       || lk == 38290               // 'intersect' 'is'
       || lk == 38293               // 'is' 'is'
       || lk == 38294               // 'item' 'is'
       || lk == 38298               // 'le' 'is'
       || lk == 38300               // 'let' 'is'
       || lk == 38302               // 'lt' 'is'
       || lk == 38303               // 'map' 'is'
       || lk == 38305               // 'mod' 'is'
       || lk == 38307               // 'module' 'is'
       || lk == 38308               // 'namespace' 'is'
       || lk == 38309               // 'namespace-node' 'is'
       || lk == 38310               // 'ne' 'is'
       || lk == 38314               // 'node' 'is'
       || lk == 38317               // 'only' 'is'
       || lk == 38319               // 'or' 'is'
       || lk == 38320               // 'order' 'is'
       || lk == 38321               // 'ordered' 'is'
       || lk == 38323               // 'parent' 'is'
       || lk == 38328               // 'preceding' 'is'
       || lk == 38329               // 'preceding-sibling' 'is'
       || lk == 38332               // 'processing-instruction' 'is'
       || lk == 38335               // 'return' 'is'
       || lk == 38338               // 'satisfies' 'is'
       || lk == 38340               // 'schema-attribute' 'is'
       || lk == 38341               // 'schema-element' 'is'
       || lk == 38342               // 'self' 'is'
       || lk == 38345               // 'some' 'is'
       || lk == 38346               // 'stable' 'is'
       || lk == 38347               // 'start' 'is'
       || lk == 38350               // 'switch' 'is'
       || lk == 38351               // 'text' 'is'
       || lk == 38353               // 'to' 'is'
       || lk == 38355               // 'treat' 'is'
       || lk == 38356               // 'try' 'is'
       || lk == 38359               // 'typeswitch' 'is'
       || lk == 38360               // 'union' 'is'
       || lk == 38361               // 'unordered' 'is'
       || lk == 38363               // 'validate' 'is'
       || lk == 38368               // 'where' 'is'
       || lk == 38372               // 'xquery' 'is'
       || lk == 38431               // '$' 'item'
       || lk == 38432               // '%' 'item'
       || lk == 38434               // '(' 'item'
       || lk == 38435               // '(#' 'item'
       || lk == 38439               // '+' 'item'
       || lk == 38441               // '-' 'item'
       || lk == 38445               // '/' 'item'
       || lk == 38446               // '//' 'item'
       || lk == 38453               // '<' 'item'
       || lk == 38467               // '@' 'item'
       || lk == 38469               // '[' 'item'
       || lk == 38485               // 'attribute' 'item'
       || lk == 38516               // 'element' 'item'
       || lk == 39387               // 'validate' 'lax'
       || lk == 39425               // IntegerLiteral 'le'
       || lk == 39426               // DecimalLiteral 'le'
       || lk == 39427               // DoubleLiteral 'le'
       || lk == 39428               // StringLiteral 'le'
       || lk == 39429               // URIQualifiedName 'le'
       || lk == 39439               // QName^Token 'le'
       || lk == 39445               // Wildcard 'le'
       || lk == 39455               // '$' 'le'
       || lk == 39456               // '%' 'le'
       || lk == 39458               // '(' 'le'
       || lk == 39459               // '(#' 'le'
       || lk == 39463               // '+' 'le'
       || lk == 39465               // '-' 'le'
       || lk == 39467               // '.' 'le'
       || lk == 39468               // '..' 'le'
       || lk == 39469               // '/' 'le'
       || lk == 39470               // '//' 'le'
       || lk == 39477               // '<' 'le'
       || lk == 39489               // '?' 'le'
       || lk == 39491               // '@' 'le'
       || lk == 39493               // '[' 'le'
       || lk == 39501               // 'ancestor' 'le'
       || lk == 39502               // 'ancestor-or-self' 'le'
       || lk == 39503               // 'and' 'le'
       || lk == 39505               // 'array' 'le'
       || lk == 39507               // 'ascending' 'le'
       || lk == 39509               // 'attribute' 'le'
       || lk == 39515               // 'case' 'le'
       || lk == 39516               // 'cast' 'le'
       || lk == 39517               // 'castable' 'le'
       || lk == 39519               // 'child' 'le'
       || lk == 39520               // 'collation' 'le'
       || lk == 39521               // 'comment' 'le'
       || lk == 39527               // 'count' 'le'
       || lk == 39530               // 'declare' 'le'
       || lk == 39531               // 'default' 'le'
       || lk == 39533               // 'descendant' 'le'
       || lk == 39534               // 'descendant-or-self' 'le'
       || lk == 39535               // 'descending' 'le'
       || lk == 39537               // 'div' 'le'
       || lk == 39538               // 'document' 'le'
       || lk == 39539               // 'document-node' 'le'
       || lk == 39540               // 'element' 'le'
       || lk == 39541               // 'else' 'le'
       || lk == 39542               // 'empty' 'le'
       || lk == 39543               // 'empty-sequence' 'le'
       || lk == 39545               // 'end' 'le'
       || lk == 39546               // 'eq' 'le'
       || lk == 39547               // 'every' 'le'
       || lk == 39548               // 'except' 'le'
       || lk == 39553               // 'following' 'le'
       || lk == 39554               // 'following-sibling' 'le'
       || lk == 39555               // 'for' 'le'
       || lk == 39556               // 'function' 'le'
       || lk == 39557               // 'ge' 'le'
       || lk == 39559               // 'group' 'le'
       || lk == 39561               // 'gt' 'le'
       || lk == 39562               // 'idiv' 'le'
       || lk == 39563               // 'if' 'le'
       || lk == 39564               // 'import' 'le'
       || lk == 39569               // 'instance' 'le'
       || lk == 39570               // 'intersect' 'le'
       || lk == 39573               // 'is' 'le'
       || lk == 39574               // 'item' 'le'
       || lk == 39578               // 'le' 'le'
       || lk == 39580               // 'let' 'le'
       || lk == 39582               // 'lt' 'le'
       || lk == 39583               // 'map' 'le'
       || lk == 39585               // 'mod' 'le'
       || lk == 39587               // 'module' 'le'
       || lk == 39588               // 'namespace' 'le'
       || lk == 39589               // 'namespace-node' 'le'
       || lk == 39590               // 'ne' 'le'
       || lk == 39594               // 'node' 'le'
       || lk == 39597               // 'only' 'le'
       || lk == 39599               // 'or' 'le'
       || lk == 39600               // 'order' 'le'
       || lk == 39601               // 'ordered' 'le'
       || lk == 39603               // 'parent' 'le'
       || lk == 39608               // 'preceding' 'le'
       || lk == 39609               // 'preceding-sibling' 'le'
       || lk == 39612               // 'processing-instruction' 'le'
       || lk == 39615               // 'return' 'le'
       || lk == 39618               // 'satisfies' 'le'
       || lk == 39620               // 'schema-attribute' 'le'
       || lk == 39621               // 'schema-element' 'le'
       || lk == 39622               // 'self' 'le'
       || lk == 39625               // 'some' 'le'
       || lk == 39626               // 'stable' 'le'
       || lk == 39627               // 'start' 'le'
       || lk == 39630               // 'switch' 'le'
       || lk == 39631               // 'text' 'le'
       || lk == 39633               // 'to' 'le'
       || lk == 39635               // 'treat' 'le'
       || lk == 39636               // 'try' 'le'
       || lk == 39639               // 'typeswitch' 'le'
       || lk == 39640               // 'union' 'le'
       || lk == 39641               // 'unordered' 'le'
       || lk == 39643               // 'validate' 'le'
       || lk == 39648               // 'where' 'le'
       || lk == 39652               // 'xquery' 'le'
       || lk == 39967               // '$' 'let'
       || lk == 39968               // '%' 'let'
       || lk == 39970               // '(' 'let'
       || lk == 39971               // '(#' 'let'
       || lk == 39975               // '+' 'let'
       || lk == 39977               // '-' 'let'
       || lk == 39981               // '/' 'let'
       || lk == 39982               // '//' 'let'
       || lk == 39989               // '<' 'let'
       || lk == 40001               // '?' 'let'
       || lk == 40003               // '@' 'let'
       || lk == 40005               // '[' 'let'
       || lk == 40021               // 'attribute' 'let'
       || lk == 40052               // 'element' 'let'
       || lk == 40100               // 'namespace' 'let'
       || lk == 40124               // 'processing-instruction' 'let'
       || lk == 40449               // IntegerLiteral 'lt'
       || lk == 40450               // DecimalLiteral 'lt'
       || lk == 40451               // DoubleLiteral 'lt'
       || lk == 40452               // StringLiteral 'lt'
       || lk == 40453               // URIQualifiedName 'lt'
       || lk == 40463               // QName^Token 'lt'
       || lk == 40469               // Wildcard 'lt'
       || lk == 40479               // '$' 'lt'
       || lk == 40480               // '%' 'lt'
       || lk == 40482               // '(' 'lt'
       || lk == 40483               // '(#' 'lt'
       || lk == 40487               // '+' 'lt'
       || lk == 40489               // '-' 'lt'
       || lk == 40491               // '.' 'lt'
       || lk == 40492               // '..' 'lt'
       || lk == 40493               // '/' 'lt'
       || lk == 40494               // '//' 'lt'
       || lk == 40501               // '<' 'lt'
       || lk == 40513               // '?' 'lt'
       || lk == 40515               // '@' 'lt'
       || lk == 40517               // '[' 'lt'
       || lk == 40525               // 'ancestor' 'lt'
       || lk == 40526               // 'ancestor-or-self' 'lt'
       || lk == 40527               // 'and' 'lt'
       || lk == 40529               // 'array' 'lt'
       || lk == 40531               // 'ascending' 'lt'
       || lk == 40533               // 'attribute' 'lt'
       || lk == 40539               // 'case' 'lt'
       || lk == 40540               // 'cast' 'lt'
       || lk == 40541               // 'castable' 'lt'
       || lk == 40543               // 'child' 'lt'
       || lk == 40544               // 'collation' 'lt'
       || lk == 40545               // 'comment' 'lt'
       || lk == 40551               // 'count' 'lt'
       || lk == 40554               // 'declare' 'lt'
       || lk == 40555               // 'default' 'lt'
       || lk == 40557               // 'descendant' 'lt'
       || lk == 40558               // 'descendant-or-self' 'lt'
       || lk == 40559               // 'descending' 'lt'
       || lk == 40561               // 'div' 'lt'
       || lk == 40562               // 'document' 'lt'
       || lk == 40563               // 'document-node' 'lt'
       || lk == 40564               // 'element' 'lt'
       || lk == 40565               // 'else' 'lt'
       || lk == 40566               // 'empty' 'lt'
       || lk == 40567               // 'empty-sequence' 'lt'
       || lk == 40569               // 'end' 'lt'
       || lk == 40570               // 'eq' 'lt'
       || lk == 40571               // 'every' 'lt'
       || lk == 40572               // 'except' 'lt'
       || lk == 40577               // 'following' 'lt'
       || lk == 40578               // 'following-sibling' 'lt'
       || lk == 40579               // 'for' 'lt'
       || lk == 40580               // 'function' 'lt'
       || lk == 40581               // 'ge' 'lt'
       || lk == 40583               // 'group' 'lt'
       || lk == 40585               // 'gt' 'lt'
       || lk == 40586               // 'idiv' 'lt'
       || lk == 40587               // 'if' 'lt'
       || lk == 40588               // 'import' 'lt'
       || lk == 40593               // 'instance' 'lt'
       || lk == 40594               // 'intersect' 'lt'
       || lk == 40597               // 'is' 'lt'
       || lk == 40598               // 'item' 'lt'
       || lk == 40602               // 'le' 'lt'
       || lk == 40604               // 'let' 'lt'
       || lk == 40606               // 'lt' 'lt'
       || lk == 40607               // 'map' 'lt'
       || lk == 40609               // 'mod' 'lt'
       || lk == 40611               // 'module' 'lt'
       || lk == 40612               // 'namespace' 'lt'
       || lk == 40613               // 'namespace-node' 'lt'
       || lk == 40614               // 'ne' 'lt'
       || lk == 40618               // 'node' 'lt'
       || lk == 40621               // 'only' 'lt'
       || lk == 40623               // 'or' 'lt'
       || lk == 40624               // 'order' 'lt'
       || lk == 40625               // 'ordered' 'lt'
       || lk == 40627               // 'parent' 'lt'
       || lk == 40632               // 'preceding' 'lt'
       || lk == 40633               // 'preceding-sibling' 'lt'
       || lk == 40636               // 'processing-instruction' 'lt'
       || lk == 40639               // 'return' 'lt'
       || lk == 40642               // 'satisfies' 'lt'
       || lk == 40644               // 'schema-attribute' 'lt'
       || lk == 40645               // 'schema-element' 'lt'
       || lk == 40646               // 'self' 'lt'
       || lk == 40649               // 'some' 'lt'
       || lk == 40650               // 'stable' 'lt'
       || lk == 40651               // 'start' 'lt'
       || lk == 40654               // 'switch' 'lt'
       || lk == 40655               // 'text' 'lt'
       || lk == 40657               // 'to' 'lt'
       || lk == 40659               // 'treat' 'lt'
       || lk == 40660               // 'try' 'lt'
       || lk == 40663               // 'typeswitch' 'lt'
       || lk == 40664               // 'union' 'lt'
       || lk == 40665               // 'unordered' 'lt'
       || lk == 40667               // 'validate' 'lt'
       || lk == 40672               // 'where' 'lt'
       || lk == 40676               // 'xquery' 'lt'
       || lk == 40735               // '$' 'map'
       || lk == 40736               // '%' 'map'
       || lk == 40738               // '(' 'map'
       || lk == 40739               // '(#' 'map'
       || lk == 40743               // '+' 'map'
       || lk == 40745               // '-' 'map'
       || lk == 40749               // '/' 'map'
       || lk == 40750               // '//' 'map'
       || lk == 40757               // '<' 'map'
       || lk == 40771               // '@' 'map'
       || lk == 40773               // '[' 'map'
       || lk == 40789               // 'attribute' 'map'
       || lk == 40820               // 'element' 'map'
       || lk == 41217               // IntegerLiteral 'mod'
       || lk == 41218               // DecimalLiteral 'mod'
       || lk == 41219               // DoubleLiteral 'mod'
       || lk == 41220               // StringLiteral 'mod'
       || lk == 41221               // URIQualifiedName 'mod'
       || lk == 41231               // QName^Token 'mod'
       || lk == 41237               // Wildcard 'mod'
       || lk == 41247               // '$' 'mod'
       || lk == 41248               // '%' 'mod'
       || lk == 41250               // '(' 'mod'
       || lk == 41251               // '(#' 'mod'
       || lk == 41255               // '+' 'mod'
       || lk == 41257               // '-' 'mod'
       || lk == 41259               // '.' 'mod'
       || lk == 41260               // '..' 'mod'
       || lk == 41261               // '/' 'mod'
       || lk == 41262               // '//' 'mod'
       || lk == 41269               // '<' 'mod'
       || lk == 41281               // '?' 'mod'
       || lk == 41283               // '@' 'mod'
       || lk == 41285               // '[' 'mod'
       || lk == 41293               // 'ancestor' 'mod'
       || lk == 41294               // 'ancestor-or-self' 'mod'
       || lk == 41295               // 'and' 'mod'
       || lk == 41297               // 'array' 'mod'
       || lk == 41299               // 'ascending' 'mod'
       || lk == 41301               // 'attribute' 'mod'
       || lk == 41307               // 'case' 'mod'
       || lk == 41308               // 'cast' 'mod'
       || lk == 41309               // 'castable' 'mod'
       || lk == 41311               // 'child' 'mod'
       || lk == 41312               // 'collation' 'mod'
       || lk == 41313               // 'comment' 'mod'
       || lk == 41319               // 'count' 'mod'
       || lk == 41322               // 'declare' 'mod'
       || lk == 41323               // 'default' 'mod'
       || lk == 41325               // 'descendant' 'mod'
       || lk == 41326               // 'descendant-or-self' 'mod'
       || lk == 41327               // 'descending' 'mod'
       || lk == 41329               // 'div' 'mod'
       || lk == 41330               // 'document' 'mod'
       || lk == 41331               // 'document-node' 'mod'
       || lk == 41332               // 'element' 'mod'
       || lk == 41333               // 'else' 'mod'
       || lk == 41334               // 'empty' 'mod'
       || lk == 41335               // 'empty-sequence' 'mod'
       || lk == 41337               // 'end' 'mod'
       || lk == 41338               // 'eq' 'mod'
       || lk == 41339               // 'every' 'mod'
       || lk == 41340               // 'except' 'mod'
       || lk == 41345               // 'following' 'mod'
       || lk == 41346               // 'following-sibling' 'mod'
       || lk == 41347               // 'for' 'mod'
       || lk == 41348               // 'function' 'mod'
       || lk == 41349               // 'ge' 'mod'
       || lk == 41351               // 'group' 'mod'
       || lk == 41353               // 'gt' 'mod'
       || lk == 41354               // 'idiv' 'mod'
       || lk == 41355               // 'if' 'mod'
       || lk == 41356               // 'import' 'mod'
       || lk == 41361               // 'instance' 'mod'
       || lk == 41362               // 'intersect' 'mod'
       || lk == 41365               // 'is' 'mod'
       || lk == 41366               // 'item' 'mod'
       || lk == 41370               // 'le' 'mod'
       || lk == 41372               // 'let' 'mod'
       || lk == 41374               // 'lt' 'mod'
       || lk == 41375               // 'map' 'mod'
       || lk == 41377               // 'mod' 'mod'
       || lk == 41379               // 'module' 'mod'
       || lk == 41380               // 'namespace' 'mod'
       || lk == 41381               // 'namespace-node' 'mod'
       || lk == 41382               // 'ne' 'mod'
       || lk == 41386               // 'node' 'mod'
       || lk == 41389               // 'only' 'mod'
       || lk == 41391               // 'or' 'mod'
       || lk == 41392               // 'order' 'mod'
       || lk == 41393               // 'ordered' 'mod'
       || lk == 41395               // 'parent' 'mod'
       || lk == 41400               // 'preceding' 'mod'
       || lk == 41401               // 'preceding-sibling' 'mod'
       || lk == 41404               // 'processing-instruction' 'mod'
       || lk == 41407               // 'return' 'mod'
       || lk == 41410               // 'satisfies' 'mod'
       || lk == 41412               // 'schema-attribute' 'mod'
       || lk == 41413               // 'schema-element' 'mod'
       || lk == 41414               // 'self' 'mod'
       || lk == 41417               // 'some' 'mod'
       || lk == 41418               // 'stable' 'mod'
       || lk == 41419               // 'start' 'mod'
       || lk == 41422               // 'switch' 'mod'
       || lk == 41423               // 'text' 'mod'
       || lk == 41425               // 'to' 'mod'
       || lk == 41427               // 'treat' 'mod'
       || lk == 41428               // 'try' 'mod'
       || lk == 41431               // 'typeswitch' 'mod'
       || lk == 41432               // 'union' 'mod'
       || lk == 41433               // 'unordered' 'mod'
       || lk == 41435               // 'validate' 'mod'
       || lk == 41440               // 'where' 'mod'
       || lk == 41444               // 'xquery' 'mod'
       || lk == 41759               // '$' 'module'
       || lk == 41760               // '%' 'module'
       || lk == 41762               // '(' 'module'
       || lk == 41763               // '(#' 'module'
       || lk == 41767               // '+' 'module'
       || lk == 41769               // '-' 'module'
       || lk == 41773               // '/' 'module'
       || lk == 41774               // '//' 'module'
       || lk == 41781               // '<' 'module'
       || lk == 41795               // '@' 'module'
       || lk == 41797               // '[' 'module'
       || lk == 41813               // 'attribute' 'module'
       || lk == 41844               // 'element' 'module'
       || lk == 42015               // '$' 'namespace'
       || lk == 42016               // '%' 'namespace'
       || lk == 42018               // '(' 'namespace'
       || lk == 42019               // '(#' 'namespace'
       || lk == 42023               // '+' 'namespace'
       || lk == 42025               // '-' 'namespace'
       || lk == 42029               // '/' 'namespace'
       || lk == 42030               // '//' 'namespace'
       || lk == 42037               // '<' 'namespace'
       || lk == 42051               // '@' 'namespace'
       || lk == 42053               // '[' 'namespace'
       || lk == 42069               // 'attribute' 'namespace'
       || lk == 42100               // 'element' 'namespace'
       || lk == 42271               // '$' 'namespace-node'
       || lk == 42272               // '%' 'namespace-node'
       || lk == 42274               // '(' 'namespace-node'
       || lk == 42275               // '(#' 'namespace-node'
       || lk == 42279               // '+' 'namespace-node'
       || lk == 42281               // '-' 'namespace-node'
       || lk == 42285               // '/' 'namespace-node'
       || lk == 42286               // '//' 'namespace-node'
       || lk == 42293               // '<' 'namespace-node'
       || lk == 42307               // '@' 'namespace-node'
       || lk == 42309               // '[' 'namespace-node'
       || lk == 42325               // 'attribute' 'namespace-node'
       || lk == 42356               // 'element' 'namespace-node'
       || lk == 42497               // IntegerLiteral 'ne'
       || lk == 42498               // DecimalLiteral 'ne'
       || lk == 42499               // DoubleLiteral 'ne'
       || lk == 42500               // StringLiteral 'ne'
       || lk == 42501               // URIQualifiedName 'ne'
       || lk == 42511               // QName^Token 'ne'
       || lk == 42517               // Wildcard 'ne'
       || lk == 42527               // '$' 'ne'
       || lk == 42528               // '%' 'ne'
       || lk == 42530               // '(' 'ne'
       || lk == 42531               // '(#' 'ne'
       || lk == 42535               // '+' 'ne'
       || lk == 42537               // '-' 'ne'
       || lk == 42539               // '.' 'ne'
       || lk == 42540               // '..' 'ne'
       || lk == 42541               // '/' 'ne'
       || lk == 42542               // '//' 'ne'
       || lk == 42549               // '<' 'ne'
       || lk == 42561               // '?' 'ne'
       || lk == 42563               // '@' 'ne'
       || lk == 42565               // '[' 'ne'
       || lk == 42573               // 'ancestor' 'ne'
       || lk == 42574               // 'ancestor-or-self' 'ne'
       || lk == 42575               // 'and' 'ne'
       || lk == 42577               // 'array' 'ne'
       || lk == 42579               // 'ascending' 'ne'
       || lk == 42581               // 'attribute' 'ne'
       || lk == 42587               // 'case' 'ne'
       || lk == 42588               // 'cast' 'ne'
       || lk == 42589               // 'castable' 'ne'
       || lk == 42591               // 'child' 'ne'
       || lk == 42592               // 'collation' 'ne'
       || lk == 42593               // 'comment' 'ne'
       || lk == 42599               // 'count' 'ne'
       || lk == 42602               // 'declare' 'ne'
       || lk == 42603               // 'default' 'ne'
       || lk == 42605               // 'descendant' 'ne'
       || lk == 42606               // 'descendant-or-self' 'ne'
       || lk == 42607               // 'descending' 'ne'
       || lk == 42609               // 'div' 'ne'
       || lk == 42610               // 'document' 'ne'
       || lk == 42611               // 'document-node' 'ne'
       || lk == 42612               // 'element' 'ne'
       || lk == 42613               // 'else' 'ne'
       || lk == 42614               // 'empty' 'ne'
       || lk == 42615               // 'empty-sequence' 'ne'
       || lk == 42617               // 'end' 'ne'
       || lk == 42618               // 'eq' 'ne'
       || lk == 42619               // 'every' 'ne'
       || lk == 42620               // 'except' 'ne'
       || lk == 42625               // 'following' 'ne'
       || lk == 42626               // 'following-sibling' 'ne'
       || lk == 42627               // 'for' 'ne'
       || lk == 42628               // 'function' 'ne'
       || lk == 42629               // 'ge' 'ne'
       || lk == 42631               // 'group' 'ne'
       || lk == 42633               // 'gt' 'ne'
       || lk == 42634               // 'idiv' 'ne'
       || lk == 42635               // 'if' 'ne'
       || lk == 42636               // 'import' 'ne'
       || lk == 42641               // 'instance' 'ne'
       || lk == 42642               // 'intersect' 'ne'
       || lk == 42645               // 'is' 'ne'
       || lk == 42646               // 'item' 'ne'
       || lk == 42650               // 'le' 'ne'
       || lk == 42652               // 'let' 'ne'
       || lk == 42654               // 'lt' 'ne'
       || lk == 42655               // 'map' 'ne'
       || lk == 42657               // 'mod' 'ne'
       || lk == 42659               // 'module' 'ne'
       || lk == 42660               // 'namespace' 'ne'
       || lk == 42661               // 'namespace-node' 'ne'
       || lk == 42662               // 'ne' 'ne'
       || lk == 42666               // 'node' 'ne'
       || lk == 42669               // 'only' 'ne'
       || lk == 42671               // 'or' 'ne'
       || lk == 42672               // 'order' 'ne'
       || lk == 42673               // 'ordered' 'ne'
       || lk == 42675               // 'parent' 'ne'
       || lk == 42680               // 'preceding' 'ne'
       || lk == 42681               // 'preceding-sibling' 'ne'
       || lk == 42684               // 'processing-instruction' 'ne'
       || lk == 42687               // 'return' 'ne'
       || lk == 42690               // 'satisfies' 'ne'
       || lk == 42692               // 'schema-attribute' 'ne'
       || lk == 42693               // 'schema-element' 'ne'
       || lk == 42694               // 'self' 'ne'
       || lk == 42697               // 'some' 'ne'
       || lk == 42698               // 'stable' 'ne'
       || lk == 42699               // 'start' 'ne'
       || lk == 42702               // 'switch' 'ne'
       || lk == 42703               // 'text' 'ne'
       || lk == 42705               // 'to' 'ne'
       || lk == 42707               // 'treat' 'ne'
       || lk == 42708               // 'try' 'ne'
       || lk == 42711               // 'typeswitch' 'ne'
       || lk == 42712               // 'union' 'ne'
       || lk == 42713               // 'unordered' 'ne'
       || lk == 42715               // 'validate' 'ne'
       || lk == 42720               // 'where' 'ne'
       || lk == 42724               // 'xquery' 'ne'
       || lk == 43551               // '$' 'node'
       || lk == 43552               // '%' 'node'
       || lk == 43554               // '(' 'node'
       || lk == 43555               // '(#' 'node'
       || lk == 43559               // '+' 'node'
       || lk == 43561               // '-' 'node'
       || lk == 43565               // '/' 'node'
       || lk == 43566               // '//' 'node'
       || lk == 43573               // '<' 'node'
       || lk == 43587               // '@' 'node'
       || lk == 43589               // '[' 'node'
       || lk == 43605               // 'attribute' 'node'
       || lk == 43628               // 'delete' 'node'
       || lk == 43636               // 'element' 'node'
       || lk == 43664               // 'insert' 'node'
       || lk == 43709               // 'rename' 'node'
       || lk == 43710               // 'replace' 'node'
       || lk == 43884               // 'delete' 'nodes'
       || lk == 43920               // 'insert' 'nodes'
       || lk == 44319               // '$' 'only'
       || lk == 44320               // '%' 'only'
       || lk == 44322               // '(' 'only'
       || lk == 44323               // '(#' 'only'
       || lk == 44327               // '+' 'only'
       || lk == 44329               // '-' 'only'
       || lk == 44333               // '/' 'only'
       || lk == 44334               // '//' 'only'
       || lk == 44341               // '<' 'only'
       || lk == 44353               // '?' 'only'
       || lk == 44355               // '@' 'only'
       || lk == 44357               // '[' 'only'
       || lk == 44373               // 'attribute' 'only'
       || lk == 44404               // 'element' 'only'
       || lk == 44452               // 'namespace' 'only'
       || lk == 44476               // 'processing-instruction' 'only'
       || lk == 44801               // IntegerLiteral 'or'
       || lk == 44802               // DecimalLiteral 'or'
       || lk == 44803               // DoubleLiteral 'or'
       || lk == 44804               // StringLiteral 'or'
       || lk == 44805               // URIQualifiedName 'or'
       || lk == 44815               // QName^Token 'or'
       || lk == 44821               // Wildcard 'or'
       || lk == 44831               // '$' 'or'
       || lk == 44832               // '%' 'or'
       || lk == 44834               // '(' 'or'
       || lk == 44835               // '(#' 'or'
       || lk == 44839               // '+' 'or'
       || lk == 44841               // '-' 'or'
       || lk == 44843               // '.' 'or'
       || lk == 44844               // '..' 'or'
       || lk == 44845               // '/' 'or'
       || lk == 44846               // '//' 'or'
       || lk == 44853               // '<' 'or'
       || lk == 44865               // '?' 'or'
       || lk == 44867               // '@' 'or'
       || lk == 44869               // '[' 'or'
       || lk == 44877               // 'ancestor' 'or'
       || lk == 44878               // 'ancestor-or-self' 'or'
       || lk == 44879               // 'and' 'or'
       || lk == 44881               // 'array' 'or'
       || lk == 44883               // 'ascending' 'or'
       || lk == 44885               // 'attribute' 'or'
       || lk == 44891               // 'case' 'or'
       || lk == 44892               // 'cast' 'or'
       || lk == 44893               // 'castable' 'or'
       || lk == 44895               // 'child' 'or'
       || lk == 44896               // 'collation' 'or'
       || lk == 44897               // 'comment' 'or'
       || lk == 44903               // 'count' 'or'
       || lk == 44906               // 'declare' 'or'
       || lk == 44907               // 'default' 'or'
       || lk == 44909               // 'descendant' 'or'
       || lk == 44910               // 'descendant-or-self' 'or'
       || lk == 44911               // 'descending' 'or'
       || lk == 44913               // 'div' 'or'
       || lk == 44914               // 'document' 'or'
       || lk == 44915               // 'document-node' 'or'
       || lk == 44916               // 'element' 'or'
       || lk == 44917               // 'else' 'or'
       || lk == 44918               // 'empty' 'or'
       || lk == 44919               // 'empty-sequence' 'or'
       || lk == 44921               // 'end' 'or'
       || lk == 44922               // 'eq' 'or'
       || lk == 44923               // 'every' 'or'
       || lk == 44924               // 'except' 'or'
       || lk == 44929               // 'following' 'or'
       || lk == 44930               // 'following-sibling' 'or'
       || lk == 44931               // 'for' 'or'
       || lk == 44932               // 'function' 'or'
       || lk == 44933               // 'ge' 'or'
       || lk == 44935               // 'group' 'or'
       || lk == 44937               // 'gt' 'or'
       || lk == 44938               // 'idiv' 'or'
       || lk == 44939               // 'if' 'or'
       || lk == 44940               // 'import' 'or'
       || lk == 44945               // 'instance' 'or'
       || lk == 44946               // 'intersect' 'or'
       || lk == 44949               // 'is' 'or'
       || lk == 44950               // 'item' 'or'
       || lk == 44954               // 'le' 'or'
       || lk == 44956               // 'let' 'or'
       || lk == 44958               // 'lt' 'or'
       || lk == 44959               // 'map' 'or'
       || lk == 44961               // 'mod' 'or'
       || lk == 44963               // 'module' 'or'
       || lk == 44964               // 'namespace' 'or'
       || lk == 44965               // 'namespace-node' 'or'
       || lk == 44966               // 'ne' 'or'
       || lk == 44970               // 'node' 'or'
       || lk == 44973               // 'only' 'or'
       || lk == 44975               // 'or' 'or'
       || lk == 44976               // 'order' 'or'
       || lk == 44977               // 'ordered' 'or'
       || lk == 44979               // 'parent' 'or'
       || lk == 44984               // 'preceding' 'or'
       || lk == 44985               // 'preceding-sibling' 'or'
       || lk == 44988               // 'processing-instruction' 'or'
       || lk == 44991               // 'return' 'or'
       || lk == 44994               // 'satisfies' 'or'
       || lk == 44996               // 'schema-attribute' 'or'
       || lk == 44997               // 'schema-element' 'or'
       || lk == 44998               // 'self' 'or'
       || lk == 45001               // 'some' 'or'
       || lk == 45002               // 'stable' 'or'
       || lk == 45003               // 'start' 'or'
       || lk == 45006               // 'switch' 'or'
       || lk == 45007               // 'text' 'or'
       || lk == 45009               // 'to' 'or'
       || lk == 45011               // 'treat' 'or'
       || lk == 45012               // 'try' 'or'
       || lk == 45015               // 'typeswitch' 'or'
       || lk == 45016               // 'union' 'or'
       || lk == 45017               // 'unordered' 'or'
       || lk == 45019               // 'validate' 'or'
       || lk == 45024               // 'where' 'or'
       || lk == 45028               // 'xquery' 'or'
       || lk == 45087               // '$' 'order'
       || lk == 45088               // '%' 'order'
       || lk == 45090               // '(' 'order'
       || lk == 45091               // '(#' 'order'
       || lk == 45095               // '+' 'order'
       || lk == 45097               // '-' 'order'
       || lk == 45101               // '/' 'order'
       || lk == 45102               // '//' 'order'
       || lk == 45109               // '<' 'order'
       || lk == 45121               // '?' 'order'
       || lk == 45123               // '@' 'order'
       || lk == 45125               // '[' 'order'
       || lk == 45141               // 'attribute' 'order'
       || lk == 45172               // 'element' 'order'
       || lk == 45220               // 'namespace' 'order'
       || lk == 45244               // 'processing-instruction' 'order'
       || lk == 45343               // '$' 'ordered'
       || lk == 45344               // '%' 'ordered'
       || lk == 45346               // '(' 'ordered'
       || lk == 45347               // '(#' 'ordered'
       || lk == 45351               // '+' 'ordered'
       || lk == 45353               // '-' 'ordered'
       || lk == 45357               // '/' 'ordered'
       || lk == 45358               // '//' 'ordered'
       || lk == 45365               // '<' 'ordered'
       || lk == 45379               // '@' 'ordered'
       || lk == 45381               // '[' 'ordered'
       || lk == 45397               // 'attribute' 'ordered'
       || lk == 45428               // 'element' 'ordered'
       || lk == 45855               // '$' 'parent'
       || lk == 45856               // '%' 'parent'
       || lk == 45858               // '(' 'parent'
       || lk == 45859               // '(#' 'parent'
       || lk == 45863               // '+' 'parent'
       || lk == 45865               // '-' 'parent'
       || lk == 45869               // '/' 'parent'
       || lk == 45870               // '//' 'parent'
       || lk == 45877               // '<' 'parent'
       || lk == 45891               // '@' 'parent'
       || lk == 45893               // '[' 'parent'
       || lk == 45909               // 'attribute' 'parent'
       || lk == 45940               // 'element' 'parent'
       || lk == 47135               // '$' 'preceding'
       || lk == 47136               // '%' 'preceding'
       || lk == 47138               // '(' 'preceding'
       || lk == 47139               // '(#' 'preceding'
       || lk == 47143               // '+' 'preceding'
       || lk == 47145               // '-' 'preceding'
       || lk == 47149               // '/' 'preceding'
       || lk == 47150               // '//' 'preceding'
       || lk == 47157               // '<' 'preceding'
       || lk == 47171               // '@' 'preceding'
       || lk == 47173               // '[' 'preceding'
       || lk == 47189               // 'attribute' 'preceding'
       || lk == 47220               // 'element' 'preceding'
       || lk == 47391               // '$' 'preceding-sibling'
       || lk == 47392               // '%' 'preceding-sibling'
       || lk == 47394               // '(' 'preceding-sibling'
       || lk == 47395               // '(#' 'preceding-sibling'
       || lk == 47399               // '+' 'preceding-sibling'
       || lk == 47401               // '-' 'preceding-sibling'
       || lk == 47405               // '/' 'preceding-sibling'
       || lk == 47406               // '//' 'preceding-sibling'
       || lk == 47413               // '<' 'preceding-sibling'
       || lk == 47427               // '@' 'preceding-sibling'
       || lk == 47429               // '[' 'preceding-sibling'
       || lk == 47445               // 'attribute' 'preceding-sibling'
       || lk == 47476               // 'element' 'preceding-sibling'
       || lk == 48159               // '$' 'processing-instruction'
       || lk == 48160               // '%' 'processing-instruction'
       || lk == 48162               // '(' 'processing-instruction'
       || lk == 48163               // '(#' 'processing-instruction'
       || lk == 48167               // '+' 'processing-instruction'
       || lk == 48169               // '-' 'processing-instruction'
       || lk == 48173               // '/' 'processing-instruction'
       || lk == 48174               // '//' 'processing-instruction'
       || lk == 48181               // '<' 'processing-instruction'
       || lk == 48195               // '@' 'processing-instruction'
       || lk == 48197               // '[' 'processing-instruction'
       || lk == 48213               // 'attribute' 'processing-instruction'
       || lk == 48244               // 'element' 'processing-instruction'
       || lk == 48418               // '(' 'rename'
       || lk == 48453               // '[' 'rename'
       || lk == 48674               // '(' 'replace'
       || lk == 48709               // '[' 'replace'
       || lk == 48927               // '$' 'return'
       || lk == 48928               // '%' 'return'
       || lk == 48930               // '(' 'return'
       || lk == 48931               // '(#' 'return'
       || lk == 48935               // '+' 'return'
       || lk == 48937               // '-' 'return'
       || lk == 48941               // '/' 'return'
       || lk == 48942               // '//' 'return'
       || lk == 48949               // '<' 'return'
       || lk == 48961               // '?' 'return'
       || lk == 48963               // '@' 'return'
       || lk == 48965               // '[' 'return'
       || lk == 48981               // 'attribute' 'return'
       || lk == 49012               // 'element' 'return'
       || lk == 49060               // 'namespace' 'return'
       || lk == 49084               // 'processing-instruction' 'return'
       || lk == 49695               // '$' 'satisfies'
       || lk == 49696               // '%' 'satisfies'
       || lk == 49698               // '(' 'satisfies'
       || lk == 49699               // '(#' 'satisfies'
       || lk == 49703               // '+' 'satisfies'
       || lk == 49705               // '-' 'satisfies'
       || lk == 49709               // '/' 'satisfies'
       || lk == 49710               // '//' 'satisfies'
       || lk == 49717               // '<' 'satisfies'
       || lk == 49729               // '?' 'satisfies'
       || lk == 49731               // '@' 'satisfies'
       || lk == 49733               // '[' 'satisfies'
       || lk == 49749               // 'attribute' 'satisfies'
       || lk == 49780               // 'element' 'satisfies'
       || lk == 49828               // 'namespace' 'satisfies'
       || lk == 49852               // 'processing-instruction' 'satisfies'
       || lk == 50207               // '$' 'schema-attribute'
       || lk == 50208               // '%' 'schema-attribute'
       || lk == 50210               // '(' 'schema-attribute'
       || lk == 50211               // '(#' 'schema-attribute'
       || lk == 50215               // '+' 'schema-attribute'
       || lk == 50217               // '-' 'schema-attribute'
       || lk == 50221               // '/' 'schema-attribute'
       || lk == 50222               // '//' 'schema-attribute'
       || lk == 50229               // '<' 'schema-attribute'
       || lk == 50243               // '@' 'schema-attribute'
       || lk == 50245               // '[' 'schema-attribute'
       || lk == 50261               // 'attribute' 'schema-attribute'
       || lk == 50292               // 'element' 'schema-attribute'
       || lk == 50463               // '$' 'schema-element'
       || lk == 50464               // '%' 'schema-element'
       || lk == 50466               // '(' 'schema-element'
       || lk == 50467               // '(#' 'schema-element'
       || lk == 50471               // '+' 'schema-element'
       || lk == 50473               // '-' 'schema-element'
       || lk == 50477               // '/' 'schema-element'
       || lk == 50478               // '//' 'schema-element'
       || lk == 50485               // '<' 'schema-element'
       || lk == 50499               // '@' 'schema-element'
       || lk == 50501               // '[' 'schema-element'
       || lk == 50517               // 'attribute' 'schema-element'
       || lk == 50548               // 'element' 'schema-element'
       || lk == 50719               // '$' 'self'
       || lk == 50720               // '%' 'self'
       || lk == 50722               // '(' 'self'
       || lk == 50723               // '(#' 'self'
       || lk == 50727               // '+' 'self'
       || lk == 50729               // '-' 'self'
       || lk == 50733               // '/' 'self'
       || lk == 50734               // '//' 'self'
       || lk == 50741               // '<' 'self'
       || lk == 50755               // '@' 'self'
       || lk == 50757               // '[' 'self'
       || lk == 50773               // 'attribute' 'self'
       || lk == 50804               // 'element' 'self'
       || lk == 51331               // 'for' 'sliding'
       || lk == 51487               // '$' 'some'
       || lk == 51488               // '%' 'some'
       || lk == 51490               // '(' 'some'
       || lk == 51491               // '(#' 'some'
       || lk == 51495               // '+' 'some'
       || lk == 51497               // '-' 'some'
       || lk == 51501               // '/' 'some'
       || lk == 51502               // '//' 'some'
       || lk == 51509               // '<' 'some'
       || lk == 51523               // '@' 'some'
       || lk == 51525               // '[' 'some'
       || lk == 51541               // 'attribute' 'some'
       || lk == 51572               // 'element' 'some'
       || lk == 51743               // '$' 'stable'
       || lk == 51744               // '%' 'stable'
       || lk == 51746               // '(' 'stable'
       || lk == 51747               // '(#' 'stable'
       || lk == 51751               // '+' 'stable'
       || lk == 51753               // '-' 'stable'
       || lk == 51757               // '/' 'stable'
       || lk == 51758               // '//' 'stable'
       || lk == 51765               // '<' 'stable'
       || lk == 51777               // '?' 'stable'
       || lk == 51779               // '@' 'stable'
       || lk == 51781               // '[' 'stable'
       || lk == 51797               // 'attribute' 'stable'
       || lk == 51828               // 'element' 'stable'
       || lk == 51876               // 'namespace' 'stable'
       || lk == 51900               // 'processing-instruction' 'stable'
       || lk == 51999               // '$' 'start'
       || lk == 52000               // '%' 'start'
       || lk == 52002               // '(' 'start'
       || lk == 52003               // '(#' 'start'
       || lk == 52007               // '+' 'start'
       || lk == 52009               // '-' 'start'
       || lk == 52013               // '/' 'start'
       || lk == 52014               // '//' 'start'
       || lk == 52021               // '<' 'start'
       || lk == 52033               // '?' 'start'
       || lk == 52035               // '@' 'start'
       || lk == 52037               // '[' 'start'
       || lk == 52053               // 'attribute' 'start'
       || lk == 52084               // 'element' 'start'
       || lk == 52132               // 'namespace' 'start'
       || lk == 52156               // 'processing-instruction' 'start'
       || lk == 52443               // 'validate' 'strict'
       || lk == 52767               // '$' 'switch'
       || lk == 52768               // '%' 'switch'
       || lk == 52770               // '(' 'switch'
       || lk == 52771               // '(#' 'switch'
       || lk == 52775               // '+' 'switch'
       || lk == 52777               // '-' 'switch'
       || lk == 52781               // '/' 'switch'
       || lk == 52782               // '//' 'switch'
       || lk == 52789               // '<' 'switch'
       || lk == 52803               // '@' 'switch'
       || lk == 52805               // '[' 'switch'
       || lk == 52821               // 'attribute' 'switch'
       || lk == 52852               // 'element' 'switch'
       || lk == 53023               // '$' 'text'
       || lk == 53024               // '%' 'text'
       || lk == 53026               // '(' 'text'
       || lk == 53027               // '(#' 'text'
       || lk == 53031               // '+' 'text'
       || lk == 53033               // '-' 'text'
       || lk == 53037               // '/' 'text'
       || lk == 53038               // '//' 'text'
       || lk == 53045               // '<' 'text'
       || lk == 53059               // '@' 'text'
       || lk == 53061               // '[' 'text'
       || lk == 53077               // 'attribute' 'text'
       || lk == 53108               // 'element' 'text'
       || lk == 53505               // IntegerLiteral 'to'
       || lk == 53506               // DecimalLiteral 'to'
       || lk == 53507               // DoubleLiteral 'to'
       || lk == 53508               // StringLiteral 'to'
       || lk == 53509               // URIQualifiedName 'to'
       || lk == 53519               // QName^Token 'to'
       || lk == 53525               // Wildcard 'to'
       || lk == 53535               // '$' 'to'
       || lk == 53536               // '%' 'to'
       || lk == 53538               // '(' 'to'
       || lk == 53539               // '(#' 'to'
       || lk == 53543               // '+' 'to'
       || lk == 53545               // '-' 'to'
       || lk == 53547               // '.' 'to'
       || lk == 53548               // '..' 'to'
       || lk == 53549               // '/' 'to'
       || lk == 53550               // '//' 'to'
       || lk == 53557               // '<' 'to'
       || lk == 53569               // '?' 'to'
       || lk == 53571               // '@' 'to'
       || lk == 53573               // '[' 'to'
       || lk == 53581               // 'ancestor' 'to'
       || lk == 53582               // 'ancestor-or-self' 'to'
       || lk == 53583               // 'and' 'to'
       || lk == 53585               // 'array' 'to'
       || lk == 53587               // 'ascending' 'to'
       || lk == 53589               // 'attribute' 'to'
       || lk == 53595               // 'case' 'to'
       || lk == 53596               // 'cast' 'to'
       || lk == 53597               // 'castable' 'to'
       || lk == 53599               // 'child' 'to'
       || lk == 53600               // 'collation' 'to'
       || lk == 53601               // 'comment' 'to'
       || lk == 53607               // 'count' 'to'
       || lk == 53610               // 'declare' 'to'
       || lk == 53611               // 'default' 'to'
       || lk == 53613               // 'descendant' 'to'
       || lk == 53614               // 'descendant-or-self' 'to'
       || lk == 53615               // 'descending' 'to'
       || lk == 53617               // 'div' 'to'
       || lk == 53618               // 'document' 'to'
       || lk == 53619               // 'document-node' 'to'
       || lk == 53620               // 'element' 'to'
       || lk == 53621               // 'else' 'to'
       || lk == 53622               // 'empty' 'to'
       || lk == 53623               // 'empty-sequence' 'to'
       || lk == 53625               // 'end' 'to'
       || lk == 53626               // 'eq' 'to'
       || lk == 53627               // 'every' 'to'
       || lk == 53628               // 'except' 'to'
       || lk == 53633               // 'following' 'to'
       || lk == 53634               // 'following-sibling' 'to'
       || lk == 53635               // 'for' 'to'
       || lk == 53636               // 'function' 'to'
       || lk == 53637               // 'ge' 'to'
       || lk == 53639               // 'group' 'to'
       || lk == 53641               // 'gt' 'to'
       || lk == 53642               // 'idiv' 'to'
       || lk == 53643               // 'if' 'to'
       || lk == 53644               // 'import' 'to'
       || lk == 53649               // 'instance' 'to'
       || lk == 53650               // 'intersect' 'to'
       || lk == 53653               // 'is' 'to'
       || lk == 53654               // 'item' 'to'
       || lk == 53658               // 'le' 'to'
       || lk == 53660               // 'let' 'to'
       || lk == 53662               // 'lt' 'to'
       || lk == 53663               // 'map' 'to'
       || lk == 53665               // 'mod' 'to'
       || lk == 53667               // 'module' 'to'
       || lk == 53668               // 'namespace' 'to'
       || lk == 53669               // 'namespace-node' 'to'
       || lk == 53670               // 'ne' 'to'
       || lk == 53674               // 'node' 'to'
       || lk == 53677               // 'only' 'to'
       || lk == 53679               // 'or' 'to'
       || lk == 53680               // 'order' 'to'
       || lk == 53681               // 'ordered' 'to'
       || lk == 53683               // 'parent' 'to'
       || lk == 53688               // 'preceding' 'to'
       || lk == 53689               // 'preceding-sibling' 'to'
       || lk == 53692               // 'processing-instruction' 'to'
       || lk == 53695               // 'return' 'to'
       || lk == 53698               // 'satisfies' 'to'
       || lk == 53700               // 'schema-attribute' 'to'
       || lk == 53701               // 'schema-element' 'to'
       || lk == 53702               // 'self' 'to'
       || lk == 53705               // 'some' 'to'
       || lk == 53706               // 'stable' 'to'
       || lk == 53707               // 'start' 'to'
       || lk == 53710               // 'switch' 'to'
       || lk == 53711               // 'text' 'to'
       || lk == 53713               // 'to' 'to'
       || lk == 53715               // 'treat' 'to'
       || lk == 53716               // 'try' 'to'
       || lk == 53719               // 'typeswitch' 'to'
       || lk == 53720               // 'union' 'to'
       || lk == 53721               // 'unordered' 'to'
       || lk == 53723               // 'validate' 'to'
       || lk == 53728               // 'where' 'to'
       || lk == 53732               // 'xquery' 'to'
       || lk == 53761               // IntegerLiteral 'transform'
       || lk == 53762               // DecimalLiteral 'transform'
       || lk == 53763               // DoubleLiteral 'transform'
       || lk == 53764               // StringLiteral 'transform'
       || lk == 53765               // URIQualifiedName 'transform'
       || lk == 53775               // QName^Token 'transform'
       || lk == 53781               // Wildcard 'transform'
       || lk == 53803               // '.' 'transform'
       || lk == 53804               // '..' 'transform'
       || lk == 53805               // '/' 'transform'
       || lk == 53837               // 'ancestor' 'transform'
       || lk == 53838               // 'ancestor-or-self' 'transform'
       || lk == 53839               // 'and' 'transform'
       || lk == 53841               // 'array' 'transform'
       || lk == 53843               // 'ascending' 'transform'
       || lk == 53845               // 'attribute' 'transform'
       || lk == 53851               // 'case' 'transform'
       || lk == 53852               // 'cast' 'transform'
       || lk == 53853               // 'castable' 'transform'
       || lk == 53855               // 'child' 'transform'
       || lk == 53856               // 'collation' 'transform'
       || lk == 53857               // 'comment' 'transform'
       || lk == 53863               // 'count' 'transform'
       || lk == 53866               // 'declare' 'transform'
       || lk == 53867               // 'default' 'transform'
       || lk == 53869               // 'descendant' 'transform'
       || lk == 53870               // 'descendant-or-self' 'transform'
       || lk == 53871               // 'descending' 'transform'
       || lk == 53873               // 'div' 'transform'
       || lk == 53874               // 'document' 'transform'
       || lk == 53875               // 'document-node' 'transform'
       || lk == 53876               // 'element' 'transform'
       || lk == 53877               // 'else' 'transform'
       || lk == 53878               // 'empty' 'transform'
       || lk == 53879               // 'empty-sequence' 'transform'
       || lk == 53881               // 'end' 'transform'
       || lk == 53882               // 'eq' 'transform'
       || lk == 53883               // 'every' 'transform'
       || lk == 53884               // 'except' 'transform'
       || lk == 53889               // 'following' 'transform'
       || lk == 53890               // 'following-sibling' 'transform'
       || lk == 53891               // 'for' 'transform'
       || lk == 53892               // 'function' 'transform'
       || lk == 53893               // 'ge' 'transform'
       || lk == 53895               // 'group' 'transform'
       || lk == 53897               // 'gt' 'transform'
       || lk == 53898               // 'idiv' 'transform'
       || lk == 53899               // 'if' 'transform'
       || lk == 53900               // 'import' 'transform'
       || lk == 53905               // 'instance' 'transform'
       || lk == 53906               // 'intersect' 'transform'
       || lk == 53909               // 'is' 'transform'
       || lk == 53910               // 'item' 'transform'
       || lk == 53914               // 'le' 'transform'
       || lk == 53916               // 'let' 'transform'
       || lk == 53918               // 'lt' 'transform'
       || lk == 53919               // 'map' 'transform'
       || lk == 53921               // 'mod' 'transform'
       || lk == 53923               // 'module' 'transform'
       || lk == 53924               // 'namespace' 'transform'
       || lk == 53925               // 'namespace-node' 'transform'
       || lk == 53926               // 'ne' 'transform'
       || lk == 53930               // 'node' 'transform'
       || lk == 53933               // 'only' 'transform'
       || lk == 53935               // 'or' 'transform'
       || lk == 53936               // 'order' 'transform'
       || lk == 53937               // 'ordered' 'transform'
       || lk == 53939               // 'parent' 'transform'
       || lk == 53944               // 'preceding' 'transform'
       || lk == 53945               // 'preceding-sibling' 'transform'
       || lk == 53948               // 'processing-instruction' 'transform'
       || lk == 53951               // 'return' 'transform'
       || lk == 53954               // 'satisfies' 'transform'
       || lk == 53956               // 'schema-attribute' 'transform'
       || lk == 53957               // 'schema-element' 'transform'
       || lk == 53958               // 'self' 'transform'
       || lk == 53961               // 'some' 'transform'
       || lk == 53962               // 'stable' 'transform'
       || lk == 53963               // 'start' 'transform'
       || lk == 53966               // 'switch' 'transform'
       || lk == 53967               // 'text' 'transform'
       || lk == 53969               // 'to' 'transform'
       || lk == 53971               // 'treat' 'transform'
       || lk == 53972               // 'try' 'transform'
       || lk == 53975               // 'typeswitch' 'transform'
       || lk == 53976               // 'union' 'transform'
       || lk == 53977               // 'unordered' 'transform'
       || lk == 53979               // 'validate' 'transform'
       || lk == 53984               // 'where' 'transform'
       || lk == 53988               // 'xquery' 'transform'
       || lk == 54017               // IntegerLiteral 'treat'
       || lk == 54018               // DecimalLiteral 'treat'
       || lk == 54019               // DoubleLiteral 'treat'
       || lk == 54020               // StringLiteral 'treat'
       || lk == 54021               // URIQualifiedName 'treat'
       || lk == 54031               // QName^Token 'treat'
       || lk == 54037               // Wildcard 'treat'
       || lk == 54047               // '$' 'treat'
       || lk == 54048               // '%' 'treat'
       || lk == 54050               // '(' 'treat'
       || lk == 54051               // '(#' 'treat'
       || lk == 54055               // '+' 'treat'
       || lk == 54057               // '-' 'treat'
       || lk == 54059               // '.' 'treat'
       || lk == 54060               // '..' 'treat'
       || lk == 54061               // '/' 'treat'
       || lk == 54062               // '//' 'treat'
       || lk == 54069               // '<' 'treat'
       || lk == 54081               // '?' 'treat'
       || lk == 54083               // '@' 'treat'
       || lk == 54085               // '[' 'treat'
       || lk == 54093               // 'ancestor' 'treat'
       || lk == 54094               // 'ancestor-or-self' 'treat'
       || lk == 54095               // 'and' 'treat'
       || lk == 54097               // 'array' 'treat'
       || lk == 54099               // 'ascending' 'treat'
       || lk == 54101               // 'attribute' 'treat'
       || lk == 54107               // 'case' 'treat'
       || lk == 54108               // 'cast' 'treat'
       || lk == 54109               // 'castable' 'treat'
       || lk == 54111               // 'child' 'treat'
       || lk == 54112               // 'collation' 'treat'
       || lk == 54113               // 'comment' 'treat'
       || lk == 54119               // 'count' 'treat'
       || lk == 54122               // 'declare' 'treat'
       || lk == 54123               // 'default' 'treat'
       || lk == 54125               // 'descendant' 'treat'
       || lk == 54126               // 'descendant-or-self' 'treat'
       || lk == 54127               // 'descending' 'treat'
       || lk == 54129               // 'div' 'treat'
       || lk == 54130               // 'document' 'treat'
       || lk == 54131               // 'document-node' 'treat'
       || lk == 54132               // 'element' 'treat'
       || lk == 54133               // 'else' 'treat'
       || lk == 54134               // 'empty' 'treat'
       || lk == 54135               // 'empty-sequence' 'treat'
       || lk == 54137               // 'end' 'treat'
       || lk == 54138               // 'eq' 'treat'
       || lk == 54139               // 'every' 'treat'
       || lk == 54140               // 'except' 'treat'
       || lk == 54145               // 'following' 'treat'
       || lk == 54146               // 'following-sibling' 'treat'
       || lk == 54147               // 'for' 'treat'
       || lk == 54148               // 'function' 'treat'
       || lk == 54149               // 'ge' 'treat'
       || lk == 54151               // 'group' 'treat'
       || lk == 54153               // 'gt' 'treat'
       || lk == 54154               // 'idiv' 'treat'
       || lk == 54155               // 'if' 'treat'
       || lk == 54156               // 'import' 'treat'
       || lk == 54161               // 'instance' 'treat'
       || lk == 54162               // 'intersect' 'treat'
       || lk == 54165               // 'is' 'treat'
       || lk == 54166               // 'item' 'treat'
       || lk == 54170               // 'le' 'treat'
       || lk == 54172               // 'let' 'treat'
       || lk == 54174               // 'lt' 'treat'
       || lk == 54175               // 'map' 'treat'
       || lk == 54177               // 'mod' 'treat'
       || lk == 54179               // 'module' 'treat'
       || lk == 54180               // 'namespace' 'treat'
       || lk == 54181               // 'namespace-node' 'treat'
       || lk == 54182               // 'ne' 'treat'
       || lk == 54186               // 'node' 'treat'
       || lk == 54189               // 'only' 'treat'
       || lk == 54191               // 'or' 'treat'
       || lk == 54192               // 'order' 'treat'
       || lk == 54193               // 'ordered' 'treat'
       || lk == 54195               // 'parent' 'treat'
       || lk == 54200               // 'preceding' 'treat'
       || lk == 54201               // 'preceding-sibling' 'treat'
       || lk == 54204               // 'processing-instruction' 'treat'
       || lk == 54207               // 'return' 'treat'
       || lk == 54210               // 'satisfies' 'treat'
       || lk == 54212               // 'schema-attribute' 'treat'
       || lk == 54213               // 'schema-element' 'treat'
       || lk == 54214               // 'self' 'treat'
       || lk == 54217               // 'some' 'treat'
       || lk == 54218               // 'stable' 'treat'
       || lk == 54219               // 'start' 'treat'
       || lk == 54222               // 'switch' 'treat'
       || lk == 54223               // 'text' 'treat'
       || lk == 54225               // 'to' 'treat'
       || lk == 54227               // 'treat' 'treat'
       || lk == 54228               // 'try' 'treat'
       || lk == 54231               // 'typeswitch' 'treat'
       || lk == 54232               // 'union' 'treat'
       || lk == 54233               // 'unordered' 'treat'
       || lk == 54235               // 'validate' 'treat'
       || lk == 54240               // 'where' 'treat'
       || lk == 54244               // 'xquery' 'treat'
       || lk == 54303               // '$' 'try'
       || lk == 54304               // '%' 'try'
       || lk == 54306               // '(' 'try'
       || lk == 54307               // '(#' 'try'
       || lk == 54311               // '+' 'try'
       || lk == 54313               // '-' 'try'
       || lk == 54317               // '/' 'try'
       || lk == 54318               // '//' 'try'
       || lk == 54325               // '<' 'try'
       || lk == 54339               // '@' 'try'
       || lk == 54341               // '[' 'try'
       || lk == 54357               // 'attribute' 'try'
       || lk == 54388               // 'element' 'try'
       || lk == 54659               // 'for' 'tumbling'
       || lk == 55003               // 'validate' 'type'
       || lk == 55071               // '$' 'typeswitch'
       || lk == 55072               // '%' 'typeswitch'
       || lk == 55074               // '(' 'typeswitch'
       || lk == 55075               // '(#' 'typeswitch'
       || lk == 55079               // '+' 'typeswitch'
       || lk == 55081               // '-' 'typeswitch'
       || lk == 55085               // '/' 'typeswitch'
       || lk == 55086               // '//' 'typeswitch'
       || lk == 55093               // '<' 'typeswitch'
       || lk == 55107               // '@' 'typeswitch'
       || lk == 55109               // '[' 'typeswitch'
       || lk == 55125               // 'attribute' 'typeswitch'
       || lk == 55156               // 'element' 'typeswitch'
       || lk == 55297               // IntegerLiteral 'union'
       || lk == 55298               // DecimalLiteral 'union'
       || lk == 55299               // DoubleLiteral 'union'
       || lk == 55300               // StringLiteral 'union'
       || lk == 55301               // URIQualifiedName 'union'
       || lk == 55311               // QName^Token 'union'
       || lk == 55317               // Wildcard 'union'
       || lk == 55327               // '$' 'union'
       || lk == 55328               // '%' 'union'
       || lk == 55330               // '(' 'union'
       || lk == 55331               // '(#' 'union'
       || lk == 55335               // '+' 'union'
       || lk == 55337               // '-' 'union'
       || lk == 55339               // '.' 'union'
       || lk == 55340               // '..' 'union'
       || lk == 55341               // '/' 'union'
       || lk == 55342               // '//' 'union'
       || lk == 55349               // '<' 'union'
       || lk == 55361               // '?' 'union'
       || lk == 55363               // '@' 'union'
       || lk == 55365               // '[' 'union'
       || lk == 55373               // 'ancestor' 'union'
       || lk == 55374               // 'ancestor-or-self' 'union'
       || lk == 55375               // 'and' 'union'
       || lk == 55377               // 'array' 'union'
       || lk == 55379               // 'ascending' 'union'
       || lk == 55381               // 'attribute' 'union'
       || lk == 55387               // 'case' 'union'
       || lk == 55388               // 'cast' 'union'
       || lk == 55389               // 'castable' 'union'
       || lk == 55391               // 'child' 'union'
       || lk == 55392               // 'collation' 'union'
       || lk == 55393               // 'comment' 'union'
       || lk == 55399               // 'count' 'union'
       || lk == 55402               // 'declare' 'union'
       || lk == 55403               // 'default' 'union'
       || lk == 55405               // 'descendant' 'union'
       || lk == 55406               // 'descendant-or-self' 'union'
       || lk == 55407               // 'descending' 'union'
       || lk == 55409               // 'div' 'union'
       || lk == 55410               // 'document' 'union'
       || lk == 55411               // 'document-node' 'union'
       || lk == 55412               // 'element' 'union'
       || lk == 55413               // 'else' 'union'
       || lk == 55414               // 'empty' 'union'
       || lk == 55415               // 'empty-sequence' 'union'
       || lk == 55417               // 'end' 'union'
       || lk == 55418               // 'eq' 'union'
       || lk == 55419               // 'every' 'union'
       || lk == 55420               // 'except' 'union'
       || lk == 55425               // 'following' 'union'
       || lk == 55426               // 'following-sibling' 'union'
       || lk == 55427               // 'for' 'union'
       || lk == 55428               // 'function' 'union'
       || lk == 55429               // 'ge' 'union'
       || lk == 55431               // 'group' 'union'
       || lk == 55433               // 'gt' 'union'
       || lk == 55434               // 'idiv' 'union'
       || lk == 55435               // 'if' 'union'
       || lk == 55436               // 'import' 'union'
       || lk == 55441               // 'instance' 'union'
       || lk == 55442               // 'intersect' 'union'
       || lk == 55445               // 'is' 'union'
       || lk == 55446               // 'item' 'union'
       || lk == 55450               // 'le' 'union'
       || lk == 55452               // 'let' 'union'
       || lk == 55454               // 'lt' 'union'
       || lk == 55455               // 'map' 'union'
       || lk == 55457               // 'mod' 'union'
       || lk == 55459               // 'module' 'union'
       || lk == 55460               // 'namespace' 'union'
       || lk == 55461               // 'namespace-node' 'union'
       || lk == 55462               // 'ne' 'union'
       || lk == 55466               // 'node' 'union'
       || lk == 55469               // 'only' 'union'
       || lk == 55471               // 'or' 'union'
       || lk == 55472               // 'order' 'union'
       || lk == 55473               // 'ordered' 'union'
       || lk == 55475               // 'parent' 'union'
       || lk == 55480               // 'preceding' 'union'
       || lk == 55481               // 'preceding-sibling' 'union'
       || lk == 55484               // 'processing-instruction' 'union'
       || lk == 55487               // 'return' 'union'
       || lk == 55490               // 'satisfies' 'union'
       || lk == 55492               // 'schema-attribute' 'union'
       || lk == 55493               // 'schema-element' 'union'
       || lk == 55494               // 'self' 'union'
       || lk == 55497               // 'some' 'union'
       || lk == 55498               // 'stable' 'union'
       || lk == 55499               // 'start' 'union'
       || lk == 55502               // 'switch' 'union'
       || lk == 55503               // 'text' 'union'
       || lk == 55505               // 'to' 'union'
       || lk == 55507               // 'treat' 'union'
       || lk == 55508               // 'try' 'union'
       || lk == 55511               // 'typeswitch' 'union'
       || lk == 55512               // 'union' 'union'
       || lk == 55513               // 'unordered' 'union'
       || lk == 55515               // 'validate' 'union'
       || lk == 55520               // 'where' 'union'
       || lk == 55524               // 'xquery' 'union'
       || lk == 55583               // '$' 'unordered'
       || lk == 55584               // '%' 'unordered'
       || lk == 55586               // '(' 'unordered'
       || lk == 55587               // '(#' 'unordered'
       || lk == 55591               // '+' 'unordered'
       || lk == 55593               // '-' 'unordered'
       || lk == 55597               // '/' 'unordered'
       || lk == 55598               // '//' 'unordered'
       || lk == 55605               // '<' 'unordered'
       || lk == 55619               // '@' 'unordered'
       || lk == 55621               // '[' 'unordered'
       || lk == 55637               // 'attribute' 'unordered'
       || lk == 55668               // 'element' 'unordered'
       || lk == 55956               // 'invoke' 'updating'
       || lk == 56095               // '$' 'validate'
       || lk == 56096               // '%' 'validate'
       || lk == 56098               // '(' 'validate'
       || lk == 56099               // '(#' 'validate'
       || lk == 56103               // '+' 'validate'
       || lk == 56105               // '-' 'validate'
       || lk == 56109               // '/' 'validate'
       || lk == 56110               // '//' 'validate'
       || lk == 56117               // '<' 'validate'
       || lk == 56131               // '@' 'validate'
       || lk == 56133               // '[' 'validate'
       || lk == 56149               // 'attribute' 'validate'
       || lk == 56180               // 'element' 'validate'
       || lk == 56510               // 'replace' 'value'
       || lk == 57375               // '$' 'where'
       || lk == 57376               // '%' 'where'
       || lk == 57378               // '(' 'where'
       || lk == 57379               // '(#' 'where'
       || lk == 57383               // '+' 'where'
       || lk == 57385               // '-' 'where'
       || lk == 57389               // '/' 'where'
       || lk == 57390               // '//' 'where'
       || lk == 57397               // '<' 'where'
       || lk == 57409               // '?' 'where'
       || lk == 57411               // '@' 'where'
       || lk == 57413               // '[' 'where'
       || lk == 57429               // 'attribute' 'where'
       || lk == 57460               // 'element' 'where'
       || lk == 57508               // 'namespace' 'where'
       || lk == 57532               // 'processing-instruction' 'where'
       || lk == 58399               // '$' 'xquery'
       || lk == 58400               // '%' 'xquery'
       || lk == 58402               // '(' 'xquery'
       || lk == 58403               // '(#' 'xquery'
       || lk == 58407               // '+' 'xquery'
       || lk == 58409               // '-' 'xquery'
       || lk == 58413               // '/' 'xquery'
       || lk == 58414               // '//' 'xquery'
       || lk == 58421               // '<' 'xquery'
       || lk == 58435               // '@' 'xquery'
       || lk == 58437               // '[' 'xquery'
       || lk == 58453               // 'attribute' 'xquery'
       || lk == 58484               // 'element' 'xquery'
       || lk == 58961               // 'array' '{'
       || lk == 58965               // 'attribute' '{'
       || lk == 58977               // 'comment' '{'
       || lk == 58994               // 'document' '{'
       || lk == 58996               // 'element' '{'
       || lk == 59039               // 'map' '{'
       || lk == 59044               // 'namespace' '{'
       || lk == 59057               // 'ordered' '{'
       || lk == 59068               // 'processing-instruction' '{'
       || lk == 59087               // 'text' '{'
       || lk == 59092               // 'try' '{'
       || lk == 59097               // 'unordered' '{'
       || lk == 59099               // 'validate' '{'
       || lk == 59393               // IntegerLiteral '|'
       || lk == 59394               // DecimalLiteral '|'
       || lk == 59395               // DoubleLiteral '|'
       || lk == 59396               // StringLiteral '|'
       || lk == 59397               // URIQualifiedName '|'
       || lk == 59407               // QName^Token '|'
       || lk == 59413               // Wildcard '|'
       || lk == 59435               // '.' '|'
       || lk == 59436               // '..' '|'
       || lk == 59437               // '/' '|'
       || lk == 59469               // 'ancestor' '|'
       || lk == 59470               // 'ancestor-or-self' '|'
       || lk == 59471               // 'and' '|'
       || lk == 59473               // 'array' '|'
       || lk == 59475               // 'ascending' '|'
       || lk == 59477               // 'attribute' '|'
       || lk == 59483               // 'case' '|'
       || lk == 59484               // 'cast' '|'
       || lk == 59485               // 'castable' '|'
       || lk == 59487               // 'child' '|'
       || lk == 59488               // 'collation' '|'
       || lk == 59489               // 'comment' '|'
       || lk == 59495               // 'count' '|'
       || lk == 59498               // 'declare' '|'
       || lk == 59499               // 'default' '|'
       || lk == 59501               // 'descendant' '|'
       || lk == 59502               // 'descendant-or-self' '|'
       || lk == 59503               // 'descending' '|'
       || lk == 59505               // 'div' '|'
       || lk == 59506               // 'document' '|'
       || lk == 59507               // 'document-node' '|'
       || lk == 59508               // 'element' '|'
       || lk == 59509               // 'else' '|'
       || lk == 59510               // 'empty' '|'
       || lk == 59511               // 'empty-sequence' '|'
       || lk == 59513               // 'end' '|'
       || lk == 59514               // 'eq' '|'
       || lk == 59515               // 'every' '|'
       || lk == 59516               // 'except' '|'
       || lk == 59521               // 'following' '|'
       || lk == 59522               // 'following-sibling' '|'
       || lk == 59523               // 'for' '|'
       || lk == 59524               // 'function' '|'
       || lk == 59525               // 'ge' '|'
       || lk == 59527               // 'group' '|'
       || lk == 59529               // 'gt' '|'
       || lk == 59530               // 'idiv' '|'
       || lk == 59531               // 'if' '|'
       || lk == 59532               // 'import' '|'
       || lk == 59537               // 'instance' '|'
       || lk == 59538               // 'intersect' '|'
       || lk == 59541               // 'is' '|'
       || lk == 59542               // 'item' '|'
       || lk == 59546               // 'le' '|'
       || lk == 59548               // 'let' '|'
       || lk == 59550               // 'lt' '|'
       || lk == 59551               // 'map' '|'
       || lk == 59553               // 'mod' '|'
       || lk == 59555               // 'module' '|'
       || lk == 59556               // 'namespace' '|'
       || lk == 59557               // 'namespace-node' '|'
       || lk == 59558               // 'ne' '|'
       || lk == 59562               // 'node' '|'
       || lk == 59565               // 'only' '|'
       || lk == 59567               // 'or' '|'
       || lk == 59568               // 'order' '|'
       || lk == 59569               // 'ordered' '|'
       || lk == 59571               // 'parent' '|'
       || lk == 59576               // 'preceding' '|'
       || lk == 59577               // 'preceding-sibling' '|'
       || lk == 59580               // 'processing-instruction' '|'
       || lk == 59583               // 'return' '|'
       || lk == 59586               // 'satisfies' '|'
       || lk == 59588               // 'schema-attribute' '|'
       || lk == 59589               // 'schema-element' '|'
       || lk == 59590               // 'self' '|'
       || lk == 59593               // 'some' '|'
       || lk == 59594               // 'stable' '|'
       || lk == 59595               // 'start' '|'
       || lk == 59598               // 'switch' '|'
       || lk == 59599               // 'text' '|'
       || lk == 59601               // 'to' '|'
       || lk == 59603               // 'treat' '|'
       || lk == 59604               // 'try' '|'
       || lk == 59607               // 'typeswitch' '|'
       || lk == 59608               // 'union' '|'
       || lk == 59609               // 'unordered' '|'
       || lk == 59611               // 'validate' '|'
       || lk == 59616               // 'where' '|'
       || lk == 59620               // 'xquery' '|'
       || lk == 59649               // IntegerLiteral '||'
       || lk == 59650               // DecimalLiteral '||'
       || lk == 59651               // DoubleLiteral '||'
       || lk == 59652               // StringLiteral '||'
       || lk == 59653               // URIQualifiedName '||'
       || lk == 59663               // QName^Token '||'
       || lk == 59669               // Wildcard '||'
       || lk == 59691               // '.' '||'
       || lk == 59692               // '..' '||'
       || lk == 59693               // '/' '||'
       || lk == 59725               // 'ancestor' '||'
       || lk == 59726               // 'ancestor-or-self' '||'
       || lk == 59727               // 'and' '||'
       || lk == 59729               // 'array' '||'
       || lk == 59731               // 'ascending' '||'
       || lk == 59733               // 'attribute' '||'
       || lk == 59739               // 'case' '||'
       || lk == 59740               // 'cast' '||'
       || lk == 59741               // 'castable' '||'
       || lk == 59743               // 'child' '||'
       || lk == 59744               // 'collation' '||'
       || lk == 59745               // 'comment' '||'
       || lk == 59751               // 'count' '||'
       || lk == 59754               // 'declare' '||'
       || lk == 59755               // 'default' '||'
       || lk == 59757               // 'descendant' '||'
       || lk == 59758               // 'descendant-or-self' '||'
       || lk == 59759               // 'descending' '||'
       || lk == 59761               // 'div' '||'
       || lk == 59762               // 'document' '||'
       || lk == 59763               // 'document-node' '||'
       || lk == 59764               // 'element' '||'
       || lk == 59765               // 'else' '||'
       || lk == 59766               // 'empty' '||'
       || lk == 59767               // 'empty-sequence' '||'
       || lk == 59769               // 'end' '||'
       || lk == 59770               // 'eq' '||'
       || lk == 59771               // 'every' '||'
       || lk == 59772               // 'except' '||'
       || lk == 59777               // 'following' '||'
       || lk == 59778               // 'following-sibling' '||'
       || lk == 59779               // 'for' '||'
       || lk == 59780               // 'function' '||'
       || lk == 59781               // 'ge' '||'
       || lk == 59783               // 'group' '||'
       || lk == 59785               // 'gt' '||'
       || lk == 59786               // 'idiv' '||'
       || lk == 59787               // 'if' '||'
       || lk == 59788               // 'import' '||'
       || lk == 59793               // 'instance' '||'
       || lk == 59794               // 'intersect' '||'
       || lk == 59797               // 'is' '||'
       || lk == 59798               // 'item' '||'
       || lk == 59802               // 'le' '||'
       || lk == 59804               // 'let' '||'
       || lk == 59806               // 'lt' '||'
       || lk == 59807               // 'map' '||'
       || lk == 59809               // 'mod' '||'
       || lk == 59811               // 'module' '||'
       || lk == 59812               // 'namespace' '||'
       || lk == 59813               // 'namespace-node' '||'
       || lk == 59814               // 'ne' '||'
       || lk == 59818               // 'node' '||'
       || lk == 59821               // 'only' '||'
       || lk == 59823               // 'or' '||'
       || lk == 59824               // 'order' '||'
       || lk == 59825               // 'ordered' '||'
       || lk == 59827               // 'parent' '||'
       || lk == 59832               // 'preceding' '||'
       || lk == 59833               // 'preceding-sibling' '||'
       || lk == 59836               // 'processing-instruction' '||'
       || lk == 59839               // 'return' '||'
       || lk == 59842               // 'satisfies' '||'
       || lk == 59844               // 'schema-attribute' '||'
       || lk == 59845               // 'schema-element' '||'
       || lk == 59846               // 'self' '||'
       || lk == 59849               // 'some' '||'
       || lk == 59850               // 'stable' '||'
       || lk == 59851               // 'start' '||'
       || lk == 59854               // 'switch' '||'
       || lk == 59855               // 'text' '||'
       || lk == 59857               // 'to' '||'
       || lk == 59859               // 'treat' '||'
       || lk == 59860               // 'try' '||'
       || lk == 59863               // 'typeswitch' '||'
       || lk == 59864               // 'union' '||'
       || lk == 59865               // 'unordered' '||'
       || lk == 59867               // 'validate' '||'
       || lk == 59872               // 'where' '||'
       || lk == 59876)              // 'xquery' '||'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0, lk);
        }
      }
      if (lk == -2
       || lk == 234                 // '}'
       || lk == 6401                // IntegerLiteral EOF
       || lk == 6402                // DecimalLiteral EOF
       || lk == 6403                // DoubleLiteral EOF
       || lk == 6404                // StringLiteral EOF
       || lk == 6405                // URIQualifiedName EOF
       || lk == 6415                // QName^Token EOF
       || lk == 6421                // Wildcard EOF
       || lk == 6443                // '.' EOF
       || lk == 6444                // '..' EOF
       || lk == 6445                // '/' EOF
       || lk == 6477                // 'ancestor' EOF
       || lk == 6478                // 'ancestor-or-self' EOF
       || lk == 6479                // 'and' EOF
       || lk == 6481                // 'array' EOF
       || lk == 6483                // 'ascending' EOF
       || lk == 6485                // 'attribute' EOF
       || lk == 6491                // 'case' EOF
       || lk == 6492                // 'cast' EOF
       || lk == 6493                // 'castable' EOF
       || lk == 6495                // 'child' EOF
       || lk == 6496                // 'collation' EOF
       || lk == 6497                // 'comment' EOF
       || lk == 6503                // 'count' EOF
       || lk == 6506                // 'declare' EOF
       || lk == 6507                // 'default' EOF
       || lk == 6509                // 'descendant' EOF
       || lk == 6510                // 'descendant-or-self' EOF
       || lk == 6511                // 'descending' EOF
       || lk == 6513                // 'div' EOF
       || lk == 6514                // 'document' EOF
       || lk == 6515                // 'document-node' EOF
       || lk == 6516                // 'element' EOF
       || lk == 6517                // 'else' EOF
       || lk == 6518                // 'empty' EOF
       || lk == 6519                // 'empty-sequence' EOF
       || lk == 6521                // 'end' EOF
       || lk == 6522                // 'eq' EOF
       || lk == 6523                // 'every' EOF
       || lk == 6524                // 'except' EOF
       || lk == 6529                // 'following' EOF
       || lk == 6530                // 'following-sibling' EOF
       || lk == 6531                // 'for' EOF
       || lk == 6532                // 'function' EOF
       || lk == 6533                // 'ge' EOF
       || lk == 6535                // 'group' EOF
       || lk == 6537                // 'gt' EOF
       || lk == 6538                // 'idiv' EOF
       || lk == 6539                // 'if' EOF
       || lk == 6540                // 'import' EOF
       || lk == 6545                // 'instance' EOF
       || lk == 6546                // 'intersect' EOF
       || lk == 6549                // 'is' EOF
       || lk == 6550                // 'item' EOF
       || lk == 6554                // 'le' EOF
       || lk == 6556                // 'let' EOF
       || lk == 6558                // 'lt' EOF
       || lk == 6559                // 'map' EOF
       || lk == 6561                // 'mod' EOF
       || lk == 6563                // 'module' EOF
       || lk == 6564                // 'namespace' EOF
       || lk == 6565                // 'namespace-node' EOF
       || lk == 6566                // 'ne' EOF
       || lk == 6570                // 'node' EOF
       || lk == 6573                // 'only' EOF
       || lk == 6575                // 'or' EOF
       || lk == 6576                // 'order' EOF
       || lk == 6577                // 'ordered' EOF
       || lk == 6579                // 'parent' EOF
       || lk == 6584                // 'preceding' EOF
       || lk == 6585                // 'preceding-sibling' EOF
       || lk == 6588                // 'processing-instruction' EOF
       || lk == 6591                // 'return' EOF
       || lk == 6594                // 'satisfies' EOF
       || lk == 6596                // 'schema-attribute' EOF
       || lk == 6597                // 'schema-element' EOF
       || lk == 6598                // 'self' EOF
       || lk == 6601                // 'some' EOF
       || lk == 6602                // 'stable' EOF
       || lk == 6603                // 'start' EOF
       || lk == 6606                // 'switch' EOF
       || lk == 6607                // 'text' EOF
       || lk == 6609                // 'to' EOF
       || lk == 6611                // 'treat' EOF
       || lk == 6612                // 'try' EOF
       || lk == 6615                // 'typeswitch' EOF
       || lk == 6616                // 'union' EOF
       || lk == 6617                // 'unordered' EOF
       || lk == 6619                // 'validate' EOF
       || lk == 6624                // 'where' EOF
       || lk == 6628                // 'xquery' EOF
       || lk == 10241               // IntegerLiteral ','
       || lk == 10242               // DecimalLiteral ','
       || lk == 10243               // DoubleLiteral ','
       || lk == 10244               // StringLiteral ','
       || lk == 10245               // URIQualifiedName ','
       || lk == 10255               // QName^Token ','
       || lk == 10261               // Wildcard ','
       || lk == 10283               // '.' ','
       || lk == 10284               // '..' ','
       || lk == 10285               // '/' ','
       || lk == 10317               // 'ancestor' ','
       || lk == 10318               // 'ancestor-or-self' ','
       || lk == 10319               // 'and' ','
       || lk == 10321               // 'array' ','
       || lk == 10323               // 'ascending' ','
       || lk == 10325               // 'attribute' ','
       || lk == 10331               // 'case' ','
       || lk == 10332               // 'cast' ','
       || lk == 10333               // 'castable' ','
       || lk == 10335               // 'child' ','
       || lk == 10336               // 'collation' ','
       || lk == 10337               // 'comment' ','
       || lk == 10343               // 'count' ','
       || lk == 10346               // 'declare' ','
       || lk == 10347               // 'default' ','
       || lk == 10349               // 'descendant' ','
       || lk == 10350               // 'descendant-or-self' ','
       || lk == 10351               // 'descending' ','
       || lk == 10353               // 'div' ','
       || lk == 10354               // 'document' ','
       || lk == 10355               // 'document-node' ','
       || lk == 10356               // 'element' ','
       || lk == 10357               // 'else' ','
       || lk == 10358               // 'empty' ','
       || lk == 10359               // 'empty-sequence' ','
       || lk == 10361               // 'end' ','
       || lk == 10362               // 'eq' ','
       || lk == 10363               // 'every' ','
       || lk == 10364               // 'except' ','
       || lk == 10369               // 'following' ','
       || lk == 10370               // 'following-sibling' ','
       || lk == 10371               // 'for' ','
       || lk == 10372               // 'function' ','
       || lk == 10373               // 'ge' ','
       || lk == 10375               // 'group' ','
       || lk == 10377               // 'gt' ','
       || lk == 10378               // 'idiv' ','
       || lk == 10379               // 'if' ','
       || lk == 10380               // 'import' ','
       || lk == 10385               // 'instance' ','
       || lk == 10386               // 'intersect' ','
       || lk == 10389               // 'is' ','
       || lk == 10390               // 'item' ','
       || lk == 10394               // 'le' ','
       || lk == 10396               // 'let' ','
       || lk == 10398               // 'lt' ','
       || lk == 10399               // 'map' ','
       || lk == 10401               // 'mod' ','
       || lk == 10403               // 'module' ','
       || lk == 10404               // 'namespace' ','
       || lk == 10405               // 'namespace-node' ','
       || lk == 10406               // 'ne' ','
       || lk == 10410               // 'node' ','
       || lk == 10413               // 'only' ','
       || lk == 10415               // 'or' ','
       || lk == 10416               // 'order' ','
       || lk == 10417               // 'ordered' ','
       || lk == 10419               // 'parent' ','
       || lk == 10424               // 'preceding' ','
       || lk == 10425               // 'preceding-sibling' ','
       || lk == 10428               // 'processing-instruction' ','
       || lk == 10431               // 'return' ','
       || lk == 10434               // 'satisfies' ','
       || lk == 10436               // 'schema-attribute' ','
       || lk == 10437               // 'schema-element' ','
       || lk == 10438               // 'self' ','
       || lk == 10441               // 'some' ','
       || lk == 10442               // 'stable' ','
       || lk == 10443               // 'start' ','
       || lk == 10446               // 'switch' ','
       || lk == 10447               // 'text' ','
       || lk == 10449               // 'to' ','
       || lk == 10451               // 'treat' ','
       || lk == 10452               // 'try' ','
       || lk == 10455               // 'typeswitch' ','
       || lk == 10456               // 'union' ','
       || lk == 10457               // 'unordered' ','
       || lk == 10459               // 'validate' ','
       || lk == 10464               // 'where' ','
       || lk == 10468)              // 'xquery' ','
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(188);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(182);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 35:                      // '(#'
        lookahead2(166);            // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 46:                      // '//'
        lookahead2W(178);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      case 53:                      // '<'
        lookahead2(164);            // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 54:                      // '<!--'
        lookahead2(3);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(0);              // PITarget
        break;
      case 65:                      // '?'
        lookahead2W(161);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
        break;
      case 67:                      // '@'
        lookahead2W(169);           // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      case 69:                      // '['
        lookahead2W(183);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 73:                      // '``['
        lookahead2(1);              // StringConstructorChars
        break;
      case 101:                     // 'copy'
        lookahead2W(23);            // S^WS | '$' | '(:'
        break;
      case 131:                     // 'for'
        lookahead2W(207);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'tumbling' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
        break;
      case 148:                     // 'invoke'
        lookahead2W(68);            // S^WS | '(:' | 'updating'
        break;
      case 189:                     // 'rename'
        lookahead2W(109);           // S^WS | '(:' | 'json' | 'node'
        break;
      case 190:                     // 'replace'
        lookahead2W(114);           // S^WS | '(:' | 'node' | 'value'
        break;
      case 219:                     // 'validate'
        lookahead2W(208);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'lax' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(180);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 108:                     // 'delete'
      case 144:                     // 'insert'
        lookahead2W(130);           // S^WS | '(:' | 'json' | 'node' | 'nodes'
        break;
      case 164:                     // 'namespace'
      case 188:                     // 'processing-instruction'
        lookahead2W(200);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!' |
                                    // '!=' | '#' | '$' | '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '?' | '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                    // 'following' | 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 1:                       // IntegerLiteral
      case 2:                       // DecimalLiteral
      case 3:                       // DoubleLiteral
      case 4:                       // StringLiteral
      case 21:                      // Wildcard
      case 43:                      // '.'
      case 44:                      // '..'
      case 45:                      // '/'
        lookahead2W(195);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 77:                      // 'ancestor'
      case 78:                      // 'ancestor-or-self'
      case 85:                      // 'attribute'
      case 95:                      // 'child'
      case 109:                     // 'descendant'
      case 110:                     // 'descendant-or-self'
      case 129:                     // 'following'
      case 130:                     // 'following-sibling'
      case 179:                     // 'parent'
      case 184:                     // 'preceding'
      case 185:                     // 'preceding-sibling'
      case 198:                     // 'self'
        lookahead2W(201);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 5:                       // URIQualifiedName
      case 15:                      // QName^Token
      case 79:                      // 'and'
      case 81:                      // 'array'
      case 83:                      // 'ascending'
      case 91:                      // 'case'
      case 92:                      // 'cast'
      case 93:                      // 'castable'
      case 96:                      // 'collation'
      case 97:                      // 'comment'
      case 103:                     // 'count'
      case 106:                     // 'declare'
      case 107:                     // 'default'
      case 111:                     // 'descending'
      case 113:                     // 'div'
      case 114:                     // 'document'
      case 115:                     // 'document-node'
      case 116:                     // 'element'
      case 117:                     // 'else'
      case 118:                     // 'empty'
      case 119:                     // 'empty-sequence'
      case 121:                     // 'end'
      case 122:                     // 'eq'
      case 123:                     // 'every'
      case 124:                     // 'except'
      case 132:                     // 'function'
      case 133:                     // 'ge'
      case 135:                     // 'group'
      case 137:                     // 'gt'
      case 138:                     // 'idiv'
      case 139:                     // 'if'
      case 140:                     // 'import'
      case 145:                     // 'instance'
      case 146:                     // 'intersect'
      case 149:                     // 'is'
      case 150:                     // 'item'
      case 154:                     // 'le'
      case 156:                     // 'let'
      case 158:                     // 'lt'
      case 159:                     // 'map'
      case 161:                     // 'mod'
      case 163:                     // 'module'
      case 165:                     // 'namespace-node'
      case 166:                     // 'ne'
      case 170:                     // 'node'
      case 173:                     // 'only'
      case 175:                     // 'or'
      case 176:                     // 'order'
      case 177:                     // 'ordered'
      case 191:                     // 'return'
      case 194:                     // 'satisfies'
      case 196:                     // 'schema-attribute'
      case 197:                     // 'schema-element'
      case 201:                     // 'some'
      case 202:                     // 'stable'
      case 203:                     // 'start'
      case 206:                     // 'switch'
      case 207:                     // 'text'
      case 209:                     // 'to'
      case 211:                     // 'treat'
      case 212:                     // 'try'
      case 215:                     // 'typeswitch'
      case 216:                     // 'union'
      case 217:                     // 'unordered'
      case 224:                     // 'where'
      case 228:                     // 'xquery'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 290                 // '(' IntegerLiteral
       || lk == 295                 // '+' IntegerLiteral
       || lk == 297                 // '-' IntegerLiteral
       || lk == 301                 // '/' IntegerLiteral
       || lk == 302                 // '//' IntegerLiteral
       || lk == 321                 // '?' IntegerLiteral
       || lk == 325                 // '[' IntegerLiteral
       || lk == 546                 // '(' DecimalLiteral
       || lk == 551                 // '+' DecimalLiteral
       || lk == 553                 // '-' DecimalLiteral
       || lk == 557                 // '/' DecimalLiteral
       || lk == 558                 // '//' DecimalLiteral
       || lk == 581                 // '[' DecimalLiteral
       || lk == 802                 // '(' DoubleLiteral
       || lk == 807                 // '+' DoubleLiteral
       || lk == 809                 // '-' DoubleLiteral
       || lk == 813                 // '/' DoubleLiteral
       || lk == 814                 // '//' DoubleLiteral
       || lk == 837                 // '[' DoubleLiteral
       || lk == 1058                // '(' StringLiteral
       || lk == 1063                // '+' StringLiteral
       || lk == 1065                // '-' StringLiteral
       || lk == 1069                // '/' StringLiteral
       || lk == 1070                // '//' StringLiteral
       || lk == 1093                // '[' StringLiteral
       || lk == 1311                // '$' URIQualifiedName
       || lk == 1312                // '%' URIQualifiedName
       || lk == 1314                // '(' URIQualifiedName
       || lk == 1315                // '(#' URIQualifiedName
       || lk == 1319                // '+' URIQualifiedName
       || lk == 1321                // '-' URIQualifiedName
       || lk == 1325                // '/' URIQualifiedName
       || lk == 1326                // '//' URIQualifiedName
       || lk == 1347                // '@' URIQualifiedName
       || lk == 1349                // '[' URIQualifiedName
       || lk == 1365                // 'attribute' URIQualifiedName
       || lk == 1396                // 'element' URIQualifiedName
       || lk == 3131                // '<?' PITarget
       || lk == 3649                // '?' NCName^Token
       || lk == 3748                // 'namespace' NCName^Token
       || lk == 3772                // 'processing-instruction' NCName^Token
       || lk == 3871                // '$' QName^Token
       || lk == 3872                // '%' QName^Token
       || lk == 3874                // '(' QName^Token
       || lk == 3875                // '(#' QName^Token
       || lk == 3879                // '+' QName^Token
       || lk == 3881                // '-' QName^Token
       || lk == 3885                // '/' QName^Token
       || lk == 3886                // '//' QName^Token
       || lk == 3893                // '<' QName^Token
       || lk == 3907                // '@' QName^Token
       || lk == 3909                // '[' QName^Token
       || lk == 3925                // 'attribute' QName^Token
       || lk == 3956                // 'element' QName^Token
       || lk == 4169                // '``[' StringConstructorChars
       || lk == 4387                // '(#' S
       || lk == 5410                // '(' Wildcard
       || lk == 5415                // '+' Wildcard
       || lk == 5417                // '-' Wildcard
       || lk == 5421                // '/' Wildcard
       || lk == 5422                // '//' Wildcard
       || lk == 5443                // '@' Wildcard
       || lk == 5445                // '[' Wildcard
       || lk == 5686                // '<!--' DirCommentContents
       || lk == 6657                // IntegerLiteral '!'
       || lk == 6658                // DecimalLiteral '!'
       || lk == 6659                // DoubleLiteral '!'
       || lk == 6660                // StringLiteral '!'
       || lk == 6661                // URIQualifiedName '!'
       || lk == 6671                // QName^Token '!'
       || lk == 6677                // Wildcard '!'
       || lk == 6699                // '.' '!'
       || lk == 6700                // '..' '!'
       || lk == 6701                // '/' '!'
       || lk == 6733                // 'ancestor' '!'
       || lk == 6734                // 'ancestor-or-self' '!'
       || lk == 6735                // 'and' '!'
       || lk == 6737                // 'array' '!'
       || lk == 6739                // 'ascending' '!'
       || lk == 6741                // 'attribute' '!'
       || lk == 6747                // 'case' '!'
       || lk == 6748                // 'cast' '!'
       || lk == 6749                // 'castable' '!'
       || lk == 6751                // 'child' '!'
       || lk == 6752                // 'collation' '!'
       || lk == 6753                // 'comment' '!'
       || lk == 6759                // 'count' '!'
       || lk == 6762                // 'declare' '!'
       || lk == 6763                // 'default' '!'
       || lk == 6765                // 'descendant' '!'
       || lk == 6766                // 'descendant-or-self' '!'
       || lk == 6767                // 'descending' '!'
       || lk == 6769                // 'div' '!'
       || lk == 6770                // 'document' '!'
       || lk == 6771                // 'document-node' '!'
       || lk == 6772                // 'element' '!'
       || lk == 6773                // 'else' '!'
       || lk == 6774                // 'empty' '!'
       || lk == 6775                // 'empty-sequence' '!'
       || lk == 6777                // 'end' '!'
       || lk == 6778                // 'eq' '!'
       || lk == 6779                // 'every' '!'
       || lk == 6780                // 'except' '!'
       || lk == 6785                // 'following' '!'
       || lk == 6786                // 'following-sibling' '!'
       || lk == 6787                // 'for' '!'
       || lk == 6788                // 'function' '!'
       || lk == 6789                // 'ge' '!'
       || lk == 6791                // 'group' '!'
       || lk == 6793                // 'gt' '!'
       || lk == 6794                // 'idiv' '!'
       || lk == 6795                // 'if' '!'
       || lk == 6796                // 'import' '!'
       || lk == 6801                // 'instance' '!'
       || lk == 6802                // 'intersect' '!'
       || lk == 6805                // 'is' '!'
       || lk == 6806                // 'item' '!'
       || lk == 6810                // 'le' '!'
       || lk == 6812                // 'let' '!'
       || lk == 6814                // 'lt' '!'
       || lk == 6815                // 'map' '!'
       || lk == 6817                // 'mod' '!'
       || lk == 6819                // 'module' '!'
       || lk == 6820                // 'namespace' '!'
       || lk == 6821                // 'namespace-node' '!'
       || lk == 6822                // 'ne' '!'
       || lk == 6826                // 'node' '!'
       || lk == 6829                // 'only' '!'
       || lk == 6831                // 'or' '!'
       || lk == 6832                // 'order' '!'
       || lk == 6833                // 'ordered' '!'
       || lk == 6835                // 'parent' '!'
       || lk == 6840                // 'preceding' '!'
       || lk == 6841                // 'preceding-sibling' '!'
       || lk == 6844                // 'processing-instruction' '!'
       || lk == 6847                // 'return' '!'
       || lk == 6850                // 'satisfies' '!'
       || lk == 6852                // 'schema-attribute' '!'
       || lk == 6853                // 'schema-element' '!'
       || lk == 6854                // 'self' '!'
       || lk == 6857                // 'some' '!'
       || lk == 6858                // 'stable' '!'
       || lk == 6859                // 'start' '!'
       || lk == 6862                // 'switch' '!'
       || lk == 6863                // 'text' '!'
       || lk == 6865                // 'to' '!'
       || lk == 6867                // 'treat' '!'
       || lk == 6868                // 'try' '!'
       || lk == 6871                // 'typeswitch' '!'
       || lk == 6872                // 'union' '!'
       || lk == 6873                // 'unordered' '!'
       || lk == 6875                // 'validate' '!'
       || lk == 6880                // 'where' '!'
       || lk == 6884                // 'xquery' '!'
       || lk == 6913                // IntegerLiteral '!='
       || lk == 6914                // DecimalLiteral '!='
       || lk == 6915                // DoubleLiteral '!='
       || lk == 6916                // StringLiteral '!='
       || lk == 6917                // URIQualifiedName '!='
       || lk == 6927                // QName^Token '!='
       || lk == 6933                // Wildcard '!='
       || lk == 6955                // '.' '!='
       || lk == 6956                // '..' '!='
       || lk == 6957                // '/' '!='
       || lk == 6989                // 'ancestor' '!='
       || lk == 6990                // 'ancestor-or-self' '!='
       || lk == 6991                // 'and' '!='
       || lk == 6993                // 'array' '!='
       || lk == 6995                // 'ascending' '!='
       || lk == 6997                // 'attribute' '!='
       || lk == 7003                // 'case' '!='
       || lk == 7004                // 'cast' '!='
       || lk == 7005                // 'castable' '!='
       || lk == 7007                // 'child' '!='
       || lk == 7008                // 'collation' '!='
       || lk == 7009                // 'comment' '!='
       || lk == 7015                // 'count' '!='
       || lk == 7018                // 'declare' '!='
       || lk == 7019                // 'default' '!='
       || lk == 7021                // 'descendant' '!='
       || lk == 7022                // 'descendant-or-self' '!='
       || lk == 7023                // 'descending' '!='
       || lk == 7025                // 'div' '!='
       || lk == 7026                // 'document' '!='
       || lk == 7027                // 'document-node' '!='
       || lk == 7028                // 'element' '!='
       || lk == 7029                // 'else' '!='
       || lk == 7030                // 'empty' '!='
       || lk == 7031                // 'empty-sequence' '!='
       || lk == 7033                // 'end' '!='
       || lk == 7034                // 'eq' '!='
       || lk == 7035                // 'every' '!='
       || lk == 7036                // 'except' '!='
       || lk == 7041                // 'following' '!='
       || lk == 7042                // 'following-sibling' '!='
       || lk == 7043                // 'for' '!='
       || lk == 7044                // 'function' '!='
       || lk == 7045                // 'ge' '!='
       || lk == 7047                // 'group' '!='
       || lk == 7049                // 'gt' '!='
       || lk == 7050                // 'idiv' '!='
       || lk == 7051                // 'if' '!='
       || lk == 7052                // 'import' '!='
       || lk == 7057                // 'instance' '!='
       || lk == 7058                // 'intersect' '!='
       || lk == 7061                // 'is' '!='
       || lk == 7062                // 'item' '!='
       || lk == 7066                // 'le' '!='
       || lk == 7068                // 'let' '!='
       || lk == 7070                // 'lt' '!='
       || lk == 7071                // 'map' '!='
       || lk == 7073                // 'mod' '!='
       || lk == 7075                // 'module' '!='
       || lk == 7076                // 'namespace' '!='
       || lk == 7077                // 'namespace-node' '!='
       || lk == 7078                // 'ne' '!='
       || lk == 7082                // 'node' '!='
       || lk == 7085                // 'only' '!='
       || lk == 7087                // 'or' '!='
       || lk == 7088                // 'order' '!='
       || lk == 7089                // 'ordered' '!='
       || lk == 7091                // 'parent' '!='
       || lk == 7096                // 'preceding' '!='
       || lk == 7097                // 'preceding-sibling' '!='
       || lk == 7100                // 'processing-instruction' '!='
       || lk == 7103                // 'return' '!='
       || lk == 7106                // 'satisfies' '!='
       || lk == 7108                // 'schema-attribute' '!='
       || lk == 7109                // 'schema-element' '!='
       || lk == 7110                // 'self' '!='
       || lk == 7113                // 'some' '!='
       || lk == 7114                // 'stable' '!='
       || lk == 7115                // 'start' '!='
       || lk == 7118                // 'switch' '!='
       || lk == 7119                // 'text' '!='
       || lk == 7121                // 'to' '!='
       || lk == 7123                // 'treat' '!='
       || lk == 7124                // 'try' '!='
       || lk == 7127                // 'typeswitch' '!='
       || lk == 7128                // 'union' '!='
       || lk == 7129                // 'unordered' '!='
       || lk == 7131                // 'validate' '!='
       || lk == 7136                // 'where' '!='
       || lk == 7140                // 'xquery' '!='
       || lk == 7429                // URIQualifiedName '#'
       || lk == 7439                // QName^Token '#'
       || lk == 7501                // 'ancestor' '#'
       || lk == 7502                // 'ancestor-or-self' '#'
       || lk == 7503                // 'and' '#'
       || lk == 7505                // 'array' '#'
       || lk == 7507                // 'ascending' '#'
       || lk == 7509                // 'attribute' '#'
       || lk == 7515                // 'case' '#'
       || lk == 7516                // 'cast' '#'
       || lk == 7517                // 'castable' '#'
       || lk == 7519                // 'child' '#'
       || lk == 7520                // 'collation' '#'
       || lk == 7521                // 'comment' '#'
       || lk == 7527                // 'count' '#'
       || lk == 7530                // 'declare' '#'
       || lk == 7531                // 'default' '#'
       || lk == 7533                // 'descendant' '#'
       || lk == 7534                // 'descendant-or-self' '#'
       || lk == 7535                // 'descending' '#'
       || lk == 7537                // 'div' '#'
       || lk == 7538                // 'document' '#'
       || lk == 7539                // 'document-node' '#'
       || lk == 7540                // 'element' '#'
       || lk == 7541                // 'else' '#'
       || lk == 7542                // 'empty' '#'
       || lk == 7543                // 'empty-sequence' '#'
       || lk == 7545                // 'end' '#'
       || lk == 7546                // 'eq' '#'
       || lk == 7547                // 'every' '#'
       || lk == 7548                // 'except' '#'
       || lk == 7553                // 'following' '#'
       || lk == 7554                // 'following-sibling' '#'
       || lk == 7555                // 'for' '#'
       || lk == 7556                // 'function' '#'
       || lk == 7557                // 'ge' '#'
       || lk == 7559                // 'group' '#'
       || lk == 7561                // 'gt' '#'
       || lk == 7562                // 'idiv' '#'
       || lk == 7563                // 'if' '#'
       || lk == 7564                // 'import' '#'
       || lk == 7569                // 'instance' '#'
       || lk == 7570                // 'intersect' '#'
       || lk == 7573                // 'is' '#'
       || lk == 7574                // 'item' '#'
       || lk == 7578                // 'le' '#'
       || lk == 7580                // 'let' '#'
       || lk == 7582                // 'lt' '#'
       || lk == 7583                // 'map' '#'
       || lk == 7585                // 'mod' '#'
       || lk == 7587                // 'module' '#'
       || lk == 7588                // 'namespace' '#'
       || lk == 7589                // 'namespace-node' '#'
       || lk == 7590                // 'ne' '#'
       || lk == 7594                // 'node' '#'
       || lk == 7597                // 'only' '#'
       || lk == 7599                // 'or' '#'
       || lk == 7600                // 'order' '#'
       || lk == 7601                // 'ordered' '#'
       || lk == 7603                // 'parent' '#'
       || lk == 7608                // 'preceding' '#'
       || lk == 7609                // 'preceding-sibling' '#'
       || lk == 7612                // 'processing-instruction' '#'
       || lk == 7615                // 'return' '#'
       || lk == 7618                // 'satisfies' '#'
       || lk == 7620                // 'schema-attribute' '#'
       || lk == 7621                // 'schema-element' '#'
       || lk == 7622                // 'self' '#'
       || lk == 7625                // 'some' '#'
       || lk == 7626                // 'stable' '#'
       || lk == 7627                // 'start' '#'
       || lk == 7630                // 'switch' '#'
       || lk == 7631                // 'text' '#'
       || lk == 7633                // 'to' '#'
       || lk == 7635                // 'treat' '#'
       || lk == 7636                // 'try' '#'
       || lk == 7639                // 'typeswitch' '#'
       || lk == 7640                // 'union' '#'
       || lk == 7641                // 'unordered' '#'
       || lk == 7643                // 'validate' '#'
       || lk == 7648                // 'where' '#'
       || lk == 7652                // 'xquery' '#'
       || lk == 7970                // '(' '$'
       || lk == 7975                // '+' '$'
       || lk == 7977                // '-' '$'
       || lk == 7981                // '/' '$'
       || lk == 7982                // '//' '$'
       || lk == 8005                // '[' '$'
       || lk == 8037                // 'copy' '$'
       || lk == 8059                // 'every' '$'
       || lk == 8067                // 'for' '$'
       || lk == 8092                // 'let' '$'
       || lk == 8137                // 'some' '$'
       || lk == 8226                // '(' '%'
       || lk == 8231                // '+' '%'
       || lk == 8233                // '-' '%'
       || lk == 8237                // '/' '%'
       || lk == 8238                // '//' '%'
       || lk == 8261                // '[' '%'
       || lk == 8705                // IntegerLiteral '('
       || lk == 8706                // DecimalLiteral '('
       || lk == 8707                // DoubleLiteral '('
       || lk == 8708                // StringLiteral '('
       || lk == 8709                // URIQualifiedName '('
       || lk == 8719                // QName^Token '('
       || lk == 8738                // '(' '('
       || lk == 8743                // '+' '('
       || lk == 8745                // '-' '('
       || lk == 8747                // '.' '('
       || lk == 8749                // '/' '('
       || lk == 8750                // '//' '('
       || lk == 8769                // '?' '('
       || lk == 8773                // '[' '('
       || lk == 8781                // 'ancestor' '('
       || lk == 8782                // 'ancestor-or-self' '('
       || lk == 8783                // 'and' '('
       || lk == 8787                // 'ascending' '('
       || lk == 8789                // 'attribute' '('
       || lk == 8795                // 'case' '('
       || lk == 8796                // 'cast' '('
       || lk == 8797                // 'castable' '('
       || lk == 8799                // 'child' '('
       || lk == 8800                // 'collation' '('
       || lk == 8801                // 'comment' '('
       || lk == 8807                // 'count' '('
       || lk == 8810                // 'declare' '('
       || lk == 8811                // 'default' '('
       || lk == 8813                // 'descendant' '('
       || lk == 8814                // 'descendant-or-self' '('
       || lk == 8815                // 'descending' '('
       || lk == 8817                // 'div' '('
       || lk == 8818                // 'document' '('
       || lk == 8819                // 'document-node' '('
       || lk == 8820                // 'element' '('
       || lk == 8821                // 'else' '('
       || lk == 8822                // 'empty' '('
       || lk == 8825                // 'end' '('
       || lk == 8826                // 'eq' '('
       || lk == 8827                // 'every' '('
       || lk == 8828                // 'except' '('
       || lk == 8833                // 'following' '('
       || lk == 8834                // 'following-sibling' '('
       || lk == 8835                // 'for' '('
       || lk == 8836                // 'function' '('
       || lk == 8837                // 'ge' '('
       || lk == 8839                // 'group' '('
       || lk == 8841                // 'gt' '('
       || lk == 8842                // 'idiv' '('
       || lk == 8843                // 'if' '('
       || lk == 8844                // 'import' '('
       || lk == 8849                // 'instance' '('
       || lk == 8850                // 'intersect' '('
       || lk == 8853                // 'is' '('
       || lk == 8858                // 'le' '('
       || lk == 8860                // 'let' '('
       || lk == 8862                // 'lt' '('
       || lk == 8865                // 'mod' '('
       || lk == 8867                // 'module' '('
       || lk == 8868                // 'namespace' '('
       || lk == 8869                // 'namespace-node' '('
       || lk == 8870                // 'ne' '('
       || lk == 8874                // 'node' '('
       || lk == 8877                // 'only' '('
       || lk == 8879                // 'or' '('
       || lk == 8880                // 'order' '('
       || lk == 8881                // 'ordered' '('
       || lk == 8883                // 'parent' '('
       || lk == 8888                // 'preceding' '('
       || lk == 8889                // 'preceding-sibling' '('
       || lk == 8892                // 'processing-instruction' '('
       || lk == 8895                // 'return' '('
       || lk == 8898                // 'satisfies' '('
       || lk == 8900                // 'schema-attribute' '('
       || lk == 8901                // 'schema-element' '('
       || lk == 8902                // 'self' '('
       || lk == 8905                // 'some' '('
       || lk == 8906                // 'stable' '('
       || lk == 8907                // 'start' '('
       || lk == 8910                // 'switch' '('
       || lk == 8911                // 'text' '('
       || lk == 8913                // 'to' '('
       || lk == 8915                // 'treat' '('
       || lk == 8916                // 'try' '('
       || lk == 8919                // 'typeswitch' '('
       || lk == 8920                // 'union' '('
       || lk == 8921                // 'unordered' '('
       || lk == 8923                // 'validate' '('
       || lk == 8928                // 'where' '('
       || lk == 8932                // 'xquery' '('
       || lk == 8994                // '(' '(#'
       || lk == 8999                // '+' '(#'
       || lk == 9001                // '-' '(#'
       || lk == 9029                // '[' '(#'
       || lk == 9506                // '(' ')'
       || lk == 9729                // IntegerLiteral '*'
       || lk == 9730                // DecimalLiteral '*'
       || lk == 9731                // DoubleLiteral '*'
       || lk == 9732                // StringLiteral '*'
       || lk == 9733                // URIQualifiedName '*'
       || lk == 9743                // QName^Token '*'
       || lk == 9749                // Wildcard '*'
       || lk == 9771                // '.' '*'
       || lk == 9772                // '..' '*'
       || lk == 9773                // '/' '*'
       || lk == 9793                // '?' '*'
       || lk == 9805                // 'ancestor' '*'
       || lk == 9806                // 'ancestor-or-self' '*'
       || lk == 9807                // 'and' '*'
       || lk == 9809                // 'array' '*'
       || lk == 9811                // 'ascending' '*'
       || lk == 9813                // 'attribute' '*'
       || lk == 9819                // 'case' '*'
       || lk == 9820                // 'cast' '*'
       || lk == 9821                // 'castable' '*'
       || lk == 9823                // 'child' '*'
       || lk == 9824                // 'collation' '*'
       || lk == 9825                // 'comment' '*'
       || lk == 9831                // 'count' '*'
       || lk == 9834                // 'declare' '*'
       || lk == 9835                // 'default' '*'
       || lk == 9837                // 'descendant' '*'
       || lk == 9838                // 'descendant-or-self' '*'
       || lk == 9839                // 'descending' '*'
       || lk == 9841                // 'div' '*'
       || lk == 9842                // 'document' '*'
       || lk == 9843                // 'document-node' '*'
       || lk == 9844                // 'element' '*'
       || lk == 9845                // 'else' '*'
       || lk == 9846                // 'empty' '*'
       || lk == 9847                // 'empty-sequence' '*'
       || lk == 9849                // 'end' '*'
       || lk == 9850                // 'eq' '*'
       || lk == 9851                // 'every' '*'
       || lk == 9852                // 'except' '*'
       || lk == 9857                // 'following' '*'
       || lk == 9858                // 'following-sibling' '*'
       || lk == 9859                // 'for' '*'
       || lk == 9860                // 'function' '*'
       || lk == 9861                // 'ge' '*'
       || lk == 9863                // 'group' '*'
       || lk == 9865                // 'gt' '*'
       || lk == 9866                // 'idiv' '*'
       || lk == 9867                // 'if' '*'
       || lk == 9868                // 'import' '*'
       || lk == 9873                // 'instance' '*'
       || lk == 9874                // 'intersect' '*'
       || lk == 9877                // 'is' '*'
       || lk == 9878                // 'item' '*'
       || lk == 9882                // 'le' '*'
       || lk == 9884                // 'let' '*'
       || lk == 9886                // 'lt' '*'
       || lk == 9887                // 'map' '*'
       || lk == 9889                // 'mod' '*'
       || lk == 9891                // 'module' '*'
       || lk == 9892                // 'namespace' '*'
       || lk == 9893                // 'namespace-node' '*'
       || lk == 9894                // 'ne' '*'
       || lk == 9898                // 'node' '*'
       || lk == 9901                // 'only' '*'
       || lk == 9903                // 'or' '*'
       || lk == 9904                // 'order' '*'
       || lk == 9905                // 'ordered' '*'
       || lk == 9907                // 'parent' '*'
       || lk == 9912                // 'preceding' '*'
       || lk == 9913                // 'preceding-sibling' '*'
       || lk == 9916                // 'processing-instruction' '*'
       || lk == 9919                // 'return' '*'
       || lk == 9922                // 'satisfies' '*'
       || lk == 9924                // 'schema-attribute' '*'
       || lk == 9925                // 'schema-element' '*'
       || lk == 9926                // 'self' '*'
       || lk == 9929                // 'some' '*'
       || lk == 9930                // 'stable' '*'
       || lk == 9931                // 'start' '*'
       || lk == 9934                // 'switch' '*'
       || lk == 9935                // 'text' '*'
       || lk == 9937                // 'to' '*'
       || lk == 9939                // 'treat' '*'
       || lk == 9940                // 'try' '*'
       || lk == 9943                // 'typeswitch' '*'
       || lk == 9944                // 'union' '*'
       || lk == 9945                // 'unordered' '*'
       || lk == 9947                // 'validate' '*'
       || lk == 9952                // 'where' '*'
       || lk == 9956                // 'xquery' '*'
       || lk == 9985                // IntegerLiteral '+'
       || lk == 9986                // DecimalLiteral '+'
       || lk == 9987                // DoubleLiteral '+'
       || lk == 9988                // StringLiteral '+'
       || lk == 9989                // URIQualifiedName '+'
       || lk == 9999                // QName^Token '+'
       || lk == 10005               // Wildcard '+'
       || lk == 10018               // '(' '+'
       || lk == 10023               // '+' '+'
       || lk == 10025               // '-' '+'
       || lk == 10027               // '.' '+'
       || lk == 10028               // '..' '+'
       || lk == 10029               // '/' '+'
       || lk == 10053               // '[' '+'
       || lk == 10061               // 'ancestor' '+'
       || lk == 10062               // 'ancestor-or-self' '+'
       || lk == 10063               // 'and' '+'
       || lk == 10065               // 'array' '+'
       || lk == 10067               // 'ascending' '+'
       || lk == 10069               // 'attribute' '+'
       || lk == 10075               // 'case' '+'
       || lk == 10076               // 'cast' '+'
       || lk == 10077               // 'castable' '+'
       || lk == 10079               // 'child' '+'
       || lk == 10080               // 'collation' '+'
       || lk == 10081               // 'comment' '+'
       || lk == 10087               // 'count' '+'
       || lk == 10090               // 'declare' '+'
       || lk == 10091               // 'default' '+'
       || lk == 10093               // 'descendant' '+'
       || lk == 10094               // 'descendant-or-self' '+'
       || lk == 10095               // 'descending' '+'
       || lk == 10097               // 'div' '+'
       || lk == 10098               // 'document' '+'
       || lk == 10099               // 'document-node' '+'
       || lk == 10100               // 'element' '+'
       || lk == 10101               // 'else' '+'
       || lk == 10102               // 'empty' '+'
       || lk == 10103               // 'empty-sequence' '+'
       || lk == 10105               // 'end' '+'
       || lk == 10106               // 'eq' '+'
       || lk == 10107               // 'every' '+'
       || lk == 10108               // 'except' '+'
       || lk == 10113               // 'following' '+'
       || lk == 10114               // 'following-sibling' '+'
       || lk == 10115               // 'for' '+'
       || lk == 10116               // 'function' '+'
       || lk == 10117               // 'ge' '+'
       || lk == 10119               // 'group' '+'
       || lk == 10121               // 'gt' '+'
       || lk == 10122               // 'idiv' '+'
       || lk == 10123               // 'if' '+'
       || lk == 10124               // 'import' '+'
       || lk == 10129               // 'instance' '+'
       || lk == 10130               // 'intersect' '+'
       || lk == 10133               // 'is' '+'
       || lk == 10134               // 'item' '+'
       || lk == 10138               // 'le' '+'
       || lk == 10140               // 'let' '+'
       || lk == 10142               // 'lt' '+'
       || lk == 10143               // 'map' '+'
       || lk == 10145               // 'mod' '+'
       || lk == 10147               // 'module' '+'
       || lk == 10148               // 'namespace' '+'
       || lk == 10149               // 'namespace-node' '+'
       || lk == 10150               // 'ne' '+'
       || lk == 10154               // 'node' '+'
       || lk == 10157               // 'only' '+'
       || lk == 10159               // 'or' '+'
       || lk == 10160               // 'order' '+'
       || lk == 10161               // 'ordered' '+'
       || lk == 10163               // 'parent' '+'
       || lk == 10168               // 'preceding' '+'
       || lk == 10169               // 'preceding-sibling' '+'
       || lk == 10172               // 'processing-instruction' '+'
       || lk == 10175               // 'return' '+'
       || lk == 10178               // 'satisfies' '+'
       || lk == 10180               // 'schema-attribute' '+'
       || lk == 10181               // 'schema-element' '+'
       || lk == 10182               // 'self' '+'
       || lk == 10185               // 'some' '+'
       || lk == 10186               // 'stable' '+'
       || lk == 10187               // 'start' '+'
       || lk == 10190               // 'switch' '+'
       || lk == 10191               // 'text' '+'
       || lk == 10193               // 'to' '+'
       || lk == 10195               // 'treat' '+'
       || lk == 10196               // 'try' '+'
       || lk == 10199               // 'typeswitch' '+'
       || lk == 10200               // 'union' '+'
       || lk == 10201               // 'unordered' '+'
       || lk == 10203               // 'validate' '+'
       || lk == 10208               // 'where' '+'
       || lk == 10212               // 'xquery' '+'
       || lk == 10497               // IntegerLiteral '-'
       || lk == 10498               // DecimalLiteral '-'
       || lk == 10499               // DoubleLiteral '-'
       || lk == 10500               // StringLiteral '-'
       || lk == 10501               // URIQualifiedName '-'
       || lk == 10511               // QName^Token '-'
       || lk == 10517               // Wildcard '-'
       || lk == 10530               // '(' '-'
       || lk == 10535               // '+' '-'
       || lk == 10537               // '-' '-'
       || lk == 10539               // '.' '-'
       || lk == 10540               // '..' '-'
       || lk == 10541               // '/' '-'
       || lk == 10565               // '[' '-'
       || lk == 10573               // 'ancestor' '-'
       || lk == 10574               // 'ancestor-or-self' '-'
       || lk == 10575               // 'and' '-'
       || lk == 10577               // 'array' '-'
       || lk == 10579               // 'ascending' '-'
       || lk == 10581               // 'attribute' '-'
       || lk == 10587               // 'case' '-'
       || lk == 10588               // 'cast' '-'
       || lk == 10589               // 'castable' '-'
       || lk == 10591               // 'child' '-'
       || lk == 10592               // 'collation' '-'
       || lk == 10593               // 'comment' '-'
       || lk == 10599               // 'count' '-'
       || lk == 10602               // 'declare' '-'
       || lk == 10603               // 'default' '-'
       || lk == 10605               // 'descendant' '-'
       || lk == 10606               // 'descendant-or-self' '-'
       || lk == 10607               // 'descending' '-'
       || lk == 10609               // 'div' '-'
       || lk == 10610               // 'document' '-'
       || lk == 10611               // 'document-node' '-'
       || lk == 10612               // 'element' '-'
       || lk == 10613               // 'else' '-'
       || lk == 10614               // 'empty' '-'
       || lk == 10615               // 'empty-sequence' '-'
       || lk == 10617               // 'end' '-'
       || lk == 10618               // 'eq' '-'
       || lk == 10619               // 'every' '-'
       || lk == 10620               // 'except' '-'
       || lk == 10625               // 'following' '-'
       || lk == 10626               // 'following-sibling' '-'
       || lk == 10627               // 'for' '-'
       || lk == 10628               // 'function' '-'
       || lk == 10629               // 'ge' '-'
       || lk == 10631               // 'group' '-'
       || lk == 10633               // 'gt' '-'
       || lk == 10634               // 'idiv' '-'
       || lk == 10635               // 'if' '-'
       || lk == 10636               // 'import' '-'
       || lk == 10641               // 'instance' '-'
       || lk == 10642               // 'intersect' '-'
       || lk == 10645               // 'is' '-'
       || lk == 10646               // 'item' '-'
       || lk == 10650               // 'le' '-'
       || lk == 10652               // 'let' '-'
       || lk == 10654               // 'lt' '-'
       || lk == 10655               // 'map' '-'
       || lk == 10657               // 'mod' '-'
       || lk == 10659               // 'module' '-'
       || lk == 10660               // 'namespace' '-'
       || lk == 10661               // 'namespace-node' '-'
       || lk == 10662               // 'ne' '-'
       || lk == 10666               // 'node' '-'
       || lk == 10669               // 'only' '-'
       || lk == 10671               // 'or' '-'
       || lk == 10672               // 'order' '-'
       || lk == 10673               // 'ordered' '-'
       || lk == 10675               // 'parent' '-'
       || lk == 10680               // 'preceding' '-'
       || lk == 10681               // 'preceding-sibling' '-'
       || lk == 10684               // 'processing-instruction' '-'
       || lk == 10687               // 'return' '-'
       || lk == 10690               // 'satisfies' '-'
       || lk == 10692               // 'schema-attribute' '-'
       || lk == 10693               // 'schema-element' '-'
       || lk == 10694               // 'self' '-'
       || lk == 10697               // 'some' '-'
       || lk == 10698               // 'stable' '-'
       || lk == 10699               // 'start' '-'
       || lk == 10702               // 'switch' '-'
       || lk == 10703               // 'text' '-'
       || lk == 10705               // 'to' '-'
       || lk == 10707               // 'treat' '-'
       || lk == 10708               // 'try' '-'
       || lk == 10711               // 'typeswitch' '-'
       || lk == 10712               // 'union' '-'
       || lk == 10713               // 'unordered' '-'
       || lk == 10715               // 'validate' '-'
       || lk == 10720               // 'where' '-'
       || lk == 10724               // 'xquery' '-'
       || lk == 11042               // '(' '.'
       || lk == 11047               // '+' '.'
       || lk == 11049               // '-' '.'
       || lk == 11053               // '/' '.'
       || lk == 11054               // '//' '.'
       || lk == 11077               // '[' '.'
       || lk == 11298               // '(' '..'
       || lk == 11303               // '+' '..'
       || lk == 11305               // '-' '..'
       || lk == 11309               // '/' '..'
       || lk == 11310               // '//' '..'
       || lk == 11333               // '[' '..'
       || lk == 11521               // IntegerLiteral '/'
       || lk == 11522               // DecimalLiteral '/'
       || lk == 11523               // DoubleLiteral '/'
       || lk == 11524               // StringLiteral '/'
       || lk == 11525               // URIQualifiedName '/'
       || lk == 11535               // QName^Token '/'
       || lk == 11541               // Wildcard '/'
       || lk == 11554               // '(' '/'
       || lk == 11559               // '+' '/'
       || lk == 11561               // '-' '/'
       || lk == 11563               // '.' '/'
       || lk == 11564               // '..' '/'
       || lk == 11589               // '[' '/'
       || lk == 11597               // 'ancestor' '/'
       || lk == 11598               // 'ancestor-or-self' '/'
       || lk == 11599               // 'and' '/'
       || lk == 11601               // 'array' '/'
       || lk == 11603               // 'ascending' '/'
       || lk == 11605               // 'attribute' '/'
       || lk == 11611               // 'case' '/'
       || lk == 11612               // 'cast' '/'
       || lk == 11613               // 'castable' '/'
       || lk == 11615               // 'child' '/'
       || lk == 11616               // 'collation' '/'
       || lk == 11617               // 'comment' '/'
       || lk == 11623               // 'count' '/'
       || lk == 11626               // 'declare' '/'
       || lk == 11627               // 'default' '/'
       || lk == 11629               // 'descendant' '/'
       || lk == 11630               // 'descendant-or-self' '/'
       || lk == 11631               // 'descending' '/'
       || lk == 11633               // 'div' '/'
       || lk == 11634               // 'document' '/'
       || lk == 11635               // 'document-node' '/'
       || lk == 11636               // 'element' '/'
       || lk == 11637               // 'else' '/'
       || lk == 11638               // 'empty' '/'
       || lk == 11639               // 'empty-sequence' '/'
       || lk == 11641               // 'end' '/'
       || lk == 11642               // 'eq' '/'
       || lk == 11643               // 'every' '/'
       || lk == 11644               // 'except' '/'
       || lk == 11649               // 'following' '/'
       || lk == 11650               // 'following-sibling' '/'
       || lk == 11651               // 'for' '/'
       || lk == 11652               // 'function' '/'
       || lk == 11653               // 'ge' '/'
       || lk == 11655               // 'group' '/'
       || lk == 11657               // 'gt' '/'
       || lk == 11658               // 'idiv' '/'
       || lk == 11659               // 'if' '/'
       || lk == 11660               // 'import' '/'
       || lk == 11665               // 'instance' '/'
       || lk == 11666               // 'intersect' '/'
       || lk == 11669               // 'is' '/'
       || lk == 11670               // 'item' '/'
       || lk == 11674               // 'le' '/'
       || lk == 11676               // 'let' '/'
       || lk == 11678               // 'lt' '/'
       || lk == 11679               // 'map' '/'
       || lk == 11681               // 'mod' '/'
       || lk == 11683               // 'module' '/'
       || lk == 11684               // 'namespace' '/'
       || lk == 11685               // 'namespace-node' '/'
       || lk == 11686               // 'ne' '/'
       || lk == 11690               // 'node' '/'
       || lk == 11693               // 'only' '/'
       || lk == 11695               // 'or' '/'
       || lk == 11696               // 'order' '/'
       || lk == 11697               // 'ordered' '/'
       || lk == 11699               // 'parent' '/'
       || lk == 11704               // 'preceding' '/'
       || lk == 11705               // 'preceding-sibling' '/'
       || lk == 11708               // 'processing-instruction' '/'
       || lk == 11711               // 'return' '/'
       || lk == 11714               // 'satisfies' '/'
       || lk == 11716               // 'schema-attribute' '/'
       || lk == 11717               // 'schema-element' '/'
       || lk == 11718               // 'self' '/'
       || lk == 11721               // 'some' '/'
       || lk == 11722               // 'stable' '/'
       || lk == 11723               // 'start' '/'
       || lk == 11726               // 'switch' '/'
       || lk == 11727               // 'text' '/'
       || lk == 11729               // 'to' '/'
       || lk == 11731               // 'treat' '/'
       || lk == 11732               // 'try' '/'
       || lk == 11735               // 'typeswitch' '/'
       || lk == 11736               // 'union' '/'
       || lk == 11737               // 'unordered' '/'
       || lk == 11739               // 'validate' '/'
       || lk == 11744               // 'where' '/'
       || lk == 11748               // 'xquery' '/'
       || lk == 11777               // IntegerLiteral '//'
       || lk == 11778               // DecimalLiteral '//'
       || lk == 11779               // DoubleLiteral '//'
       || lk == 11780               // StringLiteral '//'
       || lk == 11781               // URIQualifiedName '//'
       || lk == 11791               // QName^Token '//'
       || lk == 11797               // Wildcard '//'
       || lk == 11810               // '(' '//'
       || lk == 11815               // '+' '//'
       || lk == 11817               // '-' '//'
       || lk == 11819               // '.' '//'
       || lk == 11820               // '..' '//'
       || lk == 11845               // '[' '//'
       || lk == 11853               // 'ancestor' '//'
       || lk == 11854               // 'ancestor-or-self' '//'
       || lk == 11855               // 'and' '//'
       || lk == 11857               // 'array' '//'
       || lk == 11859               // 'ascending' '//'
       || lk == 11861               // 'attribute' '//'
       || lk == 11867               // 'case' '//'
       || lk == 11868               // 'cast' '//'
       || lk == 11869               // 'castable' '//'
       || lk == 11871               // 'child' '//'
       || lk == 11872               // 'collation' '//'
       || lk == 11873               // 'comment' '//'
       || lk == 11879               // 'count' '//'
       || lk == 11882               // 'declare' '//'
       || lk == 11883               // 'default' '//'
       || lk == 11885               // 'descendant' '//'
       || lk == 11886               // 'descendant-or-self' '//'
       || lk == 11887               // 'descending' '//'
       || lk == 11889               // 'div' '//'
       || lk == 11890               // 'document' '//'
       || lk == 11891               // 'document-node' '//'
       || lk == 11892               // 'element' '//'
       || lk == 11893               // 'else' '//'
       || lk == 11894               // 'empty' '//'
       || lk == 11895               // 'empty-sequence' '//'
       || lk == 11897               // 'end' '//'
       || lk == 11898               // 'eq' '//'
       || lk == 11899               // 'every' '//'
       || lk == 11900               // 'except' '//'
       || lk == 11905               // 'following' '//'
       || lk == 11906               // 'following-sibling' '//'
       || lk == 11907               // 'for' '//'
       || lk == 11908               // 'function' '//'
       || lk == 11909               // 'ge' '//'
       || lk == 11911               // 'group' '//'
       || lk == 11913               // 'gt' '//'
       || lk == 11914               // 'idiv' '//'
       || lk == 11915               // 'if' '//'
       || lk == 11916               // 'import' '//'
       || lk == 11921               // 'instance' '//'
       || lk == 11922               // 'intersect' '//'
       || lk == 11925               // 'is' '//'
       || lk == 11926               // 'item' '//'
       || lk == 11930               // 'le' '//'
       || lk == 11932               // 'let' '//'
       || lk == 11934               // 'lt' '//'
       || lk == 11935               // 'map' '//'
       || lk == 11937               // 'mod' '//'
       || lk == 11939               // 'module' '//'
       || lk == 11940               // 'namespace' '//'
       || lk == 11941               // 'namespace-node' '//'
       || lk == 11942               // 'ne' '//'
       || lk == 11946               // 'node' '//'
       || lk == 11949               // 'only' '//'
       || lk == 11951               // 'or' '//'
       || lk == 11952               // 'order' '//'
       || lk == 11953               // 'ordered' '//'
       || lk == 11955               // 'parent' '//'
       || lk == 11960               // 'preceding' '//'
       || lk == 11961               // 'preceding-sibling' '//'
       || lk == 11964               // 'processing-instruction' '//'
       || lk == 11967               // 'return' '//'
       || lk == 11970               // 'satisfies' '//'
       || lk == 11972               // 'schema-attribute' '//'
       || lk == 11973               // 'schema-element' '//'
       || lk == 11974               // 'self' '//'
       || lk == 11977               // 'some' '//'
       || lk == 11978               // 'stable' '//'
       || lk == 11979               // 'start' '//'
       || lk == 11982               // 'switch' '//'
       || lk == 11983               // 'text' '//'
       || lk == 11985               // 'to' '//'
       || lk == 11987               // 'treat' '//'
       || lk == 11988               // 'try' '//'
       || lk == 11991               // 'typeswitch' '//'
       || lk == 11992               // 'union' '//'
       || lk == 11993               // 'unordered' '//'
       || lk == 11995               // 'validate' '//'
       || lk == 12000               // 'where' '//'
       || lk == 12004               // 'xquery' '//'
       || lk == 12877               // 'ancestor' '::'
       || lk == 12878               // 'ancestor-or-self' '::'
       || lk == 12885               // 'attribute' '::'
       || lk == 12895               // 'child' '::'
       || lk == 12909               // 'descendant' '::'
       || lk == 12910               // 'descendant-or-self' '::'
       || lk == 12929               // 'following' '::'
       || lk == 12930               // 'following-sibling' '::'
       || lk == 12979               // 'parent' '::'
       || lk == 12984               // 'preceding' '::'
       || lk == 12985               // 'preceding-sibling' '::'
       || lk == 12998               // 'self' '::'
       || lk == 13569               // IntegerLiteral '<'
       || lk == 13570               // DecimalLiteral '<'
       || lk == 13571               // DoubleLiteral '<'
       || lk == 13572               // StringLiteral '<'
       || lk == 13573               // URIQualifiedName '<'
       || lk == 13583               // QName^Token '<'
       || lk == 13589               // Wildcard '<'
       || lk == 13602               // '(' '<'
       || lk == 13607               // '+' '<'
       || lk == 13609               // '-' '<'
       || lk == 13611               // '.' '<'
       || lk == 13612               // '..' '<'
       || lk == 13613               // '/' '<'
       || lk == 13614               // '//' '<'
       || lk == 13637               // '[' '<'
       || lk == 13645               // 'ancestor' '<'
       || lk == 13646               // 'ancestor-or-self' '<'
       || lk == 13647               // 'and' '<'
       || lk == 13649               // 'array' '<'
       || lk == 13651               // 'ascending' '<'
       || lk == 13653               // 'attribute' '<'
       || lk == 13659               // 'case' '<'
       || lk == 13660               // 'cast' '<'
       || lk == 13661               // 'castable' '<'
       || lk == 13663               // 'child' '<'
       || lk == 13664               // 'collation' '<'
       || lk == 13665               // 'comment' '<'
       || lk == 13671               // 'count' '<'
       || lk == 13674               // 'declare' '<'
       || lk == 13675               // 'default' '<'
       || lk == 13677               // 'descendant' '<'
       || lk == 13678               // 'descendant-or-self' '<'
       || lk == 13679               // 'descending' '<'
       || lk == 13681               // 'div' '<'
       || lk == 13682               // 'document' '<'
       || lk == 13683               // 'document-node' '<'
       || lk == 13684               // 'element' '<'
       || lk == 13685               // 'else' '<'
       || lk == 13686               // 'empty' '<'
       || lk == 13687               // 'empty-sequence' '<'
       || lk == 13689               // 'end' '<'
       || lk == 13690               // 'eq' '<'
       || lk == 13691               // 'every' '<'
       || lk == 13692               // 'except' '<'
       || lk == 13697               // 'following' '<'
       || lk == 13698               // 'following-sibling' '<'
       || lk == 13699               // 'for' '<'
       || lk == 13700               // 'function' '<'
       || lk == 13701               // 'ge' '<'
       || lk == 13703               // 'group' '<'
       || lk == 13705               // 'gt' '<'
       || lk == 13706               // 'idiv' '<'
       || lk == 13707               // 'if' '<'
       || lk == 13708               // 'import' '<'
       || lk == 13713               // 'instance' '<'
       || lk == 13714               // 'intersect' '<'
       || lk == 13717               // 'is' '<'
       || lk == 13718               // 'item' '<'
       || lk == 13722               // 'le' '<'
       || lk == 13724               // 'let' '<'
       || lk == 13726               // 'lt' '<'
       || lk == 13727               // 'map' '<'
       || lk == 13729               // 'mod' '<'
       || lk == 13731               // 'module' '<'
       || lk == 13732               // 'namespace' '<'
       || lk == 13733               // 'namespace-node' '<'
       || lk == 13734               // 'ne' '<'
       || lk == 13738               // 'node' '<'
       || lk == 13741               // 'only' '<'
       || lk == 13743               // 'or' '<'
       || lk == 13744               // 'order' '<'
       || lk == 13745               // 'ordered' '<'
       || lk == 13747               // 'parent' '<'
       || lk == 13752               // 'preceding' '<'
       || lk == 13753               // 'preceding-sibling' '<'
       || lk == 13756               // 'processing-instruction' '<'
       || lk == 13759               // 'return' '<'
       || lk == 13762               // 'satisfies' '<'
       || lk == 13764               // 'schema-attribute' '<'
       || lk == 13765               // 'schema-element' '<'
       || lk == 13766               // 'self' '<'
       || lk == 13769               // 'some' '<'
       || lk == 13770               // 'stable' '<'
       || lk == 13771               // 'start' '<'
       || lk == 13774               // 'switch' '<'
       || lk == 13775               // 'text' '<'
       || lk == 13777               // 'to' '<'
       || lk == 13779               // 'treat' '<'
       || lk == 13780               // 'try' '<'
       || lk == 13783               // 'typeswitch' '<'
       || lk == 13784               // 'union' '<'
       || lk == 13785               // 'unordered' '<'
       || lk == 13787               // 'validate' '<'
       || lk == 13792               // 'where' '<'
       || lk == 13796               // 'xquery' '<'
       || lk == 13858               // '(' '<!--'
       || lk == 13863               // '+' '<!--'
       || lk == 13865               // '-' '<!--'
       || lk == 13869               // '/' '<!--'
       || lk == 13870               // '//' '<!--'
       || lk == 13893               // '[' '<!--'
       || lk == 14593               // IntegerLiteral '<<'
       || lk == 14594               // DecimalLiteral '<<'
       || lk == 14595               // DoubleLiteral '<<'
       || lk == 14596               // StringLiteral '<<'
       || lk == 14597               // URIQualifiedName '<<'
       || lk == 14607               // QName^Token '<<'
       || lk == 14613               // Wildcard '<<'
       || lk == 14635               // '.' '<<'
       || lk == 14636               // '..' '<<'
       || lk == 14637               // '/' '<<'
       || lk == 14669               // 'ancestor' '<<'
       || lk == 14670               // 'ancestor-or-self' '<<'
       || lk == 14671               // 'and' '<<'
       || lk == 14673               // 'array' '<<'
       || lk == 14675               // 'ascending' '<<'
       || lk == 14677               // 'attribute' '<<'
       || lk == 14683               // 'case' '<<'
       || lk == 14684               // 'cast' '<<'
       || lk == 14685               // 'castable' '<<'
       || lk == 14687               // 'child' '<<'
       || lk == 14688               // 'collation' '<<'
       || lk == 14689               // 'comment' '<<'
       || lk == 14695               // 'count' '<<'
       || lk == 14698               // 'declare' '<<'
       || lk == 14699               // 'default' '<<'
       || lk == 14701               // 'descendant' '<<'
       || lk == 14702               // 'descendant-or-self' '<<'
       || lk == 14703               // 'descending' '<<'
       || lk == 14705               // 'div' '<<'
       || lk == 14706               // 'document' '<<'
       || lk == 14707               // 'document-node' '<<'
       || lk == 14708               // 'element' '<<'
       || lk == 14709               // 'else' '<<'
       || lk == 14710               // 'empty' '<<'
       || lk == 14711               // 'empty-sequence' '<<'
       || lk == 14713               // 'end' '<<'
       || lk == 14714               // 'eq' '<<'
       || lk == 14715               // 'every' '<<'
       || lk == 14716               // 'except' '<<'
       || lk == 14721               // 'following' '<<'
       || lk == 14722               // 'following-sibling' '<<'
       || lk == 14723               // 'for' '<<'
       || lk == 14724               // 'function' '<<'
       || lk == 14725               // 'ge' '<<'
       || lk == 14727               // 'group' '<<'
       || lk == 14729               // 'gt' '<<'
       || lk == 14730               // 'idiv' '<<'
       || lk == 14731               // 'if' '<<'
       || lk == 14732               // 'import' '<<'
       || lk == 14737               // 'instance' '<<'
       || lk == 14738               // 'intersect' '<<'
       || lk == 14741               // 'is' '<<'
       || lk == 14742               // 'item' '<<'
       || lk == 14746               // 'le' '<<'
       || lk == 14748               // 'let' '<<'
       || lk == 14750               // 'lt' '<<'
       || lk == 14751               // 'map' '<<'
       || lk == 14753               // 'mod' '<<'
       || lk == 14755               // 'module' '<<'
       || lk == 14756               // 'namespace' '<<'
       || lk == 14757               // 'namespace-node' '<<'
       || lk == 14758               // 'ne' '<<'
       || lk == 14762               // 'node' '<<'
       || lk == 14765               // 'only' '<<'
       || lk == 14767               // 'or' '<<'
       || lk == 14768               // 'order' '<<'
       || lk == 14769               // 'ordered' '<<'
       || lk == 14771               // 'parent' '<<'
       || lk == 14776               // 'preceding' '<<'
       || lk == 14777               // 'preceding-sibling' '<<'
       || lk == 14780               // 'processing-instruction' '<<'
       || lk == 14783               // 'return' '<<'
       || lk == 14786               // 'satisfies' '<<'
       || lk == 14788               // 'schema-attribute' '<<'
       || lk == 14789               // 'schema-element' '<<'
       || lk == 14790               // 'self' '<<'
       || lk == 14793               // 'some' '<<'
       || lk == 14794               // 'stable' '<<'
       || lk == 14795               // 'start' '<<'
       || lk == 14798               // 'switch' '<<'
       || lk == 14799               // 'text' '<<'
       || lk == 14801               // 'to' '<<'
       || lk == 14803               // 'treat' '<<'
       || lk == 14804               // 'try' '<<'
       || lk == 14807               // 'typeswitch' '<<'
       || lk == 14808               // 'union' '<<'
       || lk == 14809               // 'unordered' '<<'
       || lk == 14811               // 'validate' '<<'
       || lk == 14816               // 'where' '<<'
       || lk == 14820               // 'xquery' '<<'
       || lk == 14849               // IntegerLiteral '<='
       || lk == 14850               // DecimalLiteral '<='
       || lk == 14851               // DoubleLiteral '<='
       || lk == 14852               // StringLiteral '<='
       || lk == 14853               // URIQualifiedName '<='
       || lk == 14863               // QName^Token '<='
       || lk == 14869               // Wildcard '<='
       || lk == 14891               // '.' '<='
       || lk == 14892               // '..' '<='
       || lk == 14893               // '/' '<='
       || lk == 14925               // 'ancestor' '<='
       || lk == 14926               // 'ancestor-or-self' '<='
       || lk == 14927               // 'and' '<='
       || lk == 14929               // 'array' '<='
       || lk == 14931               // 'ascending' '<='
       || lk == 14933               // 'attribute' '<='
       || lk == 14939               // 'case' '<='
       || lk == 14940               // 'cast' '<='
       || lk == 14941               // 'castable' '<='
       || lk == 14943               // 'child' '<='
       || lk == 14944               // 'collation' '<='
       || lk == 14945               // 'comment' '<='
       || lk == 14951               // 'count' '<='
       || lk == 14954               // 'declare' '<='
       || lk == 14955               // 'default' '<='
       || lk == 14957               // 'descendant' '<='
       || lk == 14958               // 'descendant-or-self' '<='
       || lk == 14959               // 'descending' '<='
       || lk == 14961               // 'div' '<='
       || lk == 14962               // 'document' '<='
       || lk == 14963               // 'document-node' '<='
       || lk == 14964               // 'element' '<='
       || lk == 14965               // 'else' '<='
       || lk == 14966               // 'empty' '<='
       || lk == 14967               // 'empty-sequence' '<='
       || lk == 14969               // 'end' '<='
       || lk == 14970               // 'eq' '<='
       || lk == 14971               // 'every' '<='
       || lk == 14972               // 'except' '<='
       || lk == 14977               // 'following' '<='
       || lk == 14978               // 'following-sibling' '<='
       || lk == 14979               // 'for' '<='
       || lk == 14980               // 'function' '<='
       || lk == 14981               // 'ge' '<='
       || lk == 14983               // 'group' '<='
       || lk == 14985               // 'gt' '<='
       || lk == 14986               // 'idiv' '<='
       || lk == 14987               // 'if' '<='
       || lk == 14988               // 'import' '<='
       || lk == 14993               // 'instance' '<='
       || lk == 14994               // 'intersect' '<='
       || lk == 14997               // 'is' '<='
       || lk == 14998               // 'item' '<='
       || lk == 15002               // 'le' '<='
       || lk == 15004               // 'let' '<='
       || lk == 15006               // 'lt' '<='
       || lk == 15007               // 'map' '<='
       || lk == 15009               // 'mod' '<='
       || lk == 15011               // 'module' '<='
       || lk == 15012               // 'namespace' '<='
       || lk == 15013               // 'namespace-node' '<='
       || lk == 15014               // 'ne' '<='
       || lk == 15018               // 'node' '<='
       || lk == 15021               // 'only' '<='
       || lk == 15023               // 'or' '<='
       || lk == 15024               // 'order' '<='
       || lk == 15025               // 'ordered' '<='
       || lk == 15027               // 'parent' '<='
       || lk == 15032               // 'preceding' '<='
       || lk == 15033               // 'preceding-sibling' '<='
       || lk == 15036               // 'processing-instruction' '<='
       || lk == 15039               // 'return' '<='
       || lk == 15042               // 'satisfies' '<='
       || lk == 15044               // 'schema-attribute' '<='
       || lk == 15045               // 'schema-element' '<='
       || lk == 15046               // 'self' '<='
       || lk == 15049               // 'some' '<='
       || lk == 15050               // 'stable' '<='
       || lk == 15051               // 'start' '<='
       || lk == 15054               // 'switch' '<='
       || lk == 15055               // 'text' '<='
       || lk == 15057               // 'to' '<='
       || lk == 15059               // 'treat' '<='
       || lk == 15060               // 'try' '<='
       || lk == 15063               // 'typeswitch' '<='
       || lk == 15064               // 'union' '<='
       || lk == 15065               // 'unordered' '<='
       || lk == 15067               // 'validate' '<='
       || lk == 15072               // 'where' '<='
       || lk == 15076               // 'xquery' '<='
       || lk == 15138               // '(' '<?'
       || lk == 15143               // '+' '<?'
       || lk == 15145               // '-' '<?'
       || lk == 15149               // '/' '<?'
       || lk == 15150               // '//' '<?'
       || lk == 15173               // '[' '<?'
       || lk == 15361               // IntegerLiteral '='
       || lk == 15362               // DecimalLiteral '='
       || lk == 15363               // DoubleLiteral '='
       || lk == 15364               // StringLiteral '='
       || lk == 15365               // URIQualifiedName '='
       || lk == 15375               // QName^Token '='
       || lk == 15381               // Wildcard '='
       || lk == 15403               // '.' '='
       || lk == 15404               // '..' '='
       || lk == 15405               // '/' '='
       || lk == 15437               // 'ancestor' '='
       || lk == 15438               // 'ancestor-or-self' '='
       || lk == 15439               // 'and' '='
       || lk == 15441               // 'array' '='
       || lk == 15443               // 'ascending' '='
       || lk == 15445               // 'attribute' '='
       || lk == 15451               // 'case' '='
       || lk == 15452               // 'cast' '='
       || lk == 15453               // 'castable' '='
       || lk == 15455               // 'child' '='
       || lk == 15456               // 'collation' '='
       || lk == 15457               // 'comment' '='
       || lk == 15463               // 'count' '='
       || lk == 15466               // 'declare' '='
       || lk == 15467               // 'default' '='
       || lk == 15469               // 'descendant' '='
       || lk == 15470               // 'descendant-or-self' '='
       || lk == 15471               // 'descending' '='
       || lk == 15473               // 'div' '='
       || lk == 15474               // 'document' '='
       || lk == 15475               // 'document-node' '='
       || lk == 15476               // 'element' '='
       || lk == 15477               // 'else' '='
       || lk == 15478               // 'empty' '='
       || lk == 15479               // 'empty-sequence' '='
       || lk == 15481               // 'end' '='
       || lk == 15482               // 'eq' '='
       || lk == 15483               // 'every' '='
       || lk == 15484               // 'except' '='
       || lk == 15489               // 'following' '='
       || lk == 15490               // 'following-sibling' '='
       || lk == 15491               // 'for' '='
       || lk == 15492               // 'function' '='
       || lk == 15493               // 'ge' '='
       || lk == 15495               // 'group' '='
       || lk == 15497               // 'gt' '='
       || lk == 15498               // 'idiv' '='
       || lk == 15499               // 'if' '='
       || lk == 15500               // 'import' '='
       || lk == 15505               // 'instance' '='
       || lk == 15506               // 'intersect' '='
       || lk == 15509               // 'is' '='
       || lk == 15510               // 'item' '='
       || lk == 15514               // 'le' '='
       || lk == 15516               // 'let' '='
       || lk == 15518               // 'lt' '='
       || lk == 15519               // 'map' '='
       || lk == 15521               // 'mod' '='
       || lk == 15523               // 'module' '='
       || lk == 15524               // 'namespace' '='
       || lk == 15525               // 'namespace-node' '='
       || lk == 15526               // 'ne' '='
       || lk == 15530               // 'node' '='
       || lk == 15533               // 'only' '='
       || lk == 15535               // 'or' '='
       || lk == 15536               // 'order' '='
       || lk == 15537               // 'ordered' '='
       || lk == 15539               // 'parent' '='
       || lk == 15544               // 'preceding' '='
       || lk == 15545               // 'preceding-sibling' '='
       || lk == 15548               // 'processing-instruction' '='
       || lk == 15551               // 'return' '='
       || lk == 15554               // 'satisfies' '='
       || lk == 15556               // 'schema-attribute' '='
       || lk == 15557               // 'schema-element' '='
       || lk == 15558               // 'self' '='
       || lk == 15561               // 'some' '='
       || lk == 15562               // 'stable' '='
       || lk == 15563               // 'start' '='
       || lk == 15566               // 'switch' '='
       || lk == 15567               // 'text' '='
       || lk == 15569               // 'to' '='
       || lk == 15571               // 'treat' '='
       || lk == 15572               // 'try' '='
       || lk == 15575               // 'typeswitch' '='
       || lk == 15576               // 'union' '='
       || lk == 15577               // 'unordered' '='
       || lk == 15579               // 'validate' '='
       || lk == 15584               // 'where' '='
       || lk == 15588               // 'xquery' '='
       || lk == 15617               // IntegerLiteral '=>'
       || lk == 15618               // DecimalLiteral '=>'
       || lk == 15619               // DoubleLiteral '=>'
       || lk == 15620               // StringLiteral '=>'
       || lk == 15621               // URIQualifiedName '=>'
       || lk == 15631               // QName^Token '=>'
       || lk == 15637               // Wildcard '=>'
       || lk == 15659               // '.' '=>'
       || lk == 15660               // '..' '=>'
       || lk == 15661               // '/' '=>'
       || lk == 15693               // 'ancestor' '=>'
       || lk == 15694               // 'ancestor-or-self' '=>'
       || lk == 15695               // 'and' '=>'
       || lk == 15697               // 'array' '=>'
       || lk == 15699               // 'ascending' '=>'
       || lk == 15701               // 'attribute' '=>'
       || lk == 15707               // 'case' '=>'
       || lk == 15708               // 'cast' '=>'
       || lk == 15709               // 'castable' '=>'
       || lk == 15711               // 'child' '=>'
       || lk == 15712               // 'collation' '=>'
       || lk == 15713               // 'comment' '=>'
       || lk == 15719               // 'count' '=>'
       || lk == 15722               // 'declare' '=>'
       || lk == 15723               // 'default' '=>'
       || lk == 15725               // 'descendant' '=>'
       || lk == 15726               // 'descendant-or-self' '=>'
       || lk == 15727               // 'descending' '=>'
       || lk == 15729               // 'div' '=>'
       || lk == 15730               // 'document' '=>'
       || lk == 15731               // 'document-node' '=>'
       || lk == 15732               // 'element' '=>'
       || lk == 15733               // 'else' '=>'
       || lk == 15734               // 'empty' '=>'
       || lk == 15735               // 'empty-sequence' '=>'
       || lk == 15737               // 'end' '=>'
       || lk == 15738               // 'eq' '=>'
       || lk == 15739               // 'every' '=>'
       || lk == 15740               // 'except' '=>'
       || lk == 15745               // 'following' '=>'
       || lk == 15746               // 'following-sibling' '=>'
       || lk == 15747               // 'for' '=>'
       || lk == 15748               // 'function' '=>'
       || lk == 15749               // 'ge' '=>'
       || lk == 15751               // 'group' '=>'
       || lk == 15753               // 'gt' '=>'
       || lk == 15754               // 'idiv' '=>'
       || lk == 15755               // 'if' '=>'
       || lk == 15756               // 'import' '=>'
       || lk == 15761               // 'instance' '=>'
       || lk == 15762               // 'intersect' '=>'
       || lk == 15765               // 'is' '=>'
       || lk == 15766               // 'item' '=>'
       || lk == 15770               // 'le' '=>'
       || lk == 15772               // 'let' '=>'
       || lk == 15774               // 'lt' '=>'
       || lk == 15775               // 'map' '=>'
       || lk == 15777               // 'mod' '=>'
       || lk == 15779               // 'module' '=>'
       || lk == 15780               // 'namespace' '=>'
       || lk == 15781               // 'namespace-node' '=>'
       || lk == 15782               // 'ne' '=>'
       || lk == 15786               // 'node' '=>'
       || lk == 15789               // 'only' '=>'
       || lk == 15791               // 'or' '=>'
       || lk == 15792               // 'order' '=>'
       || lk == 15793               // 'ordered' '=>'
       || lk == 15795               // 'parent' '=>'
       || lk == 15800               // 'preceding' '=>'
       || lk == 15801               // 'preceding-sibling' '=>'
       || lk == 15804               // 'processing-instruction' '=>'
       || lk == 15807               // 'return' '=>'
       || lk == 15810               // 'satisfies' '=>'
       || lk == 15812               // 'schema-attribute' '=>'
       || lk == 15813               // 'schema-element' '=>'
       || lk == 15814               // 'self' '=>'
       || lk == 15817               // 'some' '=>'
       || lk == 15818               // 'stable' '=>'
       || lk == 15819               // 'start' '=>'
       || lk == 15822               // 'switch' '=>'
       || lk == 15823               // 'text' '=>'
       || lk == 15825               // 'to' '=>'
       || lk == 15827               // 'treat' '=>'
       || lk == 15828               // 'try' '=>'
       || lk == 15831               // 'typeswitch' '=>'
       || lk == 15832               // 'union' '=>'
       || lk == 15833               // 'unordered' '=>'
       || lk == 15835               // 'validate' '=>'
       || lk == 15840               // 'where' '=>'
       || lk == 15844               // 'xquery' '=>'
       || lk == 15873               // IntegerLiteral '>'
       || lk == 15874               // DecimalLiteral '>'
       || lk == 15875               // DoubleLiteral '>'
       || lk == 15876               // StringLiteral '>'
       || lk == 15877               // URIQualifiedName '>'
       || lk == 15887               // QName^Token '>'
       || lk == 15893               // Wildcard '>'
       || lk == 15915               // '.' '>'
       || lk == 15916               // '..' '>'
       || lk == 15917               // '/' '>'
       || lk == 15949               // 'ancestor' '>'
       || lk == 15950               // 'ancestor-or-self' '>'
       || lk == 15951               // 'and' '>'
       || lk == 15953               // 'array' '>'
       || lk == 15955               // 'ascending' '>'
       || lk == 15957               // 'attribute' '>'
       || lk == 15963               // 'case' '>'
       || lk == 15964               // 'cast' '>'
       || lk == 15965               // 'castable' '>'
       || lk == 15967               // 'child' '>'
       || lk == 15968               // 'collation' '>'
       || lk == 15969               // 'comment' '>'
       || lk == 15975               // 'count' '>'
       || lk == 15978               // 'declare' '>'
       || lk == 15979               // 'default' '>'
       || lk == 15981               // 'descendant' '>'
       || lk == 15982               // 'descendant-or-self' '>'
       || lk == 15983               // 'descending' '>'
       || lk == 15985               // 'div' '>'
       || lk == 15986               // 'document' '>'
       || lk == 15987               // 'document-node' '>'
       || lk == 15988               // 'element' '>'
       || lk == 15989               // 'else' '>'
       || lk == 15990               // 'empty' '>'
       || lk == 15991               // 'empty-sequence' '>'
       || lk == 15993               // 'end' '>'
       || lk == 15994               // 'eq' '>'
       || lk == 15995               // 'every' '>'
       || lk == 15996               // 'except' '>'
       || lk == 16001               // 'following' '>'
       || lk == 16002               // 'following-sibling' '>'
       || lk == 16003               // 'for' '>'
       || lk == 16004               // 'function' '>'
       || lk == 16005               // 'ge' '>'
       || lk == 16007               // 'group' '>'
       || lk == 16009               // 'gt' '>'
       || lk == 16010               // 'idiv' '>'
       || lk == 16011               // 'if' '>'
       || lk == 16012               // 'import' '>'
       || lk == 16017               // 'instance' '>'
       || lk == 16018               // 'intersect' '>'
       || lk == 16021               // 'is' '>'
       || lk == 16022               // 'item' '>'
       || lk == 16026               // 'le' '>'
       || lk == 16028               // 'let' '>'
       || lk == 16030               // 'lt' '>'
       || lk == 16031               // 'map' '>'
       || lk == 16033               // 'mod' '>'
       || lk == 16035               // 'module' '>'
       || lk == 16036               // 'namespace' '>'
       || lk == 16037               // 'namespace-node' '>'
       || lk == 16038               // 'ne' '>'
       || lk == 16042               // 'node' '>'
       || lk == 16045               // 'only' '>'
       || lk == 16047               // 'or' '>'
       || lk == 16048               // 'order' '>'
       || lk == 16049               // 'ordered' '>'
       || lk == 16051               // 'parent' '>'
       || lk == 16056               // 'preceding' '>'
       || lk == 16057               // 'preceding-sibling' '>'
       || lk == 16060               // 'processing-instruction' '>'
       || lk == 16063               // 'return' '>'
       || lk == 16066               // 'satisfies' '>'
       || lk == 16068               // 'schema-attribute' '>'
       || lk == 16069               // 'schema-element' '>'
       || lk == 16070               // 'self' '>'
       || lk == 16073               // 'some' '>'
       || lk == 16074               // 'stable' '>'
       || lk == 16075               // 'start' '>'
       || lk == 16078               // 'switch' '>'
       || lk == 16079               // 'text' '>'
       || lk == 16081               // 'to' '>'
       || lk == 16083               // 'treat' '>'
       || lk == 16084               // 'try' '>'
       || lk == 16087               // 'typeswitch' '>'
       || lk == 16088               // 'union' '>'
       || lk == 16089               // 'unordered' '>'
       || lk == 16091               // 'validate' '>'
       || lk == 16096               // 'where' '>'
       || lk == 16100               // 'xquery' '>'
       || lk == 16129               // IntegerLiteral '>='
       || lk == 16130               // DecimalLiteral '>='
       || lk == 16131               // DoubleLiteral '>='
       || lk == 16132               // StringLiteral '>='
       || lk == 16133               // URIQualifiedName '>='
       || lk == 16143               // QName^Token '>='
       || lk == 16149               // Wildcard '>='
       || lk == 16171               // '.' '>='
       || lk == 16172               // '..' '>='
       || lk == 16173               // '/' '>='
       || lk == 16205               // 'ancestor' '>='
       || lk == 16206               // 'ancestor-or-self' '>='
       || lk == 16207               // 'and' '>='
       || lk == 16209               // 'array' '>='
       || lk == 16211               // 'ascending' '>='
       || lk == 16213               // 'attribute' '>='
       || lk == 16219               // 'case' '>='
       || lk == 16220               // 'cast' '>='
       || lk == 16221               // 'castable' '>='
       || lk == 16223               // 'child' '>='
       || lk == 16224               // 'collation' '>='
       || lk == 16225               // 'comment' '>='
       || lk == 16231               // 'count' '>='
       || lk == 16234               // 'declare' '>='
       || lk == 16235               // 'default' '>='
       || lk == 16237               // 'descendant' '>='
       || lk == 16238               // 'descendant-or-self' '>='
       || lk == 16239               // 'descending' '>='
       || lk == 16241               // 'div' '>='
       || lk == 16242               // 'document' '>='
       || lk == 16243               // 'document-node' '>='
       || lk == 16244               // 'element' '>='
       || lk == 16245               // 'else' '>='
       || lk == 16246               // 'empty' '>='
       || lk == 16247               // 'empty-sequence' '>='
       || lk == 16249               // 'end' '>='
       || lk == 16250               // 'eq' '>='
       || lk == 16251               // 'every' '>='
       || lk == 16252               // 'except' '>='
       || lk == 16257               // 'following' '>='
       || lk == 16258               // 'following-sibling' '>='
       || lk == 16259               // 'for' '>='
       || lk == 16260               // 'function' '>='
       || lk == 16261               // 'ge' '>='
       || lk == 16263               // 'group' '>='
       || lk == 16265               // 'gt' '>='
       || lk == 16266               // 'idiv' '>='
       || lk == 16267               // 'if' '>='
       || lk == 16268               // 'import' '>='
       || lk == 16273               // 'instance' '>='
       || lk == 16274               // 'intersect' '>='
       || lk == 16277               // 'is' '>='
       || lk == 16278               // 'item' '>='
       || lk == 16282               // 'le' '>='
       || lk == 16284               // 'let' '>='
       || lk == 16286               // 'lt' '>='
       || lk == 16287               // 'map' '>='
       || lk == 16289               // 'mod' '>='
       || lk == 16291               // 'module' '>='
       || lk == 16292               // 'namespace' '>='
       || lk == 16293               // 'namespace-node' '>='
       || lk == 16294               // 'ne' '>='
       || lk == 16298               // 'node' '>='
       || lk == 16301               // 'only' '>='
       || lk == 16303               // 'or' '>='
       || lk == 16304               // 'order' '>='
       || lk == 16305               // 'ordered' '>='
       || lk == 16307               // 'parent' '>='
       || lk == 16312               // 'preceding' '>='
       || lk == 16313               // 'preceding-sibling' '>='
       || lk == 16316               // 'processing-instruction' '>='
       || lk == 16319               // 'return' '>='
       || lk == 16322               // 'satisfies' '>='
       || lk == 16324               // 'schema-attribute' '>='
       || lk == 16325               // 'schema-element' '>='
       || lk == 16326               // 'self' '>='
       || lk == 16329               // 'some' '>='
       || lk == 16330               // 'stable' '>='
       || lk == 16331               // 'start' '>='
       || lk == 16334               // 'switch' '>='
       || lk == 16335               // 'text' '>='
       || lk == 16337               // 'to' '>='
       || lk == 16339               // 'treat' '>='
       || lk == 16340               // 'try' '>='
       || lk == 16343               // 'typeswitch' '>='
       || lk == 16344               // 'union' '>='
       || lk == 16345               // 'unordered' '>='
       || lk == 16347               // 'validate' '>='
       || lk == 16352               // 'where' '>='
       || lk == 16356               // 'xquery' '>='
       || lk == 16385               // IntegerLiteral '>>'
       || lk == 16386               // DecimalLiteral '>>'
       || lk == 16387               // DoubleLiteral '>>'
       || lk == 16388               // StringLiteral '>>'
       || lk == 16389               // URIQualifiedName '>>'
       || lk == 16399               // QName^Token '>>'
       || lk == 16405               // Wildcard '>>'
       || lk == 16427               // '.' '>>'
       || lk == 16428               // '..' '>>'
       || lk == 16429               // '/' '>>'
       || lk == 16461               // 'ancestor' '>>'
       || lk == 16462               // 'ancestor-or-self' '>>'
       || lk == 16463               // 'and' '>>'
       || lk == 16465               // 'array' '>>'
       || lk == 16467               // 'ascending' '>>'
       || lk == 16469               // 'attribute' '>>'
       || lk == 16475               // 'case' '>>'
       || lk == 16476               // 'cast' '>>'
       || lk == 16477               // 'castable' '>>'
       || lk == 16479               // 'child' '>>'
       || lk == 16480               // 'collation' '>>'
       || lk == 16481               // 'comment' '>>'
       || lk == 16487               // 'count' '>>'
       || lk == 16490               // 'declare' '>>'
       || lk == 16491               // 'default' '>>'
       || lk == 16493               // 'descendant' '>>'
       || lk == 16494               // 'descendant-or-self' '>>'
       || lk == 16495               // 'descending' '>>'
       || lk == 16497               // 'div' '>>'
       || lk == 16498               // 'document' '>>'
       || lk == 16499               // 'document-node' '>>'
       || lk == 16500               // 'element' '>>'
       || lk == 16501               // 'else' '>>'
       || lk == 16502               // 'empty' '>>'
       || lk == 16503               // 'empty-sequence' '>>'
       || lk == 16505               // 'end' '>>'
       || lk == 16506               // 'eq' '>>'
       || lk == 16507               // 'every' '>>'
       || lk == 16508               // 'except' '>>'
       || lk == 16513               // 'following' '>>'
       || lk == 16514               // 'following-sibling' '>>'
       || lk == 16515               // 'for' '>>'
       || lk == 16516               // 'function' '>>'
       || lk == 16517               // 'ge' '>>'
       || lk == 16519               // 'group' '>>'
       || lk == 16521               // 'gt' '>>'
       || lk == 16522               // 'idiv' '>>'
       || lk == 16523               // 'if' '>>'
       || lk == 16524               // 'import' '>>'
       || lk == 16529               // 'instance' '>>'
       || lk == 16530               // 'intersect' '>>'
       || lk == 16533               // 'is' '>>'
       || lk == 16534               // 'item' '>>'
       || lk == 16538               // 'le' '>>'
       || lk == 16540               // 'let' '>>'
       || lk == 16542               // 'lt' '>>'
       || lk == 16543               // 'map' '>>'
       || lk == 16545               // 'mod' '>>'
       || lk == 16547               // 'module' '>>'
       || lk == 16548               // 'namespace' '>>'
       || lk == 16549               // 'namespace-node' '>>'
       || lk == 16550               // 'ne' '>>'
       || lk == 16554               // 'node' '>>'
       || lk == 16557               // 'only' '>>'
       || lk == 16559               // 'or' '>>'
       || lk == 16560               // 'order' '>>'
       || lk == 16561               // 'ordered' '>>'
       || lk == 16563               // 'parent' '>>'
       || lk == 16568               // 'preceding' '>>'
       || lk == 16569               // 'preceding-sibling' '>>'
       || lk == 16572               // 'processing-instruction' '>>'
       || lk == 16575               // 'return' '>>'
       || lk == 16578               // 'satisfies' '>>'
       || lk == 16580               // 'schema-attribute' '>>'
       || lk == 16581               // 'schema-element' '>>'
       || lk == 16582               // 'self' '>>'
       || lk == 16585               // 'some' '>>'
       || lk == 16586               // 'stable' '>>'
       || lk == 16587               // 'start' '>>'
       || lk == 16590               // 'switch' '>>'
       || lk == 16591               // 'text' '>>'
       || lk == 16593               // 'to' '>>'
       || lk == 16595               // 'treat' '>>'
       || lk == 16596               // 'try' '>>'
       || lk == 16599               // 'typeswitch' '>>'
       || lk == 16600               // 'union' '>>'
       || lk == 16601               // 'unordered' '>>'
       || lk == 16603               // 'validate' '>>'
       || lk == 16608               // 'where' '>>'
       || lk == 16612               // 'xquery' '>>'
       || lk == 16641               // IntegerLiteral '?'
       || lk == 16642               // DecimalLiteral '?'
       || lk == 16643               // DoubleLiteral '?'
       || lk == 16644               // StringLiteral '?'
       || lk == 16674               // '(' '?'
       || lk == 16679               // '+' '?'
       || lk == 16681               // '-' '?'
       || lk == 16683               // '.' '?'
       || lk == 16685               // '/' '?'
       || lk == 16686               // '//' '?'
       || lk == 16709               // '[' '?'
       || lk == 17186               // '(' '@'
       || lk == 17191               // '+' '@'
       || lk == 17193               // '-' '@'
       || lk == 17197               // '/' '@'
       || lk == 17198               // '//' '@'
       || lk == 17221               // '[' '@'
       || lk == 17665               // IntegerLiteral '['
       || lk == 17666               // DecimalLiteral '['
       || lk == 17667               // DoubleLiteral '['
       || lk == 17668               // StringLiteral '['
       || lk == 17669               // URIQualifiedName '['
       || lk == 17679               // QName^Token '['
       || lk == 17685               // Wildcard '['
       || lk == 17698               // '(' '['
       || lk == 17703               // '+' '['
       || lk == 17705               // '-' '['
       || lk == 17707               // '.' '['
       || lk == 17708               // '..' '['
       || lk == 17709               // '/' '['
       || lk == 17710               // '//' '['
       || lk == 17733               // '[' '['
       || lk == 17741               // 'ancestor' '['
       || lk == 17742               // 'ancestor-or-self' '['
       || lk == 17743               // 'and' '['
       || lk == 17745               // 'array' '['
       || lk == 17747               // 'ascending' '['
       || lk == 17749               // 'attribute' '['
       || lk == 17755               // 'case' '['
       || lk == 17756               // 'cast' '['
       || lk == 17757               // 'castable' '['
       || lk == 17759               // 'child' '['
       || lk == 17760               // 'collation' '['
       || lk == 17761               // 'comment' '['
       || lk == 17767               // 'count' '['
       || lk == 17770               // 'declare' '['
       || lk == 17771               // 'default' '['
       || lk == 17773               // 'descendant' '['
       || lk == 17774               // 'descendant-or-self' '['
       || lk == 17775               // 'descending' '['
       || lk == 17777               // 'div' '['
       || lk == 17778               // 'document' '['
       || lk == 17779               // 'document-node' '['
       || lk == 17780               // 'element' '['
       || lk == 17781               // 'else' '['
       || lk == 17782               // 'empty' '['
       || lk == 17783               // 'empty-sequence' '['
       || lk == 17785               // 'end' '['
       || lk == 17786               // 'eq' '['
       || lk == 17787               // 'every' '['
       || lk == 17788               // 'except' '['
       || lk == 17793               // 'following' '['
       || lk == 17794               // 'following-sibling' '['
       || lk == 17795               // 'for' '['
       || lk == 17796               // 'function' '['
       || lk == 17797               // 'ge' '['
       || lk == 17799               // 'group' '['
       || lk == 17801               // 'gt' '['
       || lk == 17802               // 'idiv' '['
       || lk == 17803               // 'if' '['
       || lk == 17804               // 'import' '['
       || lk == 17809               // 'instance' '['
       || lk == 17810               // 'intersect' '['
       || lk == 17813               // 'is' '['
       || lk == 17814               // 'item' '['
       || lk == 17818               // 'le' '['
       || lk == 17820               // 'let' '['
       || lk == 17822               // 'lt' '['
       || lk == 17823               // 'map' '['
       || lk == 17825               // 'mod' '['
       || lk == 17827               // 'module' '['
       || lk == 17828               // 'namespace' '['
       || lk == 17829               // 'namespace-node' '['
       || lk == 17830               // 'ne' '['
       || lk == 17834               // 'node' '['
       || lk == 17837               // 'only' '['
       || lk == 17839               // 'or' '['
       || lk == 17840               // 'order' '['
       || lk == 17841               // 'ordered' '['
       || lk == 17843               // 'parent' '['
       || lk == 17848               // 'preceding' '['
       || lk == 17849               // 'preceding-sibling' '['
       || lk == 17852               // 'processing-instruction' '['
       || lk == 17855               // 'return' '['
       || lk == 17858               // 'satisfies' '['
       || lk == 17860               // 'schema-attribute' '['
       || lk == 17861               // 'schema-element' '['
       || lk == 17862               // 'self' '['
       || lk == 17865               // 'some' '['
       || lk == 17866               // 'stable' '['
       || lk == 17867               // 'start' '['
       || lk == 17870               // 'switch' '['
       || lk == 17871               // 'text' '['
       || lk == 17873               // 'to' '['
       || lk == 17875               // 'treat' '['
       || lk == 17876               // 'try' '['
       || lk == 17879               // 'typeswitch' '['
       || lk == 17880               // 'union' '['
       || lk == 17881               // 'unordered' '['
       || lk == 17883               // 'validate' '['
       || lk == 17888               // 'where' '['
       || lk == 17892               // 'xquery' '['
       || lk == 17989               // '[' ']'
       || lk == 18722               // '(' '``['
       || lk == 18727               // '+' '``['
       || lk == 18729               // '-' '``['
       || lk == 18733               // '/' '``['
       || lk == 18734               // '//' '``['
       || lk == 18757               // '[' '``['
       || lk == 19743               // '$' 'ancestor'
       || lk == 19744               // '%' 'ancestor'
       || lk == 19746               // '(' 'ancestor'
       || lk == 19747               // '(#' 'ancestor'
       || lk == 19751               // '+' 'ancestor'
       || lk == 19753               // '-' 'ancestor'
       || lk == 19757               // '/' 'ancestor'
       || lk == 19758               // '//' 'ancestor'
       || lk == 19765               // '<' 'ancestor'
       || lk == 19779               // '@' 'ancestor'
       || lk == 19781               // '[' 'ancestor'
       || lk == 19797               // 'attribute' 'ancestor'
       || lk == 19828               // 'element' 'ancestor'
       || lk == 19999               // '$' 'ancestor-or-self'
       || lk == 20000               // '%' 'ancestor-or-self'
       || lk == 20002               // '(' 'ancestor-or-self'
       || lk == 20003               // '(#' 'ancestor-or-self'
       || lk == 20007               // '+' 'ancestor-or-self'
       || lk == 20009               // '-' 'ancestor-or-self'
       || lk == 20013               // '/' 'ancestor-or-self'
       || lk == 20014               // '//' 'ancestor-or-self'
       || lk == 20021               // '<' 'ancestor-or-self'
       || lk == 20035               // '@' 'ancestor-or-self'
       || lk == 20037               // '[' 'ancestor-or-self'
       || lk == 20053               // 'attribute' 'ancestor-or-self'
       || lk == 20084               // 'element' 'ancestor-or-self'
       || lk == 20225               // IntegerLiteral 'and'
       || lk == 20226               // DecimalLiteral 'and'
       || lk == 20227               // DoubleLiteral 'and'
       || lk == 20228               // StringLiteral 'and'
       || lk == 20229               // URIQualifiedName 'and'
       || lk == 20239               // QName^Token 'and'
       || lk == 20245               // Wildcard 'and'
       || lk == 20255               // '$' 'and'
       || lk == 20256               // '%' 'and'
       || lk == 20258               // '(' 'and'
       || lk == 20259               // '(#' 'and'
       || lk == 20263               // '+' 'and'
       || lk == 20265               // '-' 'and'
       || lk == 20267               // '.' 'and'
       || lk == 20268               // '..' 'and'
       || lk == 20269               // '/' 'and'
       || lk == 20270               // '//' 'and'
       || lk == 20277               // '<' 'and'
       || lk == 20289               // '?' 'and'
       || lk == 20291               // '@' 'and'
       || lk == 20293               // '[' 'and'
       || lk == 20301               // 'ancestor' 'and'
       || lk == 20302               // 'ancestor-or-self' 'and'
       || lk == 20303               // 'and' 'and'
       || lk == 20305               // 'array' 'and'
       || lk == 20307               // 'ascending' 'and'
       || lk == 20309               // 'attribute' 'and'
       || lk == 20315               // 'case' 'and'
       || lk == 20316               // 'cast' 'and'
       || lk == 20317               // 'castable' 'and'
       || lk == 20319               // 'child' 'and'
       || lk == 20320               // 'collation' 'and'
       || lk == 20321               // 'comment' 'and'
       || lk == 20327               // 'count' 'and'
       || lk == 20330               // 'declare' 'and'
       || lk == 20331               // 'default' 'and'
       || lk == 20333               // 'descendant' 'and'
       || lk == 20334               // 'descendant-or-self' 'and'
       || lk == 20335               // 'descending' 'and'
       || lk == 20337               // 'div' 'and'
       || lk == 20338               // 'document' 'and'
       || lk == 20339               // 'document-node' 'and'
       || lk == 20340               // 'element' 'and'
       || lk == 20341               // 'else' 'and'
       || lk == 20342               // 'empty' 'and'
       || lk == 20343               // 'empty-sequence' 'and'
       || lk == 20345               // 'end' 'and'
       || lk == 20346               // 'eq' 'and'
       || lk == 20347               // 'every' 'and'
       || lk == 20348               // 'except' 'and'
       || lk == 20353               // 'following' 'and'
       || lk == 20354               // 'following-sibling' 'and'
       || lk == 20355               // 'for' 'and'
       || lk == 20356               // 'function' 'and'
       || lk == 20357               // 'ge' 'and'
       || lk == 20359               // 'group' 'and'
       || lk == 20361               // 'gt' 'and'
       || lk == 20362               // 'idiv' 'and'
       || lk == 20363               // 'if' 'and'
       || lk == 20364               // 'import' 'and'
       || lk == 20369               // 'instance' 'and'
       || lk == 20370               // 'intersect' 'and'
       || lk == 20373               // 'is' 'and'
       || lk == 20374               // 'item' 'and'
       || lk == 20378               // 'le' 'and'
       || lk == 20380               // 'let' 'and'
       || lk == 20382               // 'lt' 'and'
       || lk == 20383               // 'map' 'and'
       || lk == 20385               // 'mod' 'and'
       || lk == 20387               // 'module' 'and'
       || lk == 20388               // 'namespace' 'and'
       || lk == 20389               // 'namespace-node' 'and'
       || lk == 20390               // 'ne' 'and'
       || lk == 20394               // 'node' 'and'
       || lk == 20397               // 'only' 'and'
       || lk == 20399               // 'or' 'and'
       || lk == 20400               // 'order' 'and'
       || lk == 20401               // 'ordered' 'and'
       || lk == 20403               // 'parent' 'and'
       || lk == 20408               // 'preceding' 'and'
       || lk == 20409               // 'preceding-sibling' 'and'
       || lk == 20412               // 'processing-instruction' 'and'
       || lk == 20415               // 'return' 'and'
       || lk == 20418               // 'satisfies' 'and'
       || lk == 20420               // 'schema-attribute' 'and'
       || lk == 20421               // 'schema-element' 'and'
       || lk == 20422               // 'self' 'and'
       || lk == 20425               // 'some' 'and'
       || lk == 20426               // 'stable' 'and'
       || lk == 20427               // 'start' 'and'
       || lk == 20430               // 'switch' 'and'
       || lk == 20431               // 'text' 'and'
       || lk == 20433               // 'to' 'and'
       || lk == 20435               // 'treat' 'and'
       || lk == 20436               // 'try' 'and'
       || lk == 20439               // 'typeswitch' 'and'
       || lk == 20440               // 'union' 'and'
       || lk == 20441               // 'unordered' 'and'
       || lk == 20443               // 'validate' 'and'
       || lk == 20448               // 'where' 'and'
       || lk == 20452               // 'xquery' 'and'
       || lk == 20767               // '$' 'array'
       || lk == 20768               // '%' 'array'
       || lk == 20770               // '(' 'array'
       || lk == 20771               // '(#' 'array'
       || lk == 20775               // '+' 'array'
       || lk == 20777               // '-' 'array'
       || lk == 20781               // '/' 'array'
       || lk == 20782               // '//' 'array'
       || lk == 20789               // '<' 'array'
       || lk == 20803               // '@' 'array'
       || lk == 20805               // '[' 'array'
       || lk == 20821               // 'attribute' 'array'
       || lk == 20852               // 'element' 'array'
       || lk == 21279               // '$' 'ascending'
       || lk == 21280               // '%' 'ascending'
       || lk == 21282               // '(' 'ascending'
       || lk == 21283               // '(#' 'ascending'
       || lk == 21287               // '+' 'ascending'
       || lk == 21289               // '-' 'ascending'
       || lk == 21293               // '/' 'ascending'
       || lk == 21294               // '//' 'ascending'
       || lk == 21301               // '<' 'ascending'
       || lk == 21313               // '?' 'ascending'
       || lk == 21315               // '@' 'ascending'
       || lk == 21317               // '[' 'ascending'
       || lk == 21333               // 'attribute' 'ascending'
       || lk == 21364               // 'element' 'ascending'
       || lk == 21412               // 'namespace' 'ascending'
       || lk == 21436               // 'processing-instruction' 'ascending'
       || lk == 21791               // '$' 'attribute'
       || lk == 21792               // '%' 'attribute'
       || lk == 21794               // '(' 'attribute'
       || lk == 21795               // '(#' 'attribute'
       || lk == 21799               // '+' 'attribute'
       || lk == 21801               // '-' 'attribute'
       || lk == 21805               // '/' 'attribute'
       || lk == 21806               // '//' 'attribute'
       || lk == 21813               // '<' 'attribute'
       || lk == 21827               // '@' 'attribute'
       || lk == 21829               // '[' 'attribute'
       || lk == 21845               // 'attribute' 'attribute'
       || lk == 21876               // 'element' 'attribute'
       || lk == 23327               // '$' 'case'
       || lk == 23328               // '%' 'case'
       || lk == 23330               // '(' 'case'
       || lk == 23331               // '(#' 'case'
       || lk == 23335               // '+' 'case'
       || lk == 23337               // '-' 'case'
       || lk == 23341               // '/' 'case'
       || lk == 23342               // '//' 'case'
       || lk == 23349               // '<' 'case'
       || lk == 23361               // '?' 'case'
       || lk == 23363               // '@' 'case'
       || lk == 23365               // '[' 'case'
       || lk == 23381               // 'attribute' 'case'
       || lk == 23412               // 'element' 'case'
       || lk == 23460               // 'namespace' 'case'
       || lk == 23484               // 'processing-instruction' 'case'
       || lk == 23553               // IntegerLiteral 'cast'
       || lk == 23554               // DecimalLiteral 'cast'
       || lk == 23555               // DoubleLiteral 'cast'
       || lk == 23556               // StringLiteral 'cast'
       || lk == 23557               // URIQualifiedName 'cast'
       || lk == 23567               // QName^Token 'cast'
       || lk == 23573               // Wildcard 'cast'
       || lk == 23583               // '$' 'cast'
       || lk == 23584               // '%' 'cast'
       || lk == 23586               // '(' 'cast'
       || lk == 23587               // '(#' 'cast'
       || lk == 23591               // '+' 'cast'
       || lk == 23593               // '-' 'cast'
       || lk == 23595               // '.' 'cast'
       || lk == 23596               // '..' 'cast'
       || lk == 23597               // '/' 'cast'
       || lk == 23598               // '//' 'cast'
       || lk == 23605               // '<' 'cast'
       || lk == 23617               // '?' 'cast'
       || lk == 23619               // '@' 'cast'
       || lk == 23621               // '[' 'cast'
       || lk == 23629               // 'ancestor' 'cast'
       || lk == 23630               // 'ancestor-or-self' 'cast'
       || lk == 23631               // 'and' 'cast'
       || lk == 23633               // 'array' 'cast'
       || lk == 23635               // 'ascending' 'cast'
       || lk == 23637               // 'attribute' 'cast'
       || lk == 23643               // 'case' 'cast'
       || lk == 23644               // 'cast' 'cast'
       || lk == 23645               // 'castable' 'cast'
       || lk == 23647               // 'child' 'cast'
       || lk == 23648               // 'collation' 'cast'
       || lk == 23649               // 'comment' 'cast'
       || lk == 23655               // 'count' 'cast'
       || lk == 23658               // 'declare' 'cast'
       || lk == 23659               // 'default' 'cast'
       || lk == 23661               // 'descendant' 'cast'
       || lk == 23662               // 'descendant-or-self' 'cast'
       || lk == 23663               // 'descending' 'cast'
       || lk == 23665               // 'div' 'cast'
       || lk == 23666               // 'document' 'cast'
       || lk == 23667               // 'document-node' 'cast'
       || lk == 23668               // 'element' 'cast'
       || lk == 23669               // 'else' 'cast'
       || lk == 23670               // 'empty' 'cast'
       || lk == 23671               // 'empty-sequence' 'cast'
       || lk == 23673               // 'end' 'cast'
       || lk == 23674               // 'eq' 'cast'
       || lk == 23675               // 'every' 'cast'
       || lk == 23676               // 'except' 'cast'
       || lk == 23681               // 'following' 'cast'
       || lk == 23682               // 'following-sibling' 'cast'
       || lk == 23683               // 'for' 'cast'
       || lk == 23684               // 'function' 'cast'
       || lk == 23685               // 'ge' 'cast'
       || lk == 23687               // 'group' 'cast'
       || lk == 23689               // 'gt' 'cast'
       || lk == 23690               // 'idiv' 'cast'
       || lk == 23691               // 'if' 'cast'
       || lk == 23692               // 'import' 'cast'
       || lk == 23697               // 'instance' 'cast'
       || lk == 23698               // 'intersect' 'cast'
       || lk == 23701               // 'is' 'cast'
       || lk == 23702               // 'item' 'cast'
       || lk == 23706               // 'le' 'cast'
       || lk == 23708               // 'let' 'cast'
       || lk == 23710               // 'lt' 'cast'
       || lk == 23711               // 'map' 'cast'
       || lk == 23713               // 'mod' 'cast'
       || lk == 23715               // 'module' 'cast'
       || lk == 23716               // 'namespace' 'cast'
       || lk == 23717               // 'namespace-node' 'cast'
       || lk == 23718               // 'ne' 'cast'
       || lk == 23722               // 'node' 'cast'
       || lk == 23725               // 'only' 'cast'
       || lk == 23727               // 'or' 'cast'
       || lk == 23728               // 'order' 'cast'
       || lk == 23729               // 'ordered' 'cast'
       || lk == 23731               // 'parent' 'cast'
       || lk == 23736               // 'preceding' 'cast'
       || lk == 23737               // 'preceding-sibling' 'cast'
       || lk == 23740               // 'processing-instruction' 'cast'
       || lk == 23743               // 'return' 'cast'
       || lk == 23746               // 'satisfies' 'cast'
       || lk == 23748               // 'schema-attribute' 'cast'
       || lk == 23749               // 'schema-element' 'cast'
       || lk == 23750               // 'self' 'cast'
       || lk == 23753               // 'some' 'cast'
       || lk == 23754               // 'stable' 'cast'
       || lk == 23755               // 'start' 'cast'
       || lk == 23758               // 'switch' 'cast'
       || lk == 23759               // 'text' 'cast'
       || lk == 23761               // 'to' 'cast'
       || lk == 23763               // 'treat' 'cast'
       || lk == 23764               // 'try' 'cast'
       || lk == 23767               // 'typeswitch' 'cast'
       || lk == 23768               // 'union' 'cast'
       || lk == 23769               // 'unordered' 'cast'
       || lk == 23771               // 'validate' 'cast'
       || lk == 23776               // 'where' 'cast'
       || lk == 23780               // 'xquery' 'cast'
       || lk == 23809               // IntegerLiteral 'castable'
       || lk == 23810               // DecimalLiteral 'castable'
       || lk == 23811               // DoubleLiteral 'castable'
       || lk == 23812               // StringLiteral 'castable'
       || lk == 23813               // URIQualifiedName 'castable'
       || lk == 23823               // QName^Token 'castable'
       || lk == 23829               // Wildcard 'castable'
       || lk == 23839               // '$' 'castable'
       || lk == 23840               // '%' 'castable'
       || lk == 23842               // '(' 'castable'
       || lk == 23843               // '(#' 'castable'
       || lk == 23847               // '+' 'castable'
       || lk == 23849               // '-' 'castable'
       || lk == 23851               // '.' 'castable'
       || lk == 23852               // '..' 'castable'
       || lk == 23853               // '/' 'castable'
       || lk == 23854               // '//' 'castable'
       || lk == 23861               // '<' 'castable'
       || lk == 23873               // '?' 'castable'
       || lk == 23875               // '@' 'castable'
       || lk == 23877               // '[' 'castable'
       || lk == 23885               // 'ancestor' 'castable'
       || lk == 23886               // 'ancestor-or-self' 'castable'
       || lk == 23887               // 'and' 'castable'
       || lk == 23889               // 'array' 'castable'
       || lk == 23891               // 'ascending' 'castable'
       || lk == 23893               // 'attribute' 'castable'
       || lk == 23899               // 'case' 'castable'
       || lk == 23900               // 'cast' 'castable'
       || lk == 23901               // 'castable' 'castable'
       || lk == 23903               // 'child' 'castable'
       || lk == 23904               // 'collation' 'castable'
       || lk == 23905               // 'comment' 'castable'
       || lk == 23911               // 'count' 'castable'
       || lk == 23914               // 'declare' 'castable'
       || lk == 23915               // 'default' 'castable'
       || lk == 23917               // 'descendant' 'castable'
       || lk == 23918               // 'descendant-or-self' 'castable'
       || lk == 23919               // 'descending' 'castable'
       || lk == 23921               // 'div' 'castable'
       || lk == 23922               // 'document' 'castable'
       || lk == 23923               // 'document-node' 'castable'
       || lk == 23924               // 'element' 'castable'
       || lk == 23925               // 'else' 'castable'
       || lk == 23926               // 'empty' 'castable'
       || lk == 23927               // 'empty-sequence' 'castable'
       || lk == 23929               // 'end' 'castable'
       || lk == 23930               // 'eq' 'castable'
       || lk == 23931               // 'every' 'castable'
       || lk == 23932               // 'except' 'castable'
       || lk == 23937               // 'following' 'castable'
       || lk == 23938               // 'following-sibling' 'castable'
       || lk == 23939               // 'for' 'castable'
       || lk == 23940               // 'function' 'castable'
       || lk == 23941               // 'ge' 'castable'
       || lk == 23943               // 'group' 'castable'
       || lk == 23945               // 'gt' 'castable'
       || lk == 23946               // 'idiv' 'castable'
       || lk == 23947               // 'if' 'castable'
       || lk == 23948               // 'import' 'castable'
       || lk == 23953               // 'instance' 'castable'
       || lk == 23954               // 'intersect' 'castable'
       || lk == 23957               // 'is' 'castable'
       || lk == 23958               // 'item' 'castable'
       || lk == 23962               // 'le' 'castable'
       || lk == 23964               // 'let' 'castable'
       || lk == 23966               // 'lt' 'castable'
       || lk == 23967               // 'map' 'castable'
       || lk == 23969               // 'mod' 'castable'
       || lk == 23971               // 'module' 'castable'
       || lk == 23972               // 'namespace' 'castable'
       || lk == 23973               // 'namespace-node' 'castable'
       || lk == 23974               // 'ne' 'castable'
       || lk == 23978               // 'node' 'castable'
       || lk == 23981               // 'only' 'castable'
       || lk == 23983               // 'or' 'castable'
       || lk == 23984               // 'order' 'castable'
       || lk == 23985               // 'ordered' 'castable'
       || lk == 23987               // 'parent' 'castable'
       || lk == 23992               // 'preceding' 'castable'
       || lk == 23993               // 'preceding-sibling' 'castable'
       || lk == 23996               // 'processing-instruction' 'castable'
       || lk == 23999               // 'return' 'castable'
       || lk == 24002               // 'satisfies' 'castable'
       || lk == 24004               // 'schema-attribute' 'castable'
       || lk == 24005               // 'schema-element' 'castable'
       || lk == 24006               // 'self' 'castable'
       || lk == 24009               // 'some' 'castable'
       || lk == 24010               // 'stable' 'castable'
       || lk == 24011               // 'start' 'castable'
       || lk == 24014               // 'switch' 'castable'
       || lk == 24015               // 'text' 'castable'
       || lk == 24017               // 'to' 'castable'
       || lk == 24019               // 'treat' 'castable'
       || lk == 24020               // 'try' 'castable'
       || lk == 24023               // 'typeswitch' 'castable'
       || lk == 24024               // 'union' 'castable'
       || lk == 24025               // 'unordered' 'castable'
       || lk == 24027               // 'validate' 'castable'
       || lk == 24032               // 'where' 'castable'
       || lk == 24036               // 'xquery' 'castable'
       || lk == 24351               // '$' 'child'
       || lk == 24352               // '%' 'child'
       || lk == 24354               // '(' 'child'
       || lk == 24355               // '(#' 'child'
       || lk == 24359               // '+' 'child'
       || lk == 24361               // '-' 'child'
       || lk == 24365               // '/' 'child'
       || lk == 24366               // '//' 'child'
       || lk == 24373               // '<' 'child'
       || lk == 24387               // '@' 'child'
       || lk == 24389               // '[' 'child'
       || lk == 24405               // 'attribute' 'child'
       || lk == 24436               // 'element' 'child'
       || lk == 24607               // '$' 'collation'
       || lk == 24608               // '%' 'collation'
       || lk == 24610               // '(' 'collation'
       || lk == 24611               // '(#' 'collation'
       || lk == 24615               // '+' 'collation'
       || lk == 24617               // '-' 'collation'
       || lk == 24621               // '/' 'collation'
       || lk == 24622               // '//' 'collation'
       || lk == 24629               // '<' 'collation'
       || lk == 24641               // '?' 'collation'
       || lk == 24643               // '@' 'collation'
       || lk == 24645               // '[' 'collation'
       || lk == 24661               // 'attribute' 'collation'
       || lk == 24692               // 'element' 'collation'
       || lk == 24740               // 'namespace' 'collation'
       || lk == 24764               // 'processing-instruction' 'collation'
       || lk == 24863               // '$' 'comment'
       || lk == 24864               // '%' 'comment'
       || lk == 24866               // '(' 'comment'
       || lk == 24867               // '(#' 'comment'
       || lk == 24871               // '+' 'comment'
       || lk == 24873               // '-' 'comment'
       || lk == 24877               // '/' 'comment'
       || lk == 24878               // '//' 'comment'
       || lk == 24885               // '<' 'comment'
       || lk == 24899               // '@' 'comment'
       || lk == 24901               // '[' 'comment'
       || lk == 24917               // 'attribute' 'comment'
       || lk == 24948               // 'element' 'comment'
       || lk == 25890               // '(' 'copy'
       || lk == 25925               // '[' 'copy'
       || lk == 26399               // '$' 'count'
       || lk == 26400               // '%' 'count'
       || lk == 26402               // '(' 'count'
       || lk == 26403               // '(#' 'count'
       || lk == 26407               // '+' 'count'
       || lk == 26409               // '-' 'count'
       || lk == 26413               // '/' 'count'
       || lk == 26414               // '//' 'count'
       || lk == 26421               // '<' 'count'
       || lk == 26433               // '?' 'count'
       || lk == 26435               // '@' 'count'
       || lk == 26437               // '[' 'count'
       || lk == 26453               // 'attribute' 'count'
       || lk == 26484               // 'element' 'count'
       || lk == 26532               // 'namespace' 'count'
       || lk == 26556               // 'processing-instruction' 'count'
       || lk == 27167               // '$' 'declare'
       || lk == 27168               // '%' 'declare'
       || lk == 27170               // '(' 'declare'
       || lk == 27171               // '(#' 'declare'
       || lk == 27175               // '+' 'declare'
       || lk == 27177               // '-' 'declare'
       || lk == 27181               // '/' 'declare'
       || lk == 27182               // '//' 'declare'
       || lk == 27189               // '<' 'declare'
       || lk == 27203               // '@' 'declare'
       || lk == 27205               // '[' 'declare'
       || lk == 27221               // 'attribute' 'declare'
       || lk == 27252               // 'element' 'declare'
       || lk == 27423               // '$' 'default'
       || lk == 27424               // '%' 'default'
       || lk == 27426               // '(' 'default'
       || lk == 27427               // '(#' 'default'
       || lk == 27431               // '+' 'default'
       || lk == 27433               // '-' 'default'
       || lk == 27437               // '/' 'default'
       || lk == 27438               // '//' 'default'
       || lk == 27445               // '<' 'default'
       || lk == 27457               // '?' 'default'
       || lk == 27459               // '@' 'default'
       || lk == 27461               // '[' 'default'
       || lk == 27477               // 'attribute' 'default'
       || lk == 27508               // 'element' 'default'
       || lk == 27556               // 'namespace' 'default'
       || lk == 27580               // 'processing-instruction' 'default'
       || lk == 27682               // '(' 'delete'
       || lk == 27717               // '[' 'delete'
       || lk == 27935               // '$' 'descendant'
       || lk == 27936               // '%' 'descendant'
       || lk == 27938               // '(' 'descendant'
       || lk == 27939               // '(#' 'descendant'
       || lk == 27943               // '+' 'descendant'
       || lk == 27945               // '-' 'descendant'
       || lk == 27949               // '/' 'descendant'
       || lk == 27950               // '//' 'descendant'
       || lk == 27957               // '<' 'descendant'
       || lk == 27971               // '@' 'descendant'
       || lk == 27973               // '[' 'descendant'
       || lk == 27989               // 'attribute' 'descendant'
       || lk == 28020               // 'element' 'descendant'
       || lk == 28191               // '$' 'descendant-or-self'
       || lk == 28192               // '%' 'descendant-or-self'
       || lk == 28194               // '(' 'descendant-or-self'
       || lk == 28195               // '(#' 'descendant-or-self'
       || lk == 28199               // '+' 'descendant-or-self'
       || lk == 28201               // '-' 'descendant-or-self'
       || lk == 28205               // '/' 'descendant-or-self'
       || lk == 28206               // '//' 'descendant-or-self'
       || lk == 28213               // '<' 'descendant-or-self'
       || lk == 28227               // '@' 'descendant-or-self'
       || lk == 28229               // '[' 'descendant-or-self'
       || lk == 28245               // 'attribute' 'descendant-or-self'
       || lk == 28276               // 'element' 'descendant-or-self'
       || lk == 28447               // '$' 'descending'
       || lk == 28448               // '%' 'descending'
       || lk == 28450               // '(' 'descending'
       || lk == 28451               // '(#' 'descending'
       || lk == 28455               // '+' 'descending'
       || lk == 28457               // '-' 'descending'
       || lk == 28461               // '/' 'descending'
       || lk == 28462               // '//' 'descending'
       || lk == 28469               // '<' 'descending'
       || lk == 28481               // '?' 'descending'
       || lk == 28483               // '@' 'descending'
       || lk == 28485               // '[' 'descending'
       || lk == 28501               // 'attribute' 'descending'
       || lk == 28532               // 'element' 'descending'
       || lk == 28580               // 'namespace' 'descending'
       || lk == 28604               // 'processing-instruction' 'descending'
       || lk == 28929               // IntegerLiteral 'div'
       || lk == 28930               // DecimalLiteral 'div'
       || lk == 28931               // DoubleLiteral 'div'
       || lk == 28932               // StringLiteral 'div'
       || lk == 28933               // URIQualifiedName 'div'
       || lk == 28943               // QName^Token 'div'
       || lk == 28949               // Wildcard 'div'
       || lk == 28959               // '$' 'div'
       || lk == 28960               // '%' 'div'
       || lk == 28962               // '(' 'div'
       || lk == 28963               // '(#' 'div'
       || lk == 28967               // '+' 'div'
       || lk == 28969               // '-' 'div'
       || lk == 28971               // '.' 'div'
       || lk == 28972               // '..' 'div'
       || lk == 28973               // '/' 'div'
       || lk == 28974               // '//' 'div'
       || lk == 28981               // '<' 'div'
       || lk == 28993               // '?' 'div'
       || lk == 28995               // '@' 'div'
       || lk == 28997               // '[' 'div'
       || lk == 29005               // 'ancestor' 'div'
       || lk == 29006               // 'ancestor-or-self' 'div'
       || lk == 29007               // 'and' 'div'
       || lk == 29009               // 'array' 'div'
       || lk == 29011               // 'ascending' 'div'
       || lk == 29013               // 'attribute' 'div'
       || lk == 29019               // 'case' 'div'
       || lk == 29020               // 'cast' 'div'
       || lk == 29021               // 'castable' 'div'
       || lk == 29023               // 'child' 'div'
       || lk == 29024               // 'collation' 'div'
       || lk == 29025               // 'comment' 'div'
       || lk == 29031               // 'count' 'div'
       || lk == 29034               // 'declare' 'div'
       || lk == 29035               // 'default' 'div'
       || lk == 29037               // 'descendant' 'div'
       || lk == 29038               // 'descendant-or-self' 'div'
       || lk == 29039               // 'descending' 'div'
       || lk == 29041               // 'div' 'div'
       || lk == 29042               // 'document' 'div'
       || lk == 29043               // 'document-node' 'div'
       || lk == 29044               // 'element' 'div'
       || lk == 29045               // 'else' 'div'
       || lk == 29046               // 'empty' 'div'
       || lk == 29047               // 'empty-sequence' 'div'
       || lk == 29049               // 'end' 'div'
       || lk == 29050               // 'eq' 'div'
       || lk == 29051               // 'every' 'div'
       || lk == 29052               // 'except' 'div'
       || lk == 29057               // 'following' 'div'
       || lk == 29058               // 'following-sibling' 'div'
       || lk == 29059               // 'for' 'div'
       || lk == 29060               // 'function' 'div'
       || lk == 29061               // 'ge' 'div'
       || lk == 29063               // 'group' 'div'
       || lk == 29065               // 'gt' 'div'
       || lk == 29066               // 'idiv' 'div'
       || lk == 29067               // 'if' 'div'
       || lk == 29068               // 'import' 'div'
       || lk == 29073               // 'instance' 'div'
       || lk == 29074               // 'intersect' 'div'
       || lk == 29077               // 'is' 'div'
       || lk == 29078               // 'item' 'div'
       || lk == 29082               // 'le' 'div'
       || lk == 29084               // 'let' 'div'
       || lk == 29086               // 'lt' 'div'
       || lk == 29087               // 'map' 'div'
       || lk == 29089               // 'mod' 'div'
       || lk == 29091               // 'module' 'div'
       || lk == 29092               // 'namespace' 'div'
       || lk == 29093               // 'namespace-node' 'div'
       || lk == 29094               // 'ne' 'div'
       || lk == 29098               // 'node' 'div'
       || lk == 29101               // 'only' 'div'
       || lk == 29103               // 'or' 'div'
       || lk == 29104               // 'order' 'div'
       || lk == 29105               // 'ordered' 'div'
       || lk == 29107               // 'parent' 'div'
       || lk == 29112               // 'preceding' 'div'
       || lk == 29113               // 'preceding-sibling' 'div'
       || lk == 29116               // 'processing-instruction' 'div'
       || lk == 29119               // 'return' 'div'
       || lk == 29122               // 'satisfies' 'div'
       || lk == 29124               // 'schema-attribute' 'div'
       || lk == 29125               // 'schema-element' 'div'
       || lk == 29126               // 'self' 'div'
       || lk == 29129               // 'some' 'div'
       || lk == 29130               // 'stable' 'div'
       || lk == 29131               // 'start' 'div'
       || lk == 29134               // 'switch' 'div'
       || lk == 29135               // 'text' 'div'
       || lk == 29137               // 'to' 'div'
       || lk == 29139               // 'treat' 'div'
       || lk == 29140               // 'try' 'div'
       || lk == 29143               // 'typeswitch' 'div'
       || lk == 29144               // 'union' 'div'
       || lk == 29145               // 'unordered' 'div'
       || lk == 29147               // 'validate' 'div'
       || lk == 29152               // 'where' 'div'
       || lk == 29156               // 'xquery' 'div'
       || lk == 29215               // '$' 'document'
       || lk == 29216               // '%' 'document'
       || lk == 29218               // '(' 'document'
       || lk == 29219               // '(#' 'document'
       || lk == 29223               // '+' 'document'
       || lk == 29225               // '-' 'document'
       || lk == 29229               // '/' 'document'
       || lk == 29230               // '//' 'document'
       || lk == 29237               // '<' 'document'
       || lk == 29251               // '@' 'document'
       || lk == 29253               // '[' 'document'
       || lk == 29269               // 'attribute' 'document'
       || lk == 29300               // 'element' 'document'
       || lk == 29471               // '$' 'document-node'
       || lk == 29472               // '%' 'document-node'
       || lk == 29474               // '(' 'document-node'
       || lk == 29475               // '(#' 'document-node'
       || lk == 29479               // '+' 'document-node'
       || lk == 29481               // '-' 'document-node'
       || lk == 29485               // '/' 'document-node'
       || lk == 29486               // '//' 'document-node'
       || lk == 29493               // '<' 'document-node'
       || lk == 29507               // '@' 'document-node'
       || lk == 29509               // '[' 'document-node'
       || lk == 29525               // 'attribute' 'document-node'
       || lk == 29556               // 'element' 'document-node'
       || lk == 29727               // '$' 'element'
       || lk == 29728               // '%' 'element'
       || lk == 29730               // '(' 'element'
       || lk == 29731               // '(#' 'element'
       || lk == 29735               // '+' 'element'
       || lk == 29737               // '-' 'element'
       || lk == 29741               // '/' 'element'
       || lk == 29742               // '//' 'element'
       || lk == 29749               // '<' 'element'
       || lk == 29763               // '@' 'element'
       || lk == 29765               // '[' 'element'
       || lk == 29781               // 'attribute' 'element'
       || lk == 29812               // 'element' 'element'
       || lk == 29983               // '$' 'else'
       || lk == 29984               // '%' 'else'
       || lk == 29986               // '(' 'else'
       || lk == 29987               // '(#' 'else'
       || lk == 29991               // '+' 'else'
       || lk == 29993               // '-' 'else'
       || lk == 29997               // '/' 'else'
       || lk == 29998               // '//' 'else'
       || lk == 30005               // '<' 'else'
       || lk == 30017               // '?' 'else'
       || lk == 30019               // '@' 'else'
       || lk == 30021               // '[' 'else'
       || lk == 30037               // 'attribute' 'else'
       || lk == 30068               // 'element' 'else'
       || lk == 30116               // 'namespace' 'else'
       || lk == 30140               // 'processing-instruction' 'else'
       || lk == 30239               // '$' 'empty'
       || lk == 30240               // '%' 'empty'
       || lk == 30242               // '(' 'empty'
       || lk == 30243               // '(#' 'empty'
       || lk == 30247               // '+' 'empty'
       || lk == 30249               // '-' 'empty'
       || lk == 30253               // '/' 'empty'
       || lk == 30254               // '//' 'empty'
       || lk == 30261               // '<' 'empty'
       || lk == 30273               // '?' 'empty'
       || lk == 30275               // '@' 'empty'
       || lk == 30277               // '[' 'empty'
       || lk == 30293               // 'attribute' 'empty'
       || lk == 30324               // 'element' 'empty'
       || lk == 30372               // 'namespace' 'empty'
       || lk == 30396               // 'processing-instruction' 'empty'
       || lk == 30495               // '$' 'empty-sequence'
       || lk == 30496               // '%' 'empty-sequence'
       || lk == 30498               // '(' 'empty-sequence'
       || lk == 30499               // '(#' 'empty-sequence'
       || lk == 30503               // '+' 'empty-sequence'
       || lk == 30505               // '-' 'empty-sequence'
       || lk == 30509               // '/' 'empty-sequence'
       || lk == 30510               // '//' 'empty-sequence'
       || lk == 30517               // '<' 'empty-sequence'
       || lk == 30531               // '@' 'empty-sequence'
       || lk == 30533               // '[' 'empty-sequence'
       || lk == 30549               // 'attribute' 'empty-sequence'
       || lk == 30580               // 'element' 'empty-sequence'
       || lk == 31007               // '$' 'end'
       || lk == 31008               // '%' 'end'
       || lk == 31010               // '(' 'end'
       || lk == 31011               // '(#' 'end'
       || lk == 31015               // '+' 'end'
       || lk == 31017               // '-' 'end'
       || lk == 31021               // '/' 'end'
       || lk == 31022               // '//' 'end'
       || lk == 31029               // '<' 'end'
       || lk == 31041               // '?' 'end'
       || lk == 31043               // '@' 'end'
       || lk == 31045               // '[' 'end'
       || lk == 31061               // 'attribute' 'end'
       || lk == 31092               // 'element' 'end'
       || lk == 31140               // 'namespace' 'end'
       || lk == 31164               // 'processing-instruction' 'end'
       || lk == 31233               // IntegerLiteral 'eq'
       || lk == 31234               // DecimalLiteral 'eq'
       || lk == 31235               // DoubleLiteral 'eq'
       || lk == 31236               // StringLiteral 'eq'
       || lk == 31237               // URIQualifiedName 'eq'
       || lk == 31247               // QName^Token 'eq'
       || lk == 31253               // Wildcard 'eq'
       || lk == 31263               // '$' 'eq'
       || lk == 31264               // '%' 'eq'
       || lk == 31266               // '(' 'eq'
       || lk == 31267               // '(#' 'eq'
       || lk == 31271               // '+' 'eq'
       || lk == 31273               // '-' 'eq'
       || lk == 31275               // '.' 'eq'
       || lk == 31276               // '..' 'eq'
       || lk == 31277               // '/' 'eq'
       || lk == 31278               // '//' 'eq'
       || lk == 31285               // '<' 'eq'
       || lk == 31297               // '?' 'eq'
       || lk == 31299               // '@' 'eq'
       || lk == 31301               // '[' 'eq'
       || lk == 31309               // 'ancestor' 'eq'
       || lk == 31310               // 'ancestor-or-self' 'eq'
       || lk == 31311               // 'and' 'eq'
       || lk == 31313               // 'array' 'eq'
       || lk == 31315               // 'ascending' 'eq'
       || lk == 31317               // 'attribute' 'eq'
       || lk == 31323               // 'case' 'eq'
       || lk == 31324               // 'cast' 'eq'
       || lk == 31325               // 'castable' 'eq'
       || lk == 31327               // 'child' 'eq'
       || lk == 31328               // 'collation' 'eq'
       || lk == 31329               // 'comment' 'eq'
       || lk == 31335               // 'count' 'eq'
       || lk == 31338               // 'declare' 'eq'
       || lk == 31339               // 'default' 'eq'
       || lk == 31341               // 'descendant' 'eq'
       || lk == 31342               // 'descendant-or-self' 'eq'
       || lk == 31343               // 'descending' 'eq'
       || lk == 31345               // 'div' 'eq'
       || lk == 31346               // 'document' 'eq'
       || lk == 31347               // 'document-node' 'eq'
       || lk == 31348               // 'element' 'eq'
       || lk == 31349               // 'else' 'eq'
       || lk == 31350               // 'empty' 'eq'
       || lk == 31351               // 'empty-sequence' 'eq'
       || lk == 31353               // 'end' 'eq'
       || lk == 31354               // 'eq' 'eq'
       || lk == 31355               // 'every' 'eq'
       || lk == 31356               // 'except' 'eq'
       || lk == 31361               // 'following' 'eq'
       || lk == 31362               // 'following-sibling' 'eq'
       || lk == 31363               // 'for' 'eq'
       || lk == 31364               // 'function' 'eq'
       || lk == 31365               // 'ge' 'eq'
       || lk == 31367               // 'group' 'eq'
       || lk == 31369               // 'gt' 'eq'
       || lk == 31370               // 'idiv' 'eq'
       || lk == 31371               // 'if' 'eq'
       || lk == 31372               // 'import' 'eq'
       || lk == 31377               // 'instance' 'eq'
       || lk == 31378               // 'intersect' 'eq'
       || lk == 31381               // 'is' 'eq'
       || lk == 31382               // 'item' 'eq'
       || lk == 31386               // 'le' 'eq'
       || lk == 31388               // 'let' 'eq'
       || lk == 31390               // 'lt' 'eq'
       || lk == 31391               // 'map' 'eq'
       || lk == 31393               // 'mod' 'eq'
       || lk == 31395               // 'module' 'eq'
       || lk == 31396               // 'namespace' 'eq'
       || lk == 31397               // 'namespace-node' 'eq'
       || lk == 31398               // 'ne' 'eq'
       || lk == 31402               // 'node' 'eq'
       || lk == 31405               // 'only' 'eq'
       || lk == 31407               // 'or' 'eq'
       || lk == 31408               // 'order' 'eq'
       || lk == 31409               // 'ordered' 'eq'
       || lk == 31411               // 'parent' 'eq'
       || lk == 31416               // 'preceding' 'eq'
       || lk == 31417               // 'preceding-sibling' 'eq'
       || lk == 31420               // 'processing-instruction' 'eq'
       || lk == 31423               // 'return' 'eq'
       || lk == 31426               // 'satisfies' 'eq'
       || lk == 31428               // 'schema-attribute' 'eq'
       || lk == 31429               // 'schema-element' 'eq'
       || lk == 31430               // 'self' 'eq'
       || lk == 31433               // 'some' 'eq'
       || lk == 31434               // 'stable' 'eq'
       || lk == 31435               // 'start' 'eq'
       || lk == 31438               // 'switch' 'eq'
       || lk == 31439               // 'text' 'eq'
       || lk == 31441               // 'to' 'eq'
       || lk == 31443               // 'treat' 'eq'
       || lk == 31444               // 'try' 'eq'
       || lk == 31447               // 'typeswitch' 'eq'
       || lk == 31448               // 'union' 'eq'
       || lk == 31449               // 'unordered' 'eq'
       || lk == 31451               // 'validate' 'eq'
       || lk == 31456               // 'where' 'eq'
       || lk == 31460               // 'xquery' 'eq'
       || lk == 31519               // '$' 'every'
       || lk == 31520               // '%' 'every'
       || lk == 31522               // '(' 'every'
       || lk == 31523               // '(#' 'every'
       || lk == 31527               // '+' 'every'
       || lk == 31529               // '-' 'every'
       || lk == 31533               // '/' 'every'
       || lk == 31534               // '//' 'every'
       || lk == 31541               // '<' 'every'
       || lk == 31555               // '@' 'every'
       || lk == 31557               // '[' 'every'
       || lk == 31573               // 'attribute' 'every'
       || lk == 31604               // 'element' 'every'
       || lk == 31745               // IntegerLiteral 'except'
       || lk == 31746               // DecimalLiteral 'except'
       || lk == 31747               // DoubleLiteral 'except'
       || lk == 31748               // StringLiteral 'except'
       || lk == 31749               // URIQualifiedName 'except'
       || lk == 31759               // QName^Token 'except'
       || lk == 31765               // Wildcard 'except'
       || lk == 31775               // '$' 'except'
       || lk == 31776               // '%' 'except'
       || lk == 31778               // '(' 'except'
       || lk == 31779               // '(#' 'except'
       || lk == 31783               // '+' 'except'
       || lk == 31785               // '-' 'except'
       || lk == 31787               // '.' 'except'
       || lk == 31788               // '..' 'except'
       || lk == 31789               // '/' 'except'
       || lk == 31790               // '//' 'except'
       || lk == 31797               // '<' 'except'
       || lk == 31809               // '?' 'except'
       || lk == 31811               // '@' 'except'
       || lk == 31813               // '[' 'except'
       || lk == 31821               // 'ancestor' 'except'
       || lk == 31822               // 'ancestor-or-self' 'except'
       || lk == 31823               // 'and' 'except'
       || lk == 31825               // 'array' 'except'
       || lk == 31827               // 'ascending' 'except'
       || lk == 31829               // 'attribute' 'except'
       || lk == 31835               // 'case' 'except'
       || lk == 31836               // 'cast' 'except'
       || lk == 31837               // 'castable' 'except'
       || lk == 31839               // 'child' 'except'
       || lk == 31840               // 'collation' 'except'
       || lk == 31841               // 'comment' 'except'
       || lk == 31847               // 'count' 'except'
       || lk == 31850               // 'declare' 'except'
       || lk == 31851               // 'default' 'except'
       || lk == 31853               // 'descendant' 'except'
       || lk == 31854               // 'descendant-or-self' 'except'
       || lk == 31855               // 'descending' 'except'
       || lk == 31857               // 'div' 'except'
       || lk == 31858               // 'document' 'except'
       || lk == 31859               // 'document-node' 'except'
       || lk == 31860               // 'element' 'except'
       || lk == 31861               // 'else' 'except'
       || lk == 31862               // 'empty' 'except'
       || lk == 31863               // 'empty-sequence' 'except'
       || lk == 31865               // 'end' 'except'
       || lk == 31866               // 'eq' 'except'
       || lk == 31867               // 'every' 'except'
       || lk == 31868               // 'except' 'except'
       || lk == 31873               // 'following' 'except'
       || lk == 31874               // 'following-sibling' 'except'
       || lk == 31875               // 'for' 'except'
       || lk == 31876               // 'function' 'except'
       || lk == 31877               // 'ge' 'except'
       || lk == 31879               // 'group' 'except'
       || lk == 31881               // 'gt' 'except'
       || lk == 31882               // 'idiv' 'except'
       || lk == 31883               // 'if' 'except'
       || lk == 31884               // 'import' 'except'
       || lk == 31889               // 'instance' 'except'
       || lk == 31890               // 'intersect' 'except'
       || lk == 31893               // 'is' 'except'
       || lk == 31894               // 'item' 'except'
       || lk == 31898               // 'le' 'except'
       || lk == 31900               // 'let' 'except'
       || lk == 31902               // 'lt' 'except'
       || lk == 31903               // 'map' 'except'
       || lk == 31905               // 'mod' 'except'
       || lk == 31907               // 'module' 'except'
       || lk == 31908               // 'namespace' 'except'
       || lk == 31909               // 'namespace-node' 'except'
       || lk == 31910               // 'ne' 'except'
       || lk == 31914               // 'node' 'except'
       || lk == 31917               // 'only' 'except'
       || lk == 31919               // 'or' 'except'
       || lk == 31920               // 'order' 'except'
       || lk == 31921               // 'ordered' 'except'
       || lk == 31923               // 'parent' 'except'
       || lk == 31928               // 'preceding' 'except'
       || lk == 31929               // 'preceding-sibling' 'except'
       || lk == 31932               // 'processing-instruction' 'except'
       || lk == 31935               // 'return' 'except'
       || lk == 31938               // 'satisfies' 'except'
       || lk == 31940               // 'schema-attribute' 'except'
       || lk == 31941               // 'schema-element' 'except'
       || lk == 31942               // 'self' 'except'
       || lk == 31945               // 'some' 'except'
       || lk == 31946               // 'stable' 'except'
       || lk == 31947               // 'start' 'except'
       || lk == 31950               // 'switch' 'except'
       || lk == 31951               // 'text' 'except'
       || lk == 31953               // 'to' 'except'
       || lk == 31955               // 'treat' 'except'
       || lk == 31956               // 'try' 'except'
       || lk == 31959               // 'typeswitch' 'except'
       || lk == 31960               // 'union' 'except'
       || lk == 31961               // 'unordered' 'except'
       || lk == 31963               // 'validate' 'except'
       || lk == 31968               // 'where' 'except'
       || lk == 31972               // 'xquery' 'except'
       || lk == 33055               // '$' 'following'
       || lk == 33056               // '%' 'following'
       || lk == 33058               // '(' 'following'
       || lk == 33059               // '(#' 'following'
       || lk == 33063               // '+' 'following'
       || lk == 33065               // '-' 'following'
       || lk == 33069               // '/' 'following'
       || lk == 33070               // '//' 'following'
       || lk == 33077               // '<' 'following'
       || lk == 33091               // '@' 'following'
       || lk == 33093               // '[' 'following'
       || lk == 33109               // 'attribute' 'following'
       || lk == 33140               // 'element' 'following'
       || lk == 33311               // '$' 'following-sibling'
       || lk == 33312               // '%' 'following-sibling'
       || lk == 33314               // '(' 'following-sibling'
       || lk == 33315               // '(#' 'following-sibling'
       || lk == 33319               // '+' 'following-sibling'
       || lk == 33321               // '-' 'following-sibling'
       || lk == 33325               // '/' 'following-sibling'
       || lk == 33326               // '//' 'following-sibling'
       || lk == 33333               // '<' 'following-sibling'
       || lk == 33347               // '@' 'following-sibling'
       || lk == 33349               // '[' 'following-sibling'
       || lk == 33365               // 'attribute' 'following-sibling'
       || lk == 33396               // 'element' 'following-sibling'
       || lk == 33567               // '$' 'for'
       || lk == 33568               // '%' 'for'
       || lk == 33570               // '(' 'for'
       || lk == 33571               // '(#' 'for'
       || lk == 33575               // '+' 'for'
       || lk == 33577               // '-' 'for'
       || lk == 33581               // '/' 'for'
       || lk == 33582               // '//' 'for'
       || lk == 33589               // '<' 'for'
       || lk == 33601               // '?' 'for'
       || lk == 33603               // '@' 'for'
       || lk == 33605               // '[' 'for'
       || lk == 33621               // 'attribute' 'for'
       || lk == 33652               // 'element' 'for'
       || lk == 33700               // 'namespace' 'for'
       || lk == 33724               // 'processing-instruction' 'for'
       || lk == 33823               // '$' 'function'
       || lk == 33824               // '%' 'function'
       || lk == 33826               // '(' 'function'
       || lk == 33827               // '(#' 'function'
       || lk == 33831               // '+' 'function'
       || lk == 33833               // '-' 'function'
       || lk == 33837               // '/' 'function'
       || lk == 33838               // '//' 'function'
       || lk == 33845               // '<' 'function'
       || lk == 33859               // '@' 'function'
       || lk == 33861               // '[' 'function'
       || lk == 33877               // 'attribute' 'function'
       || lk == 33908               // 'element' 'function'
       || lk == 34049               // IntegerLiteral 'ge'
       || lk == 34050               // DecimalLiteral 'ge'
       || lk == 34051               // DoubleLiteral 'ge'
       || lk == 34052               // StringLiteral 'ge'
       || lk == 34053               // URIQualifiedName 'ge'
       || lk == 34063               // QName^Token 'ge'
       || lk == 34069               // Wildcard 'ge'
       || lk == 34079               // '$' 'ge'
       || lk == 34080               // '%' 'ge'
       || lk == 34082               // '(' 'ge'
       || lk == 34083               // '(#' 'ge'
       || lk == 34087               // '+' 'ge'
       || lk == 34089               // '-' 'ge'
       || lk == 34091               // '.' 'ge'
       || lk == 34092               // '..' 'ge'
       || lk == 34093               // '/' 'ge'
       || lk == 34094               // '//' 'ge'
       || lk == 34101               // '<' 'ge'
       || lk == 34113               // '?' 'ge'
       || lk == 34115               // '@' 'ge'
       || lk == 34117               // '[' 'ge'
       || lk == 34125               // 'ancestor' 'ge'
       || lk == 34126               // 'ancestor-or-self' 'ge'
       || lk == 34127               // 'and' 'ge'
       || lk == 34129               // 'array' 'ge'
       || lk == 34131               // 'ascending' 'ge'
       || lk == 34133               // 'attribute' 'ge'
       || lk == 34139               // 'case' 'ge'
       || lk == 34140               // 'cast' 'ge'
       || lk == 34141               // 'castable' 'ge'
       || lk == 34143               // 'child' 'ge'
       || lk == 34144               // 'collation' 'ge'
       || lk == 34145               // 'comment' 'ge'
       || lk == 34151               // 'count' 'ge'
       || lk == 34154               // 'declare' 'ge'
       || lk == 34155               // 'default' 'ge'
       || lk == 34157               // 'descendant' 'ge'
       || lk == 34158               // 'descendant-or-self' 'ge'
       || lk == 34159               // 'descending' 'ge'
       || lk == 34161               // 'div' 'ge'
       || lk == 34162               // 'document' 'ge'
       || lk == 34163               // 'document-node' 'ge'
       || lk == 34164               // 'element' 'ge'
       || lk == 34165               // 'else' 'ge'
       || lk == 34166               // 'empty' 'ge'
       || lk == 34167               // 'empty-sequence' 'ge'
       || lk == 34169               // 'end' 'ge'
       || lk == 34170               // 'eq' 'ge'
       || lk == 34171               // 'every' 'ge'
       || lk == 34172               // 'except' 'ge'
       || lk == 34177               // 'following' 'ge'
       || lk == 34178               // 'following-sibling' 'ge'
       || lk == 34179               // 'for' 'ge'
       || lk == 34180               // 'function' 'ge'
       || lk == 34181               // 'ge' 'ge'
       || lk == 34183               // 'group' 'ge'
       || lk == 34185               // 'gt' 'ge'
       || lk == 34186               // 'idiv' 'ge'
       || lk == 34187               // 'if' 'ge'
       || lk == 34188               // 'import' 'ge'
       || lk == 34193               // 'instance' 'ge'
       || lk == 34194               // 'intersect' 'ge'
       || lk == 34197               // 'is' 'ge'
       || lk == 34198               // 'item' 'ge'
       || lk == 34202               // 'le' 'ge'
       || lk == 34204               // 'let' 'ge'
       || lk == 34206               // 'lt' 'ge'
       || lk == 34207               // 'map' 'ge'
       || lk == 34209               // 'mod' 'ge'
       || lk == 34211               // 'module' 'ge'
       || lk == 34212               // 'namespace' 'ge'
       || lk == 34213               // 'namespace-node' 'ge'
       || lk == 34214               // 'ne' 'ge'
       || lk == 34218               // 'node' 'ge'
       || lk == 34221               // 'only' 'ge'
       || lk == 34223               // 'or' 'ge'
       || lk == 34224               // 'order' 'ge'
       || lk == 34225               // 'ordered' 'ge'
       || lk == 34227               // 'parent' 'ge'
       || lk == 34232               // 'preceding' 'ge'
       || lk == 34233               // 'preceding-sibling' 'ge'
       || lk == 34236               // 'processing-instruction' 'ge'
       || lk == 34239               // 'return' 'ge'
       || lk == 34242               // 'satisfies' 'ge'
       || lk == 34244               // 'schema-attribute' 'ge'
       || lk == 34245               // 'schema-element' 'ge'
       || lk == 34246               // 'self' 'ge'
       || lk == 34249               // 'some' 'ge'
       || lk == 34250               // 'stable' 'ge'
       || lk == 34251               // 'start' 'ge'
       || lk == 34254               // 'switch' 'ge'
       || lk == 34255               // 'text' 'ge'
       || lk == 34257               // 'to' 'ge'
       || lk == 34259               // 'treat' 'ge'
       || lk == 34260               // 'try' 'ge'
       || lk == 34263               // 'typeswitch' 'ge'
       || lk == 34264               // 'union' 'ge'
       || lk == 34265               // 'unordered' 'ge'
       || lk == 34267               // 'validate' 'ge'
       || lk == 34272               // 'where' 'ge'
       || lk == 34276               // 'xquery' 'ge'
       || lk == 34591               // '$' 'group'
       || lk == 34592               // '%' 'group'
       || lk == 34594               // '(' 'group'
       || lk == 34595               // '(#' 'group'
       || lk == 34599               // '+' 'group'
       || lk == 34601               // '-' 'group'
       || lk == 34605               // '/' 'group'
       || lk == 34606               // '//' 'group'
       || lk == 34613               // '<' 'group'
       || lk == 34625               // '?' 'group'
       || lk == 34627               // '@' 'group'
       || lk == 34629               // '[' 'group'
       || lk == 34645               // 'attribute' 'group'
       || lk == 34676               // 'element' 'group'
       || lk == 34724               // 'namespace' 'group'
       || lk == 34748               // 'processing-instruction' 'group'
       || lk == 35073               // IntegerLiteral 'gt'
       || lk == 35074               // DecimalLiteral 'gt'
       || lk == 35075               // DoubleLiteral 'gt'
       || lk == 35076               // StringLiteral 'gt'
       || lk == 35077               // URIQualifiedName 'gt'
       || lk == 35087               // QName^Token 'gt'
       || lk == 35093               // Wildcard 'gt'
       || lk == 35103               // '$' 'gt'
       || lk == 35104               // '%' 'gt'
       || lk == 35106               // '(' 'gt'
       || lk == 35107               // '(#' 'gt'
       || lk == 35111               // '+' 'gt'
       || lk == 35113               // '-' 'gt'
       || lk == 35115               // '.' 'gt'
       || lk == 35116               // '..' 'gt'
       || lk == 35117               // '/' 'gt'
       || lk == 35118               // '//' 'gt'
       || lk == 35125               // '<' 'gt'
       || lk == 35137               // '?' 'gt'
       || lk == 35139               // '@' 'gt'
       || lk == 35141               // '[' 'gt'
       || lk == 35149               // 'ancestor' 'gt'
       || lk == 35150               // 'ancestor-or-self' 'gt'
       || lk == 35151               // 'and' 'gt'
       || lk == 35153               // 'array' 'gt'
       || lk == 35155               // 'ascending' 'gt'
       || lk == 35157               // 'attribute' 'gt'
       || lk == 35163               // 'case' 'gt'
       || lk == 35164               // 'cast' 'gt'
       || lk == 35165               // 'castable' 'gt'
       || lk == 35167               // 'child' 'gt'
       || lk == 35168               // 'collation' 'gt'
       || lk == 35169               // 'comment' 'gt'
       || lk == 35175               // 'count' 'gt'
       || lk == 35178               // 'declare' 'gt'
       || lk == 35179               // 'default' 'gt'
       || lk == 35181               // 'descendant' 'gt'
       || lk == 35182               // 'descendant-or-self' 'gt'
       || lk == 35183               // 'descending' 'gt'
       || lk == 35185               // 'div' 'gt'
       || lk == 35186               // 'document' 'gt'
       || lk == 35187               // 'document-node' 'gt'
       || lk == 35188               // 'element' 'gt'
       || lk == 35189               // 'else' 'gt'
       || lk == 35190               // 'empty' 'gt'
       || lk == 35191               // 'empty-sequence' 'gt'
       || lk == 35193               // 'end' 'gt'
       || lk == 35194               // 'eq' 'gt'
       || lk == 35195               // 'every' 'gt'
       || lk == 35196               // 'except' 'gt'
       || lk == 35201               // 'following' 'gt'
       || lk == 35202               // 'following-sibling' 'gt'
       || lk == 35203               // 'for' 'gt'
       || lk == 35204               // 'function' 'gt'
       || lk == 35205               // 'ge' 'gt'
       || lk == 35207               // 'group' 'gt'
       || lk == 35209               // 'gt' 'gt'
       || lk == 35210               // 'idiv' 'gt'
       || lk == 35211               // 'if' 'gt'
       || lk == 35212               // 'import' 'gt'
       || lk == 35217               // 'instance' 'gt'
       || lk == 35218               // 'intersect' 'gt'
       || lk == 35221               // 'is' 'gt'
       || lk == 35222               // 'item' 'gt'
       || lk == 35226               // 'le' 'gt'
       || lk == 35228               // 'let' 'gt'
       || lk == 35230               // 'lt' 'gt'
       || lk == 35231               // 'map' 'gt'
       || lk == 35233               // 'mod' 'gt'
       || lk == 35235               // 'module' 'gt'
       || lk == 35236               // 'namespace' 'gt'
       || lk == 35237               // 'namespace-node' 'gt'
       || lk == 35238               // 'ne' 'gt'
       || lk == 35242               // 'node' 'gt'
       || lk == 35245               // 'only' 'gt'
       || lk == 35247               // 'or' 'gt'
       || lk == 35248               // 'order' 'gt'
       || lk == 35249               // 'ordered' 'gt'
       || lk == 35251               // 'parent' 'gt'
       || lk == 35256               // 'preceding' 'gt'
       || lk == 35257               // 'preceding-sibling' 'gt'
       || lk == 35260               // 'processing-instruction' 'gt'
       || lk == 35263               // 'return' 'gt'
       || lk == 35266               // 'satisfies' 'gt'
       || lk == 35268               // 'schema-attribute' 'gt'
       || lk == 35269               // 'schema-element' 'gt'
       || lk == 35270               // 'self' 'gt'
       || lk == 35273               // 'some' 'gt'
       || lk == 35274               // 'stable' 'gt'
       || lk == 35275               // 'start' 'gt'
       || lk == 35278               // 'switch' 'gt'
       || lk == 35279               // 'text' 'gt'
       || lk == 35281               // 'to' 'gt'
       || lk == 35283               // 'treat' 'gt'
       || lk == 35284               // 'try' 'gt'
       || lk == 35287               // 'typeswitch' 'gt'
       || lk == 35288               // 'union' 'gt'
       || lk == 35289               // 'unordered' 'gt'
       || lk == 35291               // 'validate' 'gt'
       || lk == 35296               // 'where' 'gt'
       || lk == 35300               // 'xquery' 'gt'
       || lk == 35329               // IntegerLiteral 'idiv'
       || lk == 35330               // DecimalLiteral 'idiv'
       || lk == 35331               // DoubleLiteral 'idiv'
       || lk == 35332               // StringLiteral 'idiv'
       || lk == 35333               // URIQualifiedName 'idiv'
       || lk == 35343               // QName^Token 'idiv'
       || lk == 35349               // Wildcard 'idiv'
       || lk == 35359               // '$' 'idiv'
       || lk == 35360               // '%' 'idiv'
       || lk == 35362               // '(' 'idiv'
       || lk == 35363               // '(#' 'idiv'
       || lk == 35367               // '+' 'idiv'
       || lk == 35369               // '-' 'idiv'
       || lk == 35371               // '.' 'idiv'
       || lk == 35372               // '..' 'idiv'
       || lk == 35373               // '/' 'idiv'
       || lk == 35374               // '//' 'idiv'
       || lk == 35381               // '<' 'idiv'
       || lk == 35393               // '?' 'idiv'
       || lk == 35395               // '@' 'idiv'
       || lk == 35397               // '[' 'idiv'
       || lk == 35405               // 'ancestor' 'idiv'
       || lk == 35406               // 'ancestor-or-self' 'idiv'
       || lk == 35407               // 'and' 'idiv'
       || lk == 35409               // 'array' 'idiv'
       || lk == 35411               // 'ascending' 'idiv'
       || lk == 35413               // 'attribute' 'idiv'
       || lk == 35419               // 'case' 'idiv'
       || lk == 35420               // 'cast' 'idiv'
       || lk == 35421               // 'castable' 'idiv'
       || lk == 35423               // 'child' 'idiv'
       || lk == 35424               // 'collation' 'idiv'
       || lk == 35425               // 'comment' 'idiv'
       || lk == 35431               // 'count' 'idiv'
       || lk == 35434               // 'declare' 'idiv'
       || lk == 35435               // 'default' 'idiv'
       || lk == 35437               // 'descendant' 'idiv'
       || lk == 35438               // 'descendant-or-self' 'idiv'
       || lk == 35439               // 'descending' 'idiv'
       || lk == 35441               // 'div' 'idiv'
       || lk == 35442               // 'document' 'idiv'
       || lk == 35443               // 'document-node' 'idiv'
       || lk == 35444               // 'element' 'idiv'
       || lk == 35445               // 'else' 'idiv'
       || lk == 35446               // 'empty' 'idiv'
       || lk == 35447               // 'empty-sequence' 'idiv'
       || lk == 35449               // 'end' 'idiv'
       || lk == 35450               // 'eq' 'idiv'
       || lk == 35451               // 'every' 'idiv'
       || lk == 35452               // 'except' 'idiv'
       || lk == 35457               // 'following' 'idiv'
       || lk == 35458               // 'following-sibling' 'idiv'
       || lk == 35459               // 'for' 'idiv'
       || lk == 35460               // 'function' 'idiv'
       || lk == 35461               // 'ge' 'idiv'
       || lk == 35463               // 'group' 'idiv'
       || lk == 35465               // 'gt' 'idiv'
       || lk == 35466               // 'idiv' 'idiv'
       || lk == 35467               // 'if' 'idiv'
       || lk == 35468               // 'import' 'idiv'
       || lk == 35473               // 'instance' 'idiv'
       || lk == 35474               // 'intersect' 'idiv'
       || lk == 35477               // 'is' 'idiv'
       || lk == 35478               // 'item' 'idiv'
       || lk == 35482               // 'le' 'idiv'
       || lk == 35484               // 'let' 'idiv'
       || lk == 35486               // 'lt' 'idiv'
       || lk == 35487               // 'map' 'idiv'
       || lk == 35489               // 'mod' 'idiv'
       || lk == 35491               // 'module' 'idiv'
       || lk == 35492               // 'namespace' 'idiv'
       || lk == 35493               // 'namespace-node' 'idiv'
       || lk == 35494               // 'ne' 'idiv'
       || lk == 35498               // 'node' 'idiv'
       || lk == 35501               // 'only' 'idiv'
       || lk == 35503               // 'or' 'idiv'
       || lk == 35504               // 'order' 'idiv'
       || lk == 35505               // 'ordered' 'idiv'
       || lk == 35507               // 'parent' 'idiv'
       || lk == 35512               // 'preceding' 'idiv'
       || lk == 35513               // 'preceding-sibling' 'idiv'
       || lk == 35516               // 'processing-instruction' 'idiv'
       || lk == 35519               // 'return' 'idiv'
       || lk == 35522               // 'satisfies' 'idiv'
       || lk == 35524               // 'schema-attribute' 'idiv'
       || lk == 35525               // 'schema-element' 'idiv'
       || lk == 35526               // 'self' 'idiv'
       || lk == 35529               // 'some' 'idiv'
       || lk == 35530               // 'stable' 'idiv'
       || lk == 35531               // 'start' 'idiv'
       || lk == 35534               // 'switch' 'idiv'
       || lk == 35535               // 'text' 'idiv'
       || lk == 35537               // 'to' 'idiv'
       || lk == 35539               // 'treat' 'idiv'
       || lk == 35540               // 'try' 'idiv'
       || lk == 35543               // 'typeswitch' 'idiv'
       || lk == 35544               // 'union' 'idiv'
       || lk == 35545               // 'unordered' 'idiv'
       || lk == 35547               // 'validate' 'idiv'
       || lk == 35552               // 'where' 'idiv'
       || lk == 35556               // 'xquery' 'idiv'
       || lk == 35615               // '$' 'if'
       || lk == 35616               // '%' 'if'
       || lk == 35618               // '(' 'if'
       || lk == 35619               // '(#' 'if'
       || lk == 35623               // '+' 'if'
       || lk == 35625               // '-' 'if'
       || lk == 35629               // '/' 'if'
       || lk == 35630               // '//' 'if'
       || lk == 35637               // '<' 'if'
       || lk == 35651               // '@' 'if'
       || lk == 35653               // '[' 'if'
       || lk == 35669               // 'attribute' 'if'
       || lk == 35700               // 'element' 'if'
       || lk == 35871               // '$' 'import'
       || lk == 35872               // '%' 'import'
       || lk == 35874               // '(' 'import'
       || lk == 35875               // '(#' 'import'
       || lk == 35879               // '+' 'import'
       || lk == 35881               // '-' 'import'
       || lk == 35885               // '/' 'import'
       || lk == 35886               // '//' 'import'
       || lk == 35893               // '<' 'import'
       || lk == 35907               // '@' 'import'
       || lk == 35909               // '[' 'import'
       || lk == 35925               // 'attribute' 'import'
       || lk == 35956               // 'element' 'import'
       || lk == 36898               // '(' 'insert'
       || lk == 36933               // '[' 'insert'
       || lk == 37121               // IntegerLiteral 'instance'
       || lk == 37122               // DecimalLiteral 'instance'
       || lk == 37123               // DoubleLiteral 'instance'
       || lk == 37124               // StringLiteral 'instance'
       || lk == 37125               // URIQualifiedName 'instance'
       || lk == 37135               // QName^Token 'instance'
       || lk == 37141               // Wildcard 'instance'
       || lk == 37151               // '$' 'instance'
       || lk == 37152               // '%' 'instance'
       || lk == 37154               // '(' 'instance'
       || lk == 37155               // '(#' 'instance'
       || lk == 37159               // '+' 'instance'
       || lk == 37161               // '-' 'instance'
       || lk == 37163               // '.' 'instance'
       || lk == 37164               // '..' 'instance'
       || lk == 37165               // '/' 'instance'
       || lk == 37166               // '//' 'instance'
       || lk == 37173               // '<' 'instance'
       || lk == 37185               // '?' 'instance'
       || lk == 37187               // '@' 'instance'
       || lk == 37189               // '[' 'instance'
       || lk == 37197               // 'ancestor' 'instance'
       || lk == 37198               // 'ancestor-or-self' 'instance'
       || lk == 37199               // 'and' 'instance'
       || lk == 37201               // 'array' 'instance'
       || lk == 37203               // 'ascending' 'instance'
       || lk == 37205               // 'attribute' 'instance'
       || lk == 37211               // 'case' 'instance'
       || lk == 37212               // 'cast' 'instance'
       || lk == 37213               // 'castable' 'instance'
       || lk == 37215               // 'child' 'instance'
       || lk == 37216               // 'collation' 'instance'
       || lk == 37217               // 'comment' 'instance'
       || lk == 37223               // 'count' 'instance'
       || lk == 37226               // 'declare' 'instance'
       || lk == 37227               // 'default' 'instance'
       || lk == 37229               // 'descendant' 'instance'
       || lk == 37230               // 'descendant-or-self' 'instance'
       || lk == 37231               // 'descending' 'instance'
       || lk == 37233               // 'div' 'instance'
       || lk == 37234               // 'document' 'instance'
       || lk == 37235               // 'document-node' 'instance'
       || lk == 37236               // 'element' 'instance'
       || lk == 37237               // 'else' 'instance'
       || lk == 37238               // 'empty' 'instance'
       || lk == 37239               // 'empty-sequence' 'instance'
       || lk == 37241               // 'end' 'instance'
       || lk == 37242               // 'eq' 'instance'
       || lk == 37243               // 'every' 'instance'
       || lk == 37244               // 'except' 'instance'
       || lk == 37249               // 'following' 'instance'
       || lk == 37250               // 'following-sibling' 'instance'
       || lk == 37251               // 'for' 'instance'
       || lk == 37252               // 'function' 'instance'
       || lk == 37253               // 'ge' 'instance'
       || lk == 37255               // 'group' 'instance'
       || lk == 37257               // 'gt' 'instance'
       || lk == 37258               // 'idiv' 'instance'
       || lk == 37259               // 'if' 'instance'
       || lk == 37260               // 'import' 'instance'
       || lk == 37265               // 'instance' 'instance'
       || lk == 37266               // 'intersect' 'instance'
       || lk == 37269               // 'is' 'instance'
       || lk == 37270               // 'item' 'instance'
       || lk == 37274               // 'le' 'instance'
       || lk == 37276               // 'let' 'instance'
       || lk == 37278               // 'lt' 'instance'
       || lk == 37279               // 'map' 'instance'
       || lk == 37281               // 'mod' 'instance'
       || lk == 37283               // 'module' 'instance'
       || lk == 37284               // 'namespace' 'instance'
       || lk == 37285               // 'namespace-node' 'instance'
       || lk == 37286               // 'ne' 'instance'
       || lk == 37290               // 'node' 'instance'
       || lk == 37293               // 'only' 'instance'
       || lk == 37295               // 'or' 'instance'
       || lk == 37296               // 'order' 'instance'
       || lk == 37297               // 'ordered' 'instance'
       || lk == 37299               // 'parent' 'instance'
       || lk == 37304               // 'preceding' 'instance'
       || lk == 37305               // 'preceding-sibling' 'instance'
       || lk == 37308               // 'processing-instruction' 'instance'
       || lk == 37311               // 'return' 'instance'
       || lk == 37314               // 'satisfies' 'instance'
       || lk == 37316               // 'schema-attribute' 'instance'
       || lk == 37317               // 'schema-element' 'instance'
       || lk == 37318               // 'self' 'instance'
       || lk == 37321               // 'some' 'instance'
       || lk == 37322               // 'stable' 'instance'
       || lk == 37323               // 'start' 'instance'
       || lk == 37326               // 'switch' 'instance'
       || lk == 37327               // 'text' 'instance'
       || lk == 37329               // 'to' 'instance'
       || lk == 37331               // 'treat' 'instance'
       || lk == 37332               // 'try' 'instance'
       || lk == 37335               // 'typeswitch' 'instance'
       || lk == 37336               // 'union' 'instance'
       || lk == 37337               // 'unordered' 'instance'
       || lk == 37339               // 'validate' 'instance'
       || lk == 37344               // 'where' 'instance'
       || lk == 37348               // 'xquery' 'instance'
       || lk == 37377               // IntegerLiteral 'intersect'
       || lk == 37378               // DecimalLiteral 'intersect'
       || lk == 37379               // DoubleLiteral 'intersect'
       || lk == 37380               // StringLiteral 'intersect'
       || lk == 37381               // URIQualifiedName 'intersect'
       || lk == 37391               // QName^Token 'intersect'
       || lk == 37397               // Wildcard 'intersect'
       || lk == 37407               // '$' 'intersect'
       || lk == 37408               // '%' 'intersect'
       || lk == 37410               // '(' 'intersect'
       || lk == 37411               // '(#' 'intersect'
       || lk == 37415               // '+' 'intersect'
       || lk == 37417               // '-' 'intersect'
       || lk == 37419               // '.' 'intersect'
       || lk == 37420               // '..' 'intersect'
       || lk == 37421               // '/' 'intersect'
       || lk == 37422               // '//' 'intersect'
       || lk == 37429               // '<' 'intersect'
       || lk == 37441               // '?' 'intersect'
       || lk == 37443               // '@' 'intersect'
       || lk == 37445               // '[' 'intersect'
       || lk == 37453               // 'ancestor' 'intersect'
       || lk == 37454               // 'ancestor-or-self' 'intersect'
       || lk == 37455               // 'and' 'intersect'
       || lk == 37457               // 'array' 'intersect'
       || lk == 37459               // 'ascending' 'intersect'
       || lk == 37461               // 'attribute' 'intersect'
       || lk == 37467               // 'case' 'intersect'
       || lk == 37468               // 'cast' 'intersect'
       || lk == 37469               // 'castable' 'intersect'
       || lk == 37471               // 'child' 'intersect'
       || lk == 37472               // 'collation' 'intersect'
       || lk == 37473               // 'comment' 'intersect'
       || lk == 37479               // 'count' 'intersect'
       || lk == 37482               // 'declare' 'intersect'
       || lk == 37483               // 'default' 'intersect'
       || lk == 37485               // 'descendant' 'intersect'
       || lk == 37486               // 'descendant-or-self' 'intersect'
       || lk == 37487               // 'descending' 'intersect'
       || lk == 37489               // 'div' 'intersect'
       || lk == 37490               // 'document' 'intersect'
       || lk == 37491               // 'document-node' 'intersect'
       || lk == 37492               // 'element' 'intersect'
       || lk == 37493               // 'else' 'intersect'
       || lk == 37494               // 'empty' 'intersect'
       || lk == 37495               // 'empty-sequence' 'intersect'
       || lk == 37497               // 'end' 'intersect'
       || lk == 37498               // 'eq' 'intersect'
       || lk == 37499               // 'every' 'intersect'
       || lk == 37500               // 'except' 'intersect'
       || lk == 37505               // 'following' 'intersect'
       || lk == 37506               // 'following-sibling' 'intersect'
       || lk == 37507               // 'for' 'intersect'
       || lk == 37508               // 'function' 'intersect'
       || lk == 37509               // 'ge' 'intersect'
       || lk == 37511               // 'group' 'intersect'
       || lk == 37513               // 'gt' 'intersect'
       || lk == 37514               // 'idiv' 'intersect'
       || lk == 37515               // 'if' 'intersect'
       || lk == 37516               // 'import' 'intersect'
       || lk == 37521               // 'instance' 'intersect'
       || lk == 37522               // 'intersect' 'intersect'
       || lk == 37525               // 'is' 'intersect'
       || lk == 37526               // 'item' 'intersect'
       || lk == 37530               // 'le' 'intersect'
       || lk == 37532               // 'let' 'intersect'
       || lk == 37534               // 'lt' 'intersect'
       || lk == 37535               // 'map' 'intersect'
       || lk == 37537               // 'mod' 'intersect'
       || lk == 37539               // 'module' 'intersect'
       || lk == 37540               // 'namespace' 'intersect'
       || lk == 37541               // 'namespace-node' 'intersect'
       || lk == 37542               // 'ne' 'intersect'
       || lk == 37546               // 'node' 'intersect'
       || lk == 37549               // 'only' 'intersect'
       || lk == 37551               // 'or' 'intersect'
       || lk == 37552               // 'order' 'intersect'
       || lk == 37553               // 'ordered' 'intersect'
       || lk == 37555               // 'parent' 'intersect'
       || lk == 37560               // 'preceding' 'intersect'
       || lk == 37561               // 'preceding-sibling' 'intersect'
       || lk == 37564               // 'processing-instruction' 'intersect'
       || lk == 37567               // 'return' 'intersect'
       || lk == 37570               // 'satisfies' 'intersect'
       || lk == 37572               // 'schema-attribute' 'intersect'
       || lk == 37573               // 'schema-element' 'intersect'
       || lk == 37574               // 'self' 'intersect'
       || lk == 37577               // 'some' 'intersect'
       || lk == 37578               // 'stable' 'intersect'
       || lk == 37579               // 'start' 'intersect'
       || lk == 37582               // 'switch' 'intersect'
       || lk == 37583               // 'text' 'intersect'
       || lk == 37585               // 'to' 'intersect'
       || lk == 37587               // 'treat' 'intersect'
       || lk == 37588               // 'try' 'intersect'
       || lk == 37591               // 'typeswitch' 'intersect'
       || lk == 37592               // 'union' 'intersect'
       || lk == 37593               // 'unordered' 'intersect'
       || lk == 37595               // 'validate' 'intersect'
       || lk == 37600               // 'where' 'intersect'
       || lk == 37604               // 'xquery' 'intersect'
       || lk == 37922               // '(' 'invoke'
       || lk == 37957               // '[' 'invoke'
       || lk == 38145               // IntegerLiteral 'is'
       || lk == 38146               // DecimalLiteral 'is'
       || lk == 38147               // DoubleLiteral 'is'
       || lk == 38148               // StringLiteral 'is'
       || lk == 38149               // URIQualifiedName 'is'
       || lk == 38159               // QName^Token 'is'
       || lk == 38165               // Wildcard 'is'
       || lk == 38175               // '$' 'is'
       || lk == 38176               // '%' 'is'
       || lk == 38178               // '(' 'is'
       || lk == 38179               // '(#' 'is'
       || lk == 38183               // '+' 'is'
       || lk == 38185               // '-' 'is'
       || lk == 38187               // '.' 'is'
       || lk == 38188               // '..' 'is'
       || lk == 38189               // '/' 'is'
       || lk == 38190               // '//' 'is'
       || lk == 38197               // '<' 'is'
       || lk == 38209               // '?' 'is'
       || lk == 38211               // '@' 'is'
       || lk == 38213               // '[' 'is'
       || lk == 38221               // 'ancestor' 'is'
       || lk == 38222               // 'ancestor-or-self' 'is'
       || lk == 38223               // 'and' 'is'
       || lk == 38225               // 'array' 'is'
       || lk == 38227               // 'ascending' 'is'
       || lk == 38229               // 'attribute' 'is'
       || lk == 38235               // 'case' 'is'
       || lk == 38236               // 'cast' 'is'
       || lk == 38237               // 'castable' 'is'
       || lk == 38239               // 'child' 'is'
       || lk == 38240               // 'collation' 'is'
       || lk == 38241               // 'comment' 'is'
       || lk == 38247               // 'count' 'is'
       || lk == 38250               // 'declare' 'is'
       || lk == 38251               // 'default' 'is'
       || lk == 38253               // 'descendant' 'is'
       || lk == 38254               // 'descendant-or-self' 'is'
       || lk == 38255               // 'descending' 'is'
       || lk == 38257               // 'div' 'is'
       || lk == 38258               // 'document' 'is'
       || lk == 38259               // 'document-node' 'is'
       || lk == 38260               // 'element' 'is'
       || lk == 38261               // 'else' 'is'
       || lk == 38262               // 'empty' 'is'
       || lk == 38263               // 'empty-sequence' 'is'
       || lk == 38265               // 'end' 'is'
       || lk == 38266               // 'eq' 'is'
       || lk == 38267               // 'every' 'is'
       || lk == 38268               // 'except' 'is'
       || lk == 38273               // 'following' 'is'
       || lk == 38274               // 'following-sibling' 'is'
       || lk == 38275               // 'for' 'is'
       || lk == 38276               // 'function' 'is'
       || lk == 38277               // 'ge' 'is'
       || lk == 38279               // 'group' 'is'
       || lk == 38281               // 'gt' 'is'
       || lk == 38282               // 'idiv' 'is'
       || lk == 38283               // 'if' 'is'
       || lk == 38284               // 'import' 'is'
       || lk == 38289               // 'instance' 'is'
       || lk == 38290               // 'intersect' 'is'
       || lk == 38293               // 'is' 'is'
       || lk == 38294               // 'item' 'is'
       || lk == 38298               // 'le' 'is'
       || lk == 38300               // 'let' 'is'
       || lk == 38302               // 'lt' 'is'
       || lk == 38303               // 'map' 'is'
       || lk == 38305               // 'mod' 'is'
       || lk == 38307               // 'module' 'is'
       || lk == 38308               // 'namespace' 'is'
       || lk == 38309               // 'namespace-node' 'is'
       || lk == 38310               // 'ne' 'is'
       || lk == 38314               // 'node' 'is'
       || lk == 38317               // 'only' 'is'
       || lk == 38319               // 'or' 'is'
       || lk == 38320               // 'order' 'is'
       || lk == 38321               // 'ordered' 'is'
       || lk == 38323               // 'parent' 'is'
       || lk == 38328               // 'preceding' 'is'
       || lk == 38329               // 'preceding-sibling' 'is'
       || lk == 38332               // 'processing-instruction' 'is'
       || lk == 38335               // 'return' 'is'
       || lk == 38338               // 'satisfies' 'is'
       || lk == 38340               // 'schema-attribute' 'is'
       || lk == 38341               // 'schema-element' 'is'
       || lk == 38342               // 'self' 'is'
       || lk == 38345               // 'some' 'is'
       || lk == 38346               // 'stable' 'is'
       || lk == 38347               // 'start' 'is'
       || lk == 38350               // 'switch' 'is'
       || lk == 38351               // 'text' 'is'
       || lk == 38353               // 'to' 'is'
       || lk == 38355               // 'treat' 'is'
       || lk == 38356               // 'try' 'is'
       || lk == 38359               // 'typeswitch' 'is'
       || lk == 38360               // 'union' 'is'
       || lk == 38361               // 'unordered' 'is'
       || lk == 38363               // 'validate' 'is'
       || lk == 38368               // 'where' 'is'
       || lk == 38372               // 'xquery' 'is'
       || lk == 38431               // '$' 'item'
       || lk == 38432               // '%' 'item'
       || lk == 38434               // '(' 'item'
       || lk == 38435               // '(#' 'item'
       || lk == 38439               // '+' 'item'
       || lk == 38441               // '-' 'item'
       || lk == 38445               // '/' 'item'
       || lk == 38446               // '//' 'item'
       || lk == 38453               // '<' 'item'
       || lk == 38467               // '@' 'item'
       || lk == 38469               // '[' 'item'
       || lk == 38485               // 'attribute' 'item'
       || lk == 38516               // 'element' 'item'
       || lk == 39387               // 'validate' 'lax'
       || lk == 39425               // IntegerLiteral 'le'
       || lk == 39426               // DecimalLiteral 'le'
       || lk == 39427               // DoubleLiteral 'le'
       || lk == 39428               // StringLiteral 'le'
       || lk == 39429               // URIQualifiedName 'le'
       || lk == 39439               // QName^Token 'le'
       || lk == 39445               // Wildcard 'le'
       || lk == 39455               // '$' 'le'
       || lk == 39456               // '%' 'le'
       || lk == 39458               // '(' 'le'
       || lk == 39459               // '(#' 'le'
       || lk == 39463               // '+' 'le'
       || lk == 39465               // '-' 'le'
       || lk == 39467               // '.' 'le'
       || lk == 39468               // '..' 'le'
       || lk == 39469               // '/' 'le'
       || lk == 39470               // '//' 'le'
       || lk == 39477               // '<' 'le'
       || lk == 39489               // '?' 'le'
       || lk == 39491               // '@' 'le'
       || lk == 39493               // '[' 'le'
       || lk == 39501               // 'ancestor' 'le'
       || lk == 39502               // 'ancestor-or-self' 'le'
       || lk == 39503               // 'and' 'le'
       || lk == 39505               // 'array' 'le'
       || lk == 39507               // 'ascending' 'le'
       || lk == 39509               // 'attribute' 'le'
       || lk == 39515               // 'case' 'le'
       || lk == 39516               // 'cast' 'le'
       || lk == 39517               // 'castable' 'le'
       || lk == 39519               // 'child' 'le'
       || lk == 39520               // 'collation' 'le'
       || lk == 39521               // 'comment' 'le'
       || lk == 39527               // 'count' 'le'
       || lk == 39530               // 'declare' 'le'
       || lk == 39531               // 'default' 'le'
       || lk == 39533               // 'descendant' 'le'
       || lk == 39534               // 'descendant-or-self' 'le'
       || lk == 39535               // 'descending' 'le'
       || lk == 39537               // 'div' 'le'
       || lk == 39538               // 'document' 'le'
       || lk == 39539               // 'document-node' 'le'
       || lk == 39540               // 'element' 'le'
       || lk == 39541               // 'else' 'le'
       || lk == 39542               // 'empty' 'le'
       || lk == 39543               // 'empty-sequence' 'le'
       || lk == 39545               // 'end' 'le'
       || lk == 39546               // 'eq' 'le'
       || lk == 39547               // 'every' 'le'
       || lk == 39548               // 'except' 'le'
       || lk == 39553               // 'following' 'le'
       || lk == 39554               // 'following-sibling' 'le'
       || lk == 39555               // 'for' 'le'
       || lk == 39556               // 'function' 'le'
       || lk == 39557               // 'ge' 'le'
       || lk == 39559               // 'group' 'le'
       || lk == 39561               // 'gt' 'le'
       || lk == 39562               // 'idiv' 'le'
       || lk == 39563               // 'if' 'le'
       || lk == 39564               // 'import' 'le'
       || lk == 39569               // 'instance' 'le'
       || lk == 39570               // 'intersect' 'le'
       || lk == 39573               // 'is' 'le'
       || lk == 39574               // 'item' 'le'
       || lk == 39578               // 'le' 'le'
       || lk == 39580               // 'let' 'le'
       || lk == 39582               // 'lt' 'le'
       || lk == 39583               // 'map' 'le'
       || lk == 39585               // 'mod' 'le'
       || lk == 39587               // 'module' 'le'
       || lk == 39588               // 'namespace' 'le'
       || lk == 39589               // 'namespace-node' 'le'
       || lk == 39590               // 'ne' 'le'
       || lk == 39594               // 'node' 'le'
       || lk == 39597               // 'only' 'le'
       || lk == 39599               // 'or' 'le'
       || lk == 39600               // 'order' 'le'
       || lk == 39601               // 'ordered' 'le'
       || lk == 39603               // 'parent' 'le'
       || lk == 39608               // 'preceding' 'le'
       || lk == 39609               // 'preceding-sibling' 'le'
       || lk == 39612               // 'processing-instruction' 'le'
       || lk == 39615               // 'return' 'le'
       || lk == 39618               // 'satisfies' 'le'
       || lk == 39620               // 'schema-attribute' 'le'
       || lk == 39621               // 'schema-element' 'le'
       || lk == 39622               // 'self' 'le'
       || lk == 39625               // 'some' 'le'
       || lk == 39626               // 'stable' 'le'
       || lk == 39627               // 'start' 'le'
       || lk == 39630               // 'switch' 'le'
       || lk == 39631               // 'text' 'le'
       || lk == 39633               // 'to' 'le'
       || lk == 39635               // 'treat' 'le'
       || lk == 39636               // 'try' 'le'
       || lk == 39639               // 'typeswitch' 'le'
       || lk == 39640               // 'union' 'le'
       || lk == 39641               // 'unordered' 'le'
       || lk == 39643               // 'validate' 'le'
       || lk == 39648               // 'where' 'le'
       || lk == 39652               // 'xquery' 'le'
       || lk == 39967               // '$' 'let'
       || lk == 39968               // '%' 'let'
       || lk == 39970               // '(' 'let'
       || lk == 39971               // '(#' 'let'
       || lk == 39975               // '+' 'let'
       || lk == 39977               // '-' 'let'
       || lk == 39981               // '/' 'let'
       || lk == 39982               // '//' 'let'
       || lk == 39989               // '<' 'let'
       || lk == 40001               // '?' 'let'
       || lk == 40003               // '@' 'let'
       || lk == 40005               // '[' 'let'
       || lk == 40021               // 'attribute' 'let'
       || lk == 40052               // 'element' 'let'
       || lk == 40100               // 'namespace' 'let'
       || lk == 40124               // 'processing-instruction' 'let'
       || lk == 40449               // IntegerLiteral 'lt'
       || lk == 40450               // DecimalLiteral 'lt'
       || lk == 40451               // DoubleLiteral 'lt'
       || lk == 40452               // StringLiteral 'lt'
       || lk == 40453               // URIQualifiedName 'lt'
       || lk == 40463               // QName^Token 'lt'
       || lk == 40469               // Wildcard 'lt'
       || lk == 40479               // '$' 'lt'
       || lk == 40480               // '%' 'lt'
       || lk == 40482               // '(' 'lt'
       || lk == 40483               // '(#' 'lt'
       || lk == 40487               // '+' 'lt'
       || lk == 40489               // '-' 'lt'
       || lk == 40491               // '.' 'lt'
       || lk == 40492               // '..' 'lt'
       || lk == 40493               // '/' 'lt'
       || lk == 40494               // '//' 'lt'
       || lk == 40501               // '<' 'lt'
       || lk == 40513               // '?' 'lt'
       || lk == 40515               // '@' 'lt'
       || lk == 40517               // '[' 'lt'
       || lk == 40525               // 'ancestor' 'lt'
       || lk == 40526               // 'ancestor-or-self' 'lt'
       || lk == 40527               // 'and' 'lt'
       || lk == 40529               // 'array' 'lt'
       || lk == 40531               // 'ascending' 'lt'
       || lk == 40533               // 'attribute' 'lt'
       || lk == 40539               // 'case' 'lt'
       || lk == 40540               // 'cast' 'lt'
       || lk == 40541               // 'castable' 'lt'
       || lk == 40543               // 'child' 'lt'
       || lk == 40544               // 'collation' 'lt'
       || lk == 40545               // 'comment' 'lt'
       || lk == 40551               // 'count' 'lt'
       || lk == 40554               // 'declare' 'lt'
       || lk == 40555               // 'default' 'lt'
       || lk == 40557               // 'descendant' 'lt'
       || lk == 40558               // 'descendant-or-self' 'lt'
       || lk == 40559               // 'descending' 'lt'
       || lk == 40561               // 'div' 'lt'
       || lk == 40562               // 'document' 'lt'
       || lk == 40563               // 'document-node' 'lt'
       || lk == 40564               // 'element' 'lt'
       || lk == 40565               // 'else' 'lt'
       || lk == 40566               // 'empty' 'lt'
       || lk == 40567               // 'empty-sequence' 'lt'
       || lk == 40569               // 'end' 'lt'
       || lk == 40570               // 'eq' 'lt'
       || lk == 40571               // 'every' 'lt'
       || lk == 40572               // 'except' 'lt'
       || lk == 40577               // 'following' 'lt'
       || lk == 40578               // 'following-sibling' 'lt'
       || lk == 40579               // 'for' 'lt'
       || lk == 40580               // 'function' 'lt'
       || lk == 40581               // 'ge' 'lt'
       || lk == 40583               // 'group' 'lt'
       || lk == 40585               // 'gt' 'lt'
       || lk == 40586               // 'idiv' 'lt'
       || lk == 40587               // 'if' 'lt'
       || lk == 40588               // 'import' 'lt'
       || lk == 40593               // 'instance' 'lt'
       || lk == 40594               // 'intersect' 'lt'
       || lk == 40597               // 'is' 'lt'
       || lk == 40598               // 'item' 'lt'
       || lk == 40602               // 'le' 'lt'
       || lk == 40604               // 'let' 'lt'
       || lk == 40606               // 'lt' 'lt'
       || lk == 40607               // 'map' 'lt'
       || lk == 40609               // 'mod' 'lt'
       || lk == 40611               // 'module' 'lt'
       || lk == 40612               // 'namespace' 'lt'
       || lk == 40613               // 'namespace-node' 'lt'
       || lk == 40614               // 'ne' 'lt'
       || lk == 40618               // 'node' 'lt'
       || lk == 40621               // 'only' 'lt'
       || lk == 40623               // 'or' 'lt'
       || lk == 40624               // 'order' 'lt'
       || lk == 40625               // 'ordered' 'lt'
       || lk == 40627               // 'parent' 'lt'
       || lk == 40632               // 'preceding' 'lt'
       || lk == 40633               // 'preceding-sibling' 'lt'
       || lk == 40636               // 'processing-instruction' 'lt'
       || lk == 40639               // 'return' 'lt'
       || lk == 40642               // 'satisfies' 'lt'
       || lk == 40644               // 'schema-attribute' 'lt'
       || lk == 40645               // 'schema-element' 'lt'
       || lk == 40646               // 'self' 'lt'
       || lk == 40649               // 'some' 'lt'
       || lk == 40650               // 'stable' 'lt'
       || lk == 40651               // 'start' 'lt'
       || lk == 40654               // 'switch' 'lt'
       || lk == 40655               // 'text' 'lt'
       || lk == 40657               // 'to' 'lt'
       || lk == 40659               // 'treat' 'lt'
       || lk == 40660               // 'try' 'lt'
       || lk == 40663               // 'typeswitch' 'lt'
       || lk == 40664               // 'union' 'lt'
       || lk == 40665               // 'unordered' 'lt'
       || lk == 40667               // 'validate' 'lt'
       || lk == 40672               // 'where' 'lt'
       || lk == 40676               // 'xquery' 'lt'
       || lk == 40735               // '$' 'map'
       || lk == 40736               // '%' 'map'
       || lk == 40738               // '(' 'map'
       || lk == 40739               // '(#' 'map'
       || lk == 40743               // '+' 'map'
       || lk == 40745               // '-' 'map'
       || lk == 40749               // '/' 'map'
       || lk == 40750               // '//' 'map'
       || lk == 40757               // '<' 'map'
       || lk == 40771               // '@' 'map'
       || lk == 40773               // '[' 'map'
       || lk == 40789               // 'attribute' 'map'
       || lk == 40820               // 'element' 'map'
       || lk == 41217               // IntegerLiteral 'mod'
       || lk == 41218               // DecimalLiteral 'mod'
       || lk == 41219               // DoubleLiteral 'mod'
       || lk == 41220               // StringLiteral 'mod'
       || lk == 41221               // URIQualifiedName 'mod'
       || lk == 41231               // QName^Token 'mod'
       || lk == 41237               // Wildcard 'mod'
       || lk == 41247               // '$' 'mod'
       || lk == 41248               // '%' 'mod'
       || lk == 41250               // '(' 'mod'
       || lk == 41251               // '(#' 'mod'
       || lk == 41255               // '+' 'mod'
       || lk == 41257               // '-' 'mod'
       || lk == 41259               // '.' 'mod'
       || lk == 41260               // '..' 'mod'
       || lk == 41261               // '/' 'mod'
       || lk == 41262               // '//' 'mod'
       || lk == 41269               // '<' 'mod'
       || lk == 41281               // '?' 'mod'
       || lk == 41283               // '@' 'mod'
       || lk == 41285               // '[' 'mod'
       || lk == 41293               // 'ancestor' 'mod'
       || lk == 41294               // 'ancestor-or-self' 'mod'
       || lk == 41295               // 'and' 'mod'
       || lk == 41297               // 'array' 'mod'
       || lk == 41299               // 'ascending' 'mod'
       || lk == 41301               // 'attribute' 'mod'
       || lk == 41307               // 'case' 'mod'
       || lk == 41308               // 'cast' 'mod'
       || lk == 41309               // 'castable' 'mod'
       || lk == 41311               // 'child' 'mod'
       || lk == 41312               // 'collation' 'mod'
       || lk == 41313               // 'comment' 'mod'
       || lk == 41319               // 'count' 'mod'
       || lk == 41322               // 'declare' 'mod'
       || lk == 41323               // 'default' 'mod'
       || lk == 41325               // 'descendant' 'mod'
       || lk == 41326               // 'descendant-or-self' 'mod'
       || lk == 41327               // 'descending' 'mod'
       || lk == 41329               // 'div' 'mod'
       || lk == 41330               // 'document' 'mod'
       || lk == 41331               // 'document-node' 'mod'
       || lk == 41332               // 'element' 'mod'
       || lk == 41333               // 'else' 'mod'
       || lk == 41334               // 'empty' 'mod'
       || lk == 41335               // 'empty-sequence' 'mod'
       || lk == 41337               // 'end' 'mod'
       || lk == 41338               // 'eq' 'mod'
       || lk == 41339               // 'every' 'mod'
       || lk == 41340               // 'except' 'mod'
       || lk == 41345               // 'following' 'mod'
       || lk == 41346               // 'following-sibling' 'mod'
       || lk == 41347               // 'for' 'mod'
       || lk == 41348               // 'function' 'mod'
       || lk == 41349               // 'ge' 'mod'
       || lk == 41351               // 'group' 'mod'
       || lk == 41353               // 'gt' 'mod'
       || lk == 41354               // 'idiv' 'mod'
       || lk == 41355               // 'if' 'mod'
       || lk == 41356               // 'import' 'mod'
       || lk == 41361               // 'instance' 'mod'
       || lk == 41362               // 'intersect' 'mod'
       || lk == 41365               // 'is' 'mod'
       || lk == 41366               // 'item' 'mod'
       || lk == 41370               // 'le' 'mod'
       || lk == 41372               // 'let' 'mod'
       || lk == 41374               // 'lt' 'mod'
       || lk == 41375               // 'map' 'mod'
       || lk == 41377               // 'mod' 'mod'
       || lk == 41379               // 'module' 'mod'
       || lk == 41380               // 'namespace' 'mod'
       || lk == 41381               // 'namespace-node' 'mod'
       || lk == 41382               // 'ne' 'mod'
       || lk == 41386               // 'node' 'mod'
       || lk == 41389               // 'only' 'mod'
       || lk == 41391               // 'or' 'mod'
       || lk == 41392               // 'order' 'mod'
       || lk == 41393               // 'ordered' 'mod'
       || lk == 41395               // 'parent' 'mod'
       || lk == 41400               // 'preceding' 'mod'
       || lk == 41401               // 'preceding-sibling' 'mod'
       || lk == 41404               // 'processing-instruction' 'mod'
       || lk == 41407               // 'return' 'mod'
       || lk == 41410               // 'satisfies' 'mod'
       || lk == 41412               // 'schema-attribute' 'mod'
       || lk == 41413               // 'schema-element' 'mod'
       || lk == 41414               // 'self' 'mod'
       || lk == 41417               // 'some' 'mod'
       || lk == 41418               // 'stable' 'mod'
       || lk == 41419               // 'start' 'mod'
       || lk == 41422               // 'switch' 'mod'
       || lk == 41423               // 'text' 'mod'
       || lk == 41425               // 'to' 'mod'
       || lk == 41427               // 'treat' 'mod'
       || lk == 41428               // 'try' 'mod'
       || lk == 41431               // 'typeswitch' 'mod'
       || lk == 41432               // 'union' 'mod'
       || lk == 41433               // 'unordered' 'mod'
       || lk == 41435               // 'validate' 'mod'
       || lk == 41440               // 'where' 'mod'
       || lk == 41444               // 'xquery' 'mod'
       || lk == 41759               // '$' 'module'
       || lk == 41760               // '%' 'module'
       || lk == 41762               // '(' 'module'
       || lk == 41763               // '(#' 'module'
       || lk == 41767               // '+' 'module'
       || lk == 41769               // '-' 'module'
       || lk == 41773               // '/' 'module'
       || lk == 41774               // '//' 'module'
       || lk == 41781               // '<' 'module'
       || lk == 41795               // '@' 'module'
       || lk == 41797               // '[' 'module'
       || lk == 41813               // 'attribute' 'module'
       || lk == 41844               // 'element' 'module'
       || lk == 42015               // '$' 'namespace'
       || lk == 42016               // '%' 'namespace'
       || lk == 42018               // '(' 'namespace'
       || lk == 42019               // '(#' 'namespace'
       || lk == 42023               // '+' 'namespace'
       || lk == 42025               // '-' 'namespace'
       || lk == 42029               // '/' 'namespace'
       || lk == 42030               // '//' 'namespace'
       || lk == 42037               // '<' 'namespace'
       || lk == 42051               // '@' 'namespace'
       || lk == 42053               // '[' 'namespace'
       || lk == 42069               // 'attribute' 'namespace'
       || lk == 42100               // 'element' 'namespace'
       || lk == 42271               // '$' 'namespace-node'
       || lk == 42272               // '%' 'namespace-node'
       || lk == 42274               // '(' 'namespace-node'
       || lk == 42275               // '(#' 'namespace-node'
       || lk == 42279               // '+' 'namespace-node'
       || lk == 42281               // '-' 'namespace-node'
       || lk == 42285               // '/' 'namespace-node'
       || lk == 42286               // '//' 'namespace-node'
       || lk == 42293               // '<' 'namespace-node'
       || lk == 42307               // '@' 'namespace-node'
       || lk == 42309               // '[' 'namespace-node'
       || lk == 42325               // 'attribute' 'namespace-node'
       || lk == 42356               // 'element' 'namespace-node'
       || lk == 42497               // IntegerLiteral 'ne'
       || lk == 42498               // DecimalLiteral 'ne'
       || lk == 42499               // DoubleLiteral 'ne'
       || lk == 42500               // StringLiteral 'ne'
       || lk == 42501               // URIQualifiedName 'ne'
       || lk == 42511               // QName^Token 'ne'
       || lk == 42517               // Wildcard 'ne'
       || lk == 42527               // '$' 'ne'
       || lk == 42528               // '%' 'ne'
       || lk == 42530               // '(' 'ne'
       || lk == 42531               // '(#' 'ne'
       || lk == 42535               // '+' 'ne'
       || lk == 42537               // '-' 'ne'
       || lk == 42539               // '.' 'ne'
       || lk == 42540               // '..' 'ne'
       || lk == 42541               // '/' 'ne'
       || lk == 42542               // '//' 'ne'
       || lk == 42549               // '<' 'ne'
       || lk == 42561               // '?' 'ne'
       || lk == 42563               // '@' 'ne'
       || lk == 42565               // '[' 'ne'
       || lk == 42573               // 'ancestor' 'ne'
       || lk == 42574               // 'ancestor-or-self' 'ne'
       || lk == 42575               // 'and' 'ne'
       || lk == 42577               // 'array' 'ne'
       || lk == 42579               // 'ascending' 'ne'
       || lk == 42581               // 'attribute' 'ne'
       || lk == 42587               // 'case' 'ne'
       || lk == 42588               // 'cast' 'ne'
       || lk == 42589               // 'castable' 'ne'
       || lk == 42591               // 'child' 'ne'
       || lk == 42592               // 'collation' 'ne'
       || lk == 42593               // 'comment' 'ne'
       || lk == 42599               // 'count' 'ne'
       || lk == 42602               // 'declare' 'ne'
       || lk == 42603               // 'default' 'ne'
       || lk == 42605               // 'descendant' 'ne'
       || lk == 42606               // 'descendant-or-self' 'ne'
       || lk == 42607               // 'descending' 'ne'
       || lk == 42609               // 'div' 'ne'
       || lk == 42610               // 'document' 'ne'
       || lk == 42611               // 'document-node' 'ne'
       || lk == 42612               // 'element' 'ne'
       || lk == 42613               // 'else' 'ne'
       || lk == 42614               // 'empty' 'ne'
       || lk == 42615               // 'empty-sequence' 'ne'
       || lk == 42617               // 'end' 'ne'
       || lk == 42618               // 'eq' 'ne'
       || lk == 42619               // 'every' 'ne'
       || lk == 42620               // 'except' 'ne'
       || lk == 42625               // 'following' 'ne'
       || lk == 42626               // 'following-sibling' 'ne'
       || lk == 42627               // 'for' 'ne'
       || lk == 42628               // 'function' 'ne'
       || lk == 42629               // 'ge' 'ne'
       || lk == 42631               // 'group' 'ne'
       || lk == 42633               // 'gt' 'ne'
       || lk == 42634               // 'idiv' 'ne'
       || lk == 42635               // 'if' 'ne'
       || lk == 42636               // 'import' 'ne'
       || lk == 42641               // 'instance' 'ne'
       || lk == 42642               // 'intersect' 'ne'
       || lk == 42645               // 'is' 'ne'
       || lk == 42646               // 'item' 'ne'
       || lk == 42650               // 'le' 'ne'
       || lk == 42652               // 'let' 'ne'
       || lk == 42654               // 'lt' 'ne'
       || lk == 42655               // 'map' 'ne'
       || lk == 42657               // 'mod' 'ne'
       || lk == 42659               // 'module' 'ne'
       || lk == 42660               // 'namespace' 'ne'
       || lk == 42661               // 'namespace-node' 'ne'
       || lk == 42662               // 'ne' 'ne'
       || lk == 42666               // 'node' 'ne'
       || lk == 42669               // 'only' 'ne'
       || lk == 42671               // 'or' 'ne'
       || lk == 42672               // 'order' 'ne'
       || lk == 42673               // 'ordered' 'ne'
       || lk == 42675               // 'parent' 'ne'
       || lk == 42680               // 'preceding' 'ne'
       || lk == 42681               // 'preceding-sibling' 'ne'
       || lk == 42684               // 'processing-instruction' 'ne'
       || lk == 42687               // 'return' 'ne'
       || lk == 42690               // 'satisfies' 'ne'
       || lk == 42692               // 'schema-attribute' 'ne'
       || lk == 42693               // 'schema-element' 'ne'
       || lk == 42694               // 'self' 'ne'
       || lk == 42697               // 'some' 'ne'
       || lk == 42698               // 'stable' 'ne'
       || lk == 42699               // 'start' 'ne'
       || lk == 42702               // 'switch' 'ne'
       || lk == 42703               // 'text' 'ne'
       || lk == 42705               // 'to' 'ne'
       || lk == 42707               // 'treat' 'ne'
       || lk == 42708               // 'try' 'ne'
       || lk == 42711               // 'typeswitch' 'ne'
       || lk == 42712               // 'union' 'ne'
       || lk == 42713               // 'unordered' 'ne'
       || lk == 42715               // 'validate' 'ne'
       || lk == 42720               // 'where' 'ne'
       || lk == 42724               // 'xquery' 'ne'
       || lk == 43551               // '$' 'node'
       || lk == 43552               // '%' 'node'
       || lk == 43554               // '(' 'node'
       || lk == 43555               // '(#' 'node'
       || lk == 43559               // '+' 'node'
       || lk == 43561               // '-' 'node'
       || lk == 43565               // '/' 'node'
       || lk == 43566               // '//' 'node'
       || lk == 43573               // '<' 'node'
       || lk == 43587               // '@' 'node'
       || lk == 43589               // '[' 'node'
       || lk == 43605               // 'attribute' 'node'
       || lk == 43628               // 'delete' 'node'
       || lk == 43636               // 'element' 'node'
       || lk == 43664               // 'insert' 'node'
       || lk == 43709               // 'rename' 'node'
       || lk == 43710               // 'replace' 'node'
       || lk == 43884               // 'delete' 'nodes'
       || lk == 43920               // 'insert' 'nodes'
       || lk == 44319               // '$' 'only'
       || lk == 44320               // '%' 'only'
       || lk == 44322               // '(' 'only'
       || lk == 44323               // '(#' 'only'
       || lk == 44327               // '+' 'only'
       || lk == 44329               // '-' 'only'
       || lk == 44333               // '/' 'only'
       || lk == 44334               // '//' 'only'
       || lk == 44341               // '<' 'only'
       || lk == 44353               // '?' 'only'
       || lk == 44355               // '@' 'only'
       || lk == 44357               // '[' 'only'
       || lk == 44373               // 'attribute' 'only'
       || lk == 44404               // 'element' 'only'
       || lk == 44452               // 'namespace' 'only'
       || lk == 44476               // 'processing-instruction' 'only'
       || lk == 44801               // IntegerLiteral 'or'
       || lk == 44802               // DecimalLiteral 'or'
       || lk == 44803               // DoubleLiteral 'or'
       || lk == 44804               // StringLiteral 'or'
       || lk == 44805               // URIQualifiedName 'or'
       || lk == 44815               // QName^Token 'or'
       || lk == 44821               // Wildcard 'or'
       || lk == 44831               // '$' 'or'
       || lk == 44832               // '%' 'or'
       || lk == 44834               // '(' 'or'
       || lk == 44835               // '(#' 'or'
       || lk == 44839               // '+' 'or'
       || lk == 44841               // '-' 'or'
       || lk == 44843               // '.' 'or'
       || lk == 44844               // '..' 'or'
       || lk == 44845               // '/' 'or'
       || lk == 44846               // '//' 'or'
       || lk == 44853               // '<' 'or'
       || lk == 44865               // '?' 'or'
       || lk == 44867               // '@' 'or'
       || lk == 44869               // '[' 'or'
       || lk == 44877               // 'ancestor' 'or'
       || lk == 44878               // 'ancestor-or-self' 'or'
       || lk == 44879               // 'and' 'or'
       || lk == 44881               // 'array' 'or'
       || lk == 44883               // 'ascending' 'or'
       || lk == 44885               // 'attribute' 'or'
       || lk == 44891               // 'case' 'or'
       || lk == 44892               // 'cast' 'or'
       || lk == 44893               // 'castable' 'or'
       || lk == 44895               // 'child' 'or'
       || lk == 44896               // 'collation' 'or'
       || lk == 44897               // 'comment' 'or'
       || lk == 44903               // 'count' 'or'
       || lk == 44906               // 'declare' 'or'
       || lk == 44907               // 'default' 'or'
       || lk == 44909               // 'descendant' 'or'
       || lk == 44910               // 'descendant-or-self' 'or'
       || lk == 44911               // 'descending' 'or'
       || lk == 44913               // 'div' 'or'
       || lk == 44914               // 'document' 'or'
       || lk == 44915               // 'document-node' 'or'
       || lk == 44916               // 'element' 'or'
       || lk == 44917               // 'else' 'or'
       || lk == 44918               // 'empty' 'or'
       || lk == 44919               // 'empty-sequence' 'or'
       || lk == 44921               // 'end' 'or'
       || lk == 44922               // 'eq' 'or'
       || lk == 44923               // 'every' 'or'
       || lk == 44924               // 'except' 'or'
       || lk == 44929               // 'following' 'or'
       || lk == 44930               // 'following-sibling' 'or'
       || lk == 44931               // 'for' 'or'
       || lk == 44932               // 'function' 'or'
       || lk == 44933               // 'ge' 'or'
       || lk == 44935               // 'group' 'or'
       || lk == 44937               // 'gt' 'or'
       || lk == 44938               // 'idiv' 'or'
       || lk == 44939               // 'if' 'or'
       || lk == 44940               // 'import' 'or'
       || lk == 44945               // 'instance' 'or'
       || lk == 44946               // 'intersect' 'or'
       || lk == 44949               // 'is' 'or'
       || lk == 44950               // 'item' 'or'
       || lk == 44954               // 'le' 'or'
       || lk == 44956               // 'let' 'or'
       || lk == 44958               // 'lt' 'or'
       || lk == 44959               // 'map' 'or'
       || lk == 44961               // 'mod' 'or'
       || lk == 44963               // 'module' 'or'
       || lk == 44964               // 'namespace' 'or'
       || lk == 44965               // 'namespace-node' 'or'
       || lk == 44966               // 'ne' 'or'
       || lk == 44970               // 'node' 'or'
       || lk == 44973               // 'only' 'or'
       || lk == 44975               // 'or' 'or'
       || lk == 44976               // 'order' 'or'
       || lk == 44977               // 'ordered' 'or'
       || lk == 44979               // 'parent' 'or'
       || lk == 44984               // 'preceding' 'or'
       || lk == 44985               // 'preceding-sibling' 'or'
       || lk == 44988               // 'processing-instruction' 'or'
       || lk == 44991               // 'return' 'or'
       || lk == 44994               // 'satisfies' 'or'
       || lk == 44996               // 'schema-attribute' 'or'
       || lk == 44997               // 'schema-element' 'or'
       || lk == 44998               // 'self' 'or'
       || lk == 45001               // 'some' 'or'
       || lk == 45002               // 'stable' 'or'
       || lk == 45003               // 'start' 'or'
       || lk == 45006               // 'switch' 'or'
       || lk == 45007               // 'text' 'or'
       || lk == 45009               // 'to' 'or'
       || lk == 45011               // 'treat' 'or'
       || lk == 45012               // 'try' 'or'
       || lk == 45015               // 'typeswitch' 'or'
       || lk == 45016               // 'union' 'or'
       || lk == 45017               // 'unordered' 'or'
       || lk == 45019               // 'validate' 'or'
       || lk == 45024               // 'where' 'or'
       || lk == 45028               // 'xquery' 'or'
       || lk == 45087               // '$' 'order'
       || lk == 45088               // '%' 'order'
       || lk == 45090               // '(' 'order'
       || lk == 45091               // '(#' 'order'
       || lk == 45095               // '+' 'order'
       || lk == 45097               // '-' 'order'
       || lk == 45101               // '/' 'order'
       || lk == 45102               // '//' 'order'
       || lk == 45109               // '<' 'order'
       || lk == 45121               // '?' 'order'
       || lk == 45123               // '@' 'order'
       || lk == 45125               // '[' 'order'
       || lk == 45141               // 'attribute' 'order'
       || lk == 45172               // 'element' 'order'
       || lk == 45220               // 'namespace' 'order'
       || lk == 45244               // 'processing-instruction' 'order'
       || lk == 45343               // '$' 'ordered'
       || lk == 45344               // '%' 'ordered'
       || lk == 45346               // '(' 'ordered'
       || lk == 45347               // '(#' 'ordered'
       || lk == 45351               // '+' 'ordered'
       || lk == 45353               // '-' 'ordered'
       || lk == 45357               // '/' 'ordered'
       || lk == 45358               // '//' 'ordered'
       || lk == 45365               // '<' 'ordered'
       || lk == 45379               // '@' 'ordered'
       || lk == 45381               // '[' 'ordered'
       || lk == 45397               // 'attribute' 'ordered'
       || lk == 45428               // 'element' 'ordered'
       || lk == 45855               // '$' 'parent'
       || lk == 45856               // '%' 'parent'
       || lk == 45858               // '(' 'parent'
       || lk == 45859               // '(#' 'parent'
       || lk == 45863               // '+' 'parent'
       || lk == 45865               // '-' 'parent'
       || lk == 45869               // '/' 'parent'
       || lk == 45870               // '//' 'parent'
       || lk == 45877               // '<' 'parent'
       || lk == 45891               // '@' 'parent'
       || lk == 45893               // '[' 'parent'
       || lk == 45909               // 'attribute' 'parent'
       || lk == 45940               // 'element' 'parent'
       || lk == 47135               // '$' 'preceding'
       || lk == 47136               // '%' 'preceding'
       || lk == 47138               // '(' 'preceding'
       || lk == 47139               // '(#' 'preceding'
       || lk == 47143               // '+' 'preceding'
       || lk == 47145               // '-' 'preceding'
       || lk == 47149               // '/' 'preceding'
       || lk == 47150               // '//' 'preceding'
       || lk == 47157               // '<' 'preceding'
       || lk == 47171               // '@' 'preceding'
       || lk == 47173               // '[' 'preceding'
       || lk == 47189               // 'attribute' 'preceding'
       || lk == 47220               // 'element' 'preceding'
       || lk == 47391               // '$' 'preceding-sibling'
       || lk == 47392               // '%' 'preceding-sibling'
       || lk == 47394               // '(' 'preceding-sibling'
       || lk == 47395               // '(#' 'preceding-sibling'
       || lk == 47399               // '+' 'preceding-sibling'
       || lk == 47401               // '-' 'preceding-sibling'
       || lk == 47405               // '/' 'preceding-sibling'
       || lk == 47406               // '//' 'preceding-sibling'
       || lk == 47413               // '<' 'preceding-sibling'
       || lk == 47427               // '@' 'preceding-sibling'
       || lk == 47429               // '[' 'preceding-sibling'
       || lk == 47445               // 'attribute' 'preceding-sibling'
       || lk == 47476               // 'element' 'preceding-sibling'
       || lk == 48159               // '$' 'processing-instruction'
       || lk == 48160               // '%' 'processing-instruction'
       || lk == 48162               // '(' 'processing-instruction'
       || lk == 48163               // '(#' 'processing-instruction'
       || lk == 48167               // '+' 'processing-instruction'
       || lk == 48169               // '-' 'processing-instruction'
       || lk == 48173               // '/' 'processing-instruction'
       || lk == 48174               // '//' 'processing-instruction'
       || lk == 48181               // '<' 'processing-instruction'
       || lk == 48195               // '@' 'processing-instruction'
       || lk == 48197               // '[' 'processing-instruction'
       || lk == 48213               // 'attribute' 'processing-instruction'
       || lk == 48244               // 'element' 'processing-instruction'
       || lk == 48418               // '(' 'rename'
       || lk == 48453               // '[' 'rename'
       || lk == 48674               // '(' 'replace'
       || lk == 48709               // '[' 'replace'
       || lk == 48927               // '$' 'return'
       || lk == 48928               // '%' 'return'
       || lk == 48930               // '(' 'return'
       || lk == 48931               // '(#' 'return'
       || lk == 48935               // '+' 'return'
       || lk == 48937               // '-' 'return'
       || lk == 48941               // '/' 'return'
       || lk == 48942               // '//' 'return'
       || lk == 48949               // '<' 'return'
       || lk == 48961               // '?' 'return'
       || lk == 48963               // '@' 'return'
       || lk == 48965               // '[' 'return'
       || lk == 48981               // 'attribute' 'return'
       || lk == 49012               // 'element' 'return'
       || lk == 49060               // 'namespace' 'return'
       || lk == 49084               // 'processing-instruction' 'return'
       || lk == 49695               // '$' 'satisfies'
       || lk == 49696               // '%' 'satisfies'
       || lk == 49698               // '(' 'satisfies'
       || lk == 49699               // '(#' 'satisfies'
       || lk == 49703               // '+' 'satisfies'
       || lk == 49705               // '-' 'satisfies'
       || lk == 49709               // '/' 'satisfies'
       || lk == 49710               // '//' 'satisfies'
       || lk == 49717               // '<' 'satisfies'
       || lk == 49729               // '?' 'satisfies'
       || lk == 49731               // '@' 'satisfies'
       || lk == 49733               // '[' 'satisfies'
       || lk == 49749               // 'attribute' 'satisfies'
       || lk == 49780               // 'element' 'satisfies'
       || lk == 49828               // 'namespace' 'satisfies'
       || lk == 49852               // 'processing-instruction' 'satisfies'
       || lk == 50207               // '$' 'schema-attribute'
       || lk == 50208               // '%' 'schema-attribute'
       || lk == 50210               // '(' 'schema-attribute'
       || lk == 50211               // '(#' 'schema-attribute'
       || lk == 50215               // '+' 'schema-attribute'
       || lk == 50217               // '-' 'schema-attribute'
       || lk == 50221               // '/' 'schema-attribute'
       || lk == 50222               // '//' 'schema-attribute'
       || lk == 50229               // '<' 'schema-attribute'
       || lk == 50243               // '@' 'schema-attribute'
       || lk == 50245               // '[' 'schema-attribute'
       || lk == 50261               // 'attribute' 'schema-attribute'
       || lk == 50292               // 'element' 'schema-attribute'
       || lk == 50463               // '$' 'schema-element'
       || lk == 50464               // '%' 'schema-element'
       || lk == 50466               // '(' 'schema-element'
       || lk == 50467               // '(#' 'schema-element'
       || lk == 50471               // '+' 'schema-element'
       || lk == 50473               // '-' 'schema-element'
       || lk == 50477               // '/' 'schema-element'
       || lk == 50478               // '//' 'schema-element'
       || lk == 50485               // '<' 'schema-element'
       || lk == 50499               // '@' 'schema-element'
       || lk == 50501               // '[' 'schema-element'
       || lk == 50517               // 'attribute' 'schema-element'
       || lk == 50548               // 'element' 'schema-element'
       || lk == 50719               // '$' 'self'
       || lk == 50720               // '%' 'self'
       || lk == 50722               // '(' 'self'
       || lk == 50723               // '(#' 'self'
       || lk == 50727               // '+' 'self'
       || lk == 50729               // '-' 'self'
       || lk == 50733               // '/' 'self'
       || lk == 50734               // '//' 'self'
       || lk == 50741               // '<' 'self'
       || lk == 50755               // '@' 'self'
       || lk == 50757               // '[' 'self'
       || lk == 50773               // 'attribute' 'self'
       || lk == 50804               // 'element' 'self'
       || lk == 51331               // 'for' 'sliding'
       || lk == 51487               // '$' 'some'
       || lk == 51488               // '%' 'some'
       || lk == 51490               // '(' 'some'
       || lk == 51491               // '(#' 'some'
       || lk == 51495               // '+' 'some'
       || lk == 51497               // '-' 'some'
       || lk == 51501               // '/' 'some'
       || lk == 51502               // '//' 'some'
       || lk == 51509               // '<' 'some'
       || lk == 51523               // '@' 'some'
       || lk == 51525               // '[' 'some'
       || lk == 51541               // 'attribute' 'some'
       || lk == 51572               // 'element' 'some'
       || lk == 51743               // '$' 'stable'
       || lk == 51744               // '%' 'stable'
       || lk == 51746               // '(' 'stable'
       || lk == 51747               // '(#' 'stable'
       || lk == 51751               // '+' 'stable'
       || lk == 51753               // '-' 'stable'
       || lk == 51757               // '/' 'stable'
       || lk == 51758               // '//' 'stable'
       || lk == 51765               // '<' 'stable'
       || lk == 51777               // '?' 'stable'
       || lk == 51779               // '@' 'stable'
       || lk == 51781               // '[' 'stable'
       || lk == 51797               // 'attribute' 'stable'
       || lk == 51828               // 'element' 'stable'
       || lk == 51876               // 'namespace' 'stable'
       || lk == 51900               // 'processing-instruction' 'stable'
       || lk == 51999               // '$' 'start'
       || lk == 52000               // '%' 'start'
       || lk == 52002               // '(' 'start'
       || lk == 52003               // '(#' 'start'
       || lk == 52007               // '+' 'start'
       || lk == 52009               // '-' 'start'
       || lk == 52013               // '/' 'start'
       || lk == 52014               // '//' 'start'
       || lk == 52021               // '<' 'start'
       || lk == 52033               // '?' 'start'
       || lk == 52035               // '@' 'start'
       || lk == 52037               // '[' 'start'
       || lk == 52053               // 'attribute' 'start'
       || lk == 52084               // 'element' 'start'
       || lk == 52132               // 'namespace' 'start'
       || lk == 52156               // 'processing-instruction' 'start'
       || lk == 52443               // 'validate' 'strict'
       || lk == 52767               // '$' 'switch'
       || lk == 52768               // '%' 'switch'
       || lk == 52770               // '(' 'switch'
       || lk == 52771               // '(#' 'switch'
       || lk == 52775               // '+' 'switch'
       || lk == 52777               // '-' 'switch'
       || lk == 52781               // '/' 'switch'
       || lk == 52782               // '//' 'switch'
       || lk == 52789               // '<' 'switch'
       || lk == 52803               // '@' 'switch'
       || lk == 52805               // '[' 'switch'
       || lk == 52821               // 'attribute' 'switch'
       || lk == 52852               // 'element' 'switch'
       || lk == 53023               // '$' 'text'
       || lk == 53024               // '%' 'text'
       || lk == 53026               // '(' 'text'
       || lk == 53027               // '(#' 'text'
       || lk == 53031               // '+' 'text'
       || lk == 53033               // '-' 'text'
       || lk == 53037               // '/' 'text'
       || lk == 53038               // '//' 'text'
       || lk == 53045               // '<' 'text'
       || lk == 53059               // '@' 'text'
       || lk == 53061               // '[' 'text'
       || lk == 53077               // 'attribute' 'text'
       || lk == 53108               // 'element' 'text'
       || lk == 53505               // IntegerLiteral 'to'
       || lk == 53506               // DecimalLiteral 'to'
       || lk == 53507               // DoubleLiteral 'to'
       || lk == 53508               // StringLiteral 'to'
       || lk == 53509               // URIQualifiedName 'to'
       || lk == 53519               // QName^Token 'to'
       || lk == 53525               // Wildcard 'to'
       || lk == 53535               // '$' 'to'
       || lk == 53536               // '%' 'to'
       || lk == 53538               // '(' 'to'
       || lk == 53539               // '(#' 'to'
       || lk == 53543               // '+' 'to'
       || lk == 53545               // '-' 'to'
       || lk == 53547               // '.' 'to'
       || lk == 53548               // '..' 'to'
       || lk == 53549               // '/' 'to'
       || lk == 53550               // '//' 'to'
       || lk == 53557               // '<' 'to'
       || lk == 53569               // '?' 'to'
       || lk == 53571               // '@' 'to'
       || lk == 53573               // '[' 'to'
       || lk == 53581               // 'ancestor' 'to'
       || lk == 53582               // 'ancestor-or-self' 'to'
       || lk == 53583               // 'and' 'to'
       || lk == 53585               // 'array' 'to'
       || lk == 53587               // 'ascending' 'to'
       || lk == 53589               // 'attribute' 'to'
       || lk == 53595               // 'case' 'to'
       || lk == 53596               // 'cast' 'to'
       || lk == 53597               // 'castable' 'to'
       || lk == 53599               // 'child' 'to'
       || lk == 53600               // 'collation' 'to'
       || lk == 53601               // 'comment' 'to'
       || lk == 53607               // 'count' 'to'
       || lk == 53610               // 'declare' 'to'
       || lk == 53611               // 'default' 'to'
       || lk == 53613               // 'descendant' 'to'
       || lk == 53614               // 'descendant-or-self' 'to'
       || lk == 53615               // 'descending' 'to'
       || lk == 53617               // 'div' 'to'
       || lk == 53618               // 'document' 'to'
       || lk == 53619               // 'document-node' 'to'
       || lk == 53620               // 'element' 'to'
       || lk == 53621               // 'else' 'to'
       || lk == 53622               // 'empty' 'to'
       || lk == 53623               // 'empty-sequence' 'to'
       || lk == 53625               // 'end' 'to'
       || lk == 53626               // 'eq' 'to'
       || lk == 53627               // 'every' 'to'
       || lk == 53628               // 'except' 'to'
       || lk == 53633               // 'following' 'to'
       || lk == 53634               // 'following-sibling' 'to'
       || lk == 53635               // 'for' 'to'
       || lk == 53636               // 'function' 'to'
       || lk == 53637               // 'ge' 'to'
       || lk == 53639               // 'group' 'to'
       || lk == 53641               // 'gt' 'to'
       || lk == 53642               // 'idiv' 'to'
       || lk == 53643               // 'if' 'to'
       || lk == 53644               // 'import' 'to'
       || lk == 53649               // 'instance' 'to'
       || lk == 53650               // 'intersect' 'to'
       || lk == 53653               // 'is' 'to'
       || lk == 53654               // 'item' 'to'
       || lk == 53658               // 'le' 'to'
       || lk == 53660               // 'let' 'to'
       || lk == 53662               // 'lt' 'to'
       || lk == 53663               // 'map' 'to'
       || lk == 53665               // 'mod' 'to'
       || lk == 53667               // 'module' 'to'
       || lk == 53668               // 'namespace' 'to'
       || lk == 53669               // 'namespace-node' 'to'
       || lk == 53670               // 'ne' 'to'
       || lk == 53674               // 'node' 'to'
       || lk == 53677               // 'only' 'to'
       || lk == 53679               // 'or' 'to'
       || lk == 53680               // 'order' 'to'
       || lk == 53681               // 'ordered' 'to'
       || lk == 53683               // 'parent' 'to'
       || lk == 53688               // 'preceding' 'to'
       || lk == 53689               // 'preceding-sibling' 'to'
       || lk == 53692               // 'processing-instruction' 'to'
       || lk == 53695               // 'return' 'to'
       || lk == 53698               // 'satisfies' 'to'
       || lk == 53700               // 'schema-attribute' 'to'
       || lk == 53701               // 'schema-element' 'to'
       || lk == 53702               // 'self' 'to'
       || lk == 53705               // 'some' 'to'
       || lk == 53706               // 'stable' 'to'
       || lk == 53707               // 'start' 'to'
       || lk == 53710               // 'switch' 'to'
       || lk == 53711               // 'text' 'to'
       || lk == 53713               // 'to' 'to'
       || lk == 53715               // 'treat' 'to'
       || lk == 53716               // 'try' 'to'
       || lk == 53719               // 'typeswitch' 'to'
       || lk == 53720               // 'union' 'to'
       || lk == 53721               // 'unordered' 'to'
       || lk == 53723               // 'validate' 'to'
       || lk == 53728               // 'where' 'to'
       || lk == 53732               // 'xquery' 'to'
       || lk == 53761               // IntegerLiteral 'transform'
       || lk == 53762               // DecimalLiteral 'transform'
       || lk == 53763               // DoubleLiteral 'transform'
       || lk == 53764               // StringLiteral 'transform'
       || lk == 53765               // URIQualifiedName 'transform'
       || lk == 53775               // QName^Token 'transform'
       || lk == 53781               // Wildcard 'transform'
       || lk == 53803               // '.' 'transform'
       || lk == 53804               // '..' 'transform'
       || lk == 53805               // '/' 'transform'
       || lk == 53837               // 'ancestor' 'transform'
       || lk == 53838               // 'ancestor-or-self' 'transform'
       || lk == 53839               // 'and' 'transform'
       || lk == 53841               // 'array' 'transform'
       || lk == 53843               // 'ascending' 'transform'
       || lk == 53845               // 'attribute' 'transform'
       || lk == 53851               // 'case' 'transform'
       || lk == 53852               // 'cast' 'transform'
       || lk == 53853               // 'castable' 'transform'
       || lk == 53855               // 'child' 'transform'
       || lk == 53856               // 'collation' 'transform'
       || lk == 53857               // 'comment' 'transform'
       || lk == 53863               // 'count' 'transform'
       || lk == 53866               // 'declare' 'transform'
       || lk == 53867               // 'default' 'transform'
       || lk == 53869               // 'descendant' 'transform'
       || lk == 53870               // 'descendant-or-self' 'transform'
       || lk == 53871               // 'descending' 'transform'
       || lk == 53873               // 'div' 'transform'
       || lk == 53874               // 'document' 'transform'
       || lk == 53875               // 'document-node' 'transform'
       || lk == 53876               // 'element' 'transform'
       || lk == 53877               // 'else' 'transform'
       || lk == 53878               // 'empty' 'transform'
       || lk == 53879               // 'empty-sequence' 'transform'
       || lk == 53881               // 'end' 'transform'
       || lk == 53882               // 'eq' 'transform'
       || lk == 53883               // 'every' 'transform'
       || lk == 53884               // 'except' 'transform'
       || lk == 53889               // 'following' 'transform'
       || lk == 53890               // 'following-sibling' 'transform'
       || lk == 53891               // 'for' 'transform'
       || lk == 53892               // 'function' 'transform'
       || lk == 53893               // 'ge' 'transform'
       || lk == 53895               // 'group' 'transform'
       || lk == 53897               // 'gt' 'transform'
       || lk == 53898               // 'idiv' 'transform'
       || lk == 53899               // 'if' 'transform'
       || lk == 53900               // 'import' 'transform'
       || lk == 53905               // 'instance' 'transform'
       || lk == 53906               // 'intersect' 'transform'
       || lk == 53909               // 'is' 'transform'
       || lk == 53910               // 'item' 'transform'
       || lk == 53914               // 'le' 'transform'
       || lk == 53916               // 'let' 'transform'
       || lk == 53918               // 'lt' 'transform'
       || lk == 53919               // 'map' 'transform'
       || lk == 53921               // 'mod' 'transform'
       || lk == 53923               // 'module' 'transform'
       || lk == 53924               // 'namespace' 'transform'
       || lk == 53925               // 'namespace-node' 'transform'
       || lk == 53926               // 'ne' 'transform'
       || lk == 53930               // 'node' 'transform'
       || lk == 53933               // 'only' 'transform'
       || lk == 53935               // 'or' 'transform'
       || lk == 53936               // 'order' 'transform'
       || lk == 53937               // 'ordered' 'transform'
       || lk == 53939               // 'parent' 'transform'
       || lk == 53944               // 'preceding' 'transform'
       || lk == 53945               // 'preceding-sibling' 'transform'
       || lk == 53948               // 'processing-instruction' 'transform'
       || lk == 53951               // 'return' 'transform'
       || lk == 53954               // 'satisfies' 'transform'
       || lk == 53956               // 'schema-attribute' 'transform'
       || lk == 53957               // 'schema-element' 'transform'
       || lk == 53958               // 'self' 'transform'
       || lk == 53961               // 'some' 'transform'
       || lk == 53962               // 'stable' 'transform'
       || lk == 53963               // 'start' 'transform'
       || lk == 53966               // 'switch' 'transform'
       || lk == 53967               // 'text' 'transform'
       || lk == 53969               // 'to' 'transform'
       || lk == 53971               // 'treat' 'transform'
       || lk == 53972               // 'try' 'transform'
       || lk == 53975               // 'typeswitch' 'transform'
       || lk == 53976               // 'union' 'transform'
       || lk == 53977               // 'unordered' 'transform'
       || lk == 53979               // 'validate' 'transform'
       || lk == 53984               // 'where' 'transform'
       || lk == 53988               // 'xquery' 'transform'
       || lk == 54017               // IntegerLiteral 'treat'
       || lk == 54018               // DecimalLiteral 'treat'
       || lk == 54019               // DoubleLiteral 'treat'
       || lk == 54020               // StringLiteral 'treat'
       || lk == 54021               // URIQualifiedName 'treat'
       || lk == 54031               // QName^Token 'treat'
       || lk == 54037               // Wildcard 'treat'
       || lk == 54047               // '$' 'treat'
       || lk == 54048               // '%' 'treat'
       || lk == 54050               // '(' 'treat'
       || lk == 54051               // '(#' 'treat'
       || lk == 54055               // '+' 'treat'
       || lk == 54057               // '-' 'treat'
       || lk == 54059               // '.' 'treat'
       || lk == 54060               // '..' 'treat'
       || lk == 54061               // '/' 'treat'
       || lk == 54062               // '//' 'treat'
       || lk == 54069               // '<' 'treat'
       || lk == 54081               // '?' 'treat'
       || lk == 54083               // '@' 'treat'
       || lk == 54085               // '[' 'treat'
       || lk == 54093               // 'ancestor' 'treat'
       || lk == 54094               // 'ancestor-or-self' 'treat'
       || lk == 54095               // 'and' 'treat'
       || lk == 54097               // 'array' 'treat'
       || lk == 54099               // 'ascending' 'treat'
       || lk == 54101               // 'attribute' 'treat'
       || lk == 54107               // 'case' 'treat'
       || lk == 54108               // 'cast' 'treat'
       || lk == 54109               // 'castable' 'treat'
       || lk == 54111               // 'child' 'treat'
       || lk == 54112               // 'collation' 'treat'
       || lk == 54113               // 'comment' 'treat'
       || lk == 54119               // 'count' 'treat'
       || lk == 54122               // 'declare' 'treat'
       || lk == 54123               // 'default' 'treat'
       || lk == 54125               // 'descendant' 'treat'
       || lk == 54126               // 'descendant-or-self' 'treat'
       || lk == 54127               // 'descending' 'treat'
       || lk == 54129               // 'div' 'treat'
       || lk == 54130               // 'document' 'treat'
       || lk == 54131               // 'document-node' 'treat'
       || lk == 54132               // 'element' 'treat'
       || lk == 54133               // 'else' 'treat'
       || lk == 54134               // 'empty' 'treat'
       || lk == 54135               // 'empty-sequence' 'treat'
       || lk == 54137               // 'end' 'treat'
       || lk == 54138               // 'eq' 'treat'
       || lk == 54139               // 'every' 'treat'
       || lk == 54140               // 'except' 'treat'
       || lk == 54145               // 'following' 'treat'
       || lk == 54146               // 'following-sibling' 'treat'
       || lk == 54147               // 'for' 'treat'
       || lk == 54148               // 'function' 'treat'
       || lk == 54149               // 'ge' 'treat'
       || lk == 54151               // 'group' 'treat'
       || lk == 54153               // 'gt' 'treat'
       || lk == 54154               // 'idiv' 'treat'
       || lk == 54155               // 'if' 'treat'
       || lk == 54156               // 'import' 'treat'
       || lk == 54161               // 'instance' 'treat'
       || lk == 54162               // 'intersect' 'treat'
       || lk == 54165               // 'is' 'treat'
       || lk == 54166               // 'item' 'treat'
       || lk == 54170               // 'le' 'treat'
       || lk == 54172               // 'let' 'treat'
       || lk == 54174               // 'lt' 'treat'
       || lk == 54175               // 'map' 'treat'
       || lk == 54177               // 'mod' 'treat'
       || lk == 54179               // 'module' 'treat'
       || lk == 54180               // 'namespace' 'treat'
       || lk == 54181               // 'namespace-node' 'treat'
       || lk == 54182               // 'ne' 'treat'
       || lk == 54186               // 'node' 'treat'
       || lk == 54189               // 'only' 'treat'
       || lk == 54191               // 'or' 'treat'
       || lk == 54192               // 'order' 'treat'
       || lk == 54193               // 'ordered' 'treat'
       || lk == 54195               // 'parent' 'treat'
       || lk == 54200               // 'preceding' 'treat'
       || lk == 54201               // 'preceding-sibling' 'treat'
       || lk == 54204               // 'processing-instruction' 'treat'
       || lk == 54207               // 'return' 'treat'
       || lk == 54210               // 'satisfies' 'treat'
       || lk == 54212               // 'schema-attribute' 'treat'
       || lk == 54213               // 'schema-element' 'treat'
       || lk == 54214               // 'self' 'treat'
       || lk == 54217               // 'some' 'treat'
       || lk == 54218               // 'stable' 'treat'
       || lk == 54219               // 'start' 'treat'
       || lk == 54222               // 'switch' 'treat'
       || lk == 54223               // 'text' 'treat'
       || lk == 54225               // 'to' 'treat'
       || lk == 54227               // 'treat' 'treat'
       || lk == 54228               // 'try' 'treat'
       || lk == 54231               // 'typeswitch' 'treat'
       || lk == 54232               // 'union' 'treat'
       || lk == 54233               // 'unordered' 'treat'
       || lk == 54235               // 'validate' 'treat'
       || lk == 54240               // 'where' 'treat'
       || lk == 54244               // 'xquery' 'treat'
       || lk == 54303               // '$' 'try'
       || lk == 54304               // '%' 'try'
       || lk == 54306               // '(' 'try'
       || lk == 54307               // '(#' 'try'
       || lk == 54311               // '+' 'try'
       || lk == 54313               // '-' 'try'
       || lk == 54317               // '/' 'try'
       || lk == 54318               // '//' 'try'
       || lk == 54325               // '<' 'try'
       || lk == 54339               // '@' 'try'
       || lk == 54341               // '[' 'try'
       || lk == 54357               // 'attribute' 'try'
       || lk == 54388               // 'element' 'try'
       || lk == 54659               // 'for' 'tumbling'
       || lk == 55003               // 'validate' 'type'
       || lk == 55071               // '$' 'typeswitch'
       || lk == 55072               // '%' 'typeswitch'
       || lk == 55074               // '(' 'typeswitch'
       || lk == 55075               // '(#' 'typeswitch'
       || lk == 55079               // '+' 'typeswitch'
       || lk == 55081               // '-' 'typeswitch'
       || lk == 55085               // '/' 'typeswitch'
       || lk == 55086               // '//' 'typeswitch'
       || lk == 55093               // '<' 'typeswitch'
       || lk == 55107               // '@' 'typeswitch'
       || lk == 55109               // '[' 'typeswitch'
       || lk == 55125               // 'attribute' 'typeswitch'
       || lk == 55156               // 'element' 'typeswitch'
       || lk == 55297               // IntegerLiteral 'union'
       || lk == 55298               // DecimalLiteral 'union'
       || lk == 55299               // DoubleLiteral 'union'
       || lk == 55300               // StringLiteral 'union'
       || lk == 55301               // URIQualifiedName 'union'
       || lk == 55311               // QName^Token 'union'
       || lk == 55317               // Wildcard 'union'
       || lk == 55327               // '$' 'union'
       || lk == 55328               // '%' 'union'
       || lk == 55330               // '(' 'union'
       || lk == 55331               // '(#' 'union'
       || lk == 55335               // '+' 'union'
       || lk == 55337               // '-' 'union'
       || lk == 55339               // '.' 'union'
       || lk == 55340               // '..' 'union'
       || lk == 55341               // '/' 'union'
       || lk == 55342               // '//' 'union'
       || lk == 55349               // '<' 'union'
       || lk == 55361               // '?' 'union'
       || lk == 55363               // '@' 'union'
       || lk == 55365               // '[' 'union'
       || lk == 55373               // 'ancestor' 'union'
       || lk == 55374               // 'ancestor-or-self' 'union'
       || lk == 55375               // 'and' 'union'
       || lk == 55377               // 'array' 'union'
       || lk == 55379               // 'ascending' 'union'
       || lk == 55381               // 'attribute' 'union'
       || lk == 55387               // 'case' 'union'
       || lk == 55388               // 'cast' 'union'
       || lk == 55389               // 'castable' 'union'
       || lk == 55391               // 'child' 'union'
       || lk == 55392               // 'collation' 'union'
       || lk == 55393               // 'comment' 'union'
       || lk == 55399               // 'count' 'union'
       || lk == 55402               // 'declare' 'union'
       || lk == 55403               // 'default' 'union'
       || lk == 55405               // 'descendant' 'union'
       || lk == 55406               // 'descendant-or-self' 'union'
       || lk == 55407               // 'descending' 'union'
       || lk == 55409               // 'div' 'union'
       || lk == 55410               // 'document' 'union'
       || lk == 55411               // 'document-node' 'union'
       || lk == 55412               // 'element' 'union'
       || lk == 55413               // 'else' 'union'
       || lk == 55414               // 'empty' 'union'
       || lk == 55415               // 'empty-sequence' 'union'
       || lk == 55417               // 'end' 'union'
       || lk == 55418               // 'eq' 'union'
       || lk == 55419               // 'every' 'union'
       || lk == 55420               // 'except' 'union'
       || lk == 55425               // 'following' 'union'
       || lk == 55426               // 'following-sibling' 'union'
       || lk == 55427               // 'for' 'union'
       || lk == 55428               // 'function' 'union'
       || lk == 55429               // 'ge' 'union'
       || lk == 55431               // 'group' 'union'
       || lk == 55433               // 'gt' 'union'
       || lk == 55434               // 'idiv' 'union'
       || lk == 55435               // 'if' 'union'
       || lk == 55436               // 'import' 'union'
       || lk == 55441               // 'instance' 'union'
       || lk == 55442               // 'intersect' 'union'
       || lk == 55445               // 'is' 'union'
       || lk == 55446               // 'item' 'union'
       || lk == 55450               // 'le' 'union'
       || lk == 55452               // 'let' 'union'
       || lk == 55454               // 'lt' 'union'
       || lk == 55455               // 'map' 'union'
       || lk == 55457               // 'mod' 'union'
       || lk == 55459               // 'module' 'union'
       || lk == 55460               // 'namespace' 'union'
       || lk == 55461               // 'namespace-node' 'union'
       || lk == 55462               // 'ne' 'union'
       || lk == 55466               // 'node' 'union'
       || lk == 55469               // 'only' 'union'
       || lk == 55471               // 'or' 'union'
       || lk == 55472               // 'order' 'union'
       || lk == 55473               // 'ordered' 'union'
       || lk == 55475               // 'parent' 'union'
       || lk == 55480               // 'preceding' 'union'
       || lk == 55481               // 'preceding-sibling' 'union'
       || lk == 55484               // 'processing-instruction' 'union'
       || lk == 55487               // 'return' 'union'
       || lk == 55490               // 'satisfies' 'union'
       || lk == 55492               // 'schema-attribute' 'union'
       || lk == 55493               // 'schema-element' 'union'
       || lk == 55494               // 'self' 'union'
       || lk == 55497               // 'some' 'union'
       || lk == 55498               // 'stable' 'union'
       || lk == 55499               // 'start' 'union'
       || lk == 55502               // 'switch' 'union'
       || lk == 55503               // 'text' 'union'
       || lk == 55505               // 'to' 'union'
       || lk == 55507               // 'treat' 'union'
       || lk == 55508               // 'try' 'union'
       || lk == 55511               // 'typeswitch' 'union'
       || lk == 55512               // 'union' 'union'
       || lk == 55513               // 'unordered' 'union'
       || lk == 55515               // 'validate' 'union'
       || lk == 55520               // 'where' 'union'
       || lk == 55524               // 'xquery' 'union'
       || lk == 55583               // '$' 'unordered'
       || lk == 55584               // '%' 'unordered'
       || lk == 55586               // '(' 'unordered'
       || lk == 55587               // '(#' 'unordered'
       || lk == 55591               // '+' 'unordered'
       || lk == 55593               // '-' 'unordered'
       || lk == 55597               // '/' 'unordered'
       || lk == 55598               // '//' 'unordered'
       || lk == 55605               // '<' 'unordered'
       || lk == 55619               // '@' 'unordered'
       || lk == 55621               // '[' 'unordered'
       || lk == 55637               // 'attribute' 'unordered'
       || lk == 55668               // 'element' 'unordered'
       || lk == 55956               // 'invoke' 'updating'
       || lk == 56095               // '$' 'validate'
       || lk == 56096               // '%' 'validate'
       || lk == 56098               // '(' 'validate'
       || lk == 56099               // '(#' 'validate'
       || lk == 56103               // '+' 'validate'
       || lk == 56105               // '-' 'validate'
       || lk == 56109               // '/' 'validate'
       || lk == 56110               // '//' 'validate'
       || lk == 56117               // '<' 'validate'
       || lk == 56131               // '@' 'validate'
       || lk == 56133               // '[' 'validate'
       || lk == 56149               // 'attribute' 'validate'
       || lk == 56180               // 'element' 'validate'
       || lk == 56510               // 'replace' 'value'
       || lk == 57375               // '$' 'where'
       || lk == 57376               // '%' 'where'
       || lk == 57378               // '(' 'where'
       || lk == 57379               // '(#' 'where'
       || lk == 57383               // '+' 'where'
       || lk == 57385               // '-' 'where'
       || lk == 57389               // '/' 'where'
       || lk == 57390               // '//' 'where'
       || lk == 57397               // '<' 'where'
       || lk == 57409               // '?' 'where'
       || lk == 57411               // '@' 'where'
       || lk == 57413               // '[' 'where'
       || lk == 57429               // 'attribute' 'where'
       || lk == 57460               // 'element' 'where'
       || lk == 57508               // 'namespace' 'where'
       || lk == 57532               // 'processing-instruction' 'where'
       || lk == 58399               // '$' 'xquery'
       || lk == 58400               // '%' 'xquery'
       || lk == 58402               // '(' 'xquery'
       || lk == 58403               // '(#' 'xquery'
       || lk == 58407               // '+' 'xquery'
       || lk == 58409               // '-' 'xquery'
       || lk == 58413               // '/' 'xquery'
       || lk == 58414               // '//' 'xquery'
       || lk == 58421               // '<' 'xquery'
       || lk == 58435               // '@' 'xquery'
       || lk == 58437               // '[' 'xquery'
       || lk == 58453               // 'attribute' 'xquery'
       || lk == 58484               // 'element' 'xquery'
       || lk == 58961               // 'array' '{'
       || lk == 58965               // 'attribute' '{'
       || lk == 58977               // 'comment' '{'
       || lk == 58994               // 'document' '{'
       || lk == 58996               // 'element' '{'
       || lk == 59039               // 'map' '{'
       || lk == 59044               // 'namespace' '{'
       || lk == 59057               // 'ordered' '{'
       || lk == 59068               // 'processing-instruction' '{'
       || lk == 59087               // 'text' '{'
       || lk == 59092               // 'try' '{'
       || lk == 59097               // 'unordered' '{'
       || lk == 59099               // 'validate' '{'
       || lk == 59393               // IntegerLiteral '|'
       || lk == 59394               // DecimalLiteral '|'
       || lk == 59395               // DoubleLiteral '|'
       || lk == 59396               // StringLiteral '|'
       || lk == 59397               // URIQualifiedName '|'
       || lk == 59407               // QName^Token '|'
       || lk == 59413               // Wildcard '|'
       || lk == 59435               // '.' '|'
       || lk == 59436               // '..' '|'
       || lk == 59437               // '/' '|'
       || lk == 59469               // 'ancestor' '|'
       || lk == 59470               // 'ancestor-or-self' '|'
       || lk == 59471               // 'and' '|'
       || lk == 59473               // 'array' '|'
       || lk == 59475               // 'ascending' '|'
       || lk == 59477               // 'attribute' '|'
       || lk == 59483               // 'case' '|'
       || lk == 59484               // 'cast' '|'
       || lk == 59485               // 'castable' '|'
       || lk == 59487               // 'child' '|'
       || lk == 59488               // 'collation' '|'
       || lk == 59489               // 'comment' '|'
       || lk == 59495               // 'count' '|'
       || lk == 59498               // 'declare' '|'
       || lk == 59499               // 'default' '|'
       || lk == 59501               // 'descendant' '|'
       || lk == 59502               // 'descendant-or-self' '|'
       || lk == 59503               // 'descending' '|'
       || lk == 59505               // 'div' '|'
       || lk == 59506               // 'document' '|'
       || lk == 59507               // 'document-node' '|'
       || lk == 59508               // 'element' '|'
       || lk == 59509               // 'else' '|'
       || lk == 59510               // 'empty' '|'
       || lk == 59511               // 'empty-sequence' '|'
       || lk == 59513               // 'end' '|'
       || lk == 59514               // 'eq' '|'
       || lk == 59515               // 'every' '|'
       || lk == 59516               // 'except' '|'
       || lk == 59521               // 'following' '|'
       || lk == 59522               // 'following-sibling' '|'
       || lk == 59523               // 'for' '|'
       || lk == 59524               // 'function' '|'
       || lk == 59525               // 'ge' '|'
       || lk == 59527               // 'group' '|'
       || lk == 59529               // 'gt' '|'
       || lk == 59530               // 'idiv' '|'
       || lk == 59531               // 'if' '|'
       || lk == 59532               // 'import' '|'
       || lk == 59537               // 'instance' '|'
       || lk == 59538               // 'intersect' '|'
       || lk == 59541               // 'is' '|'
       || lk == 59542               // 'item' '|'
       || lk == 59546               // 'le' '|'
       || lk == 59548               // 'let' '|'
       || lk == 59550               // 'lt' '|'
       || lk == 59551               // 'map' '|'
       || lk == 59553               // 'mod' '|'
       || lk == 59555               // 'module' '|'
       || lk == 59556               // 'namespace' '|'
       || lk == 59557               // 'namespace-node' '|'
       || lk == 59558               // 'ne' '|'
       || lk == 59562               // 'node' '|'
       || lk == 59565               // 'only' '|'
       || lk == 59567               // 'or' '|'
       || lk == 59568               // 'order' '|'
       || lk == 59569               // 'ordered' '|'
       || lk == 59571               // 'parent' '|'
       || lk == 59576               // 'preceding' '|'
       || lk == 59577               // 'preceding-sibling' '|'
       || lk == 59580               // 'processing-instruction' '|'
       || lk == 59583               // 'return' '|'
       || lk == 59586               // 'satisfies' '|'
       || lk == 59588               // 'schema-attribute' '|'
       || lk == 59589               // 'schema-element' '|'
       || lk == 59590               // 'self' '|'
       || lk == 59593               // 'some' '|'
       || lk == 59594               // 'stable' '|'
       || lk == 59595               // 'start' '|'
       || lk == 59598               // 'switch' '|'
       || lk == 59599               // 'text' '|'
       || lk == 59601               // 'to' '|'
       || lk == 59603               // 'treat' '|'
       || lk == 59604               // 'try' '|'
       || lk == 59607               // 'typeswitch' '|'
       || lk == 59608               // 'union' '|'
       || lk == 59609               // 'unordered' '|'
       || lk == 59611               // 'validate' '|'
       || lk == 59616               // 'where' '|'
       || lk == 59620               // 'xquery' '|'
       || lk == 59649               // IntegerLiteral '||'
       || lk == 59650               // DecimalLiteral '||'
       || lk == 59651               // DoubleLiteral '||'
       || lk == 59652               // StringLiteral '||'
       || lk == 59653               // URIQualifiedName '||'
       || lk == 59663               // QName^Token '||'
       || lk == 59669               // Wildcard '||'
       || lk == 59691               // '.' '||'
       || lk == 59692               // '..' '||'
       || lk == 59693               // '/' '||'
       || lk == 59725               // 'ancestor' '||'
       || lk == 59726               // 'ancestor-or-self' '||'
       || lk == 59727               // 'and' '||'
       || lk == 59729               // 'array' '||'
       || lk == 59731               // 'ascending' '||'
       || lk == 59733               // 'attribute' '||'
       || lk == 59739               // 'case' '||'
       || lk == 59740               // 'cast' '||'
       || lk == 59741               // 'castable' '||'
       || lk == 59743               // 'child' '||'
       || lk == 59744               // 'collation' '||'
       || lk == 59745               // 'comment' '||'
       || lk == 59751               // 'count' '||'
       || lk == 59754               // 'declare' '||'
       || lk == 59755               // 'default' '||'
       || lk == 59757               // 'descendant' '||'
       || lk == 59758               // 'descendant-or-self' '||'
       || lk == 59759               // 'descending' '||'
       || lk == 59761               // 'div' '||'
       || lk == 59762               // 'document' '||'
       || lk == 59763               // 'document-node' '||'
       || lk == 59764               // 'element' '||'
       || lk == 59765               // 'else' '||'
       || lk == 59766               // 'empty' '||'
       || lk == 59767               // 'empty-sequence' '||'
       || lk == 59769               // 'end' '||'
       || lk == 59770               // 'eq' '||'
       || lk == 59771               // 'every' '||'
       || lk == 59772               // 'except' '||'
       || lk == 59777               // 'following' '||'
       || lk == 59778               // 'following-sibling' '||'
       || lk == 59779               // 'for' '||'
       || lk == 59780               // 'function' '||'
       || lk == 59781               // 'ge' '||'
       || lk == 59783               // 'group' '||'
       || lk == 59785               // 'gt' '||'
       || lk == 59786               // 'idiv' '||'
       || lk == 59787               // 'if' '||'
       || lk == 59788               // 'import' '||'
       || lk == 59793               // 'instance' '||'
       || lk == 59794               // 'intersect' '||'
       || lk == 59797               // 'is' '||'
       || lk == 59798               // 'item' '||'
       || lk == 59802               // 'le' '||'
       || lk == 59804               // 'let' '||'
       || lk == 59806               // 'lt' '||'
       || lk == 59807               // 'map' '||'
       || lk == 59809               // 'mod' '||'
       || lk == 59811               // 'module' '||'
       || lk == 59812               // 'namespace' '||'
       || lk == 59813               // 'namespace-node' '||'
       || lk == 59814               // 'ne' '||'
       || lk == 59818               // 'node' '||'
       || lk == 59821               // 'only' '||'
       || lk == 59823               // 'or' '||'
       || lk == 59824               // 'order' '||'
       || lk == 59825               // 'ordered' '||'
       || lk == 59827               // 'parent' '||'
       || lk == 59832               // 'preceding' '||'
       || lk == 59833               // 'preceding-sibling' '||'
       || lk == 59836               // 'processing-instruction' '||'
       || lk == 59839               // 'return' '||'
       || lk == 59842               // 'satisfies' '||'
       || lk == 59844               // 'schema-attribute' '||'
       || lk == 59845               // 'schema-element' '||'
       || lk == 59846               // 'self' '||'
       || lk == 59849               // 'some' '||'
       || lk == 59850               // 'stable' '||'
       || lk == 59851               // 'start' '||'
       || lk == 59854               // 'switch' '||'
       || lk == 59855               // 'text' '||'
       || lk == 59857               // 'to' '||'
       || lk == 59859               // 'treat' '||'
       || lk == 59860               // 'try' '||'
       || lk == 59863               // 'typeswitch' '||'
       || lk == 59864               // 'union' '||'
       || lk == 59865               // 'unordered' '||'
       || lk == 59867               // 'validate' '||'
       || lk == 59872               // 'where' '||'
       || lk == 59876)              // 'xquery' '||'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(5, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(5, e0A, -2);
            break;
          }
        }
      }
      if (lk == -2
       || lk == 234                 // '}'
       || lk == 6401                // IntegerLiteral EOF
       || lk == 6402                // DecimalLiteral EOF
       || lk == 6403                // DoubleLiteral EOF
       || lk == 6404                // StringLiteral EOF
       || lk == 6405                // URIQualifiedName EOF
       || lk == 6415                // QName^Token EOF
       || lk == 6421                // Wildcard EOF
       || lk == 6443                // '.' EOF
       || lk == 6444                // '..' EOF
       || lk == 6445                // '/' EOF
       || lk == 6477                // 'ancestor' EOF
       || lk == 6478                // 'ancestor-or-self' EOF
       || lk == 6479                // 'and' EOF
       || lk == 6481                // 'array' EOF
       || lk == 6483                // 'ascending' EOF
       || lk == 6485                // 'attribute' EOF
       || lk == 6491                // 'case' EOF
       || lk == 6492                // 'cast' EOF
       || lk == 6493                // 'castable' EOF
       || lk == 6495                // 'child' EOF
       || lk == 6496                // 'collation' EOF
       || lk == 6497                // 'comment' EOF
       || lk == 6503                // 'count' EOF
       || lk == 6506                // 'declare' EOF
       || lk == 6507                // 'default' EOF
       || lk == 6509                // 'descendant' EOF
       || lk == 6510                // 'descendant-or-self' EOF
       || lk == 6511                // 'descending' EOF
       || lk == 6513                // 'div' EOF
       || lk == 6514                // 'document' EOF
       || lk == 6515                // 'document-node' EOF
       || lk == 6516                // 'element' EOF
       || lk == 6517                // 'else' EOF
       || lk == 6518                // 'empty' EOF
       || lk == 6519                // 'empty-sequence' EOF
       || lk == 6521                // 'end' EOF
       || lk == 6522                // 'eq' EOF
       || lk == 6523                // 'every' EOF
       || lk == 6524                // 'except' EOF
       || lk == 6529                // 'following' EOF
       || lk == 6530                // 'following-sibling' EOF
       || lk == 6531                // 'for' EOF
       || lk == 6532                // 'function' EOF
       || lk == 6533                // 'ge' EOF
       || lk == 6535                // 'group' EOF
       || lk == 6537                // 'gt' EOF
       || lk == 6538                // 'idiv' EOF
       || lk == 6539                // 'if' EOF
       || lk == 6540                // 'import' EOF
       || lk == 6545                // 'instance' EOF
       || lk == 6546                // 'intersect' EOF
       || lk == 6549                // 'is' EOF
       || lk == 6550                // 'item' EOF
       || lk == 6554                // 'le' EOF
       || lk == 6556                // 'let' EOF
       || lk == 6558                // 'lt' EOF
       || lk == 6559                // 'map' EOF
       || lk == 6561                // 'mod' EOF
       || lk == 6563                // 'module' EOF
       || lk == 6564                // 'namespace' EOF
       || lk == 6565                // 'namespace-node' EOF
       || lk == 6566                // 'ne' EOF
       || lk == 6570                // 'node' EOF
       || lk == 6573                // 'only' EOF
       || lk == 6575                // 'or' EOF
       || lk == 6576                // 'order' EOF
       || lk == 6577                // 'ordered' EOF
       || lk == 6579                // 'parent' EOF
       || lk == 6584                // 'preceding' EOF
       || lk == 6585                // 'preceding-sibling' EOF
       || lk == 6588                // 'processing-instruction' EOF
       || lk == 6591                // 'return' EOF
       || lk == 6594                // 'satisfies' EOF
       || lk == 6596                // 'schema-attribute' EOF
       || lk == 6597                // 'schema-element' EOF
       || lk == 6598                // 'self' EOF
       || lk == 6601                // 'some' EOF
       || lk == 6602                // 'stable' EOF
       || lk == 6603                // 'start' EOF
       || lk == 6606                // 'switch' EOF
       || lk == 6607                // 'text' EOF
       || lk == 6609                // 'to' EOF
       || lk == 6611                // 'treat' EOF
       || lk == 6612                // 'try' EOF
       || lk == 6615                // 'typeswitch' EOF
       || lk == 6616                // 'union' EOF
       || lk == 6617                // 'unordered' EOF
       || lk == 6619                // 'validate' EOF
       || lk == 6624                // 'where' EOF
       || lk == 6628                // 'xquery' EOF
       || lk == 10241               // IntegerLiteral ','
       || lk == 10242               // DecimalLiteral ','
       || lk == 10243               // DoubleLiteral ','
       || lk == 10244               // StringLiteral ','
       || lk == 10245               // URIQualifiedName ','
       || lk == 10255               // QName^Token ','
       || lk == 10261               // Wildcard ','
       || lk == 10283               // '.' ','
       || lk == 10284               // '..' ','
       || lk == 10285               // '/' ','
       || lk == 10317               // 'ancestor' ','
       || lk == 10318               // 'ancestor-or-self' ','
       || lk == 10319               // 'and' ','
       || lk == 10321               // 'array' ','
       || lk == 10323               // 'ascending' ','
       || lk == 10325               // 'attribute' ','
       || lk == 10331               // 'case' ','
       || lk == 10332               // 'cast' ','
       || lk == 10333               // 'castable' ','
       || lk == 10335               // 'child' ','
       || lk == 10336               // 'collation' ','
       || lk == 10337               // 'comment' ','
       || lk == 10343               // 'count' ','
       || lk == 10346               // 'declare' ','
       || lk == 10347               // 'default' ','
       || lk == 10349               // 'descendant' ','
       || lk == 10350               // 'descendant-or-self' ','
       || lk == 10351               // 'descending' ','
       || lk == 10353               // 'div' ','
       || lk == 10354               // 'document' ','
       || lk == 10355               // 'document-node' ','
       || lk == 10356               // 'element' ','
       || lk == 10357               // 'else' ','
       || lk == 10358               // 'empty' ','
       || lk == 10359               // 'empty-sequence' ','
       || lk == 10361               // 'end' ','
       || lk == 10362               // 'eq' ','
       || lk == 10363               // 'every' ','
       || lk == 10364               // 'except' ','
       || lk == 10369               // 'following' ','
       || lk == 10370               // 'following-sibling' ','
       || lk == 10371               // 'for' ','
       || lk == 10372               // 'function' ','
       || lk == 10373               // 'ge' ','
       || lk == 10375               // 'group' ','
       || lk == 10377               // 'gt' ','
       || lk == 10378               // 'idiv' ','
       || lk == 10379               // 'if' ','
       || lk == 10380               // 'import' ','
       || lk == 10385               // 'instance' ','
       || lk == 10386               // 'intersect' ','
       || lk == 10389               // 'is' ','
       || lk == 10390               // 'item' ','
       || lk == 10394               // 'le' ','
       || lk == 10396               // 'let' ','
       || lk == 10398               // 'lt' ','
       || lk == 10399               // 'map' ','
       || lk == 10401               // 'mod' ','
       || lk == 10403               // 'module' ','
       || lk == 10404               // 'namespace' ','
       || lk == 10405               // 'namespace-node' ','
       || lk == 10406               // 'ne' ','
       || lk == 10410               // 'node' ','
       || lk == 10413               // 'only' ','
       || lk == 10415               // 'or' ','
       || lk == 10416               // 'order' ','
       || lk == 10417               // 'ordered' ','
       || lk == 10419               // 'parent' ','
       || lk == 10424               // 'preceding' ','
       || lk == 10425               // 'preceding-sibling' ','
       || lk == 10428               // 'processing-instruction' ','
       || lk == 10431               // 'return' ','
       || lk == 10434               // 'satisfies' ','
       || lk == 10436               // 'schema-attribute' ','
       || lk == 10437               // 'schema-element' ','
       || lk == 10438               // 'self' ','
       || lk == 10441               // 'some' ','
       || lk == 10442               // 'stable' ','
       || lk == 10443               // 'start' ','
       || lk == 10446               // 'switch' ','
       || lk == 10447               // 'text' ','
       || lk == 10449               // 'to' ','
       || lk == 10451               // 'treat' ','
       || lk == 10452               // 'try' ','
       || lk == 10455               // 'typeswitch' ','
       || lk == 10456               // 'union' ','
       || lk == 10457               // 'unordered' ','
       || lk == 10459               // 'validate' ','
       || lk == 10464               // 'where' ','
       || lk == 10468)              // 'xquery' ','
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 34:                        // '('
      lookahead2W(182);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 35:                        // '(#'
      lookahead2(166);              // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 46:                        // '//'
      lookahead2W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 53:                        // '<'
      lookahead2(164);              // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 54:                        // '<!--'
      lookahead2(3);                // DirCommentContents
      break;
    case 59:                        // '<?'
      lookahead2(0);                // PITarget
      break;
    case 65:                        // '?'
      lookahead2W(161);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
      break;
    case 67:                        // '@'
      lookahead2W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 69:                        // '['
      lookahead2W(183);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 73:                        // '``['
      lookahead2(1);                // StringConstructorChars
      break;
    case 101:                       // 'copy'
      lookahead2W(23);              // S^WS | '$' | '(:'
      break;
    case 131:                       // 'for'
      lookahead2W(199);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'tumbling' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
      break;
    case 148:                       // 'invoke'
      lookahead2W(68);              // S^WS | '(:' | 'updating'
      break;
    case 189:                       // 'rename'
      lookahead2W(109);             // S^WS | '(:' | 'json' | 'node'
      break;
    case 190:                       // 'replace'
      lookahead2W(114);             // S^WS | '(:' | 'node' | 'value'
      break;
    case 219:                       // 'validate'
      lookahead2W(205);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'lax' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 39:                        // '+'
    case 41:                        // '-'
      lookahead2W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 108:                       // 'delete'
    case 144:                       // 'insert'
      lookahead2W(130);             // S^WS | '(:' | 'json' | 'node' | 'nodes'
      break;
    case 164:                       // 'namespace'
    case 188:                       // 'processing-instruction'
      lookahead2W(193);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | '!' | '!=' |
                                    // '#' | '$' | '%' | '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 21:                        // Wildcard
    case 43:                        // '.'
    case 44:                        // '..'
    case 45:                        // '/'
      lookahead2W(190);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' |
                                    // '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | '``[' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'ascending' |
                                    // 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 198:                       // 'self'
      lookahead2W(196);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | '::' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'and'
    case 81:                        // 'array'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 97:                        // 'comment'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 114:                       // 'document'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 119:                       // 'empty-sequence'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 132:                       // 'function'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 139:                       // 'if'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 150:                       // 'item'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 159:                       // 'map'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 165:                       // 'namespace-node'
    case 166:                       // 'ne'
    case 170:                       // 'node'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 177:                       // 'ordered'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 206:                       // 'switch'
    case 207:                       // 'text'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
    case 216:                       // 'union'
    case 217:                       // 'unordered'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(192);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 290                   // '(' IntegerLiteral
     || lk == 295                   // '+' IntegerLiteral
     || lk == 297                   // '-' IntegerLiteral
     || lk == 301                   // '/' IntegerLiteral
     || lk == 302                   // '//' IntegerLiteral
     || lk == 321                   // '?' IntegerLiteral
     || lk == 325                   // '[' IntegerLiteral
     || lk == 447                   // 'return' IntegerLiteral
     || lk == 546                   // '(' DecimalLiteral
     || lk == 551                   // '+' DecimalLiteral
     || lk == 553                   // '-' DecimalLiteral
     || lk == 557                   // '/' DecimalLiteral
     || lk == 558                   // '//' DecimalLiteral
     || lk == 581                   // '[' DecimalLiteral
     || lk == 703                   // 'return' DecimalLiteral
     || lk == 802                   // '(' DoubleLiteral
     || lk == 807                   // '+' DoubleLiteral
     || lk == 809                   // '-' DoubleLiteral
     || lk == 813                   // '/' DoubleLiteral
     || lk == 814                   // '//' DoubleLiteral
     || lk == 837                   // '[' DoubleLiteral
     || lk == 959                   // 'return' DoubleLiteral
     || lk == 1058                  // '(' StringLiteral
     || lk == 1063                  // '+' StringLiteral
     || lk == 1065                  // '-' StringLiteral
     || lk == 1069                  // '/' StringLiteral
     || lk == 1070                  // '//' StringLiteral
     || lk == 1093                  // '[' StringLiteral
     || lk == 1215                  // 'return' StringLiteral
     || lk == 1311                  // '$' URIQualifiedName
     || lk == 1312                  // '%' URIQualifiedName
     || lk == 1314                  // '(' URIQualifiedName
     || lk == 1315                  // '(#' URIQualifiedName
     || lk == 1319                  // '+' URIQualifiedName
     || lk == 1321                  // '-' URIQualifiedName
     || lk == 1325                  // '/' URIQualifiedName
     || lk == 1326                  // '//' URIQualifiedName
     || lk == 1347                  // '@' URIQualifiedName
     || lk == 1349                  // '[' URIQualifiedName
     || lk == 1365                  // 'attribute' URIQualifiedName
     || lk == 1396                  // 'element' URIQualifiedName
     || lk == 1471                  // 'return' URIQualifiedName
     || lk == 3131                  // '<?' PITarget
     || lk == 3649                  // '?' NCName^Token
     || lk == 3748                  // 'namespace' NCName^Token
     || lk == 3772                  // 'processing-instruction' NCName^Token
     || lk == 3871                  // '$' QName^Token
     || lk == 3872                  // '%' QName^Token
     || lk == 3874                  // '(' QName^Token
     || lk == 3875                  // '(#' QName^Token
     || lk == 3879                  // '+' QName^Token
     || lk == 3881                  // '-' QName^Token
     || lk == 3885                  // '/' QName^Token
     || lk == 3886                  // '//' QName^Token
     || lk == 3893                  // '<' QName^Token
     || lk == 3907                  // '@' QName^Token
     || lk == 3909                  // '[' QName^Token
     || lk == 3925                  // 'attribute' QName^Token
     || lk == 3956                  // 'element' QName^Token
     || lk == 4031                  // 'return' QName^Token
     || lk == 4169                  // '``[' StringConstructorChars
     || lk == 4387                  // '(#' S
     || lk == 5410                  // '(' Wildcard
     || lk == 5415                  // '+' Wildcard
     || lk == 5417                  // '-' Wildcard
     || lk == 5421                  // '/' Wildcard
     || lk == 5422                  // '//' Wildcard
     || lk == 5443                  // '@' Wildcard
     || lk == 5445                  // '[' Wildcard
     || lk == 5567                  // 'return' Wildcard
     || lk == 5686                  // '<!--' DirCommentContents
     || lk == 6657                  // IntegerLiteral '!'
     || lk == 6658                  // DecimalLiteral '!'
     || lk == 6659                  // DoubleLiteral '!'
     || lk == 6660                  // StringLiteral '!'
     || lk == 6661                  // URIQualifiedName '!'
     || lk == 6671                  // QName^Token '!'
     || lk == 6677                  // Wildcard '!'
     || lk == 6699                  // '.' '!'
     || lk == 6700                  // '..' '!'
     || lk == 6701                  // '/' '!'
     || lk == 6733                  // 'ancestor' '!'
     || lk == 6734                  // 'ancestor-or-self' '!'
     || lk == 6735                  // 'and' '!'
     || lk == 6737                  // 'array' '!'
     || lk == 6739                  // 'ascending' '!'
     || lk == 6741                  // 'attribute' '!'
     || lk == 6747                  // 'case' '!'
     || lk == 6748                  // 'cast' '!'
     || lk == 6749                  // 'castable' '!'
     || lk == 6751                  // 'child' '!'
     || lk == 6752                  // 'collation' '!'
     || lk == 6753                  // 'comment' '!'
     || lk == 6759                  // 'count' '!'
     || lk == 6762                  // 'declare' '!'
     || lk == 6763                  // 'default' '!'
     || lk == 6765                  // 'descendant' '!'
     || lk == 6766                  // 'descendant-or-self' '!'
     || lk == 6767                  // 'descending' '!'
     || lk == 6769                  // 'div' '!'
     || lk == 6770                  // 'document' '!'
     || lk == 6771                  // 'document-node' '!'
     || lk == 6772                  // 'element' '!'
     || lk == 6773                  // 'else' '!'
     || lk == 6774                  // 'empty' '!'
     || lk == 6775                  // 'empty-sequence' '!'
     || lk == 6777                  // 'end' '!'
     || lk == 6778                  // 'eq' '!'
     || lk == 6779                  // 'every' '!'
     || lk == 6780                  // 'except' '!'
     || lk == 6785                  // 'following' '!'
     || lk == 6786                  // 'following-sibling' '!'
     || lk == 6787                  // 'for' '!'
     || lk == 6788                  // 'function' '!'
     || lk == 6789                  // 'ge' '!'
     || lk == 6791                  // 'group' '!'
     || lk == 6793                  // 'gt' '!'
     || lk == 6794                  // 'idiv' '!'
     || lk == 6795                  // 'if' '!'
     || lk == 6796                  // 'import' '!'
     || lk == 6801                  // 'instance' '!'
     || lk == 6802                  // 'intersect' '!'
     || lk == 6805                  // 'is' '!'
     || lk == 6806                  // 'item' '!'
     || lk == 6810                  // 'le' '!'
     || lk == 6812                  // 'let' '!'
     || lk == 6814                  // 'lt' '!'
     || lk == 6815                  // 'map' '!'
     || lk == 6817                  // 'mod' '!'
     || lk == 6819                  // 'module' '!'
     || lk == 6820                  // 'namespace' '!'
     || lk == 6821                  // 'namespace-node' '!'
     || lk == 6822                  // 'ne' '!'
     || lk == 6826                  // 'node' '!'
     || lk == 6829                  // 'only' '!'
     || lk == 6831                  // 'or' '!'
     || lk == 6832                  // 'order' '!'
     || lk == 6833                  // 'ordered' '!'
     || lk == 6835                  // 'parent' '!'
     || lk == 6840                  // 'preceding' '!'
     || lk == 6841                  // 'preceding-sibling' '!'
     || lk == 6844                  // 'processing-instruction' '!'
     || lk == 6847                  // 'return' '!'
     || lk == 6850                  // 'satisfies' '!'
     || lk == 6852                  // 'schema-attribute' '!'
     || lk == 6853                  // 'schema-element' '!'
     || lk == 6854                  // 'self' '!'
     || lk == 6857                  // 'some' '!'
     || lk == 6858                  // 'stable' '!'
     || lk == 6859                  // 'start' '!'
     || lk == 6862                  // 'switch' '!'
     || lk == 6863                  // 'text' '!'
     || lk == 6865                  // 'to' '!'
     || lk == 6867                  // 'treat' '!'
     || lk == 6868                  // 'try' '!'
     || lk == 6871                  // 'typeswitch' '!'
     || lk == 6872                  // 'union' '!'
     || lk == 6873                  // 'unordered' '!'
     || lk == 6875                  // 'validate' '!'
     || lk == 6880                  // 'where' '!'
     || lk == 6884                  // 'xquery' '!'
     || lk == 6913                  // IntegerLiteral '!='
     || lk == 6914                  // DecimalLiteral '!='
     || lk == 6915                  // DoubleLiteral '!='
     || lk == 6916                  // StringLiteral '!='
     || lk == 6917                  // URIQualifiedName '!='
     || lk == 6927                  // QName^Token '!='
     || lk == 6933                  // Wildcard '!='
     || lk == 6955                  // '.' '!='
     || lk == 6956                  // '..' '!='
     || lk == 6957                  // '/' '!='
     || lk == 6989                  // 'ancestor' '!='
     || lk == 6990                  // 'ancestor-or-self' '!='
     || lk == 6991                  // 'and' '!='
     || lk == 6993                  // 'array' '!='
     || lk == 6995                  // 'ascending' '!='
     || lk == 6997                  // 'attribute' '!='
     || lk == 7003                  // 'case' '!='
     || lk == 7004                  // 'cast' '!='
     || lk == 7005                  // 'castable' '!='
     || lk == 7007                  // 'child' '!='
     || lk == 7008                  // 'collation' '!='
     || lk == 7009                  // 'comment' '!='
     || lk == 7015                  // 'count' '!='
     || lk == 7018                  // 'declare' '!='
     || lk == 7019                  // 'default' '!='
     || lk == 7021                  // 'descendant' '!='
     || lk == 7022                  // 'descendant-or-self' '!='
     || lk == 7023                  // 'descending' '!='
     || lk == 7025                  // 'div' '!='
     || lk == 7026                  // 'document' '!='
     || lk == 7027                  // 'document-node' '!='
     || lk == 7028                  // 'element' '!='
     || lk == 7029                  // 'else' '!='
     || lk == 7030                  // 'empty' '!='
     || lk == 7031                  // 'empty-sequence' '!='
     || lk == 7033                  // 'end' '!='
     || lk == 7034                  // 'eq' '!='
     || lk == 7035                  // 'every' '!='
     || lk == 7036                  // 'except' '!='
     || lk == 7041                  // 'following' '!='
     || lk == 7042                  // 'following-sibling' '!='
     || lk == 7043                  // 'for' '!='
     || lk == 7044                  // 'function' '!='
     || lk == 7045                  // 'ge' '!='
     || lk == 7047                  // 'group' '!='
     || lk == 7049                  // 'gt' '!='
     || lk == 7050                  // 'idiv' '!='
     || lk == 7051                  // 'if' '!='
     || lk == 7052                  // 'import' '!='
     || lk == 7057                  // 'instance' '!='
     || lk == 7058                  // 'intersect' '!='
     || lk == 7061                  // 'is' '!='
     || lk == 7062                  // 'item' '!='
     || lk == 7066                  // 'le' '!='
     || lk == 7068                  // 'let' '!='
     || lk == 7070                  // 'lt' '!='
     || lk == 7071                  // 'map' '!='
     || lk == 7073                  // 'mod' '!='
     || lk == 7075                  // 'module' '!='
     || lk == 7076                  // 'namespace' '!='
     || lk == 7077                  // 'namespace-node' '!='
     || lk == 7078                  // 'ne' '!='
     || lk == 7082                  // 'node' '!='
     || lk == 7085                  // 'only' '!='
     || lk == 7087                  // 'or' '!='
     || lk == 7088                  // 'order' '!='
     || lk == 7089                  // 'ordered' '!='
     || lk == 7091                  // 'parent' '!='
     || lk == 7096                  // 'preceding' '!='
     || lk == 7097                  // 'preceding-sibling' '!='
     || lk == 7100                  // 'processing-instruction' '!='
     || lk == 7103                  // 'return' '!='
     || lk == 7106                  // 'satisfies' '!='
     || lk == 7108                  // 'schema-attribute' '!='
     || lk == 7109                  // 'schema-element' '!='
     || lk == 7110                  // 'self' '!='
     || lk == 7113                  // 'some' '!='
     || lk == 7114                  // 'stable' '!='
     || lk == 7115                  // 'start' '!='
     || lk == 7118                  // 'switch' '!='
     || lk == 7119                  // 'text' '!='
     || lk == 7121                  // 'to' '!='
     || lk == 7123                  // 'treat' '!='
     || lk == 7124                  // 'try' '!='
     || lk == 7127                  // 'typeswitch' '!='
     || lk == 7128                  // 'union' '!='
     || lk == 7129                  // 'unordered' '!='
     || lk == 7131                  // 'validate' '!='
     || lk == 7136                  // 'where' '!='
     || lk == 7140                  // 'xquery' '!='
     || lk == 7429                  // URIQualifiedName '#'
     || lk == 7439                  // QName^Token '#'
     || lk == 7501                  // 'ancestor' '#'
     || lk == 7502                  // 'ancestor-or-self' '#'
     || lk == 7503                  // 'and' '#'
     || lk == 7505                  // 'array' '#'
     || lk == 7507                  // 'ascending' '#'
     || lk == 7509                  // 'attribute' '#'
     || lk == 7515                  // 'case' '#'
     || lk == 7516                  // 'cast' '#'
     || lk == 7517                  // 'castable' '#'
     || lk == 7519                  // 'child' '#'
     || lk == 7520                  // 'collation' '#'
     || lk == 7521                  // 'comment' '#'
     || lk == 7527                  // 'count' '#'
     || lk == 7530                  // 'declare' '#'
     || lk == 7531                  // 'default' '#'
     || lk == 7533                  // 'descendant' '#'
     || lk == 7534                  // 'descendant-or-self' '#'
     || lk == 7535                  // 'descending' '#'
     || lk == 7537                  // 'div' '#'
     || lk == 7538                  // 'document' '#'
     || lk == 7539                  // 'document-node' '#'
     || lk == 7540                  // 'element' '#'
     || lk == 7541                  // 'else' '#'
     || lk == 7542                  // 'empty' '#'
     || lk == 7543                  // 'empty-sequence' '#'
     || lk == 7545                  // 'end' '#'
     || lk == 7546                  // 'eq' '#'
     || lk == 7547                  // 'every' '#'
     || lk == 7548                  // 'except' '#'
     || lk == 7553                  // 'following' '#'
     || lk == 7554                  // 'following-sibling' '#'
     || lk == 7555                  // 'for' '#'
     || lk == 7556                  // 'function' '#'
     || lk == 7557                  // 'ge' '#'
     || lk == 7559                  // 'group' '#'
     || lk == 7561                  // 'gt' '#'
     || lk == 7562                  // 'idiv' '#'
     || lk == 7563                  // 'if' '#'
     || lk == 7564                  // 'import' '#'
     || lk == 7569                  // 'instance' '#'
     || lk == 7570                  // 'intersect' '#'
     || lk == 7573                  // 'is' '#'
     || lk == 7574                  // 'item' '#'
     || lk == 7578                  // 'le' '#'
     || lk == 7580                  // 'let' '#'
     || lk == 7582                  // 'lt' '#'
     || lk == 7583                  // 'map' '#'
     || lk == 7585                  // 'mod' '#'
     || lk == 7587                  // 'module' '#'
     || lk == 7588                  // 'namespace' '#'
     || lk == 7589                  // 'namespace-node' '#'
     || lk == 7590                  // 'ne' '#'
     || lk == 7594                  // 'node' '#'
     || lk == 7597                  // 'only' '#'
     || lk == 7599                  // 'or' '#'
     || lk == 7600                  // 'order' '#'
     || lk == 7601                  // 'ordered' '#'
     || lk == 7603                  // 'parent' '#'
     || lk == 7608                  // 'preceding' '#'
     || lk == 7609                  // 'preceding-sibling' '#'
     || lk == 7612                  // 'processing-instruction' '#'
     || lk == 7615                  // 'return' '#'
     || lk == 7618                  // 'satisfies' '#'
     || lk == 7620                  // 'schema-attribute' '#'
     || lk == 7621                  // 'schema-element' '#'
     || lk == 7622                  // 'self' '#'
     || lk == 7625                  // 'some' '#'
     || lk == 7626                  // 'stable' '#'
     || lk == 7627                  // 'start' '#'
     || lk == 7630                  // 'switch' '#'
     || lk == 7631                  // 'text' '#'
     || lk == 7633                  // 'to' '#'
     || lk == 7635                  // 'treat' '#'
     || lk == 7636                  // 'try' '#'
     || lk == 7639                  // 'typeswitch' '#'
     || lk == 7640                  // 'union' '#'
     || lk == 7641                  // 'unordered' '#'
     || lk == 7643                  // 'validate' '#'
     || lk == 7648                  // 'where' '#'
     || lk == 7652                  // 'xquery' '#'
     || lk == 7970                  // '(' '$'
     || lk == 7975                  // '+' '$'
     || lk == 7977                  // '-' '$'
     || lk == 7981                  // '/' '$'
     || lk == 7982                  // '//' '$'
     || lk == 8005                  // '[' '$'
     || lk == 8037                  // 'copy' '$'
     || lk == 8059                  // 'every' '$'
     || lk == 8067                  // 'for' '$'
     || lk == 8092                  // 'let' '$'
     || lk == 8127                  // 'return' '$'
     || lk == 8137                  // 'some' '$'
     || lk == 8226                  // '(' '%'
     || lk == 8231                  // '+' '%'
     || lk == 8233                  // '-' '%'
     || lk == 8237                  // '/' '%'
     || lk == 8238                  // '//' '%'
     || lk == 8261                  // '[' '%'
     || lk == 8383                  // 'return' '%'
     || lk == 8705                  // IntegerLiteral '('
     || lk == 8706                  // DecimalLiteral '('
     || lk == 8707                  // DoubleLiteral '('
     || lk == 8708                  // StringLiteral '('
     || lk == 8709                  // URIQualifiedName '('
     || lk == 8719                  // QName^Token '('
     || lk == 8738                  // '(' '('
     || lk == 8743                  // '+' '('
     || lk == 8745                  // '-' '('
     || lk == 8747                  // '.' '('
     || lk == 8749                  // '/' '('
     || lk == 8750                  // '//' '('
     || lk == 8769                  // '?' '('
     || lk == 8773                  // '[' '('
     || lk == 8781                  // 'ancestor' '('
     || lk == 8782                  // 'ancestor-or-self' '('
     || lk == 8783                  // 'and' '('
     || lk == 8787                  // 'ascending' '('
     || lk == 8789                  // 'attribute' '('
     || lk == 8795                  // 'case' '('
     || lk == 8796                  // 'cast' '('
     || lk == 8797                  // 'castable' '('
     || lk == 8799                  // 'child' '('
     || lk == 8800                  // 'collation' '('
     || lk == 8801                  // 'comment' '('
     || lk == 8807                  // 'count' '('
     || lk == 8810                  // 'declare' '('
     || lk == 8811                  // 'default' '('
     || lk == 8813                  // 'descendant' '('
     || lk == 8814                  // 'descendant-or-self' '('
     || lk == 8815                  // 'descending' '('
     || lk == 8817                  // 'div' '('
     || lk == 8818                  // 'document' '('
     || lk == 8819                  // 'document-node' '('
     || lk == 8820                  // 'element' '('
     || lk == 8821                  // 'else' '('
     || lk == 8822                  // 'empty' '('
     || lk == 8825                  // 'end' '('
     || lk == 8826                  // 'eq' '('
     || lk == 8827                  // 'every' '('
     || lk == 8828                  // 'except' '('
     || lk == 8833                  // 'following' '('
     || lk == 8834                  // 'following-sibling' '('
     || lk == 8835                  // 'for' '('
     || lk == 8836                  // 'function' '('
     || lk == 8837                  // 'ge' '('
     || lk == 8839                  // 'group' '('
     || lk == 8841                  // 'gt' '('
     || lk == 8842                  // 'idiv' '('
     || lk == 8843                  // 'if' '('
     || lk == 8844                  // 'import' '('
     || lk == 8849                  // 'instance' '('
     || lk == 8850                  // 'intersect' '('
     || lk == 8853                  // 'is' '('
     || lk == 8858                  // 'le' '('
     || lk == 8860                  // 'let' '('
     || lk == 8862                  // 'lt' '('
     || lk == 8865                  // 'mod' '('
     || lk == 8867                  // 'module' '('
     || lk == 8868                  // 'namespace' '('
     || lk == 8869                  // 'namespace-node' '('
     || lk == 8870                  // 'ne' '('
     || lk == 8874                  // 'node' '('
     || lk == 8877                  // 'only' '('
     || lk == 8879                  // 'or' '('
     || lk == 8880                  // 'order' '('
     || lk == 8881                  // 'ordered' '('
     || lk == 8883                  // 'parent' '('
     || lk == 8888                  // 'preceding' '('
     || lk == 8889                  // 'preceding-sibling' '('
     || lk == 8892                  // 'processing-instruction' '('
     || lk == 8895                  // 'return' '('
     || lk == 8898                  // 'satisfies' '('
     || lk == 8900                  // 'schema-attribute' '('
     || lk == 8901                  // 'schema-element' '('
     || lk == 8902                  // 'self' '('
     || lk == 8905                  // 'some' '('
     || lk == 8906                  // 'stable' '('
     || lk == 8907                  // 'start' '('
     || lk == 8910                  // 'switch' '('
     || lk == 8911                  // 'text' '('
     || lk == 8913                  // 'to' '('
     || lk == 8915                  // 'treat' '('
     || lk == 8916                  // 'try' '('
     || lk == 8919                  // 'typeswitch' '('
     || lk == 8920                  // 'union' '('
     || lk == 8921                  // 'unordered' '('
     || lk == 8923                  // 'validate' '('
     || lk == 8928                  // 'where' '('
     || lk == 8932                  // 'xquery' '('
     || lk == 8994                  // '(' '(#'
     || lk == 8999                  // '+' '(#'
     || lk == 9001                  // '-' '(#'
     || lk == 9029                  // '[' '(#'
     || lk == 9151                  // 'return' '(#'
     || lk == 9506                  // '(' ')'
     || lk == 9729                  // IntegerLiteral '*'
     || lk == 9730                  // DecimalLiteral '*'
     || lk == 9731                  // DoubleLiteral '*'
     || lk == 9732                  // StringLiteral '*'
     || lk == 9733                  // URIQualifiedName '*'
     || lk == 9743                  // QName^Token '*'
     || lk == 9749                  // Wildcard '*'
     || lk == 9771                  // '.' '*'
     || lk == 9772                  // '..' '*'
     || lk == 9773                  // '/' '*'
     || lk == 9793                  // '?' '*'
     || lk == 9805                  // 'ancestor' '*'
     || lk == 9806                  // 'ancestor-or-self' '*'
     || lk == 9807                  // 'and' '*'
     || lk == 9809                  // 'array' '*'
     || lk == 9811                  // 'ascending' '*'
     || lk == 9813                  // 'attribute' '*'
     || lk == 9819                  // 'case' '*'
     || lk == 9820                  // 'cast' '*'
     || lk == 9821                  // 'castable' '*'
     || lk == 9823                  // 'child' '*'
     || lk == 9824                  // 'collation' '*'
     || lk == 9825                  // 'comment' '*'
     || lk == 9831                  // 'count' '*'
     || lk == 9834                  // 'declare' '*'
     || lk == 9835                  // 'default' '*'
     || lk == 9837                  // 'descendant' '*'
     || lk == 9838                  // 'descendant-or-self' '*'
     || lk == 9839                  // 'descending' '*'
     || lk == 9841                  // 'div' '*'
     || lk == 9842                  // 'document' '*'
     || lk == 9843                  // 'document-node' '*'
     || lk == 9844                  // 'element' '*'
     || lk == 9845                  // 'else' '*'
     || lk == 9846                  // 'empty' '*'
     || lk == 9847                  // 'empty-sequence' '*'
     || lk == 9849                  // 'end' '*'
     || lk == 9850                  // 'eq' '*'
     || lk == 9851                  // 'every' '*'
     || lk == 9852                  // 'except' '*'
     || lk == 9857                  // 'following' '*'
     || lk == 9858                  // 'following-sibling' '*'
     || lk == 9859                  // 'for' '*'
     || lk == 9860                  // 'function' '*'
     || lk == 9861                  // 'ge' '*'
     || lk == 9863                  // 'group' '*'
     || lk == 9865                  // 'gt' '*'
     || lk == 9866                  // 'idiv' '*'
     || lk == 9867                  // 'if' '*'
     || lk == 9868                  // 'import' '*'
     || lk == 9873                  // 'instance' '*'
     || lk == 9874                  // 'intersect' '*'
     || lk == 9877                  // 'is' '*'
     || lk == 9878                  // 'item' '*'
     || lk == 9882                  // 'le' '*'
     || lk == 9884                  // 'let' '*'
     || lk == 9886                  // 'lt' '*'
     || lk == 9887                  // 'map' '*'
     || lk == 9889                  // 'mod' '*'
     || lk == 9891                  // 'module' '*'
     || lk == 9892                  // 'namespace' '*'
     || lk == 9893                  // 'namespace-node' '*'
     || lk == 9894                  // 'ne' '*'
     || lk == 9898                  // 'node' '*'
     || lk == 9901                  // 'only' '*'
     || lk == 9903                  // 'or' '*'
     || lk == 9904                  // 'order' '*'
     || lk == 9905                  // 'ordered' '*'
     || lk == 9907                  // 'parent' '*'
     || lk == 9912                  // 'preceding' '*'
     || lk == 9913                  // 'preceding-sibling' '*'
     || lk == 9916                  // 'processing-instruction' '*'
     || lk == 9919                  // 'return' '*'
     || lk == 9922                  // 'satisfies' '*'
     || lk == 9924                  // 'schema-attribute' '*'
     || lk == 9925                  // 'schema-element' '*'
     || lk == 9926                  // 'self' '*'
     || lk == 9929                  // 'some' '*'
     || lk == 9930                  // 'stable' '*'
     || lk == 9931                  // 'start' '*'
     || lk == 9934                  // 'switch' '*'
     || lk == 9935                  // 'text' '*'
     || lk == 9937                  // 'to' '*'
     || lk == 9939                  // 'treat' '*'
     || lk == 9940                  // 'try' '*'
     || lk == 9943                  // 'typeswitch' '*'
     || lk == 9944                  // 'union' '*'
     || lk == 9945                  // 'unordered' '*'
     || lk == 9947                  // 'validate' '*'
     || lk == 9952                  // 'where' '*'
     || lk == 9956                  // 'xquery' '*'
     || lk == 9985                  // IntegerLiteral '+'
     || lk == 9986                  // DecimalLiteral '+'
     || lk == 9987                  // DoubleLiteral '+'
     || lk == 9988                  // StringLiteral '+'
     || lk == 9989                  // URIQualifiedName '+'
     || lk == 9999                  // QName^Token '+'
     || lk == 10005                 // Wildcard '+'
     || lk == 10018                 // '(' '+'
     || lk == 10023                 // '+' '+'
     || lk == 10025                 // '-' '+'
     || lk == 10027                 // '.' '+'
     || lk == 10028                 // '..' '+'
     || lk == 10029                 // '/' '+'
     || lk == 10053                 // '[' '+'
     || lk == 10061                 // 'ancestor' '+'
     || lk == 10062                 // 'ancestor-or-self' '+'
     || lk == 10063                 // 'and' '+'
     || lk == 10065                 // 'array' '+'
     || lk == 10067                 // 'ascending' '+'
     || lk == 10069                 // 'attribute' '+'
     || lk == 10075                 // 'case' '+'
     || lk == 10076                 // 'cast' '+'
     || lk == 10077                 // 'castable' '+'
     || lk == 10079                 // 'child' '+'
     || lk == 10080                 // 'collation' '+'
     || lk == 10081                 // 'comment' '+'
     || lk == 10087                 // 'count' '+'
     || lk == 10090                 // 'declare' '+'
     || lk == 10091                 // 'default' '+'
     || lk == 10093                 // 'descendant' '+'
     || lk == 10094                 // 'descendant-or-self' '+'
     || lk == 10095                 // 'descending' '+'
     || lk == 10097                 // 'div' '+'
     || lk == 10098                 // 'document' '+'
     || lk == 10099                 // 'document-node' '+'
     || lk == 10100                 // 'element' '+'
     || lk == 10101                 // 'else' '+'
     || lk == 10102                 // 'empty' '+'
     || lk == 10103                 // 'empty-sequence' '+'
     || lk == 10105                 // 'end' '+'
     || lk == 10106                 // 'eq' '+'
     || lk == 10107                 // 'every' '+'
     || lk == 10108                 // 'except' '+'
     || lk == 10113                 // 'following' '+'
     || lk == 10114                 // 'following-sibling' '+'
     || lk == 10115                 // 'for' '+'
     || lk == 10116                 // 'function' '+'
     || lk == 10117                 // 'ge' '+'
     || lk == 10119                 // 'group' '+'
     || lk == 10121                 // 'gt' '+'
     || lk == 10122                 // 'idiv' '+'
     || lk == 10123                 // 'if' '+'
     || lk == 10124                 // 'import' '+'
     || lk == 10129                 // 'instance' '+'
     || lk == 10130                 // 'intersect' '+'
     || lk == 10133                 // 'is' '+'
     || lk == 10134                 // 'item' '+'
     || lk == 10138                 // 'le' '+'
     || lk == 10140                 // 'let' '+'
     || lk == 10142                 // 'lt' '+'
     || lk == 10143                 // 'map' '+'
     || lk == 10145                 // 'mod' '+'
     || lk == 10147                 // 'module' '+'
     || lk == 10148                 // 'namespace' '+'
     || lk == 10149                 // 'namespace-node' '+'
     || lk == 10150                 // 'ne' '+'
     || lk == 10154                 // 'node' '+'
     || lk == 10157                 // 'only' '+'
     || lk == 10159                 // 'or' '+'
     || lk == 10160                 // 'order' '+'
     || lk == 10161                 // 'ordered' '+'
     || lk == 10163                 // 'parent' '+'
     || lk == 10168                 // 'preceding' '+'
     || lk == 10169                 // 'preceding-sibling' '+'
     || lk == 10172                 // 'processing-instruction' '+'
     || lk == 10175                 // 'return' '+'
     || lk == 10178                 // 'satisfies' '+'
     || lk == 10180                 // 'schema-attribute' '+'
     || lk == 10181                 // 'schema-element' '+'
     || lk == 10182                 // 'self' '+'
     || lk == 10185                 // 'some' '+'
     || lk == 10186                 // 'stable' '+'
     || lk == 10187                 // 'start' '+'
     || lk == 10190                 // 'switch' '+'
     || lk == 10191                 // 'text' '+'
     || lk == 10193                 // 'to' '+'
     || lk == 10195                 // 'treat' '+'
     || lk == 10196                 // 'try' '+'
     || lk == 10199                 // 'typeswitch' '+'
     || lk == 10200                 // 'union' '+'
     || lk == 10201                 // 'unordered' '+'
     || lk == 10203                 // 'validate' '+'
     || lk == 10208                 // 'where' '+'
     || lk == 10212                 // 'xquery' '+'
     || lk == 10497                 // IntegerLiteral '-'
     || lk == 10498                 // DecimalLiteral '-'
     || lk == 10499                 // DoubleLiteral '-'
     || lk == 10500                 // StringLiteral '-'
     || lk == 10501                 // URIQualifiedName '-'
     || lk == 10511                 // QName^Token '-'
     || lk == 10517                 // Wildcard '-'
     || lk == 10530                 // '(' '-'
     || lk == 10535                 // '+' '-'
     || lk == 10537                 // '-' '-'
     || lk == 10539                 // '.' '-'
     || lk == 10540                 // '..' '-'
     || lk == 10541                 // '/' '-'
     || lk == 10565                 // '[' '-'
     || lk == 10573                 // 'ancestor' '-'
     || lk == 10574                 // 'ancestor-or-self' '-'
     || lk == 10575                 // 'and' '-'
     || lk == 10577                 // 'array' '-'
     || lk == 10579                 // 'ascending' '-'
     || lk == 10581                 // 'attribute' '-'
     || lk == 10587                 // 'case' '-'
     || lk == 10588                 // 'cast' '-'
     || lk == 10589                 // 'castable' '-'
     || lk == 10591                 // 'child' '-'
     || lk == 10592                 // 'collation' '-'
     || lk == 10593                 // 'comment' '-'
     || lk == 10599                 // 'count' '-'
     || lk == 10602                 // 'declare' '-'
     || lk == 10603                 // 'default' '-'
     || lk == 10605                 // 'descendant' '-'
     || lk == 10606                 // 'descendant-or-self' '-'
     || lk == 10607                 // 'descending' '-'
     || lk == 10609                 // 'div' '-'
     || lk == 10610                 // 'document' '-'
     || lk == 10611                 // 'document-node' '-'
     || lk == 10612                 // 'element' '-'
     || lk == 10613                 // 'else' '-'
     || lk == 10614                 // 'empty' '-'
     || lk == 10615                 // 'empty-sequence' '-'
     || lk == 10617                 // 'end' '-'
     || lk == 10618                 // 'eq' '-'
     || lk == 10619                 // 'every' '-'
     || lk == 10620                 // 'except' '-'
     || lk == 10625                 // 'following' '-'
     || lk == 10626                 // 'following-sibling' '-'
     || lk == 10627                 // 'for' '-'
     || lk == 10628                 // 'function' '-'
     || lk == 10629                 // 'ge' '-'
     || lk == 10631                 // 'group' '-'
     || lk == 10633                 // 'gt' '-'
     || lk == 10634                 // 'idiv' '-'
     || lk == 10635                 // 'if' '-'
     || lk == 10636                 // 'import' '-'
     || lk == 10641                 // 'instance' '-'
     || lk == 10642                 // 'intersect' '-'
     || lk == 10645                 // 'is' '-'
     || lk == 10646                 // 'item' '-'
     || lk == 10650                 // 'le' '-'
     || lk == 10652                 // 'let' '-'
     || lk == 10654                 // 'lt' '-'
     || lk == 10655                 // 'map' '-'
     || lk == 10657                 // 'mod' '-'
     || lk == 10659                 // 'module' '-'
     || lk == 10660                 // 'namespace' '-'
     || lk == 10661                 // 'namespace-node' '-'
     || lk == 10662                 // 'ne' '-'
     || lk == 10666                 // 'node' '-'
     || lk == 10669                 // 'only' '-'
     || lk == 10671                 // 'or' '-'
     || lk == 10672                 // 'order' '-'
     || lk == 10673                 // 'ordered' '-'
     || lk == 10675                 // 'parent' '-'
     || lk == 10680                 // 'preceding' '-'
     || lk == 10681                 // 'preceding-sibling' '-'
     || lk == 10684                 // 'processing-instruction' '-'
     || lk == 10687                 // 'return' '-'
     || lk == 10690                 // 'satisfies' '-'
     || lk == 10692                 // 'schema-attribute' '-'
     || lk == 10693                 // 'schema-element' '-'
     || lk == 10694                 // 'self' '-'
     || lk == 10697                 // 'some' '-'
     || lk == 10698                 // 'stable' '-'
     || lk == 10699                 // 'start' '-'
     || lk == 10702                 // 'switch' '-'
     || lk == 10703                 // 'text' '-'
     || lk == 10705                 // 'to' '-'
     || lk == 10707                 // 'treat' '-'
     || lk == 10708                 // 'try' '-'
     || lk == 10711                 // 'typeswitch' '-'
     || lk == 10712                 // 'union' '-'
     || lk == 10713                 // 'unordered' '-'
     || lk == 10715                 // 'validate' '-'
     || lk == 10720                 // 'where' '-'
     || lk == 10724                 // 'xquery' '-'
     || lk == 11042                 // '(' '.'
     || lk == 11047                 // '+' '.'
     || lk == 11049                 // '-' '.'
     || lk == 11053                 // '/' '.'
     || lk == 11054                 // '//' '.'
     || lk == 11077                 // '[' '.'
     || lk == 11199                 // 'return' '.'
     || lk == 11298                 // '(' '..'
     || lk == 11303                 // '+' '..'
     || lk == 11305                 // '-' '..'
     || lk == 11309                 // '/' '..'
     || lk == 11310                 // '//' '..'
     || lk == 11333                 // '[' '..'
     || lk == 11455                 // 'return' '..'
     || lk == 11521                 // IntegerLiteral '/'
     || lk == 11522                 // DecimalLiteral '/'
     || lk == 11523                 // DoubleLiteral '/'
     || lk == 11524                 // StringLiteral '/'
     || lk == 11525                 // URIQualifiedName '/'
     || lk == 11535                 // QName^Token '/'
     || lk == 11541                 // Wildcard '/'
     || lk == 11554                 // '(' '/'
     || lk == 11559                 // '+' '/'
     || lk == 11561                 // '-' '/'
     || lk == 11563                 // '.' '/'
     || lk == 11564                 // '..' '/'
     || lk == 11589                 // '[' '/'
     || lk == 11597                 // 'ancestor' '/'
     || lk == 11598                 // 'ancestor-or-self' '/'
     || lk == 11599                 // 'and' '/'
     || lk == 11601                 // 'array' '/'
     || lk == 11603                 // 'ascending' '/'
     || lk == 11605                 // 'attribute' '/'
     || lk == 11611                 // 'case' '/'
     || lk == 11612                 // 'cast' '/'
     || lk == 11613                 // 'castable' '/'
     || lk == 11615                 // 'child' '/'
     || lk == 11616                 // 'collation' '/'
     || lk == 11617                 // 'comment' '/'
     || lk == 11623                 // 'count' '/'
     || lk == 11626                 // 'declare' '/'
     || lk == 11627                 // 'default' '/'
     || lk == 11629                 // 'descendant' '/'
     || lk == 11630                 // 'descendant-or-self' '/'
     || lk == 11631                 // 'descending' '/'
     || lk == 11633                 // 'div' '/'
     || lk == 11634                 // 'document' '/'
     || lk == 11635                 // 'document-node' '/'
     || lk == 11636                 // 'element' '/'
     || lk == 11637                 // 'else' '/'
     || lk == 11638                 // 'empty' '/'
     || lk == 11639                 // 'empty-sequence' '/'
     || lk == 11641                 // 'end' '/'
     || lk == 11642                 // 'eq' '/'
     || lk == 11643                 // 'every' '/'
     || lk == 11644                 // 'except' '/'
     || lk == 11649                 // 'following' '/'
     || lk == 11650                 // 'following-sibling' '/'
     || lk == 11651                 // 'for' '/'
     || lk == 11652                 // 'function' '/'
     || lk == 11653                 // 'ge' '/'
     || lk == 11655                 // 'group' '/'
     || lk == 11657                 // 'gt' '/'
     || lk == 11658                 // 'idiv' '/'
     || lk == 11659                 // 'if' '/'
     || lk == 11660                 // 'import' '/'
     || lk == 11665                 // 'instance' '/'
     || lk == 11666                 // 'intersect' '/'
     || lk == 11669                 // 'is' '/'
     || lk == 11670                 // 'item' '/'
     || lk == 11674                 // 'le' '/'
     || lk == 11676                 // 'let' '/'
     || lk == 11678                 // 'lt' '/'
     || lk == 11679                 // 'map' '/'
     || lk == 11681                 // 'mod' '/'
     || lk == 11683                 // 'module' '/'
     || lk == 11684                 // 'namespace' '/'
     || lk == 11685                 // 'namespace-node' '/'
     || lk == 11686                 // 'ne' '/'
     || lk == 11690                 // 'node' '/'
     || lk == 11693                 // 'only' '/'
     || lk == 11695                 // 'or' '/'
     || lk == 11696                 // 'order' '/'
     || lk == 11697                 // 'ordered' '/'
     || lk == 11699                 // 'parent' '/'
     || lk == 11704                 // 'preceding' '/'
     || lk == 11705                 // 'preceding-sibling' '/'
     || lk == 11708                 // 'processing-instruction' '/'
     || lk == 11711                 // 'return' '/'
     || lk == 11714                 // 'satisfies' '/'
     || lk == 11716                 // 'schema-attribute' '/'
     || lk == 11717                 // 'schema-element' '/'
     || lk == 11718                 // 'self' '/'
     || lk == 11721                 // 'some' '/'
     || lk == 11722                 // 'stable' '/'
     || lk == 11723                 // 'start' '/'
     || lk == 11726                 // 'switch' '/'
     || lk == 11727                 // 'text' '/'
     || lk == 11729                 // 'to' '/'
     || lk == 11731                 // 'treat' '/'
     || lk == 11732                 // 'try' '/'
     || lk == 11735                 // 'typeswitch' '/'
     || lk == 11736                 // 'union' '/'
     || lk == 11737                 // 'unordered' '/'
     || lk == 11739                 // 'validate' '/'
     || lk == 11744                 // 'where' '/'
     || lk == 11748                 // 'xquery' '/'
     || lk == 11777                 // IntegerLiteral '//'
     || lk == 11778                 // DecimalLiteral '//'
     || lk == 11779                 // DoubleLiteral '//'
     || lk == 11780                 // StringLiteral '//'
     || lk == 11781                 // URIQualifiedName '//'
     || lk == 11791                 // QName^Token '//'
     || lk == 11797                 // Wildcard '//'
     || lk == 11810                 // '(' '//'
     || lk == 11815                 // '+' '//'
     || lk == 11817                 // '-' '//'
     || lk == 11819                 // '.' '//'
     || lk == 11820                 // '..' '//'
     || lk == 11845                 // '[' '//'
     || lk == 11853                 // 'ancestor' '//'
     || lk == 11854                 // 'ancestor-or-self' '//'
     || lk == 11855                 // 'and' '//'
     || lk == 11857                 // 'array' '//'
     || lk == 11859                 // 'ascending' '//'
     || lk == 11861                 // 'attribute' '//'
     || lk == 11867                 // 'case' '//'
     || lk == 11868                 // 'cast' '//'
     || lk == 11869                 // 'castable' '//'
     || lk == 11871                 // 'child' '//'
     || lk == 11872                 // 'collation' '//'
     || lk == 11873                 // 'comment' '//'
     || lk == 11879                 // 'count' '//'
     || lk == 11882                 // 'declare' '//'
     || lk == 11883                 // 'default' '//'
     || lk == 11885                 // 'descendant' '//'
     || lk == 11886                 // 'descendant-or-self' '//'
     || lk == 11887                 // 'descending' '//'
     || lk == 11889                 // 'div' '//'
     || lk == 11890                 // 'document' '//'
     || lk == 11891                 // 'document-node' '//'
     || lk == 11892                 // 'element' '//'
     || lk == 11893                 // 'else' '//'
     || lk == 11894                 // 'empty' '//'
     || lk == 11895                 // 'empty-sequence' '//'
     || lk == 11897                 // 'end' '//'
     || lk == 11898                 // 'eq' '//'
     || lk == 11899                 // 'every' '//'
     || lk == 11900                 // 'except' '//'
     || lk == 11905                 // 'following' '//'
     || lk == 11906                 // 'following-sibling' '//'
     || lk == 11907                 // 'for' '//'
     || lk == 11908                 // 'function' '//'
     || lk == 11909                 // 'ge' '//'
     || lk == 11911                 // 'group' '//'
     || lk == 11913                 // 'gt' '//'
     || lk == 11914                 // 'idiv' '//'
     || lk == 11915                 // 'if' '//'
     || lk == 11916                 // 'import' '//'
     || lk == 11921                 // 'instance' '//'
     || lk == 11922                 // 'intersect' '//'
     || lk == 11925                 // 'is' '//'
     || lk == 11926                 // 'item' '//'
     || lk == 11930                 // 'le' '//'
     || lk == 11932                 // 'let' '//'
     || lk == 11934                 // 'lt' '//'
     || lk == 11935                 // 'map' '//'
     || lk == 11937                 // 'mod' '//'
     || lk == 11939                 // 'module' '//'
     || lk == 11940                 // 'namespace' '//'
     || lk == 11941                 // 'namespace-node' '//'
     || lk == 11942                 // 'ne' '//'
     || lk == 11946                 // 'node' '//'
     || lk == 11949                 // 'only' '//'
     || lk == 11951                 // 'or' '//'
     || lk == 11952                 // 'order' '//'
     || lk == 11953                 // 'ordered' '//'
     || lk == 11955                 // 'parent' '//'
     || lk == 11960                 // 'preceding' '//'
     || lk == 11961                 // 'preceding-sibling' '//'
     || lk == 11964                 // 'processing-instruction' '//'
     || lk == 11967                 // 'return' '//'
     || lk == 11970                 // 'satisfies' '//'
     || lk == 11972                 // 'schema-attribute' '//'
     || lk == 11973                 // 'schema-element' '//'
     || lk == 11974                 // 'self' '//'
     || lk == 11977                 // 'some' '//'
     || lk == 11978                 // 'stable' '//'
     || lk == 11979                 // 'start' '//'
     || lk == 11982                 // 'switch' '//'
     || lk == 11983                 // 'text' '//'
     || lk == 11985                 // 'to' '//'
     || lk == 11987                 // 'treat' '//'
     || lk == 11988                 // 'try' '//'
     || lk == 11991                 // 'typeswitch' '//'
     || lk == 11992                 // 'union' '//'
     || lk == 11993                 // 'unordered' '//'
     || lk == 11995                 // 'validate' '//'
     || lk == 12000                 // 'where' '//'
     || lk == 12004                 // 'xquery' '//'
     || lk == 12877                 // 'ancestor' '::'
     || lk == 12878                 // 'ancestor-or-self' '::'
     || lk == 12885                 // 'attribute' '::'
     || lk == 12895                 // 'child' '::'
     || lk == 12909                 // 'descendant' '::'
     || lk == 12910                 // 'descendant-or-self' '::'
     || lk == 12929                 // 'following' '::'
     || lk == 12930                 // 'following-sibling' '::'
     || lk == 12979                 // 'parent' '::'
     || lk == 12984                 // 'preceding' '::'
     || lk == 12985                 // 'preceding-sibling' '::'
     || lk == 12998                 // 'self' '::'
     || lk == 13313                 // IntegerLiteral ';'
     || lk == 13314                 // DecimalLiteral ';'
     || lk == 13315                 // DoubleLiteral ';'
     || lk == 13316                 // StringLiteral ';'
     || lk == 13317                 // URIQualifiedName ';'
     || lk == 13327                 // QName^Token ';'
     || lk == 13333                 // Wildcard ';'
     || lk == 13355                 // '.' ';'
     || lk == 13356                 // '..' ';'
     || lk == 13357                 // '/' ';'
     || lk == 13389                 // 'ancestor' ';'
     || lk == 13390                 // 'ancestor-or-self' ';'
     || lk == 13391                 // 'and' ';'
     || lk == 13393                 // 'array' ';'
     || lk == 13395                 // 'ascending' ';'
     || lk == 13397                 // 'attribute' ';'
     || lk == 13403                 // 'case' ';'
     || lk == 13404                 // 'cast' ';'
     || lk == 13405                 // 'castable' ';'
     || lk == 13407                 // 'child' ';'
     || lk == 13408                 // 'collation' ';'
     || lk == 13409                 // 'comment' ';'
     || lk == 13415                 // 'count' ';'
     || lk == 13418                 // 'declare' ';'
     || lk == 13419                 // 'default' ';'
     || lk == 13421                 // 'descendant' ';'
     || lk == 13422                 // 'descendant-or-self' ';'
     || lk == 13423                 // 'descending' ';'
     || lk == 13425                 // 'div' ';'
     || lk == 13426                 // 'document' ';'
     || lk == 13427                 // 'document-node' ';'
     || lk == 13428                 // 'element' ';'
     || lk == 13429                 // 'else' ';'
     || lk == 13430                 // 'empty' ';'
     || lk == 13431                 // 'empty-sequence' ';'
     || lk == 13433                 // 'end' ';'
     || lk == 13434                 // 'eq' ';'
     || lk == 13435                 // 'every' ';'
     || lk == 13436                 // 'except' ';'
     || lk == 13441                 // 'following' ';'
     || lk == 13442                 // 'following-sibling' ';'
     || lk == 13443                 // 'for' ';'
     || lk == 13444                 // 'function' ';'
     || lk == 13445                 // 'ge' ';'
     || lk == 13447                 // 'group' ';'
     || lk == 13449                 // 'gt' ';'
     || lk == 13450                 // 'idiv' ';'
     || lk == 13451                 // 'if' ';'
     || lk == 13452                 // 'import' ';'
     || lk == 13457                 // 'instance' ';'
     || lk == 13458                 // 'intersect' ';'
     || lk == 13461                 // 'is' ';'
     || lk == 13462                 // 'item' ';'
     || lk == 13466                 // 'le' ';'
     || lk == 13468                 // 'let' ';'
     || lk == 13470                 // 'lt' ';'
     || lk == 13471                 // 'map' ';'
     || lk == 13473                 // 'mod' ';'
     || lk == 13475                 // 'module' ';'
     || lk == 13476                 // 'namespace' ';'
     || lk == 13477                 // 'namespace-node' ';'
     || lk == 13478                 // 'ne' ';'
     || lk == 13482                 // 'node' ';'
     || lk == 13485                 // 'only' ';'
     || lk == 13487                 // 'or' ';'
     || lk == 13488                 // 'order' ';'
     || lk == 13489                 // 'ordered' ';'
     || lk == 13491                 // 'parent' ';'
     || lk == 13496                 // 'preceding' ';'
     || lk == 13497                 // 'preceding-sibling' ';'
     || lk == 13500                 // 'processing-instruction' ';'
     || lk == 13503                 // 'return' ';'
     || lk == 13506                 // 'satisfies' ';'
     || lk == 13508                 // 'schema-attribute' ';'
     || lk == 13509                 // 'schema-element' ';'
     || lk == 13510                 // 'self' ';'
     || lk == 13513                 // 'some' ';'
     || lk == 13514                 // 'stable' ';'
     || lk == 13515                 // 'start' ';'
     || lk == 13518                 // 'switch' ';'
     || lk == 13519                 // 'text' ';'
     || lk == 13521                 // 'to' ';'
     || lk == 13523                 // 'treat' ';'
     || lk == 13524                 // 'try' ';'
     || lk == 13527                 // 'typeswitch' ';'
     || lk == 13528                 // 'union' ';'
     || lk == 13529                 // 'unordered' ';'
     || lk == 13531                 // 'validate' ';'
     || lk == 13536                 // 'where' ';'
     || lk == 13540                 // 'xquery' ';'
     || lk == 13569                 // IntegerLiteral '<'
     || lk == 13570                 // DecimalLiteral '<'
     || lk == 13571                 // DoubleLiteral '<'
     || lk == 13572                 // StringLiteral '<'
     || lk == 13573                 // URIQualifiedName '<'
     || lk == 13583                 // QName^Token '<'
     || lk == 13589                 // Wildcard '<'
     || lk == 13602                 // '(' '<'
     || lk == 13607                 // '+' '<'
     || lk == 13609                 // '-' '<'
     || lk == 13611                 // '.' '<'
     || lk == 13612                 // '..' '<'
     || lk == 13613                 // '/' '<'
     || lk == 13614                 // '//' '<'
     || lk == 13637                 // '[' '<'
     || lk == 13645                 // 'ancestor' '<'
     || lk == 13646                 // 'ancestor-or-self' '<'
     || lk == 13647                 // 'and' '<'
     || lk == 13649                 // 'array' '<'
     || lk == 13651                 // 'ascending' '<'
     || lk == 13653                 // 'attribute' '<'
     || lk == 13659                 // 'case' '<'
     || lk == 13660                 // 'cast' '<'
     || lk == 13661                 // 'castable' '<'
     || lk == 13663                 // 'child' '<'
     || lk == 13664                 // 'collation' '<'
     || lk == 13665                 // 'comment' '<'
     || lk == 13671                 // 'count' '<'
     || lk == 13674                 // 'declare' '<'
     || lk == 13675                 // 'default' '<'
     || lk == 13677                 // 'descendant' '<'
     || lk == 13678                 // 'descendant-or-self' '<'
     || lk == 13679                 // 'descending' '<'
     || lk == 13681                 // 'div' '<'
     || lk == 13682                 // 'document' '<'
     || lk == 13683                 // 'document-node' '<'
     || lk == 13684                 // 'element' '<'
     || lk == 13685                 // 'else' '<'
     || lk == 13686                 // 'empty' '<'
     || lk == 13687                 // 'empty-sequence' '<'
     || lk == 13689                 // 'end' '<'
     || lk == 13690                 // 'eq' '<'
     || lk == 13691                 // 'every' '<'
     || lk == 13692                 // 'except' '<'
     || lk == 13697                 // 'following' '<'
     || lk == 13698                 // 'following-sibling' '<'
     || lk == 13699                 // 'for' '<'
     || lk == 13700                 // 'function' '<'
     || lk == 13701                 // 'ge' '<'
     || lk == 13703                 // 'group' '<'
     || lk == 13705                 // 'gt' '<'
     || lk == 13706                 // 'idiv' '<'
     || lk == 13707                 // 'if' '<'
     || lk == 13708                 // 'import' '<'
     || lk == 13713                 // 'instance' '<'
     || lk == 13714                 // 'intersect' '<'
     || lk == 13717                 // 'is' '<'
     || lk == 13718                 // 'item' '<'
     || lk == 13722                 // 'le' '<'
     || lk == 13724                 // 'let' '<'
     || lk == 13726                 // 'lt' '<'
     || lk == 13727                 // 'map' '<'
     || lk == 13729                 // 'mod' '<'
     || lk == 13731                 // 'module' '<'
     || lk == 13732                 // 'namespace' '<'
     || lk == 13733                 // 'namespace-node' '<'
     || lk == 13734                 // 'ne' '<'
     || lk == 13738                 // 'node' '<'
     || lk == 13741                 // 'only' '<'
     || lk == 13743                 // 'or' '<'
     || lk == 13744                 // 'order' '<'
     || lk == 13745                 // 'ordered' '<'
     || lk == 13747                 // 'parent' '<'
     || lk == 13752                 // 'preceding' '<'
     || lk == 13753                 // 'preceding-sibling' '<'
     || lk == 13756                 // 'processing-instruction' '<'
     || lk == 13759                 // 'return' '<'
     || lk == 13762                 // 'satisfies' '<'
     || lk == 13764                 // 'schema-attribute' '<'
     || lk == 13765                 // 'schema-element' '<'
     || lk == 13766                 // 'self' '<'
     || lk == 13769                 // 'some' '<'
     || lk == 13770                 // 'stable' '<'
     || lk == 13771                 // 'start' '<'
     || lk == 13774                 // 'switch' '<'
     || lk == 13775                 // 'text' '<'
     || lk == 13777                 // 'to' '<'
     || lk == 13779                 // 'treat' '<'
     || lk == 13780                 // 'try' '<'
     || lk == 13783                 // 'typeswitch' '<'
     || lk == 13784                 // 'union' '<'
     || lk == 13785                 // 'unordered' '<'
     || lk == 13787                 // 'validate' '<'
     || lk == 13792                 // 'where' '<'
     || lk == 13796                 // 'xquery' '<'
     || lk == 13858                 // '(' '<!--'
     || lk == 13863                 // '+' '<!--'
     || lk == 13865                 // '-' '<!--'
     || lk == 13869                 // '/' '<!--'
     || lk == 13870                 // '//' '<!--'
     || lk == 13893                 // '[' '<!--'
     || lk == 14015                 // 'return' '<!--'
     || lk == 14593                 // IntegerLiteral '<<'
     || lk == 14594                 // DecimalLiteral '<<'
     || lk == 14595                 // DoubleLiteral '<<'
     || lk == 14596                 // StringLiteral '<<'
     || lk == 14597                 // URIQualifiedName '<<'
     || lk == 14607                 // QName^Token '<<'
     || lk == 14613                 // Wildcard '<<'
     || lk == 14635                 // '.' '<<'
     || lk == 14636                 // '..' '<<'
     || lk == 14637                 // '/' '<<'
     || lk == 14669                 // 'ancestor' '<<'
     || lk == 14670                 // 'ancestor-or-self' '<<'
     || lk == 14671                 // 'and' '<<'
     || lk == 14673                 // 'array' '<<'
     || lk == 14675                 // 'ascending' '<<'
     || lk == 14677                 // 'attribute' '<<'
     || lk == 14683                 // 'case' '<<'
     || lk == 14684                 // 'cast' '<<'
     || lk == 14685                 // 'castable' '<<'
     || lk == 14687                 // 'child' '<<'
     || lk == 14688                 // 'collation' '<<'
     || lk == 14689                 // 'comment' '<<'
     || lk == 14695                 // 'count' '<<'
     || lk == 14698                 // 'declare' '<<'
     || lk == 14699                 // 'default' '<<'
     || lk == 14701                 // 'descendant' '<<'
     || lk == 14702                 // 'descendant-or-self' '<<'
     || lk == 14703                 // 'descending' '<<'
     || lk == 14705                 // 'div' '<<'
     || lk == 14706                 // 'document' '<<'
     || lk == 14707                 // 'document-node' '<<'
     || lk == 14708                 // 'element' '<<'
     || lk == 14709                 // 'else' '<<'
     || lk == 14710                 // 'empty' '<<'
     || lk == 14711                 // 'empty-sequence' '<<'
     || lk == 14713                 // 'end' '<<'
     || lk == 14714                 // 'eq' '<<'
     || lk == 14715                 // 'every' '<<'
     || lk == 14716                 // 'except' '<<'
     || lk == 14721                 // 'following' '<<'
     || lk == 14722                 // 'following-sibling' '<<'
     || lk == 14723                 // 'for' '<<'
     || lk == 14724                 // 'function' '<<'
     || lk == 14725                 // 'ge' '<<'
     || lk == 14727                 // 'group' '<<'
     || lk == 14729                 // 'gt' '<<'
     || lk == 14730                 // 'idiv' '<<'
     || lk == 14731                 // 'if' '<<'
     || lk == 14732                 // 'import' '<<'
     || lk == 14737                 // 'instance' '<<'
     || lk == 14738                 // 'intersect' '<<'
     || lk == 14741                 // 'is' '<<'
     || lk == 14742                 // 'item' '<<'
     || lk == 14746                 // 'le' '<<'
     || lk == 14748                 // 'let' '<<'
     || lk == 14750                 // 'lt' '<<'
     || lk == 14751                 // 'map' '<<'
     || lk == 14753                 // 'mod' '<<'
     || lk == 14755                 // 'module' '<<'
     || lk == 14756                 // 'namespace' '<<'
     || lk == 14757                 // 'namespace-node' '<<'
     || lk == 14758                 // 'ne' '<<'
     || lk == 14762                 // 'node' '<<'
     || lk == 14765                 // 'only' '<<'
     || lk == 14767                 // 'or' '<<'
     || lk == 14768                 // 'order' '<<'
     || lk == 14769                 // 'ordered' '<<'
     || lk == 14771                 // 'parent' '<<'
     || lk == 14776                 // 'preceding' '<<'
     || lk == 14777                 // 'preceding-sibling' '<<'
     || lk == 14780                 // 'processing-instruction' '<<'
     || lk == 14783                 // 'return' '<<'
     || lk == 14786                 // 'satisfies' '<<'
     || lk == 14788                 // 'schema-attribute' '<<'
     || lk == 14789                 // 'schema-element' '<<'
     || lk == 14790                 // 'self' '<<'
     || lk == 14793                 // 'some' '<<'
     || lk == 14794                 // 'stable' '<<'
     || lk == 14795                 // 'start' '<<'
     || lk == 14798                 // 'switch' '<<'
     || lk == 14799                 // 'text' '<<'
     || lk == 14801                 // 'to' '<<'
     || lk == 14803                 // 'treat' '<<'
     || lk == 14804                 // 'try' '<<'
     || lk == 14807                 // 'typeswitch' '<<'
     || lk == 14808                 // 'union' '<<'
     || lk == 14809                 // 'unordered' '<<'
     || lk == 14811                 // 'validate' '<<'
     || lk == 14816                 // 'where' '<<'
     || lk == 14820                 // 'xquery' '<<'
     || lk == 14849                 // IntegerLiteral '<='
     || lk == 14850                 // DecimalLiteral '<='
     || lk == 14851                 // DoubleLiteral '<='
     || lk == 14852                 // StringLiteral '<='
     || lk == 14853                 // URIQualifiedName '<='
     || lk == 14863                 // QName^Token '<='
     || lk == 14869                 // Wildcard '<='
     || lk == 14891                 // '.' '<='
     || lk == 14892                 // '..' '<='
     || lk == 14893                 // '/' '<='
     || lk == 14925                 // 'ancestor' '<='
     || lk == 14926                 // 'ancestor-or-self' '<='
     || lk == 14927                 // 'and' '<='
     || lk == 14929                 // 'array' '<='
     || lk == 14931                 // 'ascending' '<='
     || lk == 14933                 // 'attribute' '<='
     || lk == 14939                 // 'case' '<='
     || lk == 14940                 // 'cast' '<='
     || lk == 14941                 // 'castable' '<='
     || lk == 14943                 // 'child' '<='
     || lk == 14944                 // 'collation' '<='
     || lk == 14945                 // 'comment' '<='
     || lk == 14951                 // 'count' '<='
     || lk == 14954                 // 'declare' '<='
     || lk == 14955                 // 'default' '<='
     || lk == 14957                 // 'descendant' '<='
     || lk == 14958                 // 'descendant-or-self' '<='
     || lk == 14959                 // 'descending' '<='
     || lk == 14961                 // 'div' '<='
     || lk == 14962                 // 'document' '<='
     || lk == 14963                 // 'document-node' '<='
     || lk == 14964                 // 'element' '<='
     || lk == 14965                 // 'else' '<='
     || lk == 14966                 // 'empty' '<='
     || lk == 14967                 // 'empty-sequence' '<='
     || lk == 14969                 // 'end' '<='
     || lk == 14970                 // 'eq' '<='
     || lk == 14971                 // 'every' '<='
     || lk == 14972                 // 'except' '<='
     || lk == 14977                 // 'following' '<='
     || lk == 14978                 // 'following-sibling' '<='
     || lk == 14979                 // 'for' '<='
     || lk == 14980                 // 'function' '<='
     || lk == 14981                 // 'ge' '<='
     || lk == 14983                 // 'group' '<='
     || lk == 14985                 // 'gt' '<='
     || lk == 14986                 // 'idiv' '<='
     || lk == 14987                 // 'if' '<='
     || lk == 14988                 // 'import' '<='
     || lk == 14993                 // 'instance' '<='
     || lk == 14994                 // 'intersect' '<='
     || lk == 14997                 // 'is' '<='
     || lk == 14998                 // 'item' '<='
     || lk == 15002                 // 'le' '<='
     || lk == 15004                 // 'let' '<='
     || lk == 15006                 // 'lt' '<='
     || lk == 15007                 // 'map' '<='
     || lk == 15009                 // 'mod' '<='
     || lk == 15011                 // 'module' '<='
     || lk == 15012                 // 'namespace' '<='
     || lk == 15013                 // 'namespace-node' '<='
     || lk == 15014                 // 'ne' '<='
     || lk == 15018                 // 'node' '<='
     || lk == 15021                 // 'only' '<='
     || lk == 15023                 // 'or' '<='
     || lk == 15024                 // 'order' '<='
     || lk == 15025                 // 'ordered' '<='
     || lk == 15027                 // 'parent' '<='
     || lk == 15032                 // 'preceding' '<='
     || lk == 15033                 // 'preceding-sibling' '<='
     || lk == 15036                 // 'processing-instruction' '<='
     || lk == 15039                 // 'return' '<='
     || lk == 15042                 // 'satisfies' '<='
     || lk == 15044                 // 'schema-attribute' '<='
     || lk == 15045                 // 'schema-element' '<='
     || lk == 15046                 // 'self' '<='
     || lk == 15049                 // 'some' '<='
     || lk == 15050                 // 'stable' '<='
     || lk == 15051                 // 'start' '<='
     || lk == 15054                 // 'switch' '<='
     || lk == 15055                 // 'text' '<='
     || lk == 15057                 // 'to' '<='
     || lk == 15059                 // 'treat' '<='
     || lk == 15060                 // 'try' '<='
     || lk == 15063                 // 'typeswitch' '<='
     || lk == 15064                 // 'union' '<='
     || lk == 15065                 // 'unordered' '<='
     || lk == 15067                 // 'validate' '<='
     || lk == 15072                 // 'where' '<='
     || lk == 15076                 // 'xquery' '<='
     || lk == 15138                 // '(' '<?'
     || lk == 15143                 // '+' '<?'
     || lk == 15145                 // '-' '<?'
     || lk == 15149                 // '/' '<?'
     || lk == 15150                 // '//' '<?'
     || lk == 15173                 // '[' '<?'
     || lk == 15295                 // 'return' '<?'
     || lk == 15361                 // IntegerLiteral '='
     || lk == 15362                 // DecimalLiteral '='
     || lk == 15363                 // DoubleLiteral '='
     || lk == 15364                 // StringLiteral '='
     || lk == 15365                 // URIQualifiedName '='
     || lk == 15375                 // QName^Token '='
     || lk == 15381                 // Wildcard '='
     || lk == 15403                 // '.' '='
     || lk == 15404                 // '..' '='
     || lk == 15405                 // '/' '='
     || lk == 15437                 // 'ancestor' '='
     || lk == 15438                 // 'ancestor-or-self' '='
     || lk == 15439                 // 'and' '='
     || lk == 15441                 // 'array' '='
     || lk == 15443                 // 'ascending' '='
     || lk == 15445                 // 'attribute' '='
     || lk == 15451                 // 'case' '='
     || lk == 15452                 // 'cast' '='
     || lk == 15453                 // 'castable' '='
     || lk == 15455                 // 'child' '='
     || lk == 15456                 // 'collation' '='
     || lk == 15457                 // 'comment' '='
     || lk == 15463                 // 'count' '='
     || lk == 15466                 // 'declare' '='
     || lk == 15467                 // 'default' '='
     || lk == 15469                 // 'descendant' '='
     || lk == 15470                 // 'descendant-or-self' '='
     || lk == 15471                 // 'descending' '='
     || lk == 15473                 // 'div' '='
     || lk == 15474                 // 'document' '='
     || lk == 15475                 // 'document-node' '='
     || lk == 15476                 // 'element' '='
     || lk == 15477                 // 'else' '='
     || lk == 15478                 // 'empty' '='
     || lk == 15479                 // 'empty-sequence' '='
     || lk == 15481                 // 'end' '='
     || lk == 15482                 // 'eq' '='
     || lk == 15483                 // 'every' '='
     || lk == 15484                 // 'except' '='
     || lk == 15489                 // 'following' '='
     || lk == 15490                 // 'following-sibling' '='
     || lk == 15491                 // 'for' '='
     || lk == 15492                 // 'function' '='
     || lk == 15493                 // 'ge' '='
     || lk == 15495                 // 'group' '='
     || lk == 15497                 // 'gt' '='
     || lk == 15498                 // 'idiv' '='
     || lk == 15499                 // 'if' '='
     || lk == 15500                 // 'import' '='
     || lk == 15505                 // 'instance' '='
     || lk == 15506                 // 'intersect' '='
     || lk == 15509                 // 'is' '='
     || lk == 15510                 // 'item' '='
     || lk == 15514                 // 'le' '='
     || lk == 15516                 // 'let' '='
     || lk == 15518                 // 'lt' '='
     || lk == 15519                 // 'map' '='
     || lk == 15521                 // 'mod' '='
     || lk == 15523                 // 'module' '='
     || lk == 15524                 // 'namespace' '='
     || lk == 15525                 // 'namespace-node' '='
     || lk == 15526                 // 'ne' '='
     || lk == 15530                 // 'node' '='
     || lk == 15533                 // 'only' '='
     || lk == 15535                 // 'or' '='
     || lk == 15536                 // 'order' '='
     || lk == 15537                 // 'ordered' '='
     || lk == 15539                 // 'parent' '='
     || lk == 15544                 // 'preceding' '='
     || lk == 15545                 // 'preceding-sibling' '='
     || lk == 15548                 // 'processing-instruction' '='
     || lk == 15551                 // 'return' '='
     || lk == 15554                 // 'satisfies' '='
     || lk == 15556                 // 'schema-attribute' '='
     || lk == 15557                 // 'schema-element' '='
     || lk == 15558                 // 'self' '='
     || lk == 15561                 // 'some' '='
     || lk == 15562                 // 'stable' '='
     || lk == 15563                 // 'start' '='
     || lk == 15566                 // 'switch' '='
     || lk == 15567                 // 'text' '='
     || lk == 15569                 // 'to' '='
     || lk == 15571                 // 'treat' '='
     || lk == 15572                 // 'try' '='
     || lk == 15575                 // 'typeswitch' '='
     || lk == 15576                 // 'union' '='
     || lk == 15577                 // 'unordered' '='
     || lk == 15579                 // 'validate' '='
     || lk == 15584                 // 'where' '='
     || lk == 15588                 // 'xquery' '='
     || lk == 15617                 // IntegerLiteral '=>'
     || lk == 15618                 // DecimalLiteral '=>'
     || lk == 15619                 // DoubleLiteral '=>'
     || lk == 15620                 // StringLiteral '=>'
     || lk == 15621                 // URIQualifiedName '=>'
     || lk == 15631                 // QName^Token '=>'
     || lk == 15637                 // Wildcard '=>'
     || lk == 15659                 // '.' '=>'
     || lk == 15660                 // '..' '=>'
     || lk == 15661                 // '/' '=>'
     || lk == 15693                 // 'ancestor' '=>'
     || lk == 15694                 // 'ancestor-or-self' '=>'
     || lk == 15695                 // 'and' '=>'
     || lk == 15697                 // 'array' '=>'
     || lk == 15699                 // 'ascending' '=>'
     || lk == 15701                 // 'attribute' '=>'
     || lk == 15707                 // 'case' '=>'
     || lk == 15708                 // 'cast' '=>'
     || lk == 15709                 // 'castable' '=>'
     || lk == 15711                 // 'child' '=>'
     || lk == 15712                 // 'collation' '=>'
     || lk == 15713                 // 'comment' '=>'
     || lk == 15719                 // 'count' '=>'
     || lk == 15722                 // 'declare' '=>'
     || lk == 15723                 // 'default' '=>'
     || lk == 15725                 // 'descendant' '=>'
     || lk == 15726                 // 'descendant-or-self' '=>'
     || lk == 15727                 // 'descending' '=>'
     || lk == 15729                 // 'div' '=>'
     || lk == 15730                 // 'document' '=>'
     || lk == 15731                 // 'document-node' '=>'
     || lk == 15732                 // 'element' '=>'
     || lk == 15733                 // 'else' '=>'
     || lk == 15734                 // 'empty' '=>'
     || lk == 15735                 // 'empty-sequence' '=>'
     || lk == 15737                 // 'end' '=>'
     || lk == 15738                 // 'eq' '=>'
     || lk == 15739                 // 'every' '=>'
     || lk == 15740                 // 'except' '=>'
     || lk == 15745                 // 'following' '=>'
     || lk == 15746                 // 'following-sibling' '=>'
     || lk == 15747                 // 'for' '=>'
     || lk == 15748                 // 'function' '=>'
     || lk == 15749                 // 'ge' '=>'
     || lk == 15751                 // 'group' '=>'
     || lk == 15753                 // 'gt' '=>'
     || lk == 15754                 // 'idiv' '=>'
     || lk == 15755                 // 'if' '=>'
     || lk == 15756                 // 'import' '=>'
     || lk == 15761                 // 'instance' '=>'
     || lk == 15762                 // 'intersect' '=>'
     || lk == 15765                 // 'is' '=>'
     || lk == 15766                 // 'item' '=>'
     || lk == 15770                 // 'le' '=>'
     || lk == 15772                 // 'let' '=>'
     || lk == 15774                 // 'lt' '=>'
     || lk == 15775                 // 'map' '=>'
     || lk == 15777                 // 'mod' '=>'
     || lk == 15779                 // 'module' '=>'
     || lk == 15780                 // 'namespace' '=>'
     || lk == 15781                 // 'namespace-node' '=>'
     || lk == 15782                 // 'ne' '=>'
     || lk == 15786                 // 'node' '=>'
     || lk == 15789                 // 'only' '=>'
     || lk == 15791                 // 'or' '=>'
     || lk == 15792                 // 'order' '=>'
     || lk == 15793                 // 'ordered' '=>'
     || lk == 15795                 // 'parent' '=>'
     || lk == 15800                 // 'preceding' '=>'
     || lk == 15801                 // 'preceding-sibling' '=>'
     || lk == 15804                 // 'processing-instruction' '=>'
     || lk == 15807                 // 'return' '=>'
     || lk == 15810                 // 'satisfies' '=>'
     || lk == 15812                 // 'schema-attribute' '=>'
     || lk == 15813                 // 'schema-element' '=>'
     || lk == 15814                 // 'self' '=>'
     || lk == 15817                 // 'some' '=>'
     || lk == 15818                 // 'stable' '=>'
     || lk == 15819                 // 'start' '=>'
     || lk == 15822                 // 'switch' '=>'
     || lk == 15823                 // 'text' '=>'
     || lk == 15825                 // 'to' '=>'
     || lk == 15827                 // 'treat' '=>'
     || lk == 15828                 // 'try' '=>'
     || lk == 15831                 // 'typeswitch' '=>'
     || lk == 15832                 // 'union' '=>'
     || lk == 15833                 // 'unordered' '=>'
     || lk == 15835                 // 'validate' '=>'
     || lk == 15840                 // 'where' '=>'
     || lk == 15844                 // 'xquery' '=>'
     || lk == 15873                 // IntegerLiteral '>'
     || lk == 15874                 // DecimalLiteral '>'
     || lk == 15875                 // DoubleLiteral '>'
     || lk == 15876                 // StringLiteral '>'
     || lk == 15877                 // URIQualifiedName '>'
     || lk == 15887                 // QName^Token '>'
     || lk == 15893                 // Wildcard '>'
     || lk == 15915                 // '.' '>'
     || lk == 15916                 // '..' '>'
     || lk == 15917                 // '/' '>'
     || lk == 15949                 // 'ancestor' '>'
     || lk == 15950                 // 'ancestor-or-self' '>'
     || lk == 15951                 // 'and' '>'
     || lk == 15953                 // 'array' '>'
     || lk == 15955                 // 'ascending' '>'
     || lk == 15957                 // 'attribute' '>'
     || lk == 15963                 // 'case' '>'
     || lk == 15964                 // 'cast' '>'
     || lk == 15965                 // 'castable' '>'
     || lk == 15967                 // 'child' '>'
     || lk == 15968                 // 'collation' '>'
     || lk == 15969                 // 'comment' '>'
     || lk == 15975                 // 'count' '>'
     || lk == 15978                 // 'declare' '>'
     || lk == 15979                 // 'default' '>'
     || lk == 15981                 // 'descendant' '>'
     || lk == 15982                 // 'descendant-or-self' '>'
     || lk == 15983                 // 'descending' '>'
     || lk == 15985                 // 'div' '>'
     || lk == 15986                 // 'document' '>'
     || lk == 15987                 // 'document-node' '>'
     || lk == 15988                 // 'element' '>'
     || lk == 15989                 // 'else' '>'
     || lk == 15990                 // 'empty' '>'
     || lk == 15991                 // 'empty-sequence' '>'
     || lk == 15993                 // 'end' '>'
     || lk == 15994                 // 'eq' '>'
     || lk == 15995                 // 'every' '>'
     || lk == 15996                 // 'except' '>'
     || lk == 16001                 // 'following' '>'
     || lk == 16002                 // 'following-sibling' '>'
     || lk == 16003                 // 'for' '>'
     || lk == 16004                 // 'function' '>'
     || lk == 16005                 // 'ge' '>'
     || lk == 16007                 // 'group' '>'
     || lk == 16009                 // 'gt' '>'
     || lk == 16010                 // 'idiv' '>'
     || lk == 16011                 // 'if' '>'
     || lk == 16012                 // 'import' '>'
     || lk == 16017                 // 'instance' '>'
     || lk == 16018                 // 'intersect' '>'
     || lk == 16021                 // 'is' '>'
     || lk == 16022                 // 'item' '>'
     || lk == 16026                 // 'le' '>'
     || lk == 16028                 // 'let' '>'
     || lk == 16030                 // 'lt' '>'
     || lk == 16031                 // 'map' '>'
     || lk == 16033                 // 'mod' '>'
     || lk == 16035                 // 'module' '>'
     || lk == 16036                 // 'namespace' '>'
     || lk == 16037                 // 'namespace-node' '>'
     || lk == 16038                 // 'ne' '>'
     || lk == 16042                 // 'node' '>'
     || lk == 16045                 // 'only' '>'
     || lk == 16047                 // 'or' '>'
     || lk == 16048                 // 'order' '>'
     || lk == 16049                 // 'ordered' '>'
     || lk == 16051                 // 'parent' '>'
     || lk == 16056                 // 'preceding' '>'
     || lk == 16057                 // 'preceding-sibling' '>'
     || lk == 16060                 // 'processing-instruction' '>'
     || lk == 16063                 // 'return' '>'
     || lk == 16066                 // 'satisfies' '>'
     || lk == 16068                 // 'schema-attribute' '>'
     || lk == 16069                 // 'schema-element' '>'
     || lk == 16070                 // 'self' '>'
     || lk == 16073                 // 'some' '>'
     || lk == 16074                 // 'stable' '>'
     || lk == 16075                 // 'start' '>'
     || lk == 16078                 // 'switch' '>'
     || lk == 16079                 // 'text' '>'
     || lk == 16081                 // 'to' '>'
     || lk == 16083                 // 'treat' '>'
     || lk == 16084                 // 'try' '>'
     || lk == 16087                 // 'typeswitch' '>'
     || lk == 16088                 // 'union' '>'
     || lk == 16089                 // 'unordered' '>'
     || lk == 16091                 // 'validate' '>'
     || lk == 16096                 // 'where' '>'
     || lk == 16100                 // 'xquery' '>'
     || lk == 16129                 // IntegerLiteral '>='
     || lk == 16130                 // DecimalLiteral '>='
     || lk == 16131                 // DoubleLiteral '>='
     || lk == 16132                 // StringLiteral '>='
     || lk == 16133                 // URIQualifiedName '>='
     || lk == 16143                 // QName^Token '>='
     || lk == 16149                 // Wildcard '>='
     || lk == 16171                 // '.' '>='
     || lk == 16172                 // '..' '>='
     || lk == 16173                 // '/' '>='
     || lk == 16205                 // 'ancestor' '>='
     || lk == 16206                 // 'ancestor-or-self' '>='
     || lk == 16207                 // 'and' '>='
     || lk == 16209                 // 'array' '>='
     || lk == 16211                 // 'ascending' '>='
     || lk == 16213                 // 'attribute' '>='
     || lk == 16219                 // 'case' '>='
     || lk == 16220                 // 'cast' '>='
     || lk == 16221                 // 'castable' '>='
     || lk == 16223                 // 'child' '>='
     || lk == 16224                 // 'collation' '>='
     || lk == 16225                 // 'comment' '>='
     || lk == 16231                 // 'count' '>='
     || lk == 16234                 // 'declare' '>='
     || lk == 16235                 // 'default' '>='
     || lk == 16237                 // 'descendant' '>='
     || lk == 16238                 // 'descendant-or-self' '>='
     || lk == 16239                 // 'descending' '>='
     || lk == 16241                 // 'div' '>='
     || lk == 16242                 // 'document' '>='
     || lk == 16243                 // 'document-node' '>='
     || lk == 16244                 // 'element' '>='
     || lk == 16245                 // 'else' '>='
     || lk == 16246                 // 'empty' '>='
     || lk == 16247                 // 'empty-sequence' '>='
     || lk == 16249                 // 'end' '>='
     || lk == 16250                 // 'eq' '>='
     || lk == 16251                 // 'every' '>='
     || lk == 16252                 // 'except' '>='
     || lk == 16257                 // 'following' '>='
     || lk == 16258                 // 'following-sibling' '>='
     || lk == 16259                 // 'for' '>='
     || lk == 16260                 // 'function' '>='
     || lk == 16261                 // 'ge' '>='
     || lk == 16263                 // 'group' '>='
     || lk == 16265                 // 'gt' '>='
     || lk == 16266                 // 'idiv' '>='
     || lk == 16267                 // 'if' '>='
     || lk == 16268                 // 'import' '>='
     || lk == 16273                 // 'instance' '>='
     || lk == 16274                 // 'intersect' '>='
     || lk == 16277                 // 'is' '>='
     || lk == 16278                 // 'item' '>='
     || lk == 16282                 // 'le' '>='
     || lk == 16284                 // 'let' '>='
     || lk == 16286                 // 'lt' '>='
     || lk == 16287                 // 'map' '>='
     || lk == 16289                 // 'mod' '>='
     || lk == 16291                 // 'module' '>='
     || lk == 16292                 // 'namespace' '>='
     || lk == 16293                 // 'namespace-node' '>='
     || lk == 16294                 // 'ne' '>='
     || lk == 16298                 // 'node' '>='
     || lk == 16301                 // 'only' '>='
     || lk == 16303                 // 'or' '>='
     || lk == 16304                 // 'order' '>='
     || lk == 16305                 // 'ordered' '>='
     || lk == 16307                 // 'parent' '>='
     || lk == 16312                 // 'preceding' '>='
     || lk == 16313                 // 'preceding-sibling' '>='
     || lk == 16316                 // 'processing-instruction' '>='
     || lk == 16319                 // 'return' '>='
     || lk == 16322                 // 'satisfies' '>='
     || lk == 16324                 // 'schema-attribute' '>='
     || lk == 16325                 // 'schema-element' '>='
     || lk == 16326                 // 'self' '>='
     || lk == 16329                 // 'some' '>='
     || lk == 16330                 // 'stable' '>='
     || lk == 16331                 // 'start' '>='
     || lk == 16334                 // 'switch' '>='
     || lk == 16335                 // 'text' '>='
     || lk == 16337                 // 'to' '>='
     || lk == 16339                 // 'treat' '>='
     || lk == 16340                 // 'try' '>='
     || lk == 16343                 // 'typeswitch' '>='
     || lk == 16344                 // 'union' '>='
     || lk == 16345                 // 'unordered' '>='
     || lk == 16347                 // 'validate' '>='
     || lk == 16352                 // 'where' '>='
     || lk == 16356                 // 'xquery' '>='
     || lk == 16385                 // IntegerLiteral '>>'
     || lk == 16386                 // DecimalLiteral '>>'
     || lk == 16387                 // DoubleLiteral '>>'
     || lk == 16388                 // StringLiteral '>>'
     || lk == 16389                 // URIQualifiedName '>>'
     || lk == 16399                 // QName^Token '>>'
     || lk == 16405                 // Wildcard '>>'
     || lk == 16427                 // '.' '>>'
     || lk == 16428                 // '..' '>>'
     || lk == 16429                 // '/' '>>'
     || lk == 16461                 // 'ancestor' '>>'
     || lk == 16462                 // 'ancestor-or-self' '>>'
     || lk == 16463                 // 'and' '>>'
     || lk == 16465                 // 'array' '>>'
     || lk == 16467                 // 'ascending' '>>'
     || lk == 16469                 // 'attribute' '>>'
     || lk == 16475                 // 'case' '>>'
     || lk == 16476                 // 'cast' '>>'
     || lk == 16477                 // 'castable' '>>'
     || lk == 16479                 // 'child' '>>'
     || lk == 16480                 // 'collation' '>>'
     || lk == 16481                 // 'comment' '>>'
     || lk == 16487                 // 'count' '>>'
     || lk == 16490                 // 'declare' '>>'
     || lk == 16491                 // 'default' '>>'
     || lk == 16493                 // 'descendant' '>>'
     || lk == 16494                 // 'descendant-or-self' '>>'
     || lk == 16495                 // 'descending' '>>'
     || lk == 16497                 // 'div' '>>'
     || lk == 16498                 // 'document' '>>'
     || lk == 16499                 // 'document-node' '>>'
     || lk == 16500                 // 'element' '>>'
     || lk == 16501                 // 'else' '>>'
     || lk == 16502                 // 'empty' '>>'
     || lk == 16503                 // 'empty-sequence' '>>'
     || lk == 16505                 // 'end' '>>'
     || lk == 16506                 // 'eq' '>>'
     || lk == 16507                 // 'every' '>>'
     || lk == 16508                 // 'except' '>>'
     || lk == 16513                 // 'following' '>>'
     || lk == 16514                 // 'following-sibling' '>>'
     || lk == 16515                 // 'for' '>>'
     || lk == 16516                 // 'function' '>>'
     || lk == 16517                 // 'ge' '>>'
     || lk == 16519                 // 'group' '>>'
     || lk == 16521                 // 'gt' '>>'
     || lk == 16522                 // 'idiv' '>>'
     || lk == 16523                 // 'if' '>>'
     || lk == 16524                 // 'import' '>>'
     || lk == 16529                 // 'instance' '>>'
     || lk == 16530                 // 'intersect' '>>'
     || lk == 16533                 // 'is' '>>'
     || lk == 16534                 // 'item' '>>'
     || lk == 16538                 // 'le' '>>'
     || lk == 16540                 // 'let' '>>'
     || lk == 16542                 // 'lt' '>>'
     || lk == 16543                 // 'map' '>>'
     || lk == 16545                 // 'mod' '>>'
     || lk == 16547                 // 'module' '>>'
     || lk == 16548                 // 'namespace' '>>'
     || lk == 16549                 // 'namespace-node' '>>'
     || lk == 16550                 // 'ne' '>>'
     || lk == 16554                 // 'node' '>>'
     || lk == 16557                 // 'only' '>>'
     || lk == 16559                 // 'or' '>>'
     || lk == 16560                 // 'order' '>>'
     || lk == 16561                 // 'ordered' '>>'
     || lk == 16563                 // 'parent' '>>'
     || lk == 16568                 // 'preceding' '>>'
     || lk == 16569                 // 'preceding-sibling' '>>'
     || lk == 16572                 // 'processing-instruction' '>>'
     || lk == 16575                 // 'return' '>>'
     || lk == 16578                 // 'satisfies' '>>'
     || lk == 16580                 // 'schema-attribute' '>>'
     || lk == 16581                 // 'schema-element' '>>'
     || lk == 16582                 // 'self' '>>'
     || lk == 16585                 // 'some' '>>'
     || lk == 16586                 // 'stable' '>>'
     || lk == 16587                 // 'start' '>>'
     || lk == 16590                 // 'switch' '>>'
     || lk == 16591                 // 'text' '>>'
     || lk == 16593                 // 'to' '>>'
     || lk == 16595                 // 'treat' '>>'
     || lk == 16596                 // 'try' '>>'
     || lk == 16599                 // 'typeswitch' '>>'
     || lk == 16600                 // 'union' '>>'
     || lk == 16601                 // 'unordered' '>>'
     || lk == 16603                 // 'validate' '>>'
     || lk == 16608                 // 'where' '>>'
     || lk == 16612                 // 'xquery' '>>'
     || lk == 16641                 // IntegerLiteral '?'
     || lk == 16642                 // DecimalLiteral '?'
     || lk == 16643                 // DoubleLiteral '?'
     || lk == 16644                 // StringLiteral '?'
     || lk == 16674                 // '(' '?'
     || lk == 16679                 // '+' '?'
     || lk == 16681                 // '-' '?'
     || lk == 16683                 // '.' '?'
     || lk == 16685                 // '/' '?'
     || lk == 16686                 // '//' '?'
     || lk == 16709                 // '[' '?'
     || lk == 16831                 // 'return' '?'
     || lk == 17186                 // '(' '@'
     || lk == 17191                 // '+' '@'
     || lk == 17193                 // '-' '@'
     || lk == 17197                 // '/' '@'
     || lk == 17198                 // '//' '@'
     || lk == 17221                 // '[' '@'
     || lk == 17343                 // 'return' '@'
     || lk == 17665                 // IntegerLiteral '['
     || lk == 17666                 // DecimalLiteral '['
     || lk == 17667                 // DoubleLiteral '['
     || lk == 17668                 // StringLiteral '['
     || lk == 17669                 // URIQualifiedName '['
     || lk == 17679                 // QName^Token '['
     || lk == 17685                 // Wildcard '['
     || lk == 17698                 // '(' '['
     || lk == 17703                 // '+' '['
     || lk == 17705                 // '-' '['
     || lk == 17707                 // '.' '['
     || lk == 17708                 // '..' '['
     || lk == 17709                 // '/' '['
     || lk == 17710                 // '//' '['
     || lk == 17733                 // '[' '['
     || lk == 17741                 // 'ancestor' '['
     || lk == 17742                 // 'ancestor-or-self' '['
     || lk == 17743                 // 'and' '['
     || lk == 17745                 // 'array' '['
     || lk == 17747                 // 'ascending' '['
     || lk == 17749                 // 'attribute' '['
     || lk == 17755                 // 'case' '['
     || lk == 17756                 // 'cast' '['
     || lk == 17757                 // 'castable' '['
     || lk == 17759                 // 'child' '['
     || lk == 17760                 // 'collation' '['
     || lk == 17761                 // 'comment' '['
     || lk == 17767                 // 'count' '['
     || lk == 17770                 // 'declare' '['
     || lk == 17771                 // 'default' '['
     || lk == 17773                 // 'descendant' '['
     || lk == 17774                 // 'descendant-or-self' '['
     || lk == 17775                 // 'descending' '['
     || lk == 17777                 // 'div' '['
     || lk == 17778                 // 'document' '['
     || lk == 17779                 // 'document-node' '['
     || lk == 17780                 // 'element' '['
     || lk == 17781                 // 'else' '['
     || lk == 17782                 // 'empty' '['
     || lk == 17783                 // 'empty-sequence' '['
     || lk == 17785                 // 'end' '['
     || lk == 17786                 // 'eq' '['
     || lk == 17787                 // 'every' '['
     || lk == 17788                 // 'except' '['
     || lk == 17793                 // 'following' '['
     || lk == 17794                 // 'following-sibling' '['
     || lk == 17795                 // 'for' '['
     || lk == 17796                 // 'function' '['
     || lk == 17797                 // 'ge' '['
     || lk == 17799                 // 'group' '['
     || lk == 17801                 // 'gt' '['
     || lk == 17802                 // 'idiv' '['
     || lk == 17803                 // 'if' '['
     || lk == 17804                 // 'import' '['
     || lk == 17809                 // 'instance' '['
     || lk == 17810                 // 'intersect' '['
     || lk == 17813                 // 'is' '['
     || lk == 17814                 // 'item' '['
     || lk == 17818                 // 'le' '['
     || lk == 17820                 // 'let' '['
     || lk == 17822                 // 'lt' '['
     || lk == 17823                 // 'map' '['
     || lk == 17825                 // 'mod' '['
     || lk == 17827                 // 'module' '['
     || lk == 17828                 // 'namespace' '['
     || lk == 17829                 // 'namespace-node' '['
     || lk == 17830                 // 'ne' '['
     || lk == 17834                 // 'node' '['
     || lk == 17837                 // 'only' '['
     || lk == 17839                 // 'or' '['
     || lk == 17840                 // 'order' '['
     || lk == 17841                 // 'ordered' '['
     || lk == 17843                 // 'parent' '['
     || lk == 17848                 // 'preceding' '['
     || lk == 17849                 // 'preceding-sibling' '['
     || lk == 17852                 // 'processing-instruction' '['
     || lk == 17855                 // 'return' '['
     || lk == 17858                 // 'satisfies' '['
     || lk == 17860                 // 'schema-attribute' '['
     || lk == 17861                 // 'schema-element' '['
     || lk == 17862                 // 'self' '['
     || lk == 17865                 // 'some' '['
     || lk == 17866                 // 'stable' '['
     || lk == 17867                 // 'start' '['
     || lk == 17870                 // 'switch' '['
     || lk == 17871                 // 'text' '['
     || lk == 17873                 // 'to' '['
     || lk == 17875                 // 'treat' '['
     || lk == 17876                 // 'try' '['
     || lk == 17879                 // 'typeswitch' '['
     || lk == 17880                 // 'union' '['
     || lk == 17881                 // 'unordered' '['
     || lk == 17883                 // 'validate' '['
     || lk == 17888                 // 'where' '['
     || lk == 17892                 // 'xquery' '['
     || lk == 17989                 // '[' ']'
     || lk == 18722                 // '(' '``['
     || lk == 18727                 // '+' '``['
     || lk == 18729                 // '-' '``['
     || lk == 18733                 // '/' '``['
     || lk == 18734                 // '//' '``['
     || lk == 18757                 // '[' '``['
     || lk == 18879                 // 'return' '``['
     || lk == 19743                 // '$' 'ancestor'
     || lk == 19744                 // '%' 'ancestor'
     || lk == 19746                 // '(' 'ancestor'
     || lk == 19747                 // '(#' 'ancestor'
     || lk == 19751                 // '+' 'ancestor'
     || lk == 19753                 // '-' 'ancestor'
     || lk == 19757                 // '/' 'ancestor'
     || lk == 19758                 // '//' 'ancestor'
     || lk == 19765                 // '<' 'ancestor'
     || lk == 19779                 // '@' 'ancestor'
     || lk == 19781                 // '[' 'ancestor'
     || lk == 19797                 // 'attribute' 'ancestor'
     || lk == 19828                 // 'element' 'ancestor'
     || lk == 19903                 // 'return' 'ancestor'
     || lk == 19999                 // '$' 'ancestor-or-self'
     || lk == 20000                 // '%' 'ancestor-or-self'
     || lk == 20002                 // '(' 'ancestor-or-self'
     || lk == 20003                 // '(#' 'ancestor-or-self'
     || lk == 20007                 // '+' 'ancestor-or-self'
     || lk == 20009                 // '-' 'ancestor-or-self'
     || lk == 20013                 // '/' 'ancestor-or-self'
     || lk == 20014                 // '//' 'ancestor-or-self'
     || lk == 20021                 // '<' 'ancestor-or-self'
     || lk == 20035                 // '@' 'ancestor-or-self'
     || lk == 20037                 // '[' 'ancestor-or-self'
     || lk == 20053                 // 'attribute' 'ancestor-or-self'
     || lk == 20084                 // 'element' 'ancestor-or-self'
     || lk == 20159                 // 'return' 'ancestor-or-self'
     || lk == 20225                 // IntegerLiteral 'and'
     || lk == 20226                 // DecimalLiteral 'and'
     || lk == 20227                 // DoubleLiteral 'and'
     || lk == 20228                 // StringLiteral 'and'
     || lk == 20229                 // URIQualifiedName 'and'
     || lk == 20239                 // QName^Token 'and'
     || lk == 20245                 // Wildcard 'and'
     || lk == 20255                 // '$' 'and'
     || lk == 20256                 // '%' 'and'
     || lk == 20258                 // '(' 'and'
     || lk == 20259                 // '(#' 'and'
     || lk == 20263                 // '+' 'and'
     || lk == 20265                 // '-' 'and'
     || lk == 20267                 // '.' 'and'
     || lk == 20268                 // '..' 'and'
     || lk == 20269                 // '/' 'and'
     || lk == 20270                 // '//' 'and'
     || lk == 20277                 // '<' 'and'
     || lk == 20289                 // '?' 'and'
     || lk == 20291                 // '@' 'and'
     || lk == 20293                 // '[' 'and'
     || lk == 20301                 // 'ancestor' 'and'
     || lk == 20302                 // 'ancestor-or-self' 'and'
     || lk == 20303                 // 'and' 'and'
     || lk == 20305                 // 'array' 'and'
     || lk == 20307                 // 'ascending' 'and'
     || lk == 20309                 // 'attribute' 'and'
     || lk == 20315                 // 'case' 'and'
     || lk == 20316                 // 'cast' 'and'
     || lk == 20317                 // 'castable' 'and'
     || lk == 20319                 // 'child' 'and'
     || lk == 20320                 // 'collation' 'and'
     || lk == 20321                 // 'comment' 'and'
     || lk == 20327                 // 'count' 'and'
     || lk == 20330                 // 'declare' 'and'
     || lk == 20331                 // 'default' 'and'
     || lk == 20333                 // 'descendant' 'and'
     || lk == 20334                 // 'descendant-or-self' 'and'
     || lk == 20335                 // 'descending' 'and'
     || lk == 20337                 // 'div' 'and'
     || lk == 20338                 // 'document' 'and'
     || lk == 20339                 // 'document-node' 'and'
     || lk == 20340                 // 'element' 'and'
     || lk == 20341                 // 'else' 'and'
     || lk == 20342                 // 'empty' 'and'
     || lk == 20343                 // 'empty-sequence' 'and'
     || lk == 20345                 // 'end' 'and'
     || lk == 20346                 // 'eq' 'and'
     || lk == 20347                 // 'every' 'and'
     || lk == 20348                 // 'except' 'and'
     || lk == 20353                 // 'following' 'and'
     || lk == 20354                 // 'following-sibling' 'and'
     || lk == 20355                 // 'for' 'and'
     || lk == 20356                 // 'function' 'and'
     || lk == 20357                 // 'ge' 'and'
     || lk == 20359                 // 'group' 'and'
     || lk == 20361                 // 'gt' 'and'
     || lk == 20362                 // 'idiv' 'and'
     || lk == 20363                 // 'if' 'and'
     || lk == 20364                 // 'import' 'and'
     || lk == 20369                 // 'instance' 'and'
     || lk == 20370                 // 'intersect' 'and'
     || lk == 20373                 // 'is' 'and'
     || lk == 20374                 // 'item' 'and'
     || lk == 20378                 // 'le' 'and'
     || lk == 20380                 // 'let' 'and'
     || lk == 20382                 // 'lt' 'and'
     || lk == 20383                 // 'map' 'and'
     || lk == 20385                 // 'mod' 'and'
     || lk == 20387                 // 'module' 'and'
     || lk == 20388                 // 'namespace' 'and'
     || lk == 20389                 // 'namespace-node' 'and'
     || lk == 20390                 // 'ne' 'and'
     || lk == 20394                 // 'node' 'and'
     || lk == 20397                 // 'only' 'and'
     || lk == 20399                 // 'or' 'and'
     || lk == 20400                 // 'order' 'and'
     || lk == 20401                 // 'ordered' 'and'
     || lk == 20403                 // 'parent' 'and'
     || lk == 20408                 // 'preceding' 'and'
     || lk == 20409                 // 'preceding-sibling' 'and'
     || lk == 20412                 // 'processing-instruction' 'and'
     || lk == 20415                 // 'return' 'and'
     || lk == 20418                 // 'satisfies' 'and'
     || lk == 20420                 // 'schema-attribute' 'and'
     || lk == 20421                 // 'schema-element' 'and'
     || lk == 20422                 // 'self' 'and'
     || lk == 20425                 // 'some' 'and'
     || lk == 20426                 // 'stable' 'and'
     || lk == 20427                 // 'start' 'and'
     || lk == 20430                 // 'switch' 'and'
     || lk == 20431                 // 'text' 'and'
     || lk == 20433                 // 'to' 'and'
     || lk == 20435                 // 'treat' 'and'
     || lk == 20436                 // 'try' 'and'
     || lk == 20439                 // 'typeswitch' 'and'
     || lk == 20440                 // 'union' 'and'
     || lk == 20441                 // 'unordered' 'and'
     || lk == 20443                 // 'validate' 'and'
     || lk == 20448                 // 'where' 'and'
     || lk == 20452                 // 'xquery' 'and'
     || lk == 20767                 // '$' 'array'
     || lk == 20768                 // '%' 'array'
     || lk == 20770                 // '(' 'array'
     || lk == 20771                 // '(#' 'array'
     || lk == 20775                 // '+' 'array'
     || lk == 20777                 // '-' 'array'
     || lk == 20781                 // '/' 'array'
     || lk == 20782                 // '//' 'array'
     || lk == 20789                 // '<' 'array'
     || lk == 20803                 // '@' 'array'
     || lk == 20805                 // '[' 'array'
     || lk == 20821                 // 'attribute' 'array'
     || lk == 20852                 // 'element' 'array'
     || lk == 20927                 // 'return' 'array'
     || lk == 21279                 // '$' 'ascending'
     || lk == 21280                 // '%' 'ascending'
     || lk == 21282                 // '(' 'ascending'
     || lk == 21283                 // '(#' 'ascending'
     || lk == 21287                 // '+' 'ascending'
     || lk == 21289                 // '-' 'ascending'
     || lk == 21293                 // '/' 'ascending'
     || lk == 21294                 // '//' 'ascending'
     || lk == 21301                 // '<' 'ascending'
     || lk == 21313                 // '?' 'ascending'
     || lk == 21315                 // '@' 'ascending'
     || lk == 21317                 // '[' 'ascending'
     || lk == 21333                 // 'attribute' 'ascending'
     || lk == 21364                 // 'element' 'ascending'
     || lk == 21412                 // 'namespace' 'ascending'
     || lk == 21436                 // 'processing-instruction' 'ascending'
     || lk == 21439                 // 'return' 'ascending'
     || lk == 21791                 // '$' 'attribute'
     || lk == 21792                 // '%' 'attribute'
     || lk == 21794                 // '(' 'attribute'
     || lk == 21795                 // '(#' 'attribute'
     || lk == 21799                 // '+' 'attribute'
     || lk == 21801                 // '-' 'attribute'
     || lk == 21805                 // '/' 'attribute'
     || lk == 21806                 // '//' 'attribute'
     || lk == 21813                 // '<' 'attribute'
     || lk == 21827                 // '@' 'attribute'
     || lk == 21829                 // '[' 'attribute'
     || lk == 21845                 // 'attribute' 'attribute'
     || lk == 21876                 // 'element' 'attribute'
     || lk == 21951                 // 'return' 'attribute'
     || lk == 23327                 // '$' 'case'
     || lk == 23328                 // '%' 'case'
     || lk == 23330                 // '(' 'case'
     || lk == 23331                 // '(#' 'case'
     || lk == 23335                 // '+' 'case'
     || lk == 23337                 // '-' 'case'
     || lk == 23341                 // '/' 'case'
     || lk == 23342                 // '//' 'case'
     || lk == 23349                 // '<' 'case'
     || lk == 23361                 // '?' 'case'
     || lk == 23363                 // '@' 'case'
     || lk == 23365                 // '[' 'case'
     || lk == 23381                 // 'attribute' 'case'
     || lk == 23412                 // 'element' 'case'
     || lk == 23460                 // 'namespace' 'case'
     || lk == 23484                 // 'processing-instruction' 'case'
     || lk == 23487                 // 'return' 'case'
     || lk == 23553                 // IntegerLiteral 'cast'
     || lk == 23554                 // DecimalLiteral 'cast'
     || lk == 23555                 // DoubleLiteral 'cast'
     || lk == 23556                 // StringLiteral 'cast'
     || lk == 23557                 // URIQualifiedName 'cast'
     || lk == 23567                 // QName^Token 'cast'
     || lk == 23573                 // Wildcard 'cast'
     || lk == 23583                 // '$' 'cast'
     || lk == 23584                 // '%' 'cast'
     || lk == 23586                 // '(' 'cast'
     || lk == 23587                 // '(#' 'cast'
     || lk == 23591                 // '+' 'cast'
     || lk == 23593                 // '-' 'cast'
     || lk == 23595                 // '.' 'cast'
     || lk == 23596                 // '..' 'cast'
     || lk == 23597                 // '/' 'cast'
     || lk == 23598                 // '//' 'cast'
     || lk == 23605                 // '<' 'cast'
     || lk == 23617                 // '?' 'cast'
     || lk == 23619                 // '@' 'cast'
     || lk == 23621                 // '[' 'cast'
     || lk == 23629                 // 'ancestor' 'cast'
     || lk == 23630                 // 'ancestor-or-self' 'cast'
     || lk == 23631                 // 'and' 'cast'
     || lk == 23633                 // 'array' 'cast'
     || lk == 23635                 // 'ascending' 'cast'
     || lk == 23637                 // 'attribute' 'cast'
     || lk == 23643                 // 'case' 'cast'
     || lk == 23644                 // 'cast' 'cast'
     || lk == 23645                 // 'castable' 'cast'
     || lk == 23647                 // 'child' 'cast'
     || lk == 23648                 // 'collation' 'cast'
     || lk == 23649                 // 'comment' 'cast'
     || lk == 23655                 // 'count' 'cast'
     || lk == 23658                 // 'declare' 'cast'
     || lk == 23659                 // 'default' 'cast'
     || lk == 23661                 // 'descendant' 'cast'
     || lk == 23662                 // 'descendant-or-self' 'cast'
     || lk == 23663                 // 'descending' 'cast'
     || lk == 23665                 // 'div' 'cast'
     || lk == 23666                 // 'document' 'cast'
     || lk == 23667                 // 'document-node' 'cast'
     || lk == 23668                 // 'element' 'cast'
     || lk == 23669                 // 'else' 'cast'
     || lk == 23670                 // 'empty' 'cast'
     || lk == 23671                 // 'empty-sequence' 'cast'
     || lk == 23673                 // 'end' 'cast'
     || lk == 23674                 // 'eq' 'cast'
     || lk == 23675                 // 'every' 'cast'
     || lk == 23676                 // 'except' 'cast'
     || lk == 23681                 // 'following' 'cast'
     || lk == 23682                 // 'following-sibling' 'cast'
     || lk == 23683                 // 'for' 'cast'
     || lk == 23684                 // 'function' 'cast'
     || lk == 23685                 // 'ge' 'cast'
     || lk == 23687                 // 'group' 'cast'
     || lk == 23689                 // 'gt' 'cast'
     || lk == 23690                 // 'idiv' 'cast'
     || lk == 23691                 // 'if' 'cast'
     || lk == 23692                 // 'import' 'cast'
     || lk == 23697                 // 'instance' 'cast'
     || lk == 23698                 // 'intersect' 'cast'
     || lk == 23701                 // 'is' 'cast'
     || lk == 23702                 // 'item' 'cast'
     || lk == 23706                 // 'le' 'cast'
     || lk == 23708                 // 'let' 'cast'
     || lk == 23710                 // 'lt' 'cast'
     || lk == 23711                 // 'map' 'cast'
     || lk == 23713                 // 'mod' 'cast'
     || lk == 23715                 // 'module' 'cast'
     || lk == 23716                 // 'namespace' 'cast'
     || lk == 23717                 // 'namespace-node' 'cast'
     || lk == 23718                 // 'ne' 'cast'
     || lk == 23722                 // 'node' 'cast'
     || lk == 23725                 // 'only' 'cast'
     || lk == 23727                 // 'or' 'cast'
     || lk == 23728                 // 'order' 'cast'
     || lk == 23729                 // 'ordered' 'cast'
     || lk == 23731                 // 'parent' 'cast'
     || lk == 23736                 // 'preceding' 'cast'
     || lk == 23737                 // 'preceding-sibling' 'cast'
     || lk == 23740                 // 'processing-instruction' 'cast'
     || lk == 23743                 // 'return' 'cast'
     || lk == 23746                 // 'satisfies' 'cast'
     || lk == 23748                 // 'schema-attribute' 'cast'
     || lk == 23749                 // 'schema-element' 'cast'
     || lk == 23750                 // 'self' 'cast'
     || lk == 23753                 // 'some' 'cast'
     || lk == 23754                 // 'stable' 'cast'
     || lk == 23755                 // 'start' 'cast'
     || lk == 23758                 // 'switch' 'cast'
     || lk == 23759                 // 'text' 'cast'
     || lk == 23761                 // 'to' 'cast'
     || lk == 23763                 // 'treat' 'cast'
     || lk == 23764                 // 'try' 'cast'
     || lk == 23767                 // 'typeswitch' 'cast'
     || lk == 23768                 // 'union' 'cast'
     || lk == 23769                 // 'unordered' 'cast'
     || lk == 23771                 // 'validate' 'cast'
     || lk == 23776                 // 'where' 'cast'
     || lk == 23780                 // 'xquery' 'cast'
     || lk == 23809                 // IntegerLiteral 'castable'
     || lk == 23810                 // DecimalLiteral 'castable'
     || lk == 23811                 // DoubleLiteral 'castable'
     || lk == 23812                 // StringLiteral 'castable'
     || lk == 23813                 // URIQualifiedName 'castable'
     || lk == 23823                 // QName^Token 'castable'
     || lk == 23829                 // Wildcard 'castable'
     || lk == 23839                 // '$' 'castable'
     || lk == 23840                 // '%' 'castable'
     || lk == 23842                 // '(' 'castable'
     || lk == 23843                 // '(#' 'castable'
     || lk == 23847                 // '+' 'castable'
     || lk == 23849                 // '-' 'castable'
     || lk == 23851                 // '.' 'castable'
     || lk == 23852                 // '..' 'castable'
     || lk == 23853                 // '/' 'castable'
     || lk == 23854                 // '//' 'castable'
     || lk == 23861                 // '<' 'castable'
     || lk == 23873                 // '?' 'castable'
     || lk == 23875                 // '@' 'castable'
     || lk == 23877                 // '[' 'castable'
     || lk == 23885                 // 'ancestor' 'castable'
     || lk == 23886                 // 'ancestor-or-self' 'castable'
     || lk == 23887                 // 'and' 'castable'
     || lk == 23889                 // 'array' 'castable'
     || lk == 23891                 // 'ascending' 'castable'
     || lk == 23893                 // 'attribute' 'castable'
     || lk == 23899                 // 'case' 'castable'
     || lk == 23900                 // 'cast' 'castable'
     || lk == 23901                 // 'castable' 'castable'
     || lk == 23903                 // 'child' 'castable'
     || lk == 23904                 // 'collation' 'castable'
     || lk == 23905                 // 'comment' 'castable'
     || lk == 23911                 // 'count' 'castable'
     || lk == 23914                 // 'declare' 'castable'
     || lk == 23915                 // 'default' 'castable'
     || lk == 23917                 // 'descendant' 'castable'
     || lk == 23918                 // 'descendant-or-self' 'castable'
     || lk == 23919                 // 'descending' 'castable'
     || lk == 23921                 // 'div' 'castable'
     || lk == 23922                 // 'document' 'castable'
     || lk == 23923                 // 'document-node' 'castable'
     || lk == 23924                 // 'element' 'castable'
     || lk == 23925                 // 'else' 'castable'
     || lk == 23926                 // 'empty' 'castable'
     || lk == 23927                 // 'empty-sequence' 'castable'
     || lk == 23929                 // 'end' 'castable'
     || lk == 23930                 // 'eq' 'castable'
     || lk == 23931                 // 'every' 'castable'
     || lk == 23932                 // 'except' 'castable'
     || lk == 23937                 // 'following' 'castable'
     || lk == 23938                 // 'following-sibling' 'castable'
     || lk == 23939                 // 'for' 'castable'
     || lk == 23940                 // 'function' 'castable'
     || lk == 23941                 // 'ge' 'castable'
     || lk == 23943                 // 'group' 'castable'
     || lk == 23945                 // 'gt' 'castable'
     || lk == 23946                 // 'idiv' 'castable'
     || lk == 23947                 // 'if' 'castable'
     || lk == 23948                 // 'import' 'castable'
     || lk == 23953                 // 'instance' 'castable'
     || lk == 23954                 // 'intersect' 'castable'
     || lk == 23957                 // 'is' 'castable'
     || lk == 23958                 // 'item' 'castable'
     || lk == 23962                 // 'le' 'castable'
     || lk == 23964                 // 'let' 'castable'
     || lk == 23966                 // 'lt' 'castable'
     || lk == 23967                 // 'map' 'castable'
     || lk == 23969                 // 'mod' 'castable'
     || lk == 23971                 // 'module' 'castable'
     || lk == 23972                 // 'namespace' 'castable'
     || lk == 23973                 // 'namespace-node' 'castable'
     || lk == 23974                 // 'ne' 'castable'
     || lk == 23978                 // 'node' 'castable'
     || lk == 23981                 // 'only' 'castable'
     || lk == 23983                 // 'or' 'castable'
     || lk == 23984                 // 'order' 'castable'
     || lk == 23985                 // 'ordered' 'castable'
     || lk == 23987                 // 'parent' 'castable'
     || lk == 23992                 // 'preceding' 'castable'
     || lk == 23993                 // 'preceding-sibling' 'castable'
     || lk == 23996                 // 'processing-instruction' 'castable'
     || lk == 23999                 // 'return' 'castable'
     || lk == 24002                 // 'satisfies' 'castable'
     || lk == 24004                 // 'schema-attribute' 'castable'
     || lk == 24005                 // 'schema-element' 'castable'
     || lk == 24006                 // 'self' 'castable'
     || lk == 24009                 // 'some' 'castable'
     || lk == 24010                 // 'stable' 'castable'
     || lk == 24011                 // 'start' 'castable'
     || lk == 24014                 // 'switch' 'castable'
     || lk == 24015                 // 'text' 'castable'
     || lk == 24017                 // 'to' 'castable'
     || lk == 24019                 // 'treat' 'castable'
     || lk == 24020                 // 'try' 'castable'
     || lk == 24023                 // 'typeswitch' 'castable'
     || lk == 24024                 // 'union' 'castable'
     || lk == 24025                 // 'unordered' 'castable'
     || lk == 24027                 // 'validate' 'castable'
     || lk == 24032                 // 'where' 'castable'
     || lk == 24036                 // 'xquery' 'castable'
     || lk == 24351                 // '$' 'child'
     || lk == 24352                 // '%' 'child'
     || lk == 24354                 // '(' 'child'
     || lk == 24355                 // '(#' 'child'
     || lk == 24359                 // '+' 'child'
     || lk == 24361                 // '-' 'child'
     || lk == 24365                 // '/' 'child'
     || lk == 24366                 // '//' 'child'
     || lk == 24373                 // '<' 'child'
     || lk == 24387                 // '@' 'child'
     || lk == 24389                 // '[' 'child'
     || lk == 24405                 // 'attribute' 'child'
     || lk == 24436                 // 'element' 'child'
     || lk == 24511                 // 'return' 'child'
     || lk == 24607                 // '$' 'collation'
     || lk == 24608                 // '%' 'collation'
     || lk == 24610                 // '(' 'collation'
     || lk == 24611                 // '(#' 'collation'
     || lk == 24615                 // '+' 'collation'
     || lk == 24617                 // '-' 'collation'
     || lk == 24621                 // '/' 'collation'
     || lk == 24622                 // '//' 'collation'
     || lk == 24629                 // '<' 'collation'
     || lk == 24641                 // '?' 'collation'
     || lk == 24643                 // '@' 'collation'
     || lk == 24645                 // '[' 'collation'
     || lk == 24661                 // 'attribute' 'collation'
     || lk == 24692                 // 'element' 'collation'
     || lk == 24740                 // 'namespace' 'collation'
     || lk == 24764                 // 'processing-instruction' 'collation'
     || lk == 24767                 // 'return' 'collation'
     || lk == 24863                 // '$' 'comment'
     || lk == 24864                 // '%' 'comment'
     || lk == 24866                 // '(' 'comment'
     || lk == 24867                 // '(#' 'comment'
     || lk == 24871                 // '+' 'comment'
     || lk == 24873                 // '-' 'comment'
     || lk == 24877                 // '/' 'comment'
     || lk == 24878                 // '//' 'comment'
     || lk == 24885                 // '<' 'comment'
     || lk == 24899                 // '@' 'comment'
     || lk == 24901                 // '[' 'comment'
     || lk == 24917                 // 'attribute' 'comment'
     || lk == 24948                 // 'element' 'comment'
     || lk == 25023                 // 'return' 'comment'
     || lk == 25890                 // '(' 'copy'
     || lk == 25925                 // '[' 'copy'
     || lk == 26047                 // 'return' 'copy'
     || lk == 26399                 // '$' 'count'
     || lk == 26400                 // '%' 'count'
     || lk == 26402                 // '(' 'count'
     || lk == 26403                 // '(#' 'count'
     || lk == 26407                 // '+' 'count'
     || lk == 26409                 // '-' 'count'
     || lk == 26413                 // '/' 'count'
     || lk == 26414                 // '//' 'count'
     || lk == 26421                 // '<' 'count'
     || lk == 26433                 // '?' 'count'
     || lk == 26435                 // '@' 'count'
     || lk == 26437                 // '[' 'count'
     || lk == 26453                 // 'attribute' 'count'
     || lk == 26484                 // 'element' 'count'
     || lk == 26532                 // 'namespace' 'count'
     || lk == 26556                 // 'processing-instruction' 'count'
     || lk == 26559                 // 'return' 'count'
     || lk == 27167                 // '$' 'declare'
     || lk == 27168                 // '%' 'declare'
     || lk == 27170                 // '(' 'declare'
     || lk == 27171                 // '(#' 'declare'
     || lk == 27175                 // '+' 'declare'
     || lk == 27177                 // '-' 'declare'
     || lk == 27181                 // '/' 'declare'
     || lk == 27182                 // '//' 'declare'
     || lk == 27189                 // '<' 'declare'
     || lk == 27203                 // '@' 'declare'
     || lk == 27205                 // '[' 'declare'
     || lk == 27221                 // 'attribute' 'declare'
     || lk == 27252                 // 'element' 'declare'
     || lk == 27327                 // 'return' 'declare'
     || lk == 27423                 // '$' 'default'
     || lk == 27424                 // '%' 'default'
     || lk == 27426                 // '(' 'default'
     || lk == 27427                 // '(#' 'default'
     || lk == 27431                 // '+' 'default'
     || lk == 27433                 // '-' 'default'
     || lk == 27437                 // '/' 'default'
     || lk == 27438                 // '//' 'default'
     || lk == 27445                 // '<' 'default'
     || lk == 27457                 // '?' 'default'
     || lk == 27459                 // '@' 'default'
     || lk == 27461                 // '[' 'default'
     || lk == 27477                 // 'attribute' 'default'
     || lk == 27508                 // 'element' 'default'
     || lk == 27556                 // 'namespace' 'default'
     || lk == 27580                 // 'processing-instruction' 'default'
     || lk == 27583                 // 'return' 'default'
     || lk == 27682                 // '(' 'delete'
     || lk == 27717                 // '[' 'delete'
     || lk == 27839                 // 'return' 'delete'
     || lk == 27935                 // '$' 'descendant'
     || lk == 27936                 // '%' 'descendant'
     || lk == 27938                 // '(' 'descendant'
     || lk == 27939                 // '(#' 'descendant'
     || lk == 27943                 // '+' 'descendant'
     || lk == 27945                 // '-' 'descendant'
     || lk == 27949                 // '/' 'descendant'
     || lk == 27950                 // '//' 'descendant'
     || lk == 27957                 // '<' 'descendant'
     || lk == 27971                 // '@' 'descendant'
     || lk == 27973                 // '[' 'descendant'
     || lk == 27989                 // 'attribute' 'descendant'
     || lk == 28020                 // 'element' 'descendant'
     || lk == 28095                 // 'return' 'descendant'
     || lk == 28191                 // '$' 'descendant-or-self'
     || lk == 28192                 // '%' 'descendant-or-self'
     || lk == 28194                 // '(' 'descendant-or-self'
     || lk == 28195                 // '(#' 'descendant-or-self'
     || lk == 28199                 // '+' 'descendant-or-self'
     || lk == 28201                 // '-' 'descendant-or-self'
     || lk == 28205                 // '/' 'descendant-or-self'
     || lk == 28206                 // '//' 'descendant-or-self'
     || lk == 28213                 // '<' 'descendant-or-self'
     || lk == 28227                 // '@' 'descendant-or-self'
     || lk == 28229                 // '[' 'descendant-or-self'
     || lk == 28245                 // 'attribute' 'descendant-or-self'
     || lk == 28276                 // 'element' 'descendant-or-self'
     || lk == 28351                 // 'return' 'descendant-or-self'
     || lk == 28447                 // '$' 'descending'
     || lk == 28448                 // '%' 'descending'
     || lk == 28450                 // '(' 'descending'
     || lk == 28451                 // '(#' 'descending'
     || lk == 28455                 // '+' 'descending'
     || lk == 28457                 // '-' 'descending'
     || lk == 28461                 // '/' 'descending'
     || lk == 28462                 // '//' 'descending'
     || lk == 28469                 // '<' 'descending'
     || lk == 28481                 // '?' 'descending'
     || lk == 28483                 // '@' 'descending'
     || lk == 28485                 // '[' 'descending'
     || lk == 28501                 // 'attribute' 'descending'
     || lk == 28532                 // 'element' 'descending'
     || lk == 28580                 // 'namespace' 'descending'
     || lk == 28604                 // 'processing-instruction' 'descending'
     || lk == 28607                 // 'return' 'descending'
     || lk == 28929                 // IntegerLiteral 'div'
     || lk == 28930                 // DecimalLiteral 'div'
     || lk == 28931                 // DoubleLiteral 'div'
     || lk == 28932                 // StringLiteral 'div'
     || lk == 28933                 // URIQualifiedName 'div'
     || lk == 28943                 // QName^Token 'div'
     || lk == 28949                 // Wildcard 'div'
     || lk == 28959                 // '$' 'div'
     || lk == 28960                 // '%' 'div'
     || lk == 28962                 // '(' 'div'
     || lk == 28963                 // '(#' 'div'
     || lk == 28967                 // '+' 'div'
     || lk == 28969                 // '-' 'div'
     || lk == 28971                 // '.' 'div'
     || lk == 28972                 // '..' 'div'
     || lk == 28973                 // '/' 'div'
     || lk == 28974                 // '//' 'div'
     || lk == 28981                 // '<' 'div'
     || lk == 28993                 // '?' 'div'
     || lk == 28995                 // '@' 'div'
     || lk == 28997                 // '[' 'div'
     || lk == 29005                 // 'ancestor' 'div'
     || lk == 29006                 // 'ancestor-or-self' 'div'
     || lk == 29007                 // 'and' 'div'
     || lk == 29009                 // 'array' 'div'
     || lk == 29011                 // 'ascending' 'div'
     || lk == 29013                 // 'attribute' 'div'
     || lk == 29019                 // 'case' 'div'
     || lk == 29020                 // 'cast' 'div'
     || lk == 29021                 // 'castable' 'div'
     || lk == 29023                 // 'child' 'div'
     || lk == 29024                 // 'collation' 'div'
     || lk == 29025                 // 'comment' 'div'
     || lk == 29031                 // 'count' 'div'
     || lk == 29034                 // 'declare' 'div'
     || lk == 29035                 // 'default' 'div'
     || lk == 29037                 // 'descendant' 'div'
     || lk == 29038                 // 'descendant-or-self' 'div'
     || lk == 29039                 // 'descending' 'div'
     || lk == 29041                 // 'div' 'div'
     || lk == 29042                 // 'document' 'div'
     || lk == 29043                 // 'document-node' 'div'
     || lk == 29044                 // 'element' 'div'
     || lk == 29045                 // 'else' 'div'
     || lk == 29046                 // 'empty' 'div'
     || lk == 29047                 // 'empty-sequence' 'div'
     || lk == 29049                 // 'end' 'div'
     || lk == 29050                 // 'eq' 'div'
     || lk == 29051                 // 'every' 'div'
     || lk == 29052                 // 'except' 'div'
     || lk == 29057                 // 'following' 'div'
     || lk == 29058                 // 'following-sibling' 'div'
     || lk == 29059                 // 'for' 'div'
     || lk == 29060                 // 'function' 'div'
     || lk == 29061                 // 'ge' 'div'
     || lk == 29063                 // 'group' 'div'
     || lk == 29065                 // 'gt' 'div'
     || lk == 29066                 // 'idiv' 'div'
     || lk == 29067                 // 'if' 'div'
     || lk == 29068                 // 'import' 'div'
     || lk == 29073                 // 'instance' 'div'
     || lk == 29074                 // 'intersect' 'div'
     || lk == 29077                 // 'is' 'div'
     || lk == 29078                 // 'item' 'div'
     || lk == 29082                 // 'le' 'div'
     || lk == 29084                 // 'let' 'div'
     || lk == 29086                 // 'lt' 'div'
     || lk == 29087                 // 'map' 'div'
     || lk == 29089                 // 'mod' 'div'
     || lk == 29091                 // 'module' 'div'
     || lk == 29092                 // 'namespace' 'div'
     || lk == 29093                 // 'namespace-node' 'div'
     || lk == 29094                 // 'ne' 'div'
     || lk == 29098                 // 'node' 'div'
     || lk == 29101                 // 'only' 'div'
     || lk == 29103                 // 'or' 'div'
     || lk == 29104                 // 'order' 'div'
     || lk == 29105                 // 'ordered' 'div'
     || lk == 29107                 // 'parent' 'div'
     || lk == 29112                 // 'preceding' 'div'
     || lk == 29113                 // 'preceding-sibling' 'div'
     || lk == 29116                 // 'processing-instruction' 'div'
     || lk == 29119                 // 'return' 'div'
     || lk == 29122                 // 'satisfies' 'div'
     || lk == 29124                 // 'schema-attribute' 'div'
     || lk == 29125                 // 'schema-element' 'div'
     || lk == 29126                 // 'self' 'div'
     || lk == 29129                 // 'some' 'div'
     || lk == 29130                 // 'stable' 'div'
     || lk == 29131                 // 'start' 'div'
     || lk == 29134                 // 'switch' 'div'
     || lk == 29135                 // 'text' 'div'
     || lk == 29137                 // 'to' 'div'
     || lk == 29139                 // 'treat' 'div'
     || lk == 29140                 // 'try' 'div'
     || lk == 29143                 // 'typeswitch' 'div'
     || lk == 29144                 // 'union' 'div'
     || lk == 29145                 // 'unordered' 'div'
     || lk == 29147                 // 'validate' 'div'
     || lk == 29152                 // 'where' 'div'
     || lk == 29156                 // 'xquery' 'div'
     || lk == 29215                 // '$' 'document'
     || lk == 29216                 // '%' 'document'
     || lk == 29218                 // '(' 'document'
     || lk == 29219                 // '(#' 'document'
     || lk == 29223                 // '+' 'document'
     || lk == 29225                 // '-' 'document'
     || lk == 29229                 // '/' 'document'
     || lk == 29230                 // '//' 'document'
     || lk == 29237                 // '<' 'document'
     || lk == 29251                 // '@' 'document'
     || lk == 29253                 // '[' 'document'
     || lk == 29269                 // 'attribute' 'document'
     || lk == 29300                 // 'element' 'document'
     || lk == 29375                 // 'return' 'document'
     || lk == 29471                 // '$' 'document-node'
     || lk == 29472                 // '%' 'document-node'
     || lk == 29474                 // '(' 'document-node'
     || lk == 29475                 // '(#' 'document-node'
     || lk == 29479                 // '+' 'document-node'
     || lk == 29481                 // '-' 'document-node'
     || lk == 29485                 // '/' 'document-node'
     || lk == 29486                 // '//' 'document-node'
     || lk == 29493                 // '<' 'document-node'
     || lk == 29507                 // '@' 'document-node'
     || lk == 29509                 // '[' 'document-node'
     || lk == 29525                 // 'attribute' 'document-node'
     || lk == 29556                 // 'element' 'document-node'
     || lk == 29631                 // 'return' 'document-node'
     || lk == 29727                 // '$' 'element'
     || lk == 29728                 // '%' 'element'
     || lk == 29730                 // '(' 'element'
     || lk == 29731                 // '(#' 'element'
     || lk == 29735                 // '+' 'element'
     || lk == 29737                 // '-' 'element'
     || lk == 29741                 // '/' 'element'
     || lk == 29742                 // '//' 'element'
     || lk == 29749                 // '<' 'element'
     || lk == 29763                 // '@' 'element'
     || lk == 29765                 // '[' 'element'
     || lk == 29781                 // 'attribute' 'element'
     || lk == 29812                 // 'element' 'element'
     || lk == 29887                 // 'return' 'element'
     || lk == 29983                 // '$' 'else'
     || lk == 29984                 // '%' 'else'
     || lk == 29986                 // '(' 'else'
     || lk == 29987                 // '(#' 'else'
     || lk == 29991                 // '+' 'else'
     || lk == 29993                 // '-' 'else'
     || lk == 29997                 // '/' 'else'
     || lk == 29998                 // '//' 'else'
     || lk == 30005                 // '<' 'else'
     || lk == 30017                 // '?' 'else'
     || lk == 30019                 // '@' 'else'
     || lk == 30021                 // '[' 'else'
     || lk == 30037                 // 'attribute' 'else'
     || lk == 30068                 // 'element' 'else'
     || lk == 30116                 // 'namespace' 'else'
     || lk == 30140                 // 'processing-instruction' 'else'
     || lk == 30143                 // 'return' 'else'
     || lk == 30239                 // '$' 'empty'
     || lk == 30240                 // '%' 'empty'
     || lk == 30242                 // '(' 'empty'
     || lk == 30243                 // '(#' 'empty'
     || lk == 30247                 // '+' 'empty'
     || lk == 30249                 // '-' 'empty'
     || lk == 30253                 // '/' 'empty'
     || lk == 30254                 // '//' 'empty'
     || lk == 30261                 // '<' 'empty'
     || lk == 30273                 // '?' 'empty'
     || lk == 30275                 // '@' 'empty'
     || lk == 30277                 // '[' 'empty'
     || lk == 30293                 // 'attribute' 'empty'
     || lk == 30324                 // 'element' 'empty'
     || lk == 30372                 // 'namespace' 'empty'
     || lk == 30396                 // 'processing-instruction' 'empty'
     || lk == 30399                 // 'return' 'empty'
     || lk == 30495                 // '$' 'empty-sequence'
     || lk == 30496                 // '%' 'empty-sequence'
     || lk == 30498                 // '(' 'empty-sequence'
     || lk == 30499                 // '(#' 'empty-sequence'
     || lk == 30503                 // '+' 'empty-sequence'
     || lk == 30505                 // '-' 'empty-sequence'
     || lk == 30509                 // '/' 'empty-sequence'
     || lk == 30510                 // '//' 'empty-sequence'
     || lk == 30517                 // '<' 'empty-sequence'
     || lk == 30531                 // '@' 'empty-sequence'
     || lk == 30533                 // '[' 'empty-sequence'
     || lk == 30549                 // 'attribute' 'empty-sequence'
     || lk == 30580                 // 'element' 'empty-sequence'
     || lk == 30655                 // 'return' 'empty-sequence'
     || lk == 31007                 // '$' 'end'
     || lk == 31008                 // '%' 'end'
     || lk == 31010                 // '(' 'end'
     || lk == 31011                 // '(#' 'end'
     || lk == 31015                 // '+' 'end'
     || lk == 31017                 // '-' 'end'
     || lk == 31021                 // '/' 'end'
     || lk == 31022                 // '//' 'end'
     || lk == 31029                 // '<' 'end'
     || lk == 31041                 // '?' 'end'
     || lk == 31043                 // '@' 'end'
     || lk == 31045                 // '[' 'end'
     || lk == 31061                 // 'attribute' 'end'
     || lk == 31092                 // 'element' 'end'
     || lk == 31140                 // 'namespace' 'end'
     || lk == 31164                 // 'processing-instruction' 'end'
     || lk == 31167                 // 'return' 'end'
     || lk == 31233                 // IntegerLiteral 'eq'
     || lk == 31234                 // DecimalLiteral 'eq'
     || lk == 31235                 // DoubleLiteral 'eq'
     || lk == 31236                 // StringLiteral 'eq'
     || lk == 31237                 // URIQualifiedName 'eq'
     || lk == 31247                 // QName^Token 'eq'
     || lk == 31253                 // Wildcard 'eq'
     || lk == 31263                 // '$' 'eq'
     || lk == 31264                 // '%' 'eq'
     || lk == 31266                 // '(' 'eq'
     || lk == 31267                 // '(#' 'eq'
     || lk == 31271                 // '+' 'eq'
     || lk == 31273                 // '-' 'eq'
     || lk == 31275                 // '.' 'eq'
     || lk == 31276                 // '..' 'eq'
     || lk == 31277                 // '/' 'eq'
     || lk == 31278                 // '//' 'eq'
     || lk == 31285                 // '<' 'eq'
     || lk == 31297                 // '?' 'eq'
     || lk == 31299                 // '@' 'eq'
     || lk == 31301                 // '[' 'eq'
     || lk == 31309                 // 'ancestor' 'eq'
     || lk == 31310                 // 'ancestor-or-self' 'eq'
     || lk == 31311                 // 'and' 'eq'
     || lk == 31313                 // 'array' 'eq'
     || lk == 31315                 // 'ascending' 'eq'
     || lk == 31317                 // 'attribute' 'eq'
     || lk == 31323                 // 'case' 'eq'
     || lk == 31324                 // 'cast' 'eq'
     || lk == 31325                 // 'castable' 'eq'
     || lk == 31327                 // 'child' 'eq'
     || lk == 31328                 // 'collation' 'eq'
     || lk == 31329                 // 'comment' 'eq'
     || lk == 31335                 // 'count' 'eq'
     || lk == 31338                 // 'declare' 'eq'
     || lk == 31339                 // 'default' 'eq'
     || lk == 31341                 // 'descendant' 'eq'
     || lk == 31342                 // 'descendant-or-self' 'eq'
     || lk == 31343                 // 'descending' 'eq'
     || lk == 31345                 // 'div' 'eq'
     || lk == 31346                 // 'document' 'eq'
     || lk == 31347                 // 'document-node' 'eq'
     || lk == 31348                 // 'element' 'eq'
     || lk == 31349                 // 'else' 'eq'
     || lk == 31350                 // 'empty' 'eq'
     || lk == 31351                 // 'empty-sequence' 'eq'
     || lk == 31353                 // 'end' 'eq'
     || lk == 31354                 // 'eq' 'eq'
     || lk == 31355                 // 'every' 'eq'
     || lk == 31356                 // 'except' 'eq'
     || lk == 31361                 // 'following' 'eq'
     || lk == 31362                 // 'following-sibling' 'eq'
     || lk == 31363                 // 'for' 'eq'
     || lk == 31364                 // 'function' 'eq'
     || lk == 31365                 // 'ge' 'eq'
     || lk == 31367                 // 'group' 'eq'
     || lk == 31369                 // 'gt' 'eq'
     || lk == 31370                 // 'idiv' 'eq'
     || lk == 31371                 // 'if' 'eq'
     || lk == 31372                 // 'import' 'eq'
     || lk == 31377                 // 'instance' 'eq'
     || lk == 31378                 // 'intersect' 'eq'
     || lk == 31381                 // 'is' 'eq'
     || lk == 31382                 // 'item' 'eq'
     || lk == 31386                 // 'le' 'eq'
     || lk == 31388                 // 'let' 'eq'
     || lk == 31390                 // 'lt' 'eq'
     || lk == 31391                 // 'map' 'eq'
     || lk == 31393                 // 'mod' 'eq'
     || lk == 31395                 // 'module' 'eq'
     || lk == 31396                 // 'namespace' 'eq'
     || lk == 31397                 // 'namespace-node' 'eq'
     || lk == 31398                 // 'ne' 'eq'
     || lk == 31402                 // 'node' 'eq'
     || lk == 31405                 // 'only' 'eq'
     || lk == 31407                 // 'or' 'eq'
     || lk == 31408                 // 'order' 'eq'
     || lk == 31409                 // 'ordered' 'eq'
     || lk == 31411                 // 'parent' 'eq'
     || lk == 31416                 // 'preceding' 'eq'
     || lk == 31417                 // 'preceding-sibling' 'eq'
     || lk == 31420                 // 'processing-instruction' 'eq'
     || lk == 31423                 // 'return' 'eq'
     || lk == 31426                 // 'satisfies' 'eq'
     || lk == 31428                 // 'schema-attribute' 'eq'
     || lk == 31429                 // 'schema-element' 'eq'
     || lk == 31430                 // 'self' 'eq'
     || lk == 31433                 // 'some' 'eq'
     || lk == 31434                 // 'stable' 'eq'
     || lk == 31435                 // 'start' 'eq'
     || lk == 31438                 // 'switch' 'eq'
     || lk == 31439                 // 'text' 'eq'
     || lk == 31441                 // 'to' 'eq'
     || lk == 31443                 // 'treat' 'eq'
     || lk == 31444                 // 'try' 'eq'
     || lk == 31447                 // 'typeswitch' 'eq'
     || lk == 31448                 // 'union' 'eq'
     || lk == 31449                 // 'unordered' 'eq'
     || lk == 31451                 // 'validate' 'eq'
     || lk == 31456                 // 'where' 'eq'
     || lk == 31460                 // 'xquery' 'eq'
     || lk == 31519                 // '$' 'every'
     || lk == 31520                 // '%' 'every'
     || lk == 31522                 // '(' 'every'
     || lk == 31523                 // '(#' 'every'
     || lk == 31527                 // '+' 'every'
     || lk == 31529                 // '-' 'every'
     || lk == 31533                 // '/' 'every'
     || lk == 31534                 // '//' 'every'
     || lk == 31541                 // '<' 'every'
     || lk == 31555                 // '@' 'every'
     || lk == 31557                 // '[' 'every'
     || lk == 31573                 // 'attribute' 'every'
     || lk == 31604                 // 'element' 'every'
     || lk == 31679                 // 'return' 'every'
     || lk == 31745                 // IntegerLiteral 'except'
     || lk == 31746                 // DecimalLiteral 'except'
     || lk == 31747                 // DoubleLiteral 'except'
     || lk == 31748                 // StringLiteral 'except'
     || lk == 31749                 // URIQualifiedName 'except'
     || lk == 31759                 // QName^Token 'except'
     || lk == 31765                 // Wildcard 'except'
     || lk == 31775                 // '$' 'except'
     || lk == 31776                 // '%' 'except'
     || lk == 31778                 // '(' 'except'
     || lk == 31779                 // '(#' 'except'
     || lk == 31783                 // '+' 'except'
     || lk == 31785                 // '-' 'except'
     || lk == 31787                 // '.' 'except'
     || lk == 31788                 // '..' 'except'
     || lk == 31789                 // '/' 'except'
     || lk == 31790                 // '//' 'except'
     || lk == 31797                 // '<' 'except'
     || lk == 31809                 // '?' 'except'
     || lk == 31811                 // '@' 'except'
     || lk == 31813                 // '[' 'except'
     || lk == 31821                 // 'ancestor' 'except'
     || lk == 31822                 // 'ancestor-or-self' 'except'
     || lk == 31823                 // 'and' 'except'
     || lk == 31825                 // 'array' 'except'
     || lk == 31827                 // 'ascending' 'except'
     || lk == 31829                 // 'attribute' 'except'
     || lk == 31835                 // 'case' 'except'
     || lk == 31836                 // 'cast' 'except'
     || lk == 31837                 // 'castable' 'except'
     || lk == 31839                 // 'child' 'except'
     || lk == 31840                 // 'collation' 'except'
     || lk == 31841                 // 'comment' 'except'
     || lk == 31847                 // 'count' 'except'
     || lk == 31850                 // 'declare' 'except'
     || lk == 31851                 // 'default' 'except'
     || lk == 31853                 // 'descendant' 'except'
     || lk == 31854                 // 'descendant-or-self' 'except'
     || lk == 31855                 // 'descending' 'except'
     || lk == 31857                 // 'div' 'except'
     || lk == 31858                 // 'document' 'except'
     || lk == 31859                 // 'document-node' 'except'
     || lk == 31860                 // 'element' 'except'
     || lk == 31861                 // 'else' 'except'
     || lk == 31862                 // 'empty' 'except'
     || lk == 31863                 // 'empty-sequence' 'except'
     || lk == 31865                 // 'end' 'except'
     || lk == 31866                 // 'eq' 'except'
     || lk == 31867                 // 'every' 'except'
     || lk == 31868                 // 'except' 'except'
     || lk == 31873                 // 'following' 'except'
     || lk == 31874                 // 'following-sibling' 'except'
     || lk == 31875                 // 'for' 'except'
     || lk == 31876                 // 'function' 'except'
     || lk == 31877                 // 'ge' 'except'
     || lk == 31879                 // 'group' 'except'
     || lk == 31881                 // 'gt' 'except'
     || lk == 31882                 // 'idiv' 'except'
     || lk == 31883                 // 'if' 'except'
     || lk == 31884                 // 'import' 'except'
     || lk == 31889                 // 'instance' 'except'
     || lk == 31890                 // 'intersect' 'except'
     || lk == 31893                 // 'is' 'except'
     || lk == 31894                 // 'item' 'except'
     || lk == 31898                 // 'le' 'except'
     || lk == 31900                 // 'let' 'except'
     || lk == 31902                 // 'lt' 'except'
     || lk == 31903                 // 'map' 'except'
     || lk == 31905                 // 'mod' 'except'
     || lk == 31907                 // 'module' 'except'
     || lk == 31908                 // 'namespace' 'except'
     || lk == 31909                 // 'namespace-node' 'except'
     || lk == 31910                 // 'ne' 'except'
     || lk == 31914                 // 'node' 'except'
     || lk == 31917                 // 'only' 'except'
     || lk == 31919                 // 'or' 'except'
     || lk == 31920                 // 'order' 'except'
     || lk == 31921                 // 'ordered' 'except'
     || lk == 31923                 // 'parent' 'except'
     || lk == 31928                 // 'preceding' 'except'
     || lk == 31929                 // 'preceding-sibling' 'except'
     || lk == 31932                 // 'processing-instruction' 'except'
     || lk == 31935                 // 'return' 'except'
     || lk == 31938                 // 'satisfies' 'except'
     || lk == 31940                 // 'schema-attribute' 'except'
     || lk == 31941                 // 'schema-element' 'except'
     || lk == 31942                 // 'self' 'except'
     || lk == 31945                 // 'some' 'except'
     || lk == 31946                 // 'stable' 'except'
     || lk == 31947                 // 'start' 'except'
     || lk == 31950                 // 'switch' 'except'
     || lk == 31951                 // 'text' 'except'
     || lk == 31953                 // 'to' 'except'
     || lk == 31955                 // 'treat' 'except'
     || lk == 31956                 // 'try' 'except'
     || lk == 31959                 // 'typeswitch' 'except'
     || lk == 31960                 // 'union' 'except'
     || lk == 31961                 // 'unordered' 'except'
     || lk == 31963                 // 'validate' 'except'
     || lk == 31968                 // 'where' 'except'
     || lk == 31972                 // 'xquery' 'except'
     || lk == 33055                 // '$' 'following'
     || lk == 33056                 // '%' 'following'
     || lk == 33058                 // '(' 'following'
     || lk == 33059                 // '(#' 'following'
     || lk == 33063                 // '+' 'following'
     || lk == 33065                 // '-' 'following'
     || lk == 33069                 // '/' 'following'
     || lk == 33070                 // '//' 'following'
     || lk == 33077                 // '<' 'following'
     || lk == 33091                 // '@' 'following'
     || lk == 33093                 // '[' 'following'
     || lk == 33109                 // 'attribute' 'following'
     || lk == 33140                 // 'element' 'following'
     || lk == 33215                 // 'return' 'following'
     || lk == 33311                 // '$' 'following-sibling'
     || lk == 33312                 // '%' 'following-sibling'
     || lk == 33314                 // '(' 'following-sibling'
     || lk == 33315                 // '(#' 'following-sibling'
     || lk == 33319                 // '+' 'following-sibling'
     || lk == 33321                 // '-' 'following-sibling'
     || lk == 33325                 // '/' 'following-sibling'
     || lk == 33326                 // '//' 'following-sibling'
     || lk == 33333                 // '<' 'following-sibling'
     || lk == 33347                 // '@' 'following-sibling'
     || lk == 33349                 // '[' 'following-sibling'
     || lk == 33365                 // 'attribute' 'following-sibling'
     || lk == 33396                 // 'element' 'following-sibling'
     || lk == 33471                 // 'return' 'following-sibling'
     || lk == 33567                 // '$' 'for'
     || lk == 33568                 // '%' 'for'
     || lk == 33570                 // '(' 'for'
     || lk == 33571                 // '(#' 'for'
     || lk == 33575                 // '+' 'for'
     || lk == 33577                 // '-' 'for'
     || lk == 33581                 // '/' 'for'
     || lk == 33582                 // '//' 'for'
     || lk == 33589                 // '<' 'for'
     || lk == 33601                 // '?' 'for'
     || lk == 33603                 // '@' 'for'
     || lk == 33605                 // '[' 'for'
     || lk == 33621                 // 'attribute' 'for'
     || lk == 33652                 // 'element' 'for'
     || lk == 33700                 // 'namespace' 'for'
     || lk == 33724                 // 'processing-instruction' 'for'
     || lk == 33727                 // 'return' 'for'
     || lk == 33823                 // '$' 'function'
     || lk == 33824                 // '%' 'function'
     || lk == 33826                 // '(' 'function'
     || lk == 33827                 // '(#' 'function'
     || lk == 33831                 // '+' 'function'
     || lk == 33833                 // '-' 'function'
     || lk == 33837                 // '/' 'function'
     || lk == 33838                 // '//' 'function'
     || lk == 33845                 // '<' 'function'
     || lk == 33859                 // '@' 'function'
     || lk == 33861                 // '[' 'function'
     || lk == 33877                 // 'attribute' 'function'
     || lk == 33908                 // 'element' 'function'
     || lk == 33983                 // 'return' 'function'
     || lk == 34049                 // IntegerLiteral 'ge'
     || lk == 34050                 // DecimalLiteral 'ge'
     || lk == 34051                 // DoubleLiteral 'ge'
     || lk == 34052                 // StringLiteral 'ge'
     || lk == 34053                 // URIQualifiedName 'ge'
     || lk == 34063                 // QName^Token 'ge'
     || lk == 34069                 // Wildcard 'ge'
     || lk == 34079                 // '$' 'ge'
     || lk == 34080                 // '%' 'ge'
     || lk == 34082                 // '(' 'ge'
     || lk == 34083                 // '(#' 'ge'
     || lk == 34087                 // '+' 'ge'
     || lk == 34089                 // '-' 'ge'
     || lk == 34091                 // '.' 'ge'
     || lk == 34092                 // '..' 'ge'
     || lk == 34093                 // '/' 'ge'
     || lk == 34094                 // '//' 'ge'
     || lk == 34101                 // '<' 'ge'
     || lk == 34113                 // '?' 'ge'
     || lk == 34115                 // '@' 'ge'
     || lk == 34117                 // '[' 'ge'
     || lk == 34125                 // 'ancestor' 'ge'
     || lk == 34126                 // 'ancestor-or-self' 'ge'
     || lk == 34127                 // 'and' 'ge'
     || lk == 34129                 // 'array' 'ge'
     || lk == 34131                 // 'ascending' 'ge'
     || lk == 34133                 // 'attribute' 'ge'
     || lk == 34139                 // 'case' 'ge'
     || lk == 34140                 // 'cast' 'ge'
     || lk == 34141                 // 'castable' 'ge'
     || lk == 34143                 // 'child' 'ge'
     || lk == 34144                 // 'collation' 'ge'
     || lk == 34145                 // 'comment' 'ge'
     || lk == 34151                 // 'count' 'ge'
     || lk == 34154                 // 'declare' 'ge'
     || lk == 34155                 // 'default' 'ge'
     || lk == 34157                 // 'descendant' 'ge'
     || lk == 34158                 // 'descendant-or-self' 'ge'
     || lk == 34159                 // 'descending' 'ge'
     || lk == 34161                 // 'div' 'ge'
     || lk == 34162                 // 'document' 'ge'
     || lk == 34163                 // 'document-node' 'ge'
     || lk == 34164                 // 'element' 'ge'
     || lk == 34165                 // 'else' 'ge'
     || lk == 34166                 // 'empty' 'ge'
     || lk == 34167                 // 'empty-sequence' 'ge'
     || lk == 34169                 // 'end' 'ge'
     || lk == 34170                 // 'eq' 'ge'
     || lk == 34171                 // 'every' 'ge'
     || lk == 34172                 // 'except' 'ge'
     || lk == 34177                 // 'following' 'ge'
     || lk == 34178                 // 'following-sibling' 'ge'
     || lk == 34179                 // 'for' 'ge'
     || lk == 34180                 // 'function' 'ge'
     || lk == 34181                 // 'ge' 'ge'
     || lk == 34183                 // 'group' 'ge'
     || lk == 34185                 // 'gt' 'ge'
     || lk == 34186                 // 'idiv' 'ge'
     || lk == 34187                 // 'if' 'ge'
     || lk == 34188                 // 'import' 'ge'
     || lk == 34193                 // 'instance' 'ge'
     || lk == 34194                 // 'intersect' 'ge'
     || lk == 34197                 // 'is' 'ge'
     || lk == 34198                 // 'item' 'ge'
     || lk == 34202                 // 'le' 'ge'
     || lk == 34204                 // 'let' 'ge'
     || lk == 34206                 // 'lt' 'ge'
     || lk == 34207                 // 'map' 'ge'
     || lk == 34209                 // 'mod' 'ge'
     || lk == 34211                 // 'module' 'ge'
     || lk == 34212                 // 'namespace' 'ge'
     || lk == 34213                 // 'namespace-node' 'ge'
     || lk == 34214                 // 'ne' 'ge'
     || lk == 34218                 // 'node' 'ge'
     || lk == 34221                 // 'only' 'ge'
     || lk == 34223                 // 'or' 'ge'
     || lk == 34224                 // 'order' 'ge'
     || lk == 34225                 // 'ordered' 'ge'
     || lk == 34227                 // 'parent' 'ge'
     || lk == 34232                 // 'preceding' 'ge'
     || lk == 34233                 // 'preceding-sibling' 'ge'
     || lk == 34236                 // 'processing-instruction' 'ge'
     || lk == 34239                 // 'return' 'ge'
     || lk == 34242                 // 'satisfies' 'ge'
     || lk == 34244                 // 'schema-attribute' 'ge'
     || lk == 34245                 // 'schema-element' 'ge'
     || lk == 34246                 // 'self' 'ge'
     || lk == 34249                 // 'some' 'ge'
     || lk == 34250                 // 'stable' 'ge'
     || lk == 34251                 // 'start' 'ge'
     || lk == 34254                 // 'switch' 'ge'
     || lk == 34255                 // 'text' 'ge'
     || lk == 34257                 // 'to' 'ge'
     || lk == 34259                 // 'treat' 'ge'
     || lk == 34260                 // 'try' 'ge'
     || lk == 34263                 // 'typeswitch' 'ge'
     || lk == 34264                 // 'union' 'ge'
     || lk == 34265                 // 'unordered' 'ge'
     || lk == 34267                 // 'validate' 'ge'
     || lk == 34272                 // 'where' 'ge'
     || lk == 34276                 // 'xquery' 'ge'
     || lk == 34591                 // '$' 'group'
     || lk == 34592                 // '%' 'group'
     || lk == 34594                 // '(' 'group'
     || lk == 34595                 // '(#' 'group'
     || lk == 34599                 // '+' 'group'
     || lk == 34601                 // '-' 'group'
     || lk == 34605                 // '/' 'group'
     || lk == 34606                 // '//' 'group'
     || lk == 34613                 // '<' 'group'
     || lk == 34625                 // '?' 'group'
     || lk == 34627                 // '@' 'group'
     || lk == 34629                 // '[' 'group'
     || lk == 34645                 // 'attribute' 'group'
     || lk == 34676                 // 'element' 'group'
     || lk == 34724                 // 'namespace' 'group'
     || lk == 34748                 // 'processing-instruction' 'group'
     || lk == 34751                 // 'return' 'group'
     || lk == 35073                 // IntegerLiteral 'gt'
     || lk == 35074                 // DecimalLiteral 'gt'
     || lk == 35075                 // DoubleLiteral 'gt'
     || lk == 35076                 // StringLiteral 'gt'
     || lk == 35077                 // URIQualifiedName 'gt'
     || lk == 35087                 // QName^Token 'gt'
     || lk == 35093                 // Wildcard 'gt'
     || lk == 35103                 // '$' 'gt'
     || lk == 35104                 // '%' 'gt'
     || lk == 35106                 // '(' 'gt'
     || lk == 35107                 // '(#' 'gt'
     || lk == 35111                 // '+' 'gt'
     || lk == 35113                 // '-' 'gt'
     || lk == 35115                 // '.' 'gt'
     || lk == 35116                 // '..' 'gt'
     || lk == 35117                 // '/' 'gt'
     || lk == 35118                 // '//' 'gt'
     || lk == 35125                 // '<' 'gt'
     || lk == 35137                 // '?' 'gt'
     || lk == 35139                 // '@' 'gt'
     || lk == 35141                 // '[' 'gt'
     || lk == 35149                 // 'ancestor' 'gt'
     || lk == 35150                 // 'ancestor-or-self' 'gt'
     || lk == 35151                 // 'and' 'gt'
     || lk == 35153                 // 'array' 'gt'
     || lk == 35155                 // 'ascending' 'gt'
     || lk == 35157                 // 'attribute' 'gt'
     || lk == 35163                 // 'case' 'gt'
     || lk == 35164                 // 'cast' 'gt'
     || lk == 35165                 // 'castable' 'gt'
     || lk == 35167                 // 'child' 'gt'
     || lk == 35168                 // 'collation' 'gt'
     || lk == 35169                 // 'comment' 'gt'
     || lk == 35175                 // 'count' 'gt'
     || lk == 35178                 // 'declare' 'gt'
     || lk == 35179                 // 'default' 'gt'
     || lk == 35181                 // 'descendant' 'gt'
     || lk == 35182                 // 'descendant-or-self' 'gt'
     || lk == 35183                 // 'descending' 'gt'
     || lk == 35185                 // 'div' 'gt'
     || lk == 35186                 // 'document' 'gt'
     || lk == 35187                 // 'document-node' 'gt'
     || lk == 35188                 // 'element' 'gt'
     || lk == 35189                 // 'else' 'gt'
     || lk == 35190                 // 'empty' 'gt'
     || lk == 35191                 // 'empty-sequence' 'gt'
     || lk == 35193                 // 'end' 'gt'
     || lk == 35194                 // 'eq' 'gt'
     || lk == 35195                 // 'every' 'gt'
     || lk == 35196                 // 'except' 'gt'
     || lk == 35201                 // 'following' 'gt'
     || lk == 35202                 // 'following-sibling' 'gt'
     || lk == 35203                 // 'for' 'gt'
     || lk == 35204                 // 'function' 'gt'
     || lk == 35205                 // 'ge' 'gt'
     || lk == 35207                 // 'group' 'gt'
     || lk == 35209                 // 'gt' 'gt'
     || lk == 35210                 // 'idiv' 'gt'
     || lk == 35211                 // 'if' 'gt'
     || lk == 35212                 // 'import' 'gt'
     || lk == 35217                 // 'instance' 'gt'
     || lk == 35218                 // 'intersect' 'gt'
     || lk == 35221                 // 'is' 'gt'
     || lk == 35222                 // 'item' 'gt'
     || lk == 35226                 // 'le' 'gt'
     || lk == 35228                 // 'let' 'gt'
     || lk == 35230                 // 'lt' 'gt'
     || lk == 35231                 // 'map' 'gt'
     || lk == 35233                 // 'mod' 'gt'
     || lk == 35235                 // 'module' 'gt'
     || lk == 35236                 // 'namespace' 'gt'
     || lk == 35237                 // 'namespace-node' 'gt'
     || lk == 35238                 // 'ne' 'gt'
     || lk == 35242                 // 'node' 'gt'
     || lk == 35245                 // 'only' 'gt'
     || lk == 35247                 // 'or' 'gt'
     || lk == 35248                 // 'order' 'gt'
     || lk == 35249                 // 'ordered' 'gt'
     || lk == 35251                 // 'parent' 'gt'
     || lk == 35256                 // 'preceding' 'gt'
     || lk == 35257                 // 'preceding-sibling' 'gt'
     || lk == 35260                 // 'processing-instruction' 'gt'
     || lk == 35263                 // 'return' 'gt'
     || lk == 35266                 // 'satisfies' 'gt'
     || lk == 35268                 // 'schema-attribute' 'gt'
     || lk == 35269                 // 'schema-element' 'gt'
     || lk == 35270                 // 'self' 'gt'
     || lk == 35273                 // 'some' 'gt'
     || lk == 35274                 // 'stable' 'gt'
     || lk == 35275                 // 'start' 'gt'
     || lk == 35278                 // 'switch' 'gt'
     || lk == 35279                 // 'text' 'gt'
     || lk == 35281                 // 'to' 'gt'
     || lk == 35283                 // 'treat' 'gt'
     || lk == 35284                 // 'try' 'gt'
     || lk == 35287                 // 'typeswitch' 'gt'
     || lk == 35288                 // 'union' 'gt'
     || lk == 35289                 // 'unordered' 'gt'
     || lk == 35291                 // 'validate' 'gt'
     || lk == 35296                 // 'where' 'gt'
     || lk == 35300                 // 'xquery' 'gt'
     || lk == 35329                 // IntegerLiteral 'idiv'
     || lk == 35330                 // DecimalLiteral 'idiv'
     || lk == 35331                 // DoubleLiteral 'idiv'
     || lk == 35332                 // StringLiteral 'idiv'
     || lk == 35333                 // URIQualifiedName 'idiv'
     || lk == 35343                 // QName^Token 'idiv'
     || lk == 35349                 // Wildcard 'idiv'
     || lk == 35359                 // '$' 'idiv'
     || lk == 35360                 // '%' 'idiv'
     || lk == 35362                 // '(' 'idiv'
     || lk == 35363                 // '(#' 'idiv'
     || lk == 35367                 // '+' 'idiv'
     || lk == 35369                 // '-' 'idiv'
     || lk == 35371                 // '.' 'idiv'
     || lk == 35372                 // '..' 'idiv'
     || lk == 35373                 // '/' 'idiv'
     || lk == 35374                 // '//' 'idiv'
     || lk == 35381                 // '<' 'idiv'
     || lk == 35393                 // '?' 'idiv'
     || lk == 35395                 // '@' 'idiv'
     || lk == 35397                 // '[' 'idiv'
     || lk == 35405                 // 'ancestor' 'idiv'
     || lk == 35406                 // 'ancestor-or-self' 'idiv'
     || lk == 35407                 // 'and' 'idiv'
     || lk == 35409                 // 'array' 'idiv'
     || lk == 35411                 // 'ascending' 'idiv'
     || lk == 35413                 // 'attribute' 'idiv'
     || lk == 35419                 // 'case' 'idiv'
     || lk == 35420                 // 'cast' 'idiv'
     || lk == 35421                 // 'castable' 'idiv'
     || lk == 35423                 // 'child' 'idiv'
     || lk == 35424                 // 'collation' 'idiv'
     || lk == 35425                 // 'comment' 'idiv'
     || lk == 35431                 // 'count' 'idiv'
     || lk == 35434                 // 'declare' 'idiv'
     || lk == 35435                 // 'default' 'idiv'
     || lk == 35437                 // 'descendant' 'idiv'
     || lk == 35438                 // 'descendant-or-self' 'idiv'
     || lk == 35439                 // 'descending' 'idiv'
     || lk == 35441                 // 'div' 'idiv'
     || lk == 35442                 // 'document' 'idiv'
     || lk == 35443                 // 'document-node' 'idiv'
     || lk == 35444                 // 'element' 'idiv'
     || lk == 35445                 // 'else' 'idiv'
     || lk == 35446                 // 'empty' 'idiv'
     || lk == 35447                 // 'empty-sequence' 'idiv'
     || lk == 35449                 // 'end' 'idiv'
     || lk == 35450                 // 'eq' 'idiv'
     || lk == 35451                 // 'every' 'idiv'
     || lk == 35452                 // 'except' 'idiv'
     || lk == 35457                 // 'following' 'idiv'
     || lk == 35458                 // 'following-sibling' 'idiv'
     || lk == 35459                 // 'for' 'idiv'
     || lk == 35460                 // 'function' 'idiv'
     || lk == 35461                 // 'ge' 'idiv'
     || lk == 35463                 // 'group' 'idiv'
     || lk == 35465                 // 'gt' 'idiv'
     || lk == 35466                 // 'idiv' 'idiv'
     || lk == 35467                 // 'if' 'idiv'
     || lk == 35468                 // 'import' 'idiv'
     || lk == 35473                 // 'instance' 'idiv'
     || lk == 35474                 // 'intersect' 'idiv'
     || lk == 35477                 // 'is' 'idiv'
     || lk == 35478                 // 'item' 'idiv'
     || lk == 35482                 // 'le' 'idiv'
     || lk == 35484                 // 'let' 'idiv'
     || lk == 35486                 // 'lt' 'idiv'
     || lk == 35487                 // 'map' 'idiv'
     || lk == 35489                 // 'mod' 'idiv'
     || lk == 35491                 // 'module' 'idiv'
     || lk == 35492                 // 'namespace' 'idiv'
     || lk == 35493                 // 'namespace-node' 'idiv'
     || lk == 35494                 // 'ne' 'idiv'
     || lk == 35498                 // 'node' 'idiv'
     || lk == 35501                 // 'only' 'idiv'
     || lk == 35503                 // 'or' 'idiv'
     || lk == 35504                 // 'order' 'idiv'
     || lk == 35505                 // 'ordered' 'idiv'
     || lk == 35507                 // 'parent' 'idiv'
     || lk == 35512                 // 'preceding' 'idiv'
     || lk == 35513                 // 'preceding-sibling' 'idiv'
     || lk == 35516                 // 'processing-instruction' 'idiv'
     || lk == 35519                 // 'return' 'idiv'
     || lk == 35522                 // 'satisfies' 'idiv'
     || lk == 35524                 // 'schema-attribute' 'idiv'
     || lk == 35525                 // 'schema-element' 'idiv'
     || lk == 35526                 // 'self' 'idiv'
     || lk == 35529                 // 'some' 'idiv'
     || lk == 35530                 // 'stable' 'idiv'
     || lk == 35531                 // 'start' 'idiv'
     || lk == 35534                 // 'switch' 'idiv'
     || lk == 35535                 // 'text' 'idiv'
     || lk == 35537                 // 'to' 'idiv'
     || lk == 35539                 // 'treat' 'idiv'
     || lk == 35540                 // 'try' 'idiv'
     || lk == 35543                 // 'typeswitch' 'idiv'
     || lk == 35544                 // 'union' 'idiv'
     || lk == 35545                 // 'unordered' 'idiv'
     || lk == 35547                 // 'validate' 'idiv'
     || lk == 35552                 // 'where' 'idiv'
     || lk == 35556                 // 'xquery' 'idiv'
     || lk == 35615                 // '$' 'if'
     || lk == 35616                 // '%' 'if'
     || lk == 35618                 // '(' 'if'
     || lk == 35619                 // '(#' 'if'
     || lk == 35623                 // '+' 'if'
     || lk == 35625                 // '-' 'if'
     || lk == 35629                 // '/' 'if'
     || lk == 35630                 // '//' 'if'
     || lk == 35637                 // '<' 'if'
     || lk == 35651                 // '@' 'if'
     || lk == 35653                 // '[' 'if'
     || lk == 35669                 // 'attribute' 'if'
     || lk == 35700                 // 'element' 'if'
     || lk == 35775                 // 'return' 'if'
     || lk == 35871                 // '$' 'import'
     || lk == 35872                 // '%' 'import'
     || lk == 35874                 // '(' 'import'
     || lk == 35875                 // '(#' 'import'
     || lk == 35879                 // '+' 'import'
     || lk == 35881                 // '-' 'import'
     || lk == 35885                 // '/' 'import'
     || lk == 35886                 // '//' 'import'
     || lk == 35893                 // '<' 'import'
     || lk == 35907                 // '@' 'import'
     || lk == 35909                 // '[' 'import'
     || lk == 35925                 // 'attribute' 'import'
     || lk == 35956                 // 'element' 'import'
     || lk == 36031                 // 'return' 'import'
     || lk == 36898                 // '(' 'insert'
     || lk == 36933                 // '[' 'insert'
     || lk == 37055                 // 'return' 'insert'
     || lk == 37121                 // IntegerLiteral 'instance'
     || lk == 37122                 // DecimalLiteral 'instance'
     || lk == 37123                 // DoubleLiteral 'instance'
     || lk == 37124                 // StringLiteral 'instance'
     || lk == 37125                 // URIQualifiedName 'instance'
     || lk == 37135                 // QName^Token 'instance'
     || lk == 37141                 // Wildcard 'instance'
     || lk == 37151                 // '$' 'instance'
     || lk == 37152                 // '%' 'instance'
     || lk == 37154                 // '(' 'instance'
     || lk == 37155                 // '(#' 'instance'
     || lk == 37159                 // '+' 'instance'
     || lk == 37161                 // '-' 'instance'
     || lk == 37163                 // '.' 'instance'
     || lk == 37164                 // '..' 'instance'
     || lk == 37165                 // '/' 'instance'
     || lk == 37166                 // '//' 'instance'
     || lk == 37173                 // '<' 'instance'
     || lk == 37185                 // '?' 'instance'
     || lk == 37187                 // '@' 'instance'
     || lk == 37189                 // '[' 'instance'
     || lk == 37197                 // 'ancestor' 'instance'
     || lk == 37198                 // 'ancestor-or-self' 'instance'
     || lk == 37199                 // 'and' 'instance'
     || lk == 37201                 // 'array' 'instance'
     || lk == 37203                 // 'ascending' 'instance'
     || lk == 37205                 // 'attribute' 'instance'
     || lk == 37211                 // 'case' 'instance'
     || lk == 37212                 // 'cast' 'instance'
     || lk == 37213                 // 'castable' 'instance'
     || lk == 37215                 // 'child' 'instance'
     || lk == 37216                 // 'collation' 'instance'
     || lk == 37217                 // 'comment' 'instance'
     || lk == 37223                 // 'count' 'instance'
     || lk == 37226                 // 'declare' 'instance'
     || lk == 37227                 // 'default' 'instance'
     || lk == 37229                 // 'descendant' 'instance'
     || lk == 37230                 // 'descendant-or-self' 'instance'
     || lk == 37231                 // 'descending' 'instance'
     || lk == 37233                 // 'div' 'instance'
     || lk == 37234                 // 'document' 'instance'
     || lk == 37235                 // 'document-node' 'instance'
     || lk == 37236                 // 'element' 'instance'
     || lk == 37237                 // 'else' 'instance'
     || lk == 37238                 // 'empty' 'instance'
     || lk == 37239                 // 'empty-sequence' 'instance'
     || lk == 37241                 // 'end' 'instance'
     || lk == 37242                 // 'eq' 'instance'
     || lk == 37243                 // 'every' 'instance'
     || lk == 37244                 // 'except' 'instance'
     || lk == 37249                 // 'following' 'instance'
     || lk == 37250                 // 'following-sibling' 'instance'
     || lk == 37251                 // 'for' 'instance'
     || lk == 37252                 // 'function' 'instance'
     || lk == 37253                 // 'ge' 'instance'
     || lk == 37255                 // 'group' 'instance'
     || lk == 37257                 // 'gt' 'instance'
     || lk == 37258                 // 'idiv' 'instance'
     || lk == 37259                 // 'if' 'instance'
     || lk == 37260                 // 'import' 'instance'
     || lk == 37265                 // 'instance' 'instance'
     || lk == 37266                 // 'intersect' 'instance'
     || lk == 37269                 // 'is' 'instance'
     || lk == 37270                 // 'item' 'instance'
     || lk == 37274                 // 'le' 'instance'
     || lk == 37276                 // 'let' 'instance'
     || lk == 37278                 // 'lt' 'instance'
     || lk == 37279                 // 'map' 'instance'
     || lk == 37281                 // 'mod' 'instance'
     || lk == 37283                 // 'module' 'instance'
     || lk == 37284                 // 'namespace' 'instance'
     || lk == 37285                 // 'namespace-node' 'instance'
     || lk == 37286                 // 'ne' 'instance'
     || lk == 37290                 // 'node' 'instance'
     || lk == 37293                 // 'only' 'instance'
     || lk == 37295                 // 'or' 'instance'
     || lk == 37296                 // 'order' 'instance'
     || lk == 37297                 // 'ordered' 'instance'
     || lk == 37299                 // 'parent' 'instance'
     || lk == 37304                 // 'preceding' 'instance'
     || lk == 37305                 // 'preceding-sibling' 'instance'
     || lk == 37308                 // 'processing-instruction' 'instance'
     || lk == 37311                 // 'return' 'instance'
     || lk == 37314                 // 'satisfies' 'instance'
     || lk == 37316                 // 'schema-attribute' 'instance'
     || lk == 37317                 // 'schema-element' 'instance'
     || lk == 37318                 // 'self' 'instance'
     || lk == 37321                 // 'some' 'instance'
     || lk == 37322                 // 'stable' 'instance'
     || lk == 37323                 // 'start' 'instance'
     || lk == 37326                 // 'switch' 'instance'
     || lk == 37327                 // 'text' 'instance'
     || lk == 37329                 // 'to' 'instance'
     || lk == 37331                 // 'treat' 'instance'
     || lk == 37332                 // 'try' 'instance'
     || lk == 37335                 // 'typeswitch' 'instance'
     || lk == 37336                 // 'union' 'instance'
     || lk == 37337                 // 'unordered' 'instance'
     || lk == 37339                 // 'validate' 'instance'
     || lk == 37344                 // 'where' 'instance'
     || lk == 37348                 // 'xquery' 'instance'
     || lk == 37377                 // IntegerLiteral 'intersect'
     || lk == 37378                 // DecimalLiteral 'intersect'
     || lk == 37379                 // DoubleLiteral 'intersect'
     || lk == 37380                 // StringLiteral 'intersect'
     || lk == 37381                 // URIQualifiedName 'intersect'
     || lk == 37391                 // QName^Token 'intersect'
     || lk == 37397                 // Wildcard 'intersect'
     || lk == 37407                 // '$' 'intersect'
     || lk == 37408                 // '%' 'intersect'
     || lk == 37410                 // '(' 'intersect'
     || lk == 37411                 // '(#' 'intersect'
     || lk == 37415                 // '+' 'intersect'
     || lk == 37417                 // '-' 'intersect'
     || lk == 37419                 // '.' 'intersect'
     || lk == 37420                 // '..' 'intersect'
     || lk == 37421                 // '/' 'intersect'
     || lk == 37422                 // '//' 'intersect'
     || lk == 37429                 // '<' 'intersect'
     || lk == 37441                 // '?' 'intersect'
     || lk == 37443                 // '@' 'intersect'
     || lk == 37445                 // '[' 'intersect'
     || lk == 37453                 // 'ancestor' 'intersect'
     || lk == 37454                 // 'ancestor-or-self' 'intersect'
     || lk == 37455                 // 'and' 'intersect'
     || lk == 37457                 // 'array' 'intersect'
     || lk == 37459                 // 'ascending' 'intersect'
     || lk == 37461                 // 'attribute' 'intersect'
     || lk == 37467                 // 'case' 'intersect'
     || lk == 37468                 // 'cast' 'intersect'
     || lk == 37469                 // 'castable' 'intersect'
     || lk == 37471                 // 'child' 'intersect'
     || lk == 37472                 // 'collation' 'intersect'
     || lk == 37473                 // 'comment' 'intersect'
     || lk == 37479                 // 'count' 'intersect'
     || lk == 37482                 // 'declare' 'intersect'
     || lk == 37483                 // 'default' 'intersect'
     || lk == 37485                 // 'descendant' 'intersect'
     || lk == 37486                 // 'descendant-or-self' 'intersect'
     || lk == 37487                 // 'descending' 'intersect'
     || lk == 37489                 // 'div' 'intersect'
     || lk == 37490                 // 'document' 'intersect'
     || lk == 37491                 // 'document-node' 'intersect'
     || lk == 37492                 // 'element' 'intersect'
     || lk == 37493                 // 'else' 'intersect'
     || lk == 37494                 // 'empty' 'intersect'
     || lk == 37495                 // 'empty-sequence' 'intersect'
     || lk == 37497                 // 'end' 'intersect'
     || lk == 37498                 // 'eq' 'intersect'
     || lk == 37499                 // 'every' 'intersect'
     || lk == 37500                 // 'except' 'intersect'
     || lk == 37505                 // 'following' 'intersect'
     || lk == 37506                 // 'following-sibling' 'intersect'
     || lk == 37507                 // 'for' 'intersect'
     || lk == 37508                 // 'function' 'intersect'
     || lk == 37509                 // 'ge' 'intersect'
     || lk == 37511                 // 'group' 'intersect'
     || lk == 37513                 // 'gt' 'intersect'
     || lk == 37514                 // 'idiv' 'intersect'
     || lk == 37515                 // 'if' 'intersect'
     || lk == 37516                 // 'import' 'intersect'
     || lk == 37521                 // 'instance' 'intersect'
     || lk == 37522                 // 'intersect' 'intersect'
     || lk == 37525                 // 'is' 'intersect'
     || lk == 37526                 // 'item' 'intersect'
     || lk == 37530                 // 'le' 'intersect'
     || lk == 37532                 // 'let' 'intersect'
     || lk == 37534                 // 'lt' 'intersect'
     || lk == 37535                 // 'map' 'intersect'
     || lk == 37537                 // 'mod' 'intersect'
     || lk == 37539                 // 'module' 'intersect'
     || lk == 37540                 // 'namespace' 'intersect'
     || lk == 37541                 // 'namespace-node' 'intersect'
     || lk == 37542                 // 'ne' 'intersect'
     || lk == 37546                 // 'node' 'intersect'
     || lk == 37549                 // 'only' 'intersect'
     || lk == 37551                 // 'or' 'intersect'
     || lk == 37552                 // 'order' 'intersect'
     || lk == 37553                 // 'ordered' 'intersect'
     || lk == 37555                 // 'parent' 'intersect'
     || lk == 37560                 // 'preceding' 'intersect'
     || lk == 37561                 // 'preceding-sibling' 'intersect'
     || lk == 37564                 // 'processing-instruction' 'intersect'
     || lk == 37567                 // 'return' 'intersect'
     || lk == 37570                 // 'satisfies' 'intersect'
     || lk == 37572                 // 'schema-attribute' 'intersect'
     || lk == 37573                 // 'schema-element' 'intersect'
     || lk == 37574                 // 'self' 'intersect'
     || lk == 37577                 // 'some' 'intersect'
     || lk == 37578                 // 'stable' 'intersect'
     || lk == 37579                 // 'start' 'intersect'
     || lk == 37582                 // 'switch' 'intersect'
     || lk == 37583                 // 'text' 'intersect'
     || lk == 37585                 // 'to' 'intersect'
     || lk == 37587                 // 'treat' 'intersect'
     || lk == 37588                 // 'try' 'intersect'
     || lk == 37591                 // 'typeswitch' 'intersect'
     || lk == 37592                 // 'union' 'intersect'
     || lk == 37593                 // 'unordered' 'intersect'
     || lk == 37595                 // 'validate' 'intersect'
     || lk == 37600                 // 'where' 'intersect'
     || lk == 37604                 // 'xquery' 'intersect'
     || lk == 37922                 // '(' 'invoke'
     || lk == 37957                 // '[' 'invoke'
     || lk == 38079                 // 'return' 'invoke'
     || lk == 38145                 // IntegerLiteral 'is'
     || lk == 38146                 // DecimalLiteral 'is'
     || lk == 38147                 // DoubleLiteral 'is'
     || lk == 38148                 // StringLiteral 'is'
     || lk == 38149                 // URIQualifiedName 'is'
     || lk == 38159                 // QName^Token 'is'
     || lk == 38165                 // Wildcard 'is'
     || lk == 38175                 // '$' 'is'
     || lk == 38176                 // '%' 'is'
     || lk == 38178                 // '(' 'is'
     || lk == 38179                 // '(#' 'is'
     || lk == 38183                 // '+' 'is'
     || lk == 38185                 // '-' 'is'
     || lk == 38187                 // '.' 'is'
     || lk == 38188                 // '..' 'is'
     || lk == 38189                 // '/' 'is'
     || lk == 38190                 // '//' 'is'
     || lk == 38197                 // '<' 'is'
     || lk == 38209                 // '?' 'is'
     || lk == 38211                 // '@' 'is'
     || lk == 38213                 // '[' 'is'
     || lk == 38221                 // 'ancestor' 'is'
     || lk == 38222                 // 'ancestor-or-self' 'is'
     || lk == 38223                 // 'and' 'is'
     || lk == 38225                 // 'array' 'is'
     || lk == 38227                 // 'ascending' 'is'
     || lk == 38229                 // 'attribute' 'is'
     || lk == 38235                 // 'case' 'is'
     || lk == 38236                 // 'cast' 'is'
     || lk == 38237                 // 'castable' 'is'
     || lk == 38239                 // 'child' 'is'
     || lk == 38240                 // 'collation' 'is'
     || lk == 38241                 // 'comment' 'is'
     || lk == 38247                 // 'count' 'is'
     || lk == 38250                 // 'declare' 'is'
     || lk == 38251                 // 'default' 'is'
     || lk == 38253                 // 'descendant' 'is'
     || lk == 38254                 // 'descendant-or-self' 'is'
     || lk == 38255                 // 'descending' 'is'
     || lk == 38257                 // 'div' 'is'
     || lk == 38258                 // 'document' 'is'
     || lk == 38259                 // 'document-node' 'is'
     || lk == 38260                 // 'element' 'is'
     || lk == 38261                 // 'else' 'is'
     || lk == 38262                 // 'empty' 'is'
     || lk == 38263                 // 'empty-sequence' 'is'
     || lk == 38265                 // 'end' 'is'
     || lk == 38266                 // 'eq' 'is'
     || lk == 38267                 // 'every' 'is'
     || lk == 38268                 // 'except' 'is'
     || lk == 38273                 // 'following' 'is'
     || lk == 38274                 // 'following-sibling' 'is'
     || lk == 38275                 // 'for' 'is'
     || lk == 38276                 // 'function' 'is'
     || lk == 38277                 // 'ge' 'is'
     || lk == 38279                 // 'group' 'is'
     || lk == 38281                 // 'gt' 'is'
     || lk == 38282                 // 'idiv' 'is'
     || lk == 38283                 // 'if' 'is'
     || lk == 38284                 // 'import' 'is'
     || lk == 38289                 // 'instance' 'is'
     || lk == 38290                 // 'intersect' 'is'
     || lk == 38293                 // 'is' 'is'
     || lk == 38294                 // 'item' 'is'
     || lk == 38298                 // 'le' 'is'
     || lk == 38300                 // 'let' 'is'
     || lk == 38302                 // 'lt' 'is'
     || lk == 38303                 // 'map' 'is'
     || lk == 38305                 // 'mod' 'is'
     || lk == 38307                 // 'module' 'is'
     || lk == 38308                 // 'namespace' 'is'
     || lk == 38309                 // 'namespace-node' 'is'
     || lk == 38310                 // 'ne' 'is'
     || lk == 38314                 // 'node' 'is'
     || lk == 38317                 // 'only' 'is'
     || lk == 38319                 // 'or' 'is'
     || lk == 38320                 // 'order' 'is'
     || lk == 38321                 // 'ordered' 'is'
     || lk == 38323                 // 'parent' 'is'
     || lk == 38328                 // 'preceding' 'is'
     || lk == 38329                 // 'preceding-sibling' 'is'
     || lk == 38332                 // 'processing-instruction' 'is'
     || lk == 38335                 // 'return' 'is'
     || lk == 38338                 // 'satisfies' 'is'
     || lk == 38340                 // 'schema-attribute' 'is'
     || lk == 38341                 // 'schema-element' 'is'
     || lk == 38342                 // 'self' 'is'
     || lk == 38345                 // 'some' 'is'
     || lk == 38346                 // 'stable' 'is'
     || lk == 38347                 // 'start' 'is'
     || lk == 38350                 // 'switch' 'is'
     || lk == 38351                 // 'text' 'is'
     || lk == 38353                 // 'to' 'is'
     || lk == 38355                 // 'treat' 'is'
     || lk == 38356                 // 'try' 'is'
     || lk == 38359                 // 'typeswitch' 'is'
     || lk == 38360                 // 'union' 'is'
     || lk == 38361                 // 'unordered' 'is'
     || lk == 38363                 // 'validate' 'is'
     || lk == 38368                 // 'where' 'is'
     || lk == 38372                 // 'xquery' 'is'
     || lk == 38431                 // '$' 'item'
     || lk == 38432                 // '%' 'item'
     || lk == 38434                 // '(' 'item'
     || lk == 38435                 // '(#' 'item'
     || lk == 38439                 // '+' 'item'
     || lk == 38441                 // '-' 'item'
     || lk == 38445                 // '/' 'item'
     || lk == 38446                 // '//' 'item'
     || lk == 38453                 // '<' 'item'
     || lk == 38467                 // '@' 'item'
     || lk == 38469                 // '[' 'item'
     || lk == 38485                 // 'attribute' 'item'
     || lk == 38516                 // 'element' 'item'
     || lk == 38591                 // 'return' 'item'
     || lk == 39387                 // 'validate' 'lax'
     || lk == 39425                 // IntegerLiteral 'le'
     || lk == 39426                 // DecimalLiteral 'le'
     || lk == 39427                 // DoubleLiteral 'le'
     || lk == 39428                 // StringLiteral 'le'
     || lk == 39429                 // URIQualifiedName 'le'
     || lk == 39439                 // QName^Token 'le'
     || lk == 39445                 // Wildcard 'le'
     || lk == 39455                 // '$' 'le'
     || lk == 39456                 // '%' 'le'
     || lk == 39458                 // '(' 'le'
     || lk == 39459                 // '(#' 'le'
     || lk == 39463                 // '+' 'le'
     || lk == 39465                 // '-' 'le'
     || lk == 39467                 // '.' 'le'
     || lk == 39468                 // '..' 'le'
     || lk == 39469                 // '/' 'le'
     || lk == 39470                 // '//' 'le'
     || lk == 39477                 // '<' 'le'
     || lk == 39489                 // '?' 'le'
     || lk == 39491                 // '@' 'le'
     || lk == 39493                 // '[' 'le'
     || lk == 39501                 // 'ancestor' 'le'
     || lk == 39502                 // 'ancestor-or-self' 'le'
     || lk == 39503                 // 'and' 'le'
     || lk == 39505                 // 'array' 'le'
     || lk == 39507                 // 'ascending' 'le'
     || lk == 39509                 // 'attribute' 'le'
     || lk == 39515                 // 'case' 'le'
     || lk == 39516                 // 'cast' 'le'
     || lk == 39517                 // 'castable' 'le'
     || lk == 39519                 // 'child' 'le'
     || lk == 39520                 // 'collation' 'le'
     || lk == 39521                 // 'comment' 'le'
     || lk == 39527                 // 'count' 'le'
     || lk == 39530                 // 'declare' 'le'
     || lk == 39531                 // 'default' 'le'
     || lk == 39533                 // 'descendant' 'le'
     || lk == 39534                 // 'descendant-or-self' 'le'
     || lk == 39535                 // 'descending' 'le'
     || lk == 39537                 // 'div' 'le'
     || lk == 39538                 // 'document' 'le'
     || lk == 39539                 // 'document-node' 'le'
     || lk == 39540                 // 'element' 'le'
     || lk == 39541                 // 'else' 'le'
     || lk == 39542                 // 'empty' 'le'
     || lk == 39543                 // 'empty-sequence' 'le'
     || lk == 39545                 // 'end' 'le'
     || lk == 39546                 // 'eq' 'le'
     || lk == 39547                 // 'every' 'le'
     || lk == 39548                 // 'except' 'le'
     || lk == 39553                 // 'following' 'le'
     || lk == 39554                 // 'following-sibling' 'le'
     || lk == 39555                 // 'for' 'le'
     || lk == 39556                 // 'function' 'le'
     || lk == 39557                 // 'ge' 'le'
     || lk == 39559                 // 'group' 'le'
     || lk == 39561                 // 'gt' 'le'
     || lk == 39562                 // 'idiv' 'le'
     || lk == 39563                 // 'if' 'le'
     || lk == 39564                 // 'import' 'le'
     || lk == 39569                 // 'instance' 'le'
     || lk == 39570                 // 'intersect' 'le'
     || lk == 39573                 // 'is' 'le'
     || lk == 39574                 // 'item' 'le'
     || lk == 39578                 // 'le' 'le'
     || lk == 39580                 // 'let' 'le'
     || lk == 39582                 // 'lt' 'le'
     || lk == 39583                 // 'map' 'le'
     || lk == 39585                 // 'mod' 'le'
     || lk == 39587                 // 'module' 'le'
     || lk == 39588                 // 'namespace' 'le'
     || lk == 39589                 // 'namespace-node' 'le'
     || lk == 39590                 // 'ne' 'le'
     || lk == 39594                 // 'node' 'le'
     || lk == 39597                 // 'only' 'le'
     || lk == 39599                 // 'or' 'le'
     || lk == 39600                 // 'order' 'le'
     || lk == 39601                 // 'ordered' 'le'
     || lk == 39603                 // 'parent' 'le'
     || lk == 39608                 // 'preceding' 'le'
     || lk == 39609                 // 'preceding-sibling' 'le'
     || lk == 39612                 // 'processing-instruction' 'le'
     || lk == 39615                 // 'return' 'le'
     || lk == 39618                 // 'satisfies' 'le'
     || lk == 39620                 // 'schema-attribute' 'le'
     || lk == 39621                 // 'schema-element' 'le'
     || lk == 39622                 // 'self' 'le'
     || lk == 39625                 // 'some' 'le'
     || lk == 39626                 // 'stable' 'le'
     || lk == 39627                 // 'start' 'le'
     || lk == 39630                 // 'switch' 'le'
     || lk == 39631                 // 'text' 'le'
     || lk == 39633                 // 'to' 'le'
     || lk == 39635                 // 'treat' 'le'
     || lk == 39636                 // 'try' 'le'
     || lk == 39639                 // 'typeswitch' 'le'
     || lk == 39640                 // 'union' 'le'
     || lk == 39641                 // 'unordered' 'le'
     || lk == 39643                 // 'validate' 'le'
     || lk == 39648                 // 'where' 'le'
     || lk == 39652                 // 'xquery' 'le'
     || lk == 39967                 // '$' 'let'
     || lk == 39968                 // '%' 'let'
     || lk == 39970                 // '(' 'let'
     || lk == 39971                 // '(#' 'let'
     || lk == 39975                 // '+' 'let'
     || lk == 39977                 // '-' 'let'
     || lk == 39981                 // '/' 'let'
     || lk == 39982                 // '//' 'let'
     || lk == 39989                 // '<' 'let'
     || lk == 40001                 // '?' 'let'
     || lk == 40003                 // '@' 'let'
     || lk == 40005                 // '[' 'let'
     || lk == 40021                 // 'attribute' 'let'
     || lk == 40052                 // 'element' 'let'
     || lk == 40100                 // 'namespace' 'let'
     || lk == 40124                 // 'processing-instruction' 'let'
     || lk == 40127                 // 'return' 'let'
     || lk == 40449                 // IntegerLiteral 'lt'
     || lk == 40450                 // DecimalLiteral 'lt'
     || lk == 40451                 // DoubleLiteral 'lt'
     || lk == 40452                 // StringLiteral 'lt'
     || lk == 40453                 // URIQualifiedName 'lt'
     || lk == 40463                 // QName^Token 'lt'
     || lk == 40469                 // Wildcard 'lt'
     || lk == 40479                 // '$' 'lt'
     || lk == 40480                 // '%' 'lt'
     || lk == 40482                 // '(' 'lt'
     || lk == 40483                 // '(#' 'lt'
     || lk == 40487                 // '+' 'lt'
     || lk == 40489                 // '-' 'lt'
     || lk == 40491                 // '.' 'lt'
     || lk == 40492                 // '..' 'lt'
     || lk == 40493                 // '/' 'lt'
     || lk == 40494                 // '//' 'lt'
     || lk == 40501                 // '<' 'lt'
     || lk == 40513                 // '?' 'lt'
     || lk == 40515                 // '@' 'lt'
     || lk == 40517                 // '[' 'lt'
     || lk == 40525                 // 'ancestor' 'lt'
     || lk == 40526                 // 'ancestor-or-self' 'lt'
     || lk == 40527                 // 'and' 'lt'
     || lk == 40529                 // 'array' 'lt'
     || lk == 40531                 // 'ascending' 'lt'
     || lk == 40533                 // 'attribute' 'lt'
     || lk == 40539                 // 'case' 'lt'
     || lk == 40540                 // 'cast' 'lt'
     || lk == 40541                 // 'castable' 'lt'
     || lk == 40543                 // 'child' 'lt'
     || lk == 40544                 // 'collation' 'lt'
     || lk == 40545                 // 'comment' 'lt'
     || lk == 40551                 // 'count' 'lt'
     || lk == 40554                 // 'declare' 'lt'
     || lk == 40555                 // 'default' 'lt'
     || lk == 40557                 // 'descendant' 'lt'
     || lk == 40558                 // 'descendant-or-self' 'lt'
     || lk == 40559                 // 'descending' 'lt'
     || lk == 40561                 // 'div' 'lt'
     || lk == 40562                 // 'document' 'lt'
     || lk == 40563                 // 'document-node' 'lt'
     || lk == 40564                 // 'element' 'lt'
     || lk == 40565                 // 'else' 'lt'
     || lk == 40566                 // 'empty' 'lt'
     || lk == 40567                 // 'empty-sequence' 'lt'
     || lk == 40569                 // 'end' 'lt'
     || lk == 40570                 // 'eq' 'lt'
     || lk == 40571                 // 'every' 'lt'
     || lk == 40572                 // 'except' 'lt'
     || lk == 40577                 // 'following' 'lt'
     || lk == 40578                 // 'following-sibling' 'lt'
     || lk == 40579                 // 'for' 'lt'
     || lk == 40580                 // 'function' 'lt'
     || lk == 40581                 // 'ge' 'lt'
     || lk == 40583                 // 'group' 'lt'
     || lk == 40585                 // 'gt' 'lt'
     || lk == 40586                 // 'idiv' 'lt'
     || lk == 40587                 // 'if' 'lt'
     || lk == 40588                 // 'import' 'lt'
     || lk == 40593                 // 'instance' 'lt'
     || lk == 40594                 // 'intersect' 'lt'
     || lk == 40597                 // 'is' 'lt'
     || lk == 40598                 // 'item' 'lt'
     || lk == 40602                 // 'le' 'lt'
     || lk == 40604                 // 'let' 'lt'
     || lk == 40606                 // 'lt' 'lt'
     || lk == 40607                 // 'map' 'lt'
     || lk == 40609                 // 'mod' 'lt'
     || lk == 40611                 // 'module' 'lt'
     || lk == 40612                 // 'namespace' 'lt'
     || lk == 40613                 // 'namespace-node' 'lt'
     || lk == 40614                 // 'ne' 'lt'
     || lk == 40618                 // 'node' 'lt'
     || lk == 40621                 // 'only' 'lt'
     || lk == 40623                 // 'or' 'lt'
     || lk == 40624                 // 'order' 'lt'
     || lk == 40625                 // 'ordered' 'lt'
     || lk == 40627                 // 'parent' 'lt'
     || lk == 40632                 // 'preceding' 'lt'
     || lk == 40633                 // 'preceding-sibling' 'lt'
     || lk == 40636                 // 'processing-instruction' 'lt'
     || lk == 40639                 // 'return' 'lt'
     || lk == 40642                 // 'satisfies' 'lt'
     || lk == 40644                 // 'schema-attribute' 'lt'
     || lk == 40645                 // 'schema-element' 'lt'
     || lk == 40646                 // 'self' 'lt'
     || lk == 40649                 // 'some' 'lt'
     || lk == 40650                 // 'stable' 'lt'
     || lk == 40651                 // 'start' 'lt'
     || lk == 40654                 // 'switch' 'lt'
     || lk == 40655                 // 'text' 'lt'
     || lk == 40657                 // 'to' 'lt'
     || lk == 40659                 // 'treat' 'lt'
     || lk == 40660                 // 'try' 'lt'
     || lk == 40663                 // 'typeswitch' 'lt'
     || lk == 40664                 // 'union' 'lt'
     || lk == 40665                 // 'unordered' 'lt'
     || lk == 40667                 // 'validate' 'lt'
     || lk == 40672                 // 'where' 'lt'
     || lk == 40676                 // 'xquery' 'lt'
     || lk == 40735                 // '$' 'map'
     || lk == 40736                 // '%' 'map'
     || lk == 40738                 // '(' 'map'
     || lk == 40739                 // '(#' 'map'
     || lk == 40743                 // '+' 'map'
     || lk == 40745                 // '-' 'map'
     || lk == 40749                 // '/' 'map'
     || lk == 40750                 // '//' 'map'
     || lk == 40757                 // '<' 'map'
     || lk == 40771                 // '@' 'map'
     || lk == 40773                 // '[' 'map'
     || lk == 40789                 // 'attribute' 'map'
     || lk == 40820                 // 'element' 'map'
     || lk == 40895                 // 'return' 'map'
     || lk == 41217                 // IntegerLiteral 'mod'
     || lk == 41218                 // DecimalLiteral 'mod'
     || lk == 41219                 // DoubleLiteral 'mod'
     || lk == 41220                 // StringLiteral 'mod'
     || lk == 41221                 // URIQualifiedName 'mod'
     || lk == 41231                 // QName^Token 'mod'
     || lk == 41237                 // Wildcard 'mod'
     || lk == 41247                 // '$' 'mod'
     || lk == 41248                 // '%' 'mod'
     || lk == 41250                 // '(' 'mod'
     || lk == 41251                 // '(#' 'mod'
     || lk == 41255                 // '+' 'mod'
     || lk == 41257                 // '-' 'mod'
     || lk == 41259                 // '.' 'mod'
     || lk == 41260                 // '..' 'mod'
     || lk == 41261                 // '/' 'mod'
     || lk == 41262                 // '//' 'mod'
     || lk == 41269                 // '<' 'mod'
     || lk == 41281                 // '?' 'mod'
     || lk == 41283                 // '@' 'mod'
     || lk == 41285                 // '[' 'mod'
     || lk == 41293                 // 'ancestor' 'mod'
     || lk == 41294                 // 'ancestor-or-self' 'mod'
     || lk == 41295                 // 'and' 'mod'
     || lk == 41297                 // 'array' 'mod'
     || lk == 41299                 // 'ascending' 'mod'
     || lk == 41301                 // 'attribute' 'mod'
     || lk == 41307                 // 'case' 'mod'
     || lk == 41308                 // 'cast' 'mod'
     || lk == 41309                 // 'castable' 'mod'
     || lk == 41311                 // 'child' 'mod'
     || lk == 41312                 // 'collation' 'mod'
     || lk == 41313                 // 'comment' 'mod'
     || lk == 41319                 // 'count' 'mod'
     || lk == 41322                 // 'declare' 'mod'
     || lk == 41323                 // 'default' 'mod'
     || lk == 41325                 // 'descendant' 'mod'
     || lk == 41326                 // 'descendant-or-self' 'mod'
     || lk == 41327                 // 'descending' 'mod'
     || lk == 41329                 // 'div' 'mod'
     || lk == 41330                 // 'document' 'mod'
     || lk == 41331                 // 'document-node' 'mod'
     || lk == 41332                 // 'element' 'mod'
     || lk == 41333                 // 'else' 'mod'
     || lk == 41334                 // 'empty' 'mod'
     || lk == 41335                 // 'empty-sequence' 'mod'
     || lk == 41337                 // 'end' 'mod'
     || lk == 41338                 // 'eq' 'mod'
     || lk == 41339                 // 'every' 'mod'
     || lk == 41340                 // 'except' 'mod'
     || lk == 41345                 // 'following' 'mod'
     || lk == 41346                 // 'following-sibling' 'mod'
     || lk == 41347                 // 'for' 'mod'
     || lk == 41348                 // 'function' 'mod'
     || lk == 41349                 // 'ge' 'mod'
     || lk == 41351                 // 'group' 'mod'
     || lk == 41353                 // 'gt' 'mod'
     || lk == 41354                 // 'idiv' 'mod'
     || lk == 41355                 // 'if' 'mod'
     || lk == 41356                 // 'import' 'mod'
     || lk == 41361                 // 'instance' 'mod'
     || lk == 41362                 // 'intersect' 'mod'
     || lk == 41365                 // 'is' 'mod'
     || lk == 41366                 // 'item' 'mod'
     || lk == 41370                 // 'le' 'mod'
     || lk == 41372                 // 'let' 'mod'
     || lk == 41374                 // 'lt' 'mod'
     || lk == 41375                 // 'map' 'mod'
     || lk == 41377                 // 'mod' 'mod'
     || lk == 41379                 // 'module' 'mod'
     || lk == 41380                 // 'namespace' 'mod'
     || lk == 41381                 // 'namespace-node' 'mod'
     || lk == 41382                 // 'ne' 'mod'
     || lk == 41386                 // 'node' 'mod'
     || lk == 41389                 // 'only' 'mod'
     || lk == 41391                 // 'or' 'mod'
     || lk == 41392                 // 'order' 'mod'
     || lk == 41393                 // 'ordered' 'mod'
     || lk == 41395                 // 'parent' 'mod'
     || lk == 41400                 // 'preceding' 'mod'
     || lk == 41401                 // 'preceding-sibling' 'mod'
     || lk == 41404                 // 'processing-instruction' 'mod'
     || lk == 41407                 // 'return' 'mod'
     || lk == 41410                 // 'satisfies' 'mod'
     || lk == 41412                 // 'schema-attribute' 'mod'
     || lk == 41413                 // 'schema-element' 'mod'
     || lk == 41414                 // 'self' 'mod'
     || lk == 41417                 // 'some' 'mod'
     || lk == 41418                 // 'stable' 'mod'
     || lk == 41419                 // 'start' 'mod'
     || lk == 41422                 // 'switch' 'mod'
     || lk == 41423                 // 'text' 'mod'
     || lk == 41425                 // 'to' 'mod'
     || lk == 41427                 // 'treat' 'mod'
     || lk == 41428                 // 'try' 'mod'
     || lk == 41431                 // 'typeswitch' 'mod'
     || lk == 41432                 // 'union' 'mod'
     || lk == 41433                 // 'unordered' 'mod'
     || lk == 41435                 // 'validate' 'mod'
     || lk == 41440                 // 'where' 'mod'
     || lk == 41444                 // 'xquery' 'mod'
     || lk == 41759                 // '$' 'module'
     || lk == 41760                 // '%' 'module'
     || lk == 41762                 // '(' 'module'
     || lk == 41763                 // '(#' 'module'
     || lk == 41767                 // '+' 'module'
     || lk == 41769                 // '-' 'module'
     || lk == 41773                 // '/' 'module'
     || lk == 41774                 // '//' 'module'
     || lk == 41781                 // '<' 'module'
     || lk == 41795                 // '@' 'module'
     || lk == 41797                 // '[' 'module'
     || lk == 41813                 // 'attribute' 'module'
     || lk == 41844                 // 'element' 'module'
     || lk == 41919                 // 'return' 'module'
     || lk == 42015                 // '$' 'namespace'
     || lk == 42016                 // '%' 'namespace'
     || lk == 42018                 // '(' 'namespace'
     || lk == 42019                 // '(#' 'namespace'
     || lk == 42023                 // '+' 'namespace'
     || lk == 42025                 // '-' 'namespace'
     || lk == 42029                 // '/' 'namespace'
     || lk == 42030                 // '//' 'namespace'
     || lk == 42037                 // '<' 'namespace'
     || lk == 42051                 // '@' 'namespace'
     || lk == 42053                 // '[' 'namespace'
     || lk == 42069                 // 'attribute' 'namespace'
     || lk == 42100                 // 'element' 'namespace'
     || lk == 42175                 // 'return' 'namespace'
     || lk == 42271                 // '$' 'namespace-node'
     || lk == 42272                 // '%' 'namespace-node'
     || lk == 42274                 // '(' 'namespace-node'
     || lk == 42275                 // '(#' 'namespace-node'
     || lk == 42279                 // '+' 'namespace-node'
     || lk == 42281                 // '-' 'namespace-node'
     || lk == 42285                 // '/' 'namespace-node'
     || lk == 42286                 // '//' 'namespace-node'
     || lk == 42293                 // '<' 'namespace-node'
     || lk == 42307                 // '@' 'namespace-node'
     || lk == 42309                 // '[' 'namespace-node'
     || lk == 42325                 // 'attribute' 'namespace-node'
     || lk == 42356                 // 'element' 'namespace-node'
     || lk == 42431                 // 'return' 'namespace-node'
     || lk == 42497                 // IntegerLiteral 'ne'
     || lk == 42498                 // DecimalLiteral 'ne'
     || lk == 42499                 // DoubleLiteral 'ne'
     || lk == 42500                 // StringLiteral 'ne'
     || lk == 42501                 // URIQualifiedName 'ne'
     || lk == 42511                 // QName^Token 'ne'
     || lk == 42517                 // Wildcard 'ne'
     || lk == 42527                 // '$' 'ne'
     || lk == 42528                 // '%' 'ne'
     || lk == 42530                 // '(' 'ne'
     || lk == 42531                 // '(#' 'ne'
     || lk == 42535                 // '+' 'ne'
     || lk == 42537                 // '-' 'ne'
     || lk == 42539                 // '.' 'ne'
     || lk == 42540                 // '..' 'ne'
     || lk == 42541                 // '/' 'ne'
     || lk == 42542                 // '//' 'ne'
     || lk == 42549                 // '<' 'ne'
     || lk == 42561                 // '?' 'ne'
     || lk == 42563                 // '@' 'ne'
     || lk == 42565                 // '[' 'ne'
     || lk == 42573                 // 'ancestor' 'ne'
     || lk == 42574                 // 'ancestor-or-self' 'ne'
     || lk == 42575                 // 'and' 'ne'
     || lk == 42577                 // 'array' 'ne'
     || lk == 42579                 // 'ascending' 'ne'
     || lk == 42581                 // 'attribute' 'ne'
     || lk == 42587                 // 'case' 'ne'
     || lk == 42588                 // 'cast' 'ne'
     || lk == 42589                 // 'castable' 'ne'
     || lk == 42591                 // 'child' 'ne'
     || lk == 42592                 // 'collation' 'ne'
     || lk == 42593                 // 'comment' 'ne'
     || lk == 42599                 // 'count' 'ne'
     || lk == 42602                 // 'declare' 'ne'
     || lk == 42603                 // 'default' 'ne'
     || lk == 42605                 // 'descendant' 'ne'
     || lk == 42606                 // 'descendant-or-self' 'ne'
     || lk == 42607                 // 'descending' 'ne'
     || lk == 42609                 // 'div' 'ne'
     || lk == 42610                 // 'document' 'ne'
     || lk == 42611                 // 'document-node' 'ne'
     || lk == 42612                 // 'element' 'ne'
     || lk == 42613                 // 'else' 'ne'
     || lk == 42614                 // 'empty' 'ne'
     || lk == 42615                 // 'empty-sequence' 'ne'
     || lk == 42617                 // 'end' 'ne'
     || lk == 42618                 // 'eq' 'ne'
     || lk == 42619                 // 'every' 'ne'
     || lk == 42620                 // 'except' 'ne'
     || lk == 42625                 // 'following' 'ne'
     || lk == 42626                 // 'following-sibling' 'ne'
     || lk == 42627                 // 'for' 'ne'
     || lk == 42628                 // 'function' 'ne'
     || lk == 42629                 // 'ge' 'ne'
     || lk == 42631                 // 'group' 'ne'
     || lk == 42633                 // 'gt' 'ne'
     || lk == 42634                 // 'idiv' 'ne'
     || lk == 42635                 // 'if' 'ne'
     || lk == 42636                 // 'import' 'ne'
     || lk == 42641                 // 'instance' 'ne'
     || lk == 42642                 // 'intersect' 'ne'
     || lk == 42645                 // 'is' 'ne'
     || lk == 42646                 // 'item' 'ne'
     || lk == 42650                 // 'le' 'ne'
     || lk == 42652                 // 'let' 'ne'
     || lk == 42654                 // 'lt' 'ne'
     || lk == 42655                 // 'map' 'ne'
     || lk == 42657                 // 'mod' 'ne'
     || lk == 42659                 // 'module' 'ne'
     || lk == 42660                 // 'namespace' 'ne'
     || lk == 42661                 // 'namespace-node' 'ne'
     || lk == 42662                 // 'ne' 'ne'
     || lk == 42666                 // 'node' 'ne'
     || lk == 42669                 // 'only' 'ne'
     || lk == 42671                 // 'or' 'ne'
     || lk == 42672                 // 'order' 'ne'
     || lk == 42673                 // 'ordered' 'ne'
     || lk == 42675                 // 'parent' 'ne'
     || lk == 42680                 // 'preceding' 'ne'
     || lk == 42681                 // 'preceding-sibling' 'ne'
     || lk == 42684                 // 'processing-instruction' 'ne'
     || lk == 42687                 // 'return' 'ne'
     || lk == 42690                 // 'satisfies' 'ne'
     || lk == 42692                 // 'schema-attribute' 'ne'
     || lk == 42693                 // 'schema-element' 'ne'
     || lk == 42694                 // 'self' 'ne'
     || lk == 42697                 // 'some' 'ne'
     || lk == 42698                 // 'stable' 'ne'
     || lk == 42699                 // 'start' 'ne'
     || lk == 42702                 // 'switch' 'ne'
     || lk == 42703                 // 'text' 'ne'
     || lk == 42705                 // 'to' 'ne'
     || lk == 42707                 // 'treat' 'ne'
     || lk == 42708                 // 'try' 'ne'
     || lk == 42711                 // 'typeswitch' 'ne'
     || lk == 42712                 // 'union' 'ne'
     || lk == 42713                 // 'unordered' 'ne'
     || lk == 42715                 // 'validate' 'ne'
     || lk == 42720                 // 'where' 'ne'
     || lk == 42724                 // 'xquery' 'ne'
     || lk == 43551                 // '$' 'node'
     || lk == 43552                 // '%' 'node'
     || lk == 43554                 // '(' 'node'
     || lk == 43555                 // '(#' 'node'
     || lk == 43559                 // '+' 'node'
     || lk == 43561                 // '-' 'node'
     || lk == 43565                 // '/' 'node'
     || lk == 43566                 // '//' 'node'
     || lk == 43573                 // '<' 'node'
     || lk == 43587                 // '@' 'node'
     || lk == 43589                 // '[' 'node'
     || lk == 43605                 // 'attribute' 'node'
     || lk == 43628                 // 'delete' 'node'
     || lk == 43636                 // 'element' 'node'
     || lk == 43664                 // 'insert' 'node'
     || lk == 43709                 // 'rename' 'node'
     || lk == 43710                 // 'replace' 'node'
     || lk == 43711                 // 'return' 'node'
     || lk == 43884                 // 'delete' 'nodes'
     || lk == 43920                 // 'insert' 'nodes'
     || lk == 44319                 // '$' 'only'
     || lk == 44320                 // '%' 'only'
     || lk == 44322                 // '(' 'only'
     || lk == 44323                 // '(#' 'only'
     || lk == 44327                 // '+' 'only'
     || lk == 44329                 // '-' 'only'
     || lk == 44333                 // '/' 'only'
     || lk == 44334                 // '//' 'only'
     || lk == 44341                 // '<' 'only'
     || lk == 44353                 // '?' 'only'
     || lk == 44355                 // '@' 'only'
     || lk == 44357                 // '[' 'only'
     || lk == 44373                 // 'attribute' 'only'
     || lk == 44404                 // 'element' 'only'
     || lk == 44452                 // 'namespace' 'only'
     || lk == 44476                 // 'processing-instruction' 'only'
     || lk == 44479                 // 'return' 'only'
     || lk == 44801                 // IntegerLiteral 'or'
     || lk == 44802                 // DecimalLiteral 'or'
     || lk == 44803                 // DoubleLiteral 'or'
     || lk == 44804                 // StringLiteral 'or'
     || lk == 44805                 // URIQualifiedName 'or'
     || lk == 44815                 // QName^Token 'or'
     || lk == 44821                 // Wildcard 'or'
     || lk == 44831                 // '$' 'or'
     || lk == 44832                 // '%' 'or'
     || lk == 44834                 // '(' 'or'
     || lk == 44835                 // '(#' 'or'
     || lk == 44839                 // '+' 'or'
     || lk == 44841                 // '-' 'or'
     || lk == 44843                 // '.' 'or'
     || lk == 44844                 // '..' 'or'
     || lk == 44845                 // '/' 'or'
     || lk == 44846                 // '//' 'or'
     || lk == 44853                 // '<' 'or'
     || lk == 44865                 // '?' 'or'
     || lk == 44867                 // '@' 'or'
     || lk == 44869                 // '[' 'or'
     || lk == 44877                 // 'ancestor' 'or'
     || lk == 44878                 // 'ancestor-or-self' 'or'
     || lk == 44879                 // 'and' 'or'
     || lk == 44881                 // 'array' 'or'
     || lk == 44883                 // 'ascending' 'or'
     || lk == 44885                 // 'attribute' 'or'
     || lk == 44891                 // 'case' 'or'
     || lk == 44892                 // 'cast' 'or'
     || lk == 44893                 // 'castable' 'or'
     || lk == 44895                 // 'child' 'or'
     || lk == 44896                 // 'collation' 'or'
     || lk == 44897                 // 'comment' 'or'
     || lk == 44903                 // 'count' 'or'
     || lk == 44906                 // 'declare' 'or'
     || lk == 44907                 // 'default' 'or'
     || lk == 44909                 // 'descendant' 'or'
     || lk == 44910                 // 'descendant-or-self' 'or'
     || lk == 44911                 // 'descending' 'or'
     || lk == 44913                 // 'div' 'or'
     || lk == 44914                 // 'document' 'or'
     || lk == 44915                 // 'document-node' 'or'
     || lk == 44916                 // 'element' 'or'
     || lk == 44917                 // 'else' 'or'
     || lk == 44918                 // 'empty' 'or'
     || lk == 44919                 // 'empty-sequence' 'or'
     || lk == 44921                 // 'end' 'or'
     || lk == 44922                 // 'eq' 'or'
     || lk == 44923                 // 'every' 'or'
     || lk == 44924                 // 'except' 'or'
     || lk == 44929                 // 'following' 'or'
     || lk == 44930                 // 'following-sibling' 'or'
     || lk == 44931                 // 'for' 'or'
     || lk == 44932                 // 'function' 'or'
     || lk == 44933                 // 'ge' 'or'
     || lk == 44935                 // 'group' 'or'
     || lk == 44937                 // 'gt' 'or'
     || lk == 44938                 // 'idiv' 'or'
     || lk == 44939                 // 'if' 'or'
     || lk == 44940                 // 'import' 'or'
     || lk == 44945                 // 'instance' 'or'
     || lk == 44946                 // 'intersect' 'or'
     || lk == 44949                 // 'is' 'or'
     || lk == 44950                 // 'item' 'or'
     || lk == 44954                 // 'le' 'or'
     || lk == 44956                 // 'let' 'or'
     || lk == 44958                 // 'lt' 'or'
     || lk == 44959                 // 'map' 'or'
     || lk == 44961                 // 'mod' 'or'
     || lk == 44963                 // 'module' 'or'
     || lk == 44964                 // 'namespace' 'or'
     || lk == 44965                 // 'namespace-node' 'or'
     || lk == 44966                 // 'ne' 'or'
     || lk == 44970                 // 'node' 'or'
     || lk == 44973                 // 'only' 'or'
     || lk == 44975                 // 'or' 'or'
     || lk == 44976                 // 'order' 'or'
     || lk == 44977                 // 'ordered' 'or'
     || lk == 44979                 // 'parent' 'or'
     || lk == 44984                 // 'preceding' 'or'
     || lk == 44985                 // 'preceding-sibling' 'or'
     || lk == 44988                 // 'processing-instruction' 'or'
     || lk == 44991                 // 'return' 'or'
     || lk == 44994                 // 'satisfies' 'or'
     || lk == 44996                 // 'schema-attribute' 'or'
     || lk == 44997                 // 'schema-element' 'or'
     || lk == 44998                 // 'self' 'or'
     || lk == 45001                 // 'some' 'or'
     || lk == 45002                 // 'stable' 'or'
     || lk == 45003                 // 'start' 'or'
     || lk == 45006                 // 'switch' 'or'
     || lk == 45007                 // 'text' 'or'
     || lk == 45009                 // 'to' 'or'
     || lk == 45011                 // 'treat' 'or'
     || lk == 45012                 // 'try' 'or'
     || lk == 45015                 // 'typeswitch' 'or'
     || lk == 45016                 // 'union' 'or'
     || lk == 45017                 // 'unordered' 'or'
     || lk == 45019                 // 'validate' 'or'
     || lk == 45024                 // 'where' 'or'
     || lk == 45028                 // 'xquery' 'or'
     || lk == 45087                 // '$' 'order'
     || lk == 45088                 // '%' 'order'
     || lk == 45090                 // '(' 'order'
     || lk == 45091                 // '(#' 'order'
     || lk == 45095                 // '+' 'order'
     || lk == 45097                 // '-' 'order'
     || lk == 45101                 // '/' 'order'
     || lk == 45102                 // '//' 'order'
     || lk == 45109                 // '<' 'order'
     || lk == 45121                 // '?' 'order'
     || lk == 45123                 // '@' 'order'
     || lk == 45125                 // '[' 'order'
     || lk == 45141                 // 'attribute' 'order'
     || lk == 45172                 // 'element' 'order'
     || lk == 45220                 // 'namespace' 'order'
     || lk == 45244                 // 'processing-instruction' 'order'
     || lk == 45247                 // 'return' 'order'
     || lk == 45343                 // '$' 'ordered'
     || lk == 45344                 // '%' 'ordered'
     || lk == 45346                 // '(' 'ordered'
     || lk == 45347                 // '(#' 'ordered'
     || lk == 45351                 // '+' 'ordered'
     || lk == 45353                 // '-' 'ordered'
     || lk == 45357                 // '/' 'ordered'
     || lk == 45358                 // '//' 'ordered'
     || lk == 45365                 // '<' 'ordered'
     || lk == 45379                 // '@' 'ordered'
     || lk == 45381                 // '[' 'ordered'
     || lk == 45397                 // 'attribute' 'ordered'
     || lk == 45428                 // 'element' 'ordered'
     || lk == 45503                 // 'return' 'ordered'
     || lk == 45855                 // '$' 'parent'
     || lk == 45856                 // '%' 'parent'
     || lk == 45858                 // '(' 'parent'
     || lk == 45859                 // '(#' 'parent'
     || lk == 45863                 // '+' 'parent'
     || lk == 45865                 // '-' 'parent'
     || lk == 45869                 // '/' 'parent'
     || lk == 45870                 // '//' 'parent'
     || lk == 45877                 // '<' 'parent'
     || lk == 45891                 // '@' 'parent'
     || lk == 45893                 // '[' 'parent'
     || lk == 45909                 // 'attribute' 'parent'
     || lk == 45940                 // 'element' 'parent'
     || lk == 46015                 // 'return' 'parent'
     || lk == 47135                 // '$' 'preceding'
     || lk == 47136                 // '%' 'preceding'
     || lk == 47138                 // '(' 'preceding'
     || lk == 47139                 // '(#' 'preceding'
     || lk == 47143                 // '+' 'preceding'
     || lk == 47145                 // '-' 'preceding'
     || lk == 47149                 // '/' 'preceding'
     || lk == 47150                 // '//' 'preceding'
     || lk == 47157                 // '<' 'preceding'
     || lk == 47171                 // '@' 'preceding'
     || lk == 47173                 // '[' 'preceding'
     || lk == 47189                 // 'attribute' 'preceding'
     || lk == 47220                 // 'element' 'preceding'
     || lk == 47295                 // 'return' 'preceding'
     || lk == 47391                 // '$' 'preceding-sibling'
     || lk == 47392                 // '%' 'preceding-sibling'
     || lk == 47394                 // '(' 'preceding-sibling'
     || lk == 47395                 // '(#' 'preceding-sibling'
     || lk == 47399                 // '+' 'preceding-sibling'
     || lk == 47401                 // '-' 'preceding-sibling'
     || lk == 47405                 // '/' 'preceding-sibling'
     || lk == 47406                 // '//' 'preceding-sibling'
     || lk == 47413                 // '<' 'preceding-sibling'
     || lk == 47427                 // '@' 'preceding-sibling'
     || lk == 47429                 // '[' 'preceding-sibling'
     || lk == 47445                 // 'attribute' 'preceding-sibling'
     || lk == 47476                 // 'element' 'preceding-sibling'
     || lk == 47551                 // 'return' 'preceding-sibling'
     || lk == 48159                 // '$' 'processing-instruction'
     || lk == 48160                 // '%' 'processing-instruction'
     || lk == 48162                 // '(' 'processing-instruction'
     || lk == 48163                 // '(#' 'processing-instruction'
     || lk == 48167                 // '+' 'processing-instruction'
     || lk == 48169                 // '-' 'processing-instruction'
     || lk == 48173                 // '/' 'processing-instruction'
     || lk == 48174                 // '//' 'processing-instruction'
     || lk == 48181                 // '<' 'processing-instruction'
     || lk == 48195                 // '@' 'processing-instruction'
     || lk == 48197                 // '[' 'processing-instruction'
     || lk == 48213                 // 'attribute' 'processing-instruction'
     || lk == 48244                 // 'element' 'processing-instruction'
     || lk == 48319                 // 'return' 'processing-instruction'
     || lk == 48418                 // '(' 'rename'
     || lk == 48453                 // '[' 'rename'
     || lk == 48575                 // 'return' 'rename'
     || lk == 48674                 // '(' 'replace'
     || lk == 48709                 // '[' 'replace'
     || lk == 48831                 // 'return' 'replace'
     || lk == 48927                 // '$' 'return'
     || lk == 48928                 // '%' 'return'
     || lk == 48930                 // '(' 'return'
     || lk == 48931                 // '(#' 'return'
     || lk == 48935                 // '+' 'return'
     || lk == 48937                 // '-' 'return'
     || lk == 48941                 // '/' 'return'
     || lk == 48942                 // '//' 'return'
     || lk == 48949                 // '<' 'return'
     || lk == 48961                 // '?' 'return'
     || lk == 48963                 // '@' 'return'
     || lk == 48965                 // '[' 'return'
     || lk == 48981                 // 'attribute' 'return'
     || lk == 49012                 // 'element' 'return'
     || lk == 49060                 // 'namespace' 'return'
     || lk == 49084                 // 'processing-instruction' 'return'
     || lk == 49087                 // 'return' 'return'
     || lk == 49695                 // '$' 'satisfies'
     || lk == 49696                 // '%' 'satisfies'
     || lk == 49698                 // '(' 'satisfies'
     || lk == 49699                 // '(#' 'satisfies'
     || lk == 49703                 // '+' 'satisfies'
     || lk == 49705                 // '-' 'satisfies'
     || lk == 49709                 // '/' 'satisfies'
     || lk == 49710                 // '//' 'satisfies'
     || lk == 49717                 // '<' 'satisfies'
     || lk == 49729                 // '?' 'satisfies'
     || lk == 49731                 // '@' 'satisfies'
     || lk == 49733                 // '[' 'satisfies'
     || lk == 49749                 // 'attribute' 'satisfies'
     || lk == 49780                 // 'element' 'satisfies'
     || lk == 49828                 // 'namespace' 'satisfies'
     || lk == 49852                 // 'processing-instruction' 'satisfies'
     || lk == 49855                 // 'return' 'satisfies'
     || lk == 50207                 // '$' 'schema-attribute'
     || lk == 50208                 // '%' 'schema-attribute'
     || lk == 50210                 // '(' 'schema-attribute'
     || lk == 50211                 // '(#' 'schema-attribute'
     || lk == 50215                 // '+' 'schema-attribute'
     || lk == 50217                 // '-' 'schema-attribute'
     || lk == 50221                 // '/' 'schema-attribute'
     || lk == 50222                 // '//' 'schema-attribute'
     || lk == 50229                 // '<' 'schema-attribute'
     || lk == 50243                 // '@' 'schema-attribute'
     || lk == 50245                 // '[' 'schema-attribute'
     || lk == 50261                 // 'attribute' 'schema-attribute'
     || lk == 50292                 // 'element' 'schema-attribute'
     || lk == 50367                 // 'return' 'schema-attribute'
     || lk == 50463                 // '$' 'schema-element'
     || lk == 50464                 // '%' 'schema-element'
     || lk == 50466                 // '(' 'schema-element'
     || lk == 50467                 // '(#' 'schema-element'
     || lk == 50471                 // '+' 'schema-element'
     || lk == 50473                 // '-' 'schema-element'
     || lk == 50477                 // '/' 'schema-element'
     || lk == 50478                 // '//' 'schema-element'
     || lk == 50485                 // '<' 'schema-element'
     || lk == 50499                 // '@' 'schema-element'
     || lk == 50501                 // '[' 'schema-element'
     || lk == 50517                 // 'attribute' 'schema-element'
     || lk == 50548                 // 'element' 'schema-element'
     || lk == 50623                 // 'return' 'schema-element'
     || lk == 50719                 // '$' 'self'
     || lk == 50720                 // '%' 'self'
     || lk == 50722                 // '(' 'self'
     || lk == 50723                 // '(#' 'self'
     || lk == 50727                 // '+' 'self'
     || lk == 50729                 // '-' 'self'
     || lk == 50733                 // '/' 'self'
     || lk == 50734                 // '//' 'self'
     || lk == 50741                 // '<' 'self'
     || lk == 50755                 // '@' 'self'
     || lk == 50757                 // '[' 'self'
     || lk == 50773                 // 'attribute' 'self'
     || lk == 50804                 // 'element' 'self'
     || lk == 50879                 // 'return' 'self'
     || lk == 51331                 // 'for' 'sliding'
     || lk == 51487                 // '$' 'some'
     || lk == 51488                 // '%' 'some'
     || lk == 51490                 // '(' 'some'
     || lk == 51491                 // '(#' 'some'
     || lk == 51495                 // '+' 'some'
     || lk == 51497                 // '-' 'some'
     || lk == 51501                 // '/' 'some'
     || lk == 51502                 // '//' 'some'
     || lk == 51509                 // '<' 'some'
     || lk == 51523                 // '@' 'some'
     || lk == 51525                 // '[' 'some'
     || lk == 51541                 // 'attribute' 'some'
     || lk == 51572                 // 'element' 'some'
     || lk == 51647                 // 'return' 'some'
     || lk == 51743                 // '$' 'stable'
     || lk == 51744                 // '%' 'stable'
     || lk == 51746                 // '(' 'stable'
     || lk == 51747                 // '(#' 'stable'
     || lk == 51751                 // '+' 'stable'
     || lk == 51753                 // '-' 'stable'
     || lk == 51757                 // '/' 'stable'
     || lk == 51758                 // '//' 'stable'
     || lk == 51765                 // '<' 'stable'
     || lk == 51777                 // '?' 'stable'
     || lk == 51779                 // '@' 'stable'
     || lk == 51781                 // '[' 'stable'
     || lk == 51797                 // 'attribute' 'stable'
     || lk == 51828                 // 'element' 'stable'
     || lk == 51876                 // 'namespace' 'stable'
     || lk == 51900                 // 'processing-instruction' 'stable'
     || lk == 51903                 // 'return' 'stable'
     || lk == 51999                 // '$' 'start'
     || lk == 52000                 // '%' 'start'
     || lk == 52002                 // '(' 'start'
     || lk == 52003                 // '(#' 'start'
     || lk == 52007                 // '+' 'start'
     || lk == 52009                 // '-' 'start'
     || lk == 52013                 // '/' 'start'
     || lk == 52014                 // '//' 'start'
     || lk == 52021                 // '<' 'start'
     || lk == 52033                 // '?' 'start'
     || lk == 52035                 // '@' 'start'
     || lk == 52037                 // '[' 'start'
     || lk == 52053                 // 'attribute' 'start'
     || lk == 52084                 // 'element' 'start'
     || lk == 52132                 // 'namespace' 'start'
     || lk == 52156                 // 'processing-instruction' 'start'
     || lk == 52159                 // 'return' 'start'
     || lk == 52443                 // 'validate' 'strict'
     || lk == 52767                 // '$' 'switch'
     || lk == 52768                 // '%' 'switch'
     || lk == 52770                 // '(' 'switch'
     || lk == 52771                 // '(#' 'switch'
     || lk == 52775                 // '+' 'switch'
     || lk == 52777                 // '-' 'switch'
     || lk == 52781                 // '/' 'switch'
     || lk == 52782                 // '//' 'switch'
     || lk == 52789                 // '<' 'switch'
     || lk == 52803                 // '@' 'switch'
     || lk == 52805                 // '[' 'switch'
     || lk == 52821                 // 'attribute' 'switch'
     || lk == 52852                 // 'element' 'switch'
     || lk == 52927                 // 'return' 'switch'
     || lk == 53023                 // '$' 'text'
     || lk == 53024                 // '%' 'text'
     || lk == 53026                 // '(' 'text'
     || lk == 53027                 // '(#' 'text'
     || lk == 53031                 // '+' 'text'
     || lk == 53033                 // '-' 'text'
     || lk == 53037                 // '/' 'text'
     || lk == 53038                 // '//' 'text'
     || lk == 53045                 // '<' 'text'
     || lk == 53059                 // '@' 'text'
     || lk == 53061                 // '[' 'text'
     || lk == 53077                 // 'attribute' 'text'
     || lk == 53108                 // 'element' 'text'
     || lk == 53183                 // 'return' 'text'
     || lk == 53505                 // IntegerLiteral 'to'
     || lk == 53506                 // DecimalLiteral 'to'
     || lk == 53507                 // DoubleLiteral 'to'
     || lk == 53508                 // StringLiteral 'to'
     || lk == 53509                 // URIQualifiedName 'to'
     || lk == 53519                 // QName^Token 'to'
     || lk == 53525                 // Wildcard 'to'
     || lk == 53535                 // '$' 'to'
     || lk == 53536                 // '%' 'to'
     || lk == 53538                 // '(' 'to'
     || lk == 53539                 // '(#' 'to'
     || lk == 53543                 // '+' 'to'
     || lk == 53545                 // '-' 'to'
     || lk == 53547                 // '.' 'to'
     || lk == 53548                 // '..' 'to'
     || lk == 53549                 // '/' 'to'
     || lk == 53550                 // '//' 'to'
     || lk == 53557                 // '<' 'to'
     || lk == 53569                 // '?' 'to'
     || lk == 53571                 // '@' 'to'
     || lk == 53573                 // '[' 'to'
     || lk == 53581                 // 'ancestor' 'to'
     || lk == 53582                 // 'ancestor-or-self' 'to'
     || lk == 53583                 // 'and' 'to'
     || lk == 53585                 // 'array' 'to'
     || lk == 53587                 // 'ascending' 'to'
     || lk == 53589                 // 'attribute' 'to'
     || lk == 53595                 // 'case' 'to'
     || lk == 53596                 // 'cast' 'to'
     || lk == 53597                 // 'castable' 'to'
     || lk == 53599                 // 'child' 'to'
     || lk == 53600                 // 'collation' 'to'
     || lk == 53601                 // 'comment' 'to'
     || lk == 53607                 // 'count' 'to'
     || lk == 53610                 // 'declare' 'to'
     || lk == 53611                 // 'default' 'to'
     || lk == 53613                 // 'descendant' 'to'
     || lk == 53614                 // 'descendant-or-self' 'to'
     || lk == 53615                 // 'descending' 'to'
     || lk == 53617                 // 'div' 'to'
     || lk == 53618                 // 'document' 'to'
     || lk == 53619                 // 'document-node' 'to'
     || lk == 53620                 // 'element' 'to'
     || lk == 53621                 // 'else' 'to'
     || lk == 53622                 // 'empty' 'to'
     || lk == 53623                 // 'empty-sequence' 'to'
     || lk == 53625                 // 'end' 'to'
     || lk == 53626                 // 'eq' 'to'
     || lk == 53627                 // 'every' 'to'
     || lk == 53628                 // 'except' 'to'
     || lk == 53633                 // 'following' 'to'
     || lk == 53634                 // 'following-sibling' 'to'
     || lk == 53635                 // 'for' 'to'
     || lk == 53636                 // 'function' 'to'
     || lk == 53637                 // 'ge' 'to'
     || lk == 53639                 // 'group' 'to'
     || lk == 53641                 // 'gt' 'to'
     || lk == 53642                 // 'idiv' 'to'
     || lk == 53643                 // 'if' 'to'
     || lk == 53644                 // 'import' 'to'
     || lk == 53649                 // 'instance' 'to'
     || lk == 53650                 // 'intersect' 'to'
     || lk == 53653                 // 'is' 'to'
     || lk == 53654                 // 'item' 'to'
     || lk == 53658                 // 'le' 'to'
     || lk == 53660                 // 'let' 'to'
     || lk == 53662                 // 'lt' 'to'
     || lk == 53663                 // 'map' 'to'
     || lk == 53665                 // 'mod' 'to'
     || lk == 53667                 // 'module' 'to'
     || lk == 53668                 // 'namespace' 'to'
     || lk == 53669                 // 'namespace-node' 'to'
     || lk == 53670                 // 'ne' 'to'
     || lk == 53674                 // 'node' 'to'
     || lk == 53677                 // 'only' 'to'
     || lk == 53679                 // 'or' 'to'
     || lk == 53680                 // 'order' 'to'
     || lk == 53681                 // 'ordered' 'to'
     || lk == 53683                 // 'parent' 'to'
     || lk == 53688                 // 'preceding' 'to'
     || lk == 53689                 // 'preceding-sibling' 'to'
     || lk == 53692                 // 'processing-instruction' 'to'
     || lk == 53695                 // 'return' 'to'
     || lk == 53698                 // 'satisfies' 'to'
     || lk == 53700                 // 'schema-attribute' 'to'
     || lk == 53701                 // 'schema-element' 'to'
     || lk == 53702                 // 'self' 'to'
     || lk == 53705                 // 'some' 'to'
     || lk == 53706                 // 'stable' 'to'
     || lk == 53707                 // 'start' 'to'
     || lk == 53710                 // 'switch' 'to'
     || lk == 53711                 // 'text' 'to'
     || lk == 53713                 // 'to' 'to'
     || lk == 53715                 // 'treat' 'to'
     || lk == 53716                 // 'try' 'to'
     || lk == 53719                 // 'typeswitch' 'to'
     || lk == 53720                 // 'union' 'to'
     || lk == 53721                 // 'unordered' 'to'
     || lk == 53723                 // 'validate' 'to'
     || lk == 53728                 // 'where' 'to'
     || lk == 53732                 // 'xquery' 'to'
     || lk == 53761                 // IntegerLiteral 'transform'
     || lk == 53762                 // DecimalLiteral 'transform'
     || lk == 53763                 // DoubleLiteral 'transform'
     || lk == 53764                 // StringLiteral 'transform'
     || lk == 53765                 // URIQualifiedName 'transform'
     || lk == 53775                 // QName^Token 'transform'
     || lk == 53781                 // Wildcard 'transform'
     || lk == 53803                 // '.' 'transform'
     || lk == 53804                 // '..' 'transform'
     || lk == 53805                 // '/' 'transform'
     || lk == 53837                 // 'ancestor' 'transform'
     || lk == 53838                 // 'ancestor-or-self' 'transform'
     || lk == 53839                 // 'and' 'transform'
     || lk == 53841                 // 'array' 'transform'
     || lk == 53843                 // 'ascending' 'transform'
     || lk == 53845                 // 'attribute' 'transform'
     || lk == 53851                 // 'case' 'transform'
     || lk == 53852                 // 'cast' 'transform'
     || lk == 53853                 // 'castable' 'transform'
     || lk == 53855                 // 'child' 'transform'
     || lk == 53856                 // 'collation' 'transform'
     || lk == 53857                 // 'comment' 'transform'
     || lk == 53863                 // 'count' 'transform'
     || lk == 53866                 // 'declare' 'transform'
     || lk == 53867                 // 'default' 'transform'
     || lk == 53869                 // 'descendant' 'transform'
     || lk == 53870                 // 'descendant-or-self' 'transform'
     || lk == 53871                 // 'descending' 'transform'
     || lk == 53873                 // 'div' 'transform'
     || lk == 53874                 // 'document' 'transform'
     || lk == 53875                 // 'document-node' 'transform'
     || lk == 53876                 // 'element' 'transform'
     || lk == 53877                 // 'else' 'transform'
     || lk == 53878                 // 'empty' 'transform'
     || lk == 53879                 // 'empty-sequence' 'transform'
     || lk == 53881                 // 'end' 'transform'
     || lk == 53882                 // 'eq' 'transform'
     || lk == 53883                 // 'every' 'transform'
     || lk == 53884                 // 'except' 'transform'
     || lk == 53889                 // 'following' 'transform'
     || lk == 53890                 // 'following-sibling' 'transform'
     || lk == 53891                 // 'for' 'transform'
     || lk == 53892                 // 'function' 'transform'
     || lk == 53893                 // 'ge' 'transform'
     || lk == 53895                 // 'group' 'transform'
     || lk == 53897                 // 'gt' 'transform'
     || lk == 53898                 // 'idiv' 'transform'
     || lk == 53899                 // 'if' 'transform'
     || lk == 53900                 // 'import' 'transform'
     || lk == 53905                 // 'instance' 'transform'
     || lk == 53906                 // 'intersect' 'transform'
     || lk == 53909                 // 'is' 'transform'
     || lk == 53910                 // 'item' 'transform'
     || lk == 53914                 // 'le' 'transform'
     || lk == 53916                 // 'let' 'transform'
     || lk == 53918                 // 'lt' 'transform'
     || lk == 53919                 // 'map' 'transform'
     || lk == 53921                 // 'mod' 'transform'
     || lk == 53923                 // 'module' 'transform'
     || lk == 53924                 // 'namespace' 'transform'
     || lk == 53925                 // 'namespace-node' 'transform'
     || lk == 53926                 // 'ne' 'transform'
     || lk == 53930                 // 'node' 'transform'
     || lk == 53933                 // 'only' 'transform'
     || lk == 53935                 // 'or' 'transform'
     || lk == 53936                 // 'order' 'transform'
     || lk == 53937                 // 'ordered' 'transform'
     || lk == 53939                 // 'parent' 'transform'
     || lk == 53944                 // 'preceding' 'transform'
     || lk == 53945                 // 'preceding-sibling' 'transform'
     || lk == 53948                 // 'processing-instruction' 'transform'
     || lk == 53951                 // 'return' 'transform'
     || lk == 53954                 // 'satisfies' 'transform'
     || lk == 53956                 // 'schema-attribute' 'transform'
     || lk == 53957                 // 'schema-element' 'transform'
     || lk == 53958                 // 'self' 'transform'
     || lk == 53961                 // 'some' 'transform'
     || lk == 53962                 // 'stable' 'transform'
     || lk == 53963                 // 'start' 'transform'
     || lk == 53966                 // 'switch' 'transform'
     || lk == 53967                 // 'text' 'transform'
     || lk == 53969                 // 'to' 'transform'
     || lk == 53971                 // 'treat' 'transform'
     || lk == 53972                 // 'try' 'transform'
     || lk == 53975                 // 'typeswitch' 'transform'
     || lk == 53976                 // 'union' 'transform'
     || lk == 53977                 // 'unordered' 'transform'
     || lk == 53979                 // 'validate' 'transform'
     || lk == 53984                 // 'where' 'transform'
     || lk == 53988                 // 'xquery' 'transform'
     || lk == 54017                 // IntegerLiteral 'treat'
     || lk == 54018                 // DecimalLiteral 'treat'
     || lk == 54019                 // DoubleLiteral 'treat'
     || lk == 54020                 // StringLiteral 'treat'
     || lk == 54021                 // URIQualifiedName 'treat'
     || lk == 54031                 // QName^Token 'treat'
     || lk == 54037                 // Wildcard 'treat'
     || lk == 54047                 // '$' 'treat'
     || lk == 54048                 // '%' 'treat'
     || lk == 54050                 // '(' 'treat'
     || lk == 54051                 // '(#' 'treat'
     || lk == 54055                 // '+' 'treat'
     || lk == 54057                 // '-' 'treat'
     || lk == 54059                 // '.' 'treat'
     || lk == 54060                 // '..' 'treat'
     || lk == 54061                 // '/' 'treat'
     || lk == 54062                 // '//' 'treat'
     || lk == 54069                 // '<' 'treat'
     || lk == 54081                 // '?' 'treat'
     || lk == 54083                 // '@' 'treat'
     || lk == 54085                 // '[' 'treat'
     || lk == 54093                 // 'ancestor' 'treat'
     || lk == 54094                 // 'ancestor-or-self' 'treat'
     || lk == 54095                 // 'and' 'treat'
     || lk == 54097                 // 'array' 'treat'
     || lk == 54099                 // 'ascending' 'treat'
     || lk == 54101                 // 'attribute' 'treat'
     || lk == 54107                 // 'case' 'treat'
     || lk == 54108                 // 'cast' 'treat'
     || lk == 54109                 // 'castable' 'treat'
     || lk == 54111                 // 'child' 'treat'
     || lk == 54112                 // 'collation' 'treat'
     || lk == 54113                 // 'comment' 'treat'
     || lk == 54119                 // 'count' 'treat'
     || lk == 54122                 // 'declare' 'treat'
     || lk == 54123                 // 'default' 'treat'
     || lk == 54125                 // 'descendant' 'treat'
     || lk == 54126                 // 'descendant-or-self' 'treat'
     || lk == 54127                 // 'descending' 'treat'
     || lk == 54129                 // 'div' 'treat'
     || lk == 54130                 // 'document' 'treat'
     || lk == 54131                 // 'document-node' 'treat'
     || lk == 54132                 // 'element' 'treat'
     || lk == 54133                 // 'else' 'treat'
     || lk == 54134                 // 'empty' 'treat'
     || lk == 54135                 // 'empty-sequence' 'treat'
     || lk == 54137                 // 'end' 'treat'
     || lk == 54138                 // 'eq' 'treat'
     || lk == 54139                 // 'every' 'treat'
     || lk == 54140                 // 'except' 'treat'
     || lk == 54145                 // 'following' 'treat'
     || lk == 54146                 // 'following-sibling' 'treat'
     || lk == 54147                 // 'for' 'treat'
     || lk == 54148                 // 'function' 'treat'
     || lk == 54149                 // 'ge' 'treat'
     || lk == 54151                 // 'group' 'treat'
     || lk == 54153                 // 'gt' 'treat'
     || lk == 54154                 // 'idiv' 'treat'
     || lk == 54155                 // 'if' 'treat'
     || lk == 54156                 // 'import' 'treat'
     || lk == 54161                 // 'instance' 'treat'
     || lk == 54162                 // 'intersect' 'treat'
     || lk == 54165                 // 'is' 'treat'
     || lk == 54166                 // 'item' 'treat'
     || lk == 54170                 // 'le' 'treat'
     || lk == 54172                 // 'let' 'treat'
     || lk == 54174                 // 'lt' 'treat'
     || lk == 54175                 // 'map' 'treat'
     || lk == 54177                 // 'mod' 'treat'
     || lk == 54179                 // 'module' 'treat'
     || lk == 54180                 // 'namespace' 'treat'
     || lk == 54181                 // 'namespace-node' 'treat'
     || lk == 54182                 // 'ne' 'treat'
     || lk == 54186                 // 'node' 'treat'
     || lk == 54189                 // 'only' 'treat'
     || lk == 54191                 // 'or' 'treat'
     || lk == 54192                 // 'order' 'treat'
     || lk == 54193                 // 'ordered' 'treat'
     || lk == 54195                 // 'parent' 'treat'
     || lk == 54200                 // 'preceding' 'treat'
     || lk == 54201                 // 'preceding-sibling' 'treat'
     || lk == 54204                 // 'processing-instruction' 'treat'
     || lk == 54207                 // 'return' 'treat'
     || lk == 54210                 // 'satisfies' 'treat'
     || lk == 54212                 // 'schema-attribute' 'treat'
     || lk == 54213                 // 'schema-element' 'treat'
     || lk == 54214                 // 'self' 'treat'
     || lk == 54217                 // 'some' 'treat'
     || lk == 54218                 // 'stable' 'treat'
     || lk == 54219                 // 'start' 'treat'
     || lk == 54222                 // 'switch' 'treat'
     || lk == 54223                 // 'text' 'treat'
     || lk == 54225                 // 'to' 'treat'
     || lk == 54227                 // 'treat' 'treat'
     || lk == 54228                 // 'try' 'treat'
     || lk == 54231                 // 'typeswitch' 'treat'
     || lk == 54232                 // 'union' 'treat'
     || lk == 54233                 // 'unordered' 'treat'
     || lk == 54235                 // 'validate' 'treat'
     || lk == 54240                 // 'where' 'treat'
     || lk == 54244                 // 'xquery' 'treat'
     || lk == 54303                 // '$' 'try'
     || lk == 54304                 // '%' 'try'
     || lk == 54306                 // '(' 'try'
     || lk == 54307                 // '(#' 'try'
     || lk == 54311                 // '+' 'try'
     || lk == 54313                 // '-' 'try'
     || lk == 54317                 // '/' 'try'
     || lk == 54318                 // '//' 'try'
     || lk == 54325                 // '<' 'try'
     || lk == 54339                 // '@' 'try'
     || lk == 54341                 // '[' 'try'
     || lk == 54357                 // 'attribute' 'try'
     || lk == 54388                 // 'element' 'try'
     || lk == 54463                 // 'return' 'try'
     || lk == 54659                 // 'for' 'tumbling'
     || lk == 55003                 // 'validate' 'type'
     || lk == 55071                 // '$' 'typeswitch'
     || lk == 55072                 // '%' 'typeswitch'
     || lk == 55074                 // '(' 'typeswitch'
     || lk == 55075                 // '(#' 'typeswitch'
     || lk == 55079                 // '+' 'typeswitch'
     || lk == 55081                 // '-' 'typeswitch'
     || lk == 55085                 // '/' 'typeswitch'
     || lk == 55086                 // '//' 'typeswitch'
     || lk == 55093                 // '<' 'typeswitch'
     || lk == 55107                 // '@' 'typeswitch'
     || lk == 55109                 // '[' 'typeswitch'
     || lk == 55125                 // 'attribute' 'typeswitch'
     || lk == 55156                 // 'element' 'typeswitch'
     || lk == 55231                 // 'return' 'typeswitch'
     || lk == 55297                 // IntegerLiteral 'union'
     || lk == 55298                 // DecimalLiteral 'union'
     || lk == 55299                 // DoubleLiteral 'union'
     || lk == 55300                 // StringLiteral 'union'
     || lk == 55301                 // URIQualifiedName 'union'
     || lk == 55311                 // QName^Token 'union'
     || lk == 55317                 // Wildcard 'union'
     || lk == 55327                 // '$' 'union'
     || lk == 55328                 // '%' 'union'
     || lk == 55330                 // '(' 'union'
     || lk == 55331                 // '(#' 'union'
     || lk == 55335                 // '+' 'union'
     || lk == 55337                 // '-' 'union'
     || lk == 55339                 // '.' 'union'
     || lk == 55340                 // '..' 'union'
     || lk == 55341                 // '/' 'union'
     || lk == 55342                 // '//' 'union'
     || lk == 55349                 // '<' 'union'
     || lk == 55361                 // '?' 'union'
     || lk == 55363                 // '@' 'union'
     || lk == 55365                 // '[' 'union'
     || lk == 55373                 // 'ancestor' 'union'
     || lk == 55374                 // 'ancestor-or-self' 'union'
     || lk == 55375                 // 'and' 'union'
     || lk == 55377                 // 'array' 'union'
     || lk == 55379                 // 'ascending' 'union'
     || lk == 55381                 // 'attribute' 'union'
     || lk == 55387                 // 'case' 'union'
     || lk == 55388                 // 'cast' 'union'
     || lk == 55389                 // 'castable' 'union'
     || lk == 55391                 // 'child' 'union'
     || lk == 55392                 // 'collation' 'union'
     || lk == 55393                 // 'comment' 'union'
     || lk == 55399                 // 'count' 'union'
     || lk == 55402                 // 'declare' 'union'
     || lk == 55403                 // 'default' 'union'
     || lk == 55405                 // 'descendant' 'union'
     || lk == 55406                 // 'descendant-or-self' 'union'
     || lk == 55407                 // 'descending' 'union'
     || lk == 55409                 // 'div' 'union'
     || lk == 55410                 // 'document' 'union'
     || lk == 55411                 // 'document-node' 'union'
     || lk == 55412                 // 'element' 'union'
     || lk == 55413                 // 'else' 'union'
     || lk == 55414                 // 'empty' 'union'
     || lk == 55415                 // 'empty-sequence' 'union'
     || lk == 55417                 // 'end' 'union'
     || lk == 55418                 // 'eq' 'union'
     || lk == 55419                 // 'every' 'union'
     || lk == 55420                 // 'except' 'union'
     || lk == 55425                 // 'following' 'union'
     || lk == 55426                 // 'following-sibling' 'union'
     || lk == 55427                 // 'for' 'union'
     || lk == 55428                 // 'function' 'union'
     || lk == 55429                 // 'ge' 'union'
     || lk == 55431                 // 'group' 'union'
     || lk == 55433                 // 'gt' 'union'
     || lk == 55434                 // 'idiv' 'union'
     || lk == 55435                 // 'if' 'union'
     || lk == 55436                 // 'import' 'union'
     || lk == 55441                 // 'instance' 'union'
     || lk == 55442                 // 'intersect' 'union'
     || lk == 55445                 // 'is' 'union'
     || lk == 55446                 // 'item' 'union'
     || lk == 55450                 // 'le' 'union'
     || lk == 55452                 // 'let' 'union'
     || lk == 55454                 // 'lt' 'union'
     || lk == 55455                 // 'map' 'union'
     || lk == 55457                 // 'mod' 'union'
     || lk == 55459                 // 'module' 'union'
     || lk == 55460                 // 'namespace' 'union'
     || lk == 55461                 // 'namespace-node' 'union'
     || lk == 55462                 // 'ne' 'union'
     || lk == 55466                 // 'node' 'union'
     || lk == 55469                 // 'only' 'union'
     || lk == 55471                 // 'or' 'union'
     || lk == 55472                 // 'order' 'union'
     || lk == 55473                 // 'ordered' 'union'
     || lk == 55475                 // 'parent' 'union'
     || lk == 55480                 // 'preceding' 'union'
     || lk == 55481                 // 'preceding-sibling' 'union'
     || lk == 55484                 // 'processing-instruction' 'union'
     || lk == 55487                 // 'return' 'union'
     || lk == 55490                 // 'satisfies' 'union'
     || lk == 55492                 // 'schema-attribute' 'union'
     || lk == 55493                 // 'schema-element' 'union'
     || lk == 55494                 // 'self' 'union'
     || lk == 55497                 // 'some' 'union'
     || lk == 55498                 // 'stable' 'union'
     || lk == 55499                 // 'start' 'union'
     || lk == 55502                 // 'switch' 'union'
     || lk == 55503                 // 'text' 'union'
     || lk == 55505                 // 'to' 'union'
     || lk == 55507                 // 'treat' 'union'
     || lk == 55508                 // 'try' 'union'
     || lk == 55511                 // 'typeswitch' 'union'
     || lk == 55512                 // 'union' 'union'
     || lk == 55513                 // 'unordered' 'union'
     || lk == 55515                 // 'validate' 'union'
     || lk == 55520                 // 'where' 'union'
     || lk == 55524                 // 'xquery' 'union'
     || lk == 55583                 // '$' 'unordered'
     || lk == 55584                 // '%' 'unordered'
     || lk == 55586                 // '(' 'unordered'
     || lk == 55587                 // '(#' 'unordered'
     || lk == 55591                 // '+' 'unordered'
     || lk == 55593                 // '-' 'unordered'
     || lk == 55597                 // '/' 'unordered'
     || lk == 55598                 // '//' 'unordered'
     || lk == 55605                 // '<' 'unordered'
     || lk == 55619                 // '@' 'unordered'
     || lk == 55621                 // '[' 'unordered'
     || lk == 55637                 // 'attribute' 'unordered'
     || lk == 55668                 // 'element' 'unordered'
     || lk == 55743                 // 'return' 'unordered'
     || lk == 55956                 // 'invoke' 'updating'
     || lk == 56095                 // '$' 'validate'
     || lk == 56096                 // '%' 'validate'
     || lk == 56098                 // '(' 'validate'
     || lk == 56099                 // '(#' 'validate'
     || lk == 56103                 // '+' 'validate'
     || lk == 56105                 // '-' 'validate'
     || lk == 56109                 // '/' 'validate'
     || lk == 56110                 // '//' 'validate'
     || lk == 56117                 // '<' 'validate'
     || lk == 56131                 // '@' 'validate'
     || lk == 56133                 // '[' 'validate'
     || lk == 56149                 // 'attribute' 'validate'
     || lk == 56180                 // 'element' 'validate'
     || lk == 56255                 // 'return' 'validate'
     || lk == 56510                 // 'replace' 'value'
     || lk == 57375                 // '$' 'where'
     || lk == 57376                 // '%' 'where'
     || lk == 57378                 // '(' 'where'
     || lk == 57379                 // '(#' 'where'
     || lk == 57383                 // '+' 'where'
     || lk == 57385                 // '-' 'where'
     || lk == 57389                 // '/' 'where'
     || lk == 57390                 // '//' 'where'
     || lk == 57397                 // '<' 'where'
     || lk == 57409                 // '?' 'where'
     || lk == 57411                 // '@' 'where'
     || lk == 57413                 // '[' 'where'
     || lk == 57429                 // 'attribute' 'where'
     || lk == 57460                 // 'element' 'where'
     || lk == 57508                 // 'namespace' 'where'
     || lk == 57532                 // 'processing-instruction' 'where'
     || lk == 57535                 // 'return' 'where'
     || lk == 58399                 // '$' 'xquery'
     || lk == 58400                 // '%' 'xquery'
     || lk == 58402                 // '(' 'xquery'
     || lk == 58403                 // '(#' 'xquery'
     || lk == 58407                 // '+' 'xquery'
     || lk == 58409                 // '-' 'xquery'
     || lk == 58413                 // '/' 'xquery'
     || lk == 58414                 // '//' 'xquery'
     || lk == 58421                 // '<' 'xquery'
     || lk == 58435                 // '@' 'xquery'
     || lk == 58437                 // '[' 'xquery'
     || lk == 58453                 // 'attribute' 'xquery'
     || lk == 58484                 // 'element' 'xquery'
     || lk == 58559                 // 'return' 'xquery'
     || lk == 58961                 // 'array' '{'
     || lk == 58965                 // 'attribute' '{'
     || lk == 58977                 // 'comment' '{'
     || lk == 58994                 // 'document' '{'
     || lk == 58996                 // 'element' '{'
     || lk == 59039                 // 'map' '{'
     || lk == 59044                 // 'namespace' '{'
     || lk == 59057                 // 'ordered' '{'
     || lk == 59068                 // 'processing-instruction' '{'
     || lk == 59087                 // 'text' '{'
     || lk == 59092                 // 'try' '{'
     || lk == 59097                 // 'unordered' '{'
     || lk == 59099                 // 'validate' '{'
     || lk == 59393                 // IntegerLiteral '|'
     || lk == 59394                 // DecimalLiteral '|'
     || lk == 59395                 // DoubleLiteral '|'
     || lk == 59396                 // StringLiteral '|'
     || lk == 59397                 // URIQualifiedName '|'
     || lk == 59407                 // QName^Token '|'
     || lk == 59413                 // Wildcard '|'
     || lk == 59435                 // '.' '|'
     || lk == 59436                 // '..' '|'
     || lk == 59437                 // '/' '|'
     || lk == 59469                 // 'ancestor' '|'
     || lk == 59470                 // 'ancestor-or-self' '|'
     || lk == 59471                 // 'and' '|'
     || lk == 59473                 // 'array' '|'
     || lk == 59475                 // 'ascending' '|'
     || lk == 59477                 // 'attribute' '|'
     || lk == 59483                 // 'case' '|'
     || lk == 59484                 // 'cast' '|'
     || lk == 59485                 // 'castable' '|'
     || lk == 59487                 // 'child' '|'
     || lk == 59488                 // 'collation' '|'
     || lk == 59489                 // 'comment' '|'
     || lk == 59495                 // 'count' '|'
     || lk == 59498                 // 'declare' '|'
     || lk == 59499                 // 'default' '|'
     || lk == 59501                 // 'descendant' '|'
     || lk == 59502                 // 'descendant-or-self' '|'
     || lk == 59503                 // 'descending' '|'
     || lk == 59505                 // 'div' '|'
     || lk == 59506                 // 'document' '|'
     || lk == 59507                 // 'document-node' '|'
     || lk == 59508                 // 'element' '|'
     || lk == 59509                 // 'else' '|'
     || lk == 59510                 // 'empty' '|'
     || lk == 59511                 // 'empty-sequence' '|'
     || lk == 59513                 // 'end' '|'
     || lk == 59514                 // 'eq' '|'
     || lk == 59515                 // 'every' '|'
     || lk == 59516                 // 'except' '|'
     || lk == 59521                 // 'following' '|'
     || lk == 59522                 // 'following-sibling' '|'
     || lk == 59523                 // 'for' '|'
     || lk == 59524                 // 'function' '|'
     || lk == 59525                 // 'ge' '|'
     || lk == 59527                 // 'group' '|'
     || lk == 59529                 // 'gt' '|'
     || lk == 59530                 // 'idiv' '|'
     || lk == 59531                 // 'if' '|'
     || lk == 59532                 // 'import' '|'
     || lk == 59537                 // 'instance' '|'
     || lk == 59538                 // 'intersect' '|'
     || lk == 59541                 // 'is' '|'
     || lk == 59542                 // 'item' '|'
     || lk == 59546                 // 'le' '|'
     || lk == 59548                 // 'let' '|'
     || lk == 59550                 // 'lt' '|'
     || lk == 59551                 // 'map' '|'
     || lk == 59553                 // 'mod' '|'
     || lk == 59555                 // 'module' '|'
     || lk == 59556                 // 'namespace' '|'
     || lk == 59557                 // 'namespace-node' '|'
     || lk == 59558                 // 'ne' '|'
     || lk == 59562                 // 'node' '|'
     || lk == 59565                 // 'only' '|'
     || lk == 59567                 // 'or' '|'
     || lk == 59568                 // 'order' '|'
     || lk == 59569                 // 'ordered' '|'
     || lk == 59571                 // 'parent' '|'
     || lk == 59576                 // 'preceding' '|'
     || lk == 59577                 // 'preceding-sibling' '|'
     || lk == 59580                 // 'processing-instruction' '|'
     || lk == 59583                 // 'return' '|'
     || lk == 59586                 // 'satisfies' '|'
     || lk == 59588                 // 'schema-attribute' '|'
     || lk == 59589                 // 'schema-element' '|'
     || lk == 59590                 // 'self' '|'
     || lk == 59593                 // 'some' '|'
     || lk == 59594                 // 'stable' '|'
     || lk == 59595                 // 'start' '|'
     || lk == 59598                 // 'switch' '|'
     || lk == 59599                 // 'text' '|'
     || lk == 59601                 // 'to' '|'
     || lk == 59603                 // 'treat' '|'
     || lk == 59604                 // 'try' '|'
     || lk == 59607                 // 'typeswitch' '|'
     || lk == 59608                 // 'union' '|'
     || lk == 59609                 // 'unordered' '|'
     || lk == 59611                 // 'validate' '|'
     || lk == 59616                 // 'where' '|'
     || lk == 59620                 // 'xquery' '|'
     || lk == 59649                 // IntegerLiteral '||'
     || lk == 59650                 // DecimalLiteral '||'
     || lk == 59651                 // DoubleLiteral '||'
     || lk == 59652                 // StringLiteral '||'
     || lk == 59653                 // URIQualifiedName '||'
     || lk == 59663                 // QName^Token '||'
     || lk == 59669                 // Wildcard '||'
     || lk == 59691                 // '.' '||'
     || lk == 59692                 // '..' '||'
     || lk == 59693                 // '/' '||'
     || lk == 59725                 // 'ancestor' '||'
     || lk == 59726                 // 'ancestor-or-self' '||'
     || lk == 59727                 // 'and' '||'
     || lk == 59729                 // 'array' '||'
     || lk == 59731                 // 'ascending' '||'
     || lk == 59733                 // 'attribute' '||'
     || lk == 59739                 // 'case' '||'
     || lk == 59740                 // 'cast' '||'
     || lk == 59741                 // 'castable' '||'
     || lk == 59743                 // 'child' '||'
     || lk == 59744                 // 'collation' '||'
     || lk == 59745                 // 'comment' '||'
     || lk == 59751                 // 'count' '||'
     || lk == 59754                 // 'declare' '||'
     || lk == 59755                 // 'default' '||'
     || lk == 59757                 // 'descendant' '||'
     || lk == 59758                 // 'descendant-or-self' '||'
     || lk == 59759                 // 'descending' '||'
     || lk == 59761                 // 'div' '||'
     || lk == 59762                 // 'document' '||'
     || lk == 59763                 // 'document-node' '||'
     || lk == 59764                 // 'element' '||'
     || lk == 59765                 // 'else' '||'
     || lk == 59766                 // 'empty' '||'
     || lk == 59767                 // 'empty-sequence' '||'
     || lk == 59769                 // 'end' '||'
     || lk == 59770                 // 'eq' '||'
     || lk == 59771                 // 'every' '||'
     || lk == 59772                 // 'except' '||'
     || lk == 59777                 // 'following' '||'
     || lk == 59778                 // 'following-sibling' '||'
     || lk == 59779                 // 'for' '||'
     || lk == 59780                 // 'function' '||'
     || lk == 59781                 // 'ge' '||'
     || lk == 59783                 // 'group' '||'
     || lk == 59785                 // 'gt' '||'
     || lk == 59786                 // 'idiv' '||'
     || lk == 59787                 // 'if' '||'
     || lk == 59788                 // 'import' '||'
     || lk == 59793                 // 'instance' '||'
     || lk == 59794                 // 'intersect' '||'
     || lk == 59797                 // 'is' '||'
     || lk == 59798                 // 'item' '||'
     || lk == 59802                 // 'le' '||'
     || lk == 59804                 // 'let' '||'
     || lk == 59806                 // 'lt' '||'
     || lk == 59807                 // 'map' '||'
     || lk == 59809                 // 'mod' '||'
     || lk == 59811                 // 'module' '||'
     || lk == 59812                 // 'namespace' '||'
     || lk == 59813                 // 'namespace-node' '||'
     || lk == 59814                 // 'ne' '||'
     || lk == 59818                 // 'node' '||'
     || lk == 59821                 // 'only' '||'
     || lk == 59823                 // 'or' '||'
     || lk == 59824                 // 'order' '||'
     || lk == 59825                 // 'ordered' '||'
     || lk == 59827                 // 'parent' '||'
     || lk == 59832                 // 'preceding' '||'
     || lk == 59833                 // 'preceding-sibling' '||'
     || lk == 59836                 // 'processing-instruction' '||'
     || lk == 59839                 // 'return' '||'
     || lk == 59842                 // 'satisfies' '||'
     || lk == 59844                 // 'schema-attribute' '||'
     || lk == 59845                 // 'schema-element' '||'
     || lk == 59846                 // 'self' '||'
     || lk == 59849                 // 'some' '||'
     || lk == 59850                 // 'stable' '||'
     || lk == 59851                 // 'start' '||'
     || lk == 59854                 // 'switch' '||'
     || lk == 59855                 // 'text' '||'
     || lk == 59857                 // 'to' '||'
     || lk == 59859                 // 'treat' '||'
     || lk == 59860                 // 'try' '||'
     || lk == 59863                 // 'typeswitch' '||'
     || lk == 59864                 // 'union' '||'
     || lk == 59865                 // 'unordered' '||'
     || lk == 59867                 // 'validate' '||'
     || lk == 59872                 // 'where' '||'
     || lk == 59876)                // 'xquery' '||'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_FLWORExpr();
              lk = -7;
            }
            catch (p7A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_ReturnClause();
                lk = -8;
              }
              catch (p8A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_IfStatement();
                  lk = -9;
                }
                catch (p9A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_SwitchStatement();
                    lk = -10;
                  }
                  catch (p10A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_TryCatchStatement();
                      lk = -11;
                    }
                    catch (p11A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_TypeswitchStatement();
                        lk = -12;
                      }
                      catch (p12A)
                      {
                        try
                        {
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          try_VarDeclStatement();
                          lk = -13;
                        }
                        catch (p13A)
                        {
                          lk = -16;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 80:                        // 'append'
    case 38764:                     // 'delete' 'json'
    case 38800:                     // 'insert' 'json'
    case 38845:                     // 'rename' 'json'
      parse_ApplyStatement();
      break;
    case -2:
      parse_AssignStatement();
      break;
    case 230:                       // '{'
      parse_BlockStatement();
      break;
    case 89:                        // 'break'
      parse_BreakStatement();
      break;
    case 100:                       // 'continue'
      parse_ContinueStatement();
      break;
    case 125:                       // 'exit'
      parse_ExitStatement();
      break;
    case -7:
      parse_FLWORExpr();
      break;
    case -8:
      parse_ReturnClause();
      break;
    case -9:
      parse_IfStatement();
      break;
    case -10:
      parse_SwitchStatement();
      break;
    case -11:
      parse_TryCatchStatement();
      break;
    case -12:
      parse_TypeswitchStatement();
      break;
    case -13:
    case 221:                       // 'variable'
      parse_VarDeclStatement();
      break;
    case 225:                       // 'while'
      parse_WhileStatement();
      break;
    case 52:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 34:                        // '('
      lookahead2W(182);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 35:                        // '(#'
      lookahead2(166);              // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 46:                        // '//'
      lookahead2W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 53:                        // '<'
      lookahead2(164);              // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 54:                        // '<!--'
      lookahead2(3);                // DirCommentContents
      break;
    case 59:                        // '<?'
      lookahead2(0);                // PITarget
      break;
    case 65:                        // '?'
      lookahead2W(161);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
      break;
    case 67:                        // '@'
      lookahead2W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 69:                        // '['
      lookahead2W(183);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 73:                        // '``['
      lookahead2(1);                // StringConstructorChars
      break;
    case 101:                       // 'copy'
      lookahead2W(23);              // S^WS | '$' | '(:'
      break;
    case 131:                       // 'for'
      lookahead2W(199);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'tumbling' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' |
                                    // '|' | '||' | '}'
      break;
    case 148:                       // 'invoke'
      lookahead2W(68);              // S^WS | '(:' | 'updating'
      break;
    case 189:                       // 'rename'
      lookahead2W(109);             // S^WS | '(:' | 'json' | 'node'
      break;
    case 190:                       // 'replace'
      lookahead2W(114);             // S^WS | '(:' | 'node' | 'value'
      break;
    case 219:                       // 'validate'
      lookahead2W(205);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'lax' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 39:                        // '+'
    case 41:                        // '-'
      lookahead2W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 108:                       // 'delete'
    case 144:                       // 'insert'
      lookahead2W(130);             // S^WS | '(:' | 'json' | 'node' | 'nodes'
      break;
    case 164:                       // 'namespace'
    case 188:                       // 'processing-instruction'
      lookahead2W(193);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | '!' | '!=' |
                                    // '#' | '$' | '%' | '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 21:                        // Wildcard
    case 43:                        // '.'
    case 44:                        // '..'
    case 45:                        // '/'
      lookahead2W(190);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' |
                                    // '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | '``[' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'ascending' |
                                    // 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 198:                       // 'self'
      lookahead2W(196);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | '::' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'and'
    case 81:                        // 'array'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 97:                        // 'comment'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 114:                       // 'document'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 119:                       // 'empty-sequence'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 132:                       // 'function'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 139:                       // 'if'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 150:                       // 'item'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 159:                       // 'map'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 165:                       // 'namespace-node'
    case 166:                       // 'ne'
    case 170:                       // 'node'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 177:                       // 'ordered'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 206:                       // 'switch'
    case 207:                       // 'text'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
    case 216:                       // 'union'
    case 217:                       // 'unordered'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(192);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '!' | '!=' | '#' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 290                   // '(' IntegerLiteral
     || lk == 295                   // '+' IntegerLiteral
     || lk == 297                   // '-' IntegerLiteral
     || lk == 301                   // '/' IntegerLiteral
     || lk == 302                   // '//' IntegerLiteral
     || lk == 321                   // '?' IntegerLiteral
     || lk == 325                   // '[' IntegerLiteral
     || lk == 447                   // 'return' IntegerLiteral
     || lk == 546                   // '(' DecimalLiteral
     || lk == 551                   // '+' DecimalLiteral
     || lk == 553                   // '-' DecimalLiteral
     || lk == 557                   // '/' DecimalLiteral
     || lk == 558                   // '//' DecimalLiteral
     || lk == 581                   // '[' DecimalLiteral
     || lk == 703                   // 'return' DecimalLiteral
     || lk == 802                   // '(' DoubleLiteral
     || lk == 807                   // '+' DoubleLiteral
     || lk == 809                   // '-' DoubleLiteral
     || lk == 813                   // '/' DoubleLiteral
     || lk == 814                   // '//' DoubleLiteral
     || lk == 837                   // '[' DoubleLiteral
     || lk == 959                   // 'return' DoubleLiteral
     || lk == 1058                  // '(' StringLiteral
     || lk == 1063                  // '+' StringLiteral
     || lk == 1065                  // '-' StringLiteral
     || lk == 1069                  // '/' StringLiteral
     || lk == 1070                  // '//' StringLiteral
     || lk == 1093                  // '[' StringLiteral
     || lk == 1215                  // 'return' StringLiteral
     || lk == 1311                  // '$' URIQualifiedName
     || lk == 1312                  // '%' URIQualifiedName
     || lk == 1314                  // '(' URIQualifiedName
     || lk == 1315                  // '(#' URIQualifiedName
     || lk == 1319                  // '+' URIQualifiedName
     || lk == 1321                  // '-' URIQualifiedName
     || lk == 1325                  // '/' URIQualifiedName
     || lk == 1326                  // '//' URIQualifiedName
     || lk == 1347                  // '@' URIQualifiedName
     || lk == 1349                  // '[' URIQualifiedName
     || lk == 1365                  // 'attribute' URIQualifiedName
     || lk == 1396                  // 'element' URIQualifiedName
     || lk == 1471                  // 'return' URIQualifiedName
     || lk == 3131                  // '<?' PITarget
     || lk == 3649                  // '?' NCName^Token
     || lk == 3748                  // 'namespace' NCName^Token
     || lk == 3772                  // 'processing-instruction' NCName^Token
     || lk == 3871                  // '$' QName^Token
     || lk == 3872                  // '%' QName^Token
     || lk == 3874                  // '(' QName^Token
     || lk == 3875                  // '(#' QName^Token
     || lk == 3879                  // '+' QName^Token
     || lk == 3881                  // '-' QName^Token
     || lk == 3885                  // '/' QName^Token
     || lk == 3886                  // '//' QName^Token
     || lk == 3893                  // '<' QName^Token
     || lk == 3907                  // '@' QName^Token
     || lk == 3909                  // '[' QName^Token
     || lk == 3925                  // 'attribute' QName^Token
     || lk == 3956                  // 'element' QName^Token
     || lk == 4031                  // 'return' QName^Token
     || lk == 4169                  // '``[' StringConstructorChars
     || lk == 4387                  // '(#' S
     || lk == 5410                  // '(' Wildcard
     || lk == 5415                  // '+' Wildcard
     || lk == 5417                  // '-' Wildcard
     || lk == 5421                  // '/' Wildcard
     || lk == 5422                  // '//' Wildcard
     || lk == 5443                  // '@' Wildcard
     || lk == 5445                  // '[' Wildcard
     || lk == 5567                  // 'return' Wildcard
     || lk == 5686                  // '<!--' DirCommentContents
     || lk == 6657                  // IntegerLiteral '!'
     || lk == 6658                  // DecimalLiteral '!'
     || lk == 6659                  // DoubleLiteral '!'
     || lk == 6660                  // StringLiteral '!'
     || lk == 6661                  // URIQualifiedName '!'
     || lk == 6671                  // QName^Token '!'
     || lk == 6677                  // Wildcard '!'
     || lk == 6699                  // '.' '!'
     || lk == 6700                  // '..' '!'
     || lk == 6701                  // '/' '!'
     || lk == 6733                  // 'ancestor' '!'
     || lk == 6734                  // 'ancestor-or-self' '!'
     || lk == 6735                  // 'and' '!'
     || lk == 6737                  // 'array' '!'
     || lk == 6739                  // 'ascending' '!'
     || lk == 6741                  // 'attribute' '!'
     || lk == 6747                  // 'case' '!'
     || lk == 6748                  // 'cast' '!'
     || lk == 6749                  // 'castable' '!'
     || lk == 6751                  // 'child' '!'
     || lk == 6752                  // 'collation' '!'
     || lk == 6753                  // 'comment' '!'
     || lk == 6759                  // 'count' '!'
     || lk == 6762                  // 'declare' '!'
     || lk == 6763                  // 'default' '!'
     || lk == 6765                  // 'descendant' '!'
     || lk == 6766                  // 'descendant-or-self' '!'
     || lk == 6767                  // 'descending' '!'
     || lk == 6769                  // 'div' '!'
     || lk == 6770                  // 'document' '!'
     || lk == 6771                  // 'document-node' '!'
     || lk == 6772                  // 'element' '!'
     || lk == 6773                  // 'else' '!'
     || lk == 6774                  // 'empty' '!'
     || lk == 6775                  // 'empty-sequence' '!'
     || lk == 6777                  // 'end' '!'
     || lk == 6778                  // 'eq' '!'
     || lk == 6779                  // 'every' '!'
     || lk == 6780                  // 'except' '!'
     || lk == 6785                  // 'following' '!'
     || lk == 6786                  // 'following-sibling' '!'
     || lk == 6787                  // 'for' '!'
     || lk == 6788                  // 'function' '!'
     || lk == 6789                  // 'ge' '!'
     || lk == 6791                  // 'group' '!'
     || lk == 6793                  // 'gt' '!'
     || lk == 6794                  // 'idiv' '!'
     || lk == 6795                  // 'if' '!'
     || lk == 6796                  // 'import' '!'
     || lk == 6801                  // 'instance' '!'
     || lk == 6802                  // 'intersect' '!'
     || lk == 6805                  // 'is' '!'
     || lk == 6806                  // 'item' '!'
     || lk == 6810                  // 'le' '!'
     || lk == 6812                  // 'let' '!'
     || lk == 6814                  // 'lt' '!'
     || lk == 6815                  // 'map' '!'
     || lk == 6817                  // 'mod' '!'
     || lk == 6819                  // 'module' '!'
     || lk == 6820                  // 'namespace' '!'
     || lk == 6821                  // 'namespace-node' '!'
     || lk == 6822                  // 'ne' '!'
     || lk == 6826                  // 'node' '!'
     || lk == 6829                  // 'only' '!'
     || lk == 6831                  // 'or' '!'
     || lk == 6832                  // 'order' '!'
     || lk == 6833                  // 'ordered' '!'
     || lk == 6835                  // 'parent' '!'
     || lk == 6840                  // 'preceding' '!'
     || lk == 6841                  // 'preceding-sibling' '!'
     || lk == 6844                  // 'processing-instruction' '!'
     || lk == 6847                  // 'return' '!'
     || lk == 6850                  // 'satisfies' '!'
     || lk == 6852                  // 'schema-attribute' '!'
     || lk == 6853                  // 'schema-element' '!'
     || lk == 6854                  // 'self' '!'
     || lk == 6857                  // 'some' '!'
     || lk == 6858                  // 'stable' '!'
     || lk == 6859                  // 'start' '!'
     || lk == 6862                  // 'switch' '!'
     || lk == 6863                  // 'text' '!'
     || lk == 6865                  // 'to' '!'
     || lk == 6867                  // 'treat' '!'
     || lk == 6868                  // 'try' '!'
     || lk == 6871                  // 'typeswitch' '!'
     || lk == 6872                  // 'union' '!'
     || lk == 6873                  // 'unordered' '!'
     || lk == 6875                  // 'validate' '!'
     || lk == 6880                  // 'where' '!'
     || lk == 6884                  // 'xquery' '!'
     || lk == 6913                  // IntegerLiteral '!='
     || lk == 6914                  // DecimalLiteral '!='
     || lk == 6915                  // DoubleLiteral '!='
     || lk == 6916                  // StringLiteral '!='
     || lk == 6917                  // URIQualifiedName '!='
     || lk == 6927                  // QName^Token '!='
     || lk == 6933                  // Wildcard '!='
     || lk == 6955                  // '.' '!='
     || lk == 6956                  // '..' '!='
     || lk == 6957                  // '/' '!='
     || lk == 6989                  // 'ancestor' '!='
     || lk == 6990                  // 'ancestor-or-self' '!='
     || lk == 6991                  // 'and' '!='
     || lk == 6993                  // 'array' '!='
     || lk == 6995                  // 'ascending' '!='
     || lk == 6997                  // 'attribute' '!='
     || lk == 7003                  // 'case' '!='
     || lk == 7004                  // 'cast' '!='
     || lk == 7005                  // 'castable' '!='
     || lk == 7007                  // 'child' '!='
     || lk == 7008                  // 'collation' '!='
     || lk == 7009                  // 'comment' '!='
     || lk == 7015                  // 'count' '!='
     || lk == 7018                  // 'declare' '!='
     || lk == 7019                  // 'default' '!='
     || lk == 7021                  // 'descendant' '!='
     || lk == 7022                  // 'descendant-or-self' '!='
     || lk == 7023                  // 'descending' '!='
     || lk == 7025                  // 'div' '!='
     || lk == 7026                  // 'document' '!='
     || lk == 7027                  // 'document-node' '!='
     || lk == 7028                  // 'element' '!='
     || lk == 7029                  // 'else' '!='
     || lk == 7030                  // 'empty' '!='
     || lk == 7031                  // 'empty-sequence' '!='
     || lk == 7033                  // 'end' '!='
     || lk == 7034                  // 'eq' '!='
     || lk == 7035                  // 'every' '!='
     || lk == 7036                  // 'except' '!='
     || lk == 7041                  // 'following' '!='
     || lk == 7042                  // 'following-sibling' '!='
     || lk == 7043                  // 'for' '!='
     || lk == 7044                  // 'function' '!='
     || lk == 7045                  // 'ge' '!='
     || lk == 7047                  // 'group' '!='
     || lk == 7049                  // 'gt' '!='
     || lk == 7050                  // 'idiv' '!='
     || lk == 7051                  // 'if' '!='
     || lk == 7052                  // 'import' '!='
     || lk == 7057                  // 'instance' '!='
     || lk == 7058                  // 'intersect' '!='
     || lk == 7061                  // 'is' '!='
     || lk == 7062                  // 'item' '!='
     || lk == 7066                  // 'le' '!='
     || lk == 7068                  // 'let' '!='
     || lk == 7070                  // 'lt' '!='
     || lk == 7071                  // 'map' '!='
     || lk == 7073                  // 'mod' '!='
     || lk == 7075                  // 'module' '!='
     || lk == 7076                  // 'namespace' '!='
     || lk == 7077                  // 'namespace-node' '!='
     || lk == 7078                  // 'ne' '!='
     || lk == 7082                  // 'node' '!='
     || lk == 7085                  // 'only' '!='
     || lk == 7087                  // 'or' '!='
     || lk == 7088                  // 'order' '!='
     || lk == 7089                  // 'ordered' '!='
     || lk == 7091                  // 'parent' '!='
     || lk == 7096                  // 'preceding' '!='
     || lk == 7097                  // 'preceding-sibling' '!='
     || lk == 7100                  // 'processing-instruction' '!='
     || lk == 7103                  // 'return' '!='
     || lk == 7106                  // 'satisfies' '!='
     || lk == 7108                  // 'schema-attribute' '!='
     || lk == 7109                  // 'schema-element' '!='
     || lk == 7110                  // 'self' '!='
     || lk == 7113                  // 'some' '!='
     || lk == 7114                  // 'stable' '!='
     || lk == 7115                  // 'start' '!='
     || lk == 7118                  // 'switch' '!='
     || lk == 7119                  // 'text' '!='
     || lk == 7121                  // 'to' '!='
     || lk == 7123                  // 'treat' '!='
     || lk == 7124                  // 'try' '!='
     || lk == 7127                  // 'typeswitch' '!='
     || lk == 7128                  // 'union' '!='
     || lk == 7129                  // 'unordered' '!='
     || lk == 7131                  // 'validate' '!='
     || lk == 7136                  // 'where' '!='
     || lk == 7140                  // 'xquery' '!='
     || lk == 7429                  // URIQualifiedName '#'
     || lk == 7439                  // QName^Token '#'
     || lk == 7501                  // 'ancestor' '#'
     || lk == 7502                  // 'ancestor-or-self' '#'
     || lk == 7503                  // 'and' '#'
     || lk == 7505                  // 'array' '#'
     || lk == 7507                  // 'ascending' '#'
     || lk == 7509                  // 'attribute' '#'
     || lk == 7515                  // 'case' '#'
     || lk == 7516                  // 'cast' '#'
     || lk == 7517                  // 'castable' '#'
     || lk == 7519                  // 'child' '#'
     || lk == 7520                  // 'collation' '#'
     || lk == 7521                  // 'comment' '#'
     || lk == 7527                  // 'count' '#'
     || lk == 7530                  // 'declare' '#'
     || lk == 7531                  // 'default' '#'
     || lk == 7533                  // 'descendant' '#'
     || lk == 7534                  // 'descendant-or-self' '#'
     || lk == 7535                  // 'descending' '#'
     || lk == 7537                  // 'div' '#'
     || lk == 7538                  // 'document' '#'
     || lk == 7539                  // 'document-node' '#'
     || lk == 7540                  // 'element' '#'
     || lk == 7541                  // 'else' '#'
     || lk == 7542                  // 'empty' '#'
     || lk == 7543                  // 'empty-sequence' '#'
     || lk == 7545                  // 'end' '#'
     || lk == 7546                  // 'eq' '#'
     || lk == 7547                  // 'every' '#'
     || lk == 7548                  // 'except' '#'
     || lk == 7553                  // 'following' '#'
     || lk == 7554                  // 'following-sibling' '#'
     || lk == 7555                  // 'for' '#'
     || lk == 7556                  // 'function' '#'
     || lk == 7557                  // 'ge' '#'
     || lk == 7559                  // 'group' '#'
     || lk == 7561                  // 'gt' '#'
     || lk == 7562                  // 'idiv' '#'
     || lk == 7563                  // 'if' '#'
     || lk == 7564                  // 'import' '#'
     || lk == 7569                  // 'instance' '#'
     || lk == 7570                  // 'intersect' '#'
     || lk == 7573                  // 'is' '#'
     || lk == 7574                  // 'item' '#'
     || lk == 7578                  // 'le' '#'
     || lk == 7580                  // 'let' '#'
     || lk == 7582                  // 'lt' '#'
     || lk == 7583                  // 'map' '#'
     || lk == 7585                  // 'mod' '#'
     || lk == 7587                  // 'module' '#'
     || lk == 7588                  // 'namespace' '#'
     || lk == 7589                  // 'namespace-node' '#'
     || lk == 7590                  // 'ne' '#'
     || lk == 7594                  // 'node' '#'
     || lk == 7597                  // 'only' '#'
     || lk == 7599                  // 'or' '#'
     || lk == 7600                  // 'order' '#'
     || lk == 7601                  // 'ordered' '#'
     || lk == 7603                  // 'parent' '#'
     || lk == 7608                  // 'preceding' '#'
     || lk == 7609                  // 'preceding-sibling' '#'
     || lk == 7612                  // 'processing-instruction' '#'
     || lk == 7615                  // 'return' '#'
     || lk == 7618                  // 'satisfies' '#'
     || lk == 7620                  // 'schema-attribute' '#'
     || lk == 7621                  // 'schema-element' '#'
     || lk == 7622                  // 'self' '#'
     || lk == 7625                  // 'some' '#'
     || lk == 7626                  // 'stable' '#'
     || lk == 7627                  // 'start' '#'
     || lk == 7630                  // 'switch' '#'
     || lk == 7631                  // 'text' '#'
     || lk == 7633                  // 'to' '#'
     || lk == 7635                  // 'treat' '#'
     || lk == 7636                  // 'try' '#'
     || lk == 7639                  // 'typeswitch' '#'
     || lk == 7640                  // 'union' '#'
     || lk == 7641                  // 'unordered' '#'
     || lk == 7643                  // 'validate' '#'
     || lk == 7648                  // 'where' '#'
     || lk == 7652                  // 'xquery' '#'
     || lk == 7970                  // '(' '$'
     || lk == 7975                  // '+' '$'
     || lk == 7977                  // '-' '$'
     || lk == 7981                  // '/' '$'
     || lk == 7982                  // '//' '$'
     || lk == 8005                  // '[' '$'
     || lk == 8037                  // 'copy' '$'
     || lk == 8059                  // 'every' '$'
     || lk == 8067                  // 'for' '$'
     || lk == 8092                  // 'let' '$'
     || lk == 8127                  // 'return' '$'
     || lk == 8137                  // 'some' '$'
     || lk == 8226                  // '(' '%'
     || lk == 8231                  // '+' '%'
     || lk == 8233                  // '-' '%'
     || lk == 8237                  // '/' '%'
     || lk == 8238                  // '//' '%'
     || lk == 8261                  // '[' '%'
     || lk == 8383                  // 'return' '%'
     || lk == 8705                  // IntegerLiteral '('
     || lk == 8706                  // DecimalLiteral '('
     || lk == 8707                  // DoubleLiteral '('
     || lk == 8708                  // StringLiteral '('
     || lk == 8709                  // URIQualifiedName '('
     || lk == 8719                  // QName^Token '('
     || lk == 8738                  // '(' '('
     || lk == 8743                  // '+' '('
     || lk == 8745                  // '-' '('
     || lk == 8747                  // '.' '('
     || lk == 8749                  // '/' '('
     || lk == 8750                  // '//' '('
     || lk == 8769                  // '?' '('
     || lk == 8773                  // '[' '('
     || lk == 8781                  // 'ancestor' '('
     || lk == 8782                  // 'ancestor-or-self' '('
     || lk == 8783                  // 'and' '('
     || lk == 8787                  // 'ascending' '('
     || lk == 8789                  // 'attribute' '('
     || lk == 8795                  // 'case' '('
     || lk == 8796                  // 'cast' '('
     || lk == 8797                  // 'castable' '('
     || lk == 8799                  // 'child' '('
     || lk == 8800                  // 'collation' '('
     || lk == 8801                  // 'comment' '('
     || lk == 8807                  // 'count' '('
     || lk == 8810                  // 'declare' '('
     || lk == 8811                  // 'default' '('
     || lk == 8813                  // 'descendant' '('
     || lk == 8814                  // 'descendant-or-self' '('
     || lk == 8815                  // 'descending' '('
     || lk == 8817                  // 'div' '('
     || lk == 8818                  // 'document' '('
     || lk == 8819                  // 'document-node' '('
     || lk == 8820                  // 'element' '('
     || lk == 8821                  // 'else' '('
     || lk == 8822                  // 'empty' '('
     || lk == 8825                  // 'end' '('
     || lk == 8826                  // 'eq' '('
     || lk == 8827                  // 'every' '('
     || lk == 8828                  // 'except' '('
     || lk == 8833                  // 'following' '('
     || lk == 8834                  // 'following-sibling' '('
     || lk == 8835                  // 'for' '('
     || lk == 8836                  // 'function' '('
     || lk == 8837                  // 'ge' '('
     || lk == 8839                  // 'group' '('
     || lk == 8841                  // 'gt' '('
     || lk == 8842                  // 'idiv' '('
     || lk == 8843                  // 'if' '('
     || lk == 8844                  // 'import' '('
     || lk == 8849                  // 'instance' '('
     || lk == 8850                  // 'intersect' '('
     || lk == 8853                  // 'is' '('
     || lk == 8858                  // 'le' '('
     || lk == 8860                  // 'let' '('
     || lk == 8862                  // 'lt' '('
     || lk == 8865                  // 'mod' '('
     || lk == 8867                  // 'module' '('
     || lk == 8868                  // 'namespace' '('
     || lk == 8869                  // 'namespace-node' '('
     || lk == 8870                  // 'ne' '('
     || lk == 8874                  // 'node' '('
     || lk == 8877                  // 'only' '('
     || lk == 8879                  // 'or' '('
     || lk == 8880                  // 'order' '('
     || lk == 8881                  // 'ordered' '('
     || lk == 8883                  // 'parent' '('
     || lk == 8888                  // 'preceding' '('
     || lk == 8889                  // 'preceding-sibling' '('
     || lk == 8892                  // 'processing-instruction' '('
     || lk == 8895                  // 'return' '('
     || lk == 8898                  // 'satisfies' '('
     || lk == 8900                  // 'schema-attribute' '('
     || lk == 8901                  // 'schema-element' '('
     || lk == 8902                  // 'self' '('
     || lk == 8905                  // 'some' '('
     || lk == 8906                  // 'stable' '('
     || lk == 8907                  // 'start' '('
     || lk == 8910                  // 'switch' '('
     || lk == 8911                  // 'text' '('
     || lk == 8913                  // 'to' '('
     || lk == 8915                  // 'treat' '('
     || lk == 8916                  // 'try' '('
     || lk == 8919                  // 'typeswitch' '('
     || lk == 8920                  // 'union' '('
     || lk == 8921                  // 'unordered' '('
     || lk == 8923                  // 'validate' '('
     || lk == 8928                  // 'where' '('
     || lk == 8932                  // 'xquery' '('
     || lk == 8994                  // '(' '(#'
     || lk == 8999                  // '+' '(#'
     || lk == 9001                  // '-' '(#'
     || lk == 9029                  // '[' '(#'
     || lk == 9151                  // 'return' '(#'
     || lk == 9506                  // '(' ')'
     || lk == 9729                  // IntegerLiteral '*'
     || lk == 9730                  // DecimalLiteral '*'
     || lk == 9731                  // DoubleLiteral '*'
     || lk == 9732                  // StringLiteral '*'
     || lk == 9733                  // URIQualifiedName '*'
     || lk == 9743                  // QName^Token '*'
     || lk == 9749                  // Wildcard '*'
     || lk == 9771                  // '.' '*'
     || lk == 9772                  // '..' '*'
     || lk == 9773                  // '/' '*'
     || lk == 9793                  // '?' '*'
     || lk == 9805                  // 'ancestor' '*'
     || lk == 9806                  // 'ancestor-or-self' '*'
     || lk == 9807                  // 'and' '*'
     || lk == 9809                  // 'array' '*'
     || lk == 9811                  // 'ascending' '*'
     || lk == 9813                  // 'attribute' '*'
     || lk == 9819                  // 'case' '*'
     || lk == 9820                  // 'cast' '*'
     || lk == 9821                  // 'castable' '*'
     || lk == 9823                  // 'child' '*'
     || lk == 9824                  // 'collation' '*'
     || lk == 9825                  // 'comment' '*'
     || lk == 9831                  // 'count' '*'
     || lk == 9834                  // 'declare' '*'
     || lk == 9835                  // 'default' '*'
     || lk == 9837                  // 'descendant' '*'
     || lk == 9838                  // 'descendant-or-self' '*'
     || lk == 9839                  // 'descending' '*'
     || lk == 9841                  // 'div' '*'
     || lk == 9842                  // 'document' '*'
     || lk == 9843                  // 'document-node' '*'
     || lk == 9844                  // 'element' '*'
     || lk == 9845                  // 'else' '*'
     || lk == 9846                  // 'empty' '*'
     || lk == 9847                  // 'empty-sequence' '*'
     || lk == 9849                  // 'end' '*'
     || lk == 9850                  // 'eq' '*'
     || lk == 9851                  // 'every' '*'
     || lk == 9852                  // 'except' '*'
     || lk == 9857                  // 'following' '*'
     || lk == 9858                  // 'following-sibling' '*'
     || lk == 9859                  // 'for' '*'
     || lk == 9860                  // 'function' '*'
     || lk == 9861                  // 'ge' '*'
     || lk == 9863                  // 'group' '*'
     || lk == 9865                  // 'gt' '*'
     || lk == 9866                  // 'idiv' '*'
     || lk == 9867                  // 'if' '*'
     || lk == 9868                  // 'import' '*'
     || lk == 9873                  // 'instance' '*'
     || lk == 9874                  // 'intersect' '*'
     || lk == 9877                  // 'is' '*'
     || lk == 9878                  // 'item' '*'
     || lk == 9882                  // 'le' '*'
     || lk == 9884                  // 'let' '*'
     || lk == 9886                  // 'lt' '*'
     || lk == 9887                  // 'map' '*'
     || lk == 9889                  // 'mod' '*'
     || lk == 9891                  // 'module' '*'
     || lk == 9892                  // 'namespace' '*'
     || lk == 9893                  // 'namespace-node' '*'
     || lk == 9894                  // 'ne' '*'
     || lk == 9898                  // 'node' '*'
     || lk == 9901                  // 'only' '*'
     || lk == 9903                  // 'or' '*'
     || lk == 9904                  // 'order' '*'
     || lk == 9905                  // 'ordered' '*'
     || lk == 9907                  // 'parent' '*'
     || lk == 9912                  // 'preceding' '*'
     || lk == 9913                  // 'preceding-sibling' '*'
     || lk == 9916                  // 'processing-instruction' '*'
     || lk == 9919                  // 'return' '*'
     || lk == 9922                  // 'satisfies' '*'
     || lk == 9924                  // 'schema-attribute' '*'
     || lk == 9925                  // 'schema-element' '*'
     || lk == 9926                  // 'self' '*'
     || lk == 9929                  // 'some' '*'
     || lk == 9930                  // 'stable' '*'
     || lk == 9931                  // 'start' '*'
     || lk == 9934                  // 'switch' '*'
     || lk == 9935                  // 'text' '*'
     || lk == 9937                  // 'to' '*'
     || lk == 9939                  // 'treat' '*'
     || lk == 9940                  // 'try' '*'
     || lk == 9943                  // 'typeswitch' '*'
     || lk == 9944                  // 'union' '*'
     || lk == 9945                  // 'unordered' '*'
     || lk == 9947                  // 'validate' '*'
     || lk == 9952                  // 'where' '*'
     || lk == 9956                  // 'xquery' '*'
     || lk == 9985                  // IntegerLiteral '+'
     || lk == 9986                  // DecimalLiteral '+'
     || lk == 9987                  // DoubleLiteral '+'
     || lk == 9988                  // StringLiteral '+'
     || lk == 9989                  // URIQualifiedName '+'
     || lk == 9999                  // QName^Token '+'
     || lk == 10005                 // Wildcard '+'
     || lk == 10018                 // '(' '+'
     || lk == 10023                 // '+' '+'
     || lk == 10025                 // '-' '+'
     || lk == 10027                 // '.' '+'
     || lk == 10028                 // '..' '+'
     || lk == 10029                 // '/' '+'
     || lk == 10053                 // '[' '+'
     || lk == 10061                 // 'ancestor' '+'
     || lk == 10062                 // 'ancestor-or-self' '+'
     || lk == 10063                 // 'and' '+'
     || lk == 10065                 // 'array' '+'
     || lk == 10067                 // 'ascending' '+'
     || lk == 10069                 // 'attribute' '+'
     || lk == 10075                 // 'case' '+'
     || lk == 10076                 // 'cast' '+'
     || lk == 10077                 // 'castable' '+'
     || lk == 10079                 // 'child' '+'
     || lk == 10080                 // 'collation' '+'
     || lk == 10081                 // 'comment' '+'
     || lk == 10087                 // 'count' '+'
     || lk == 10090                 // 'declare' '+'
     || lk == 10091                 // 'default' '+'
     || lk == 10093                 // 'descendant' '+'
     || lk == 10094                 // 'descendant-or-self' '+'
     || lk == 10095                 // 'descending' '+'
     || lk == 10097                 // 'div' '+'
     || lk == 10098                 // 'document' '+'
     || lk == 10099                 // 'document-node' '+'
     || lk == 10100                 // 'element' '+'
     || lk == 10101                 // 'else' '+'
     || lk == 10102                 // 'empty' '+'
     || lk == 10103                 // 'empty-sequence' '+'
     || lk == 10105                 // 'end' '+'
     || lk == 10106                 // 'eq' '+'
     || lk == 10107                 // 'every' '+'
     || lk == 10108                 // 'except' '+'
     || lk == 10113                 // 'following' '+'
     || lk == 10114                 // 'following-sibling' '+'
     || lk == 10115                 // 'for' '+'
     || lk == 10116                 // 'function' '+'
     || lk == 10117                 // 'ge' '+'
     || lk == 10119                 // 'group' '+'
     || lk == 10121                 // 'gt' '+'
     || lk == 10122                 // 'idiv' '+'
     || lk == 10123                 // 'if' '+'
     || lk == 10124                 // 'import' '+'
     || lk == 10129                 // 'instance' '+'
     || lk == 10130                 // 'intersect' '+'
     || lk == 10133                 // 'is' '+'
     || lk == 10134                 // 'item' '+'
     || lk == 10138                 // 'le' '+'
     || lk == 10140                 // 'let' '+'
     || lk == 10142                 // 'lt' '+'
     || lk == 10143                 // 'map' '+'
     || lk == 10145                 // 'mod' '+'
     || lk == 10147                 // 'module' '+'
     || lk == 10148                 // 'namespace' '+'
     || lk == 10149                 // 'namespace-node' '+'
     || lk == 10150                 // 'ne' '+'
     || lk == 10154                 // 'node' '+'
     || lk == 10157                 // 'only' '+'
     || lk == 10159                 // 'or' '+'
     || lk == 10160                 // 'order' '+'
     || lk == 10161                 // 'ordered' '+'
     || lk == 10163                 // 'parent' '+'
     || lk == 10168                 // 'preceding' '+'
     || lk == 10169                 // 'preceding-sibling' '+'
     || lk == 10172                 // 'processing-instruction' '+'
     || lk == 10175                 // 'return' '+'
     || lk == 10178                 // 'satisfies' '+'
     || lk == 10180                 // 'schema-attribute' '+'
     || lk == 10181                 // 'schema-element' '+'
     || lk == 10182                 // 'self' '+'
     || lk == 10185                 // 'some' '+'
     || lk == 10186                 // 'stable' '+'
     || lk == 10187                 // 'start' '+'
     || lk == 10190                 // 'switch' '+'
     || lk == 10191                 // 'text' '+'
     || lk == 10193                 // 'to' '+'
     || lk == 10195                 // 'treat' '+'
     || lk == 10196                 // 'try' '+'
     || lk == 10199                 // 'typeswitch' '+'
     || lk == 10200                 // 'union' '+'
     || lk == 10201                 // 'unordered' '+'
     || lk == 10203                 // 'validate' '+'
     || lk == 10208                 // 'where' '+'
     || lk == 10212                 // 'xquery' '+'
     || lk == 10497                 // IntegerLiteral '-'
     || lk == 10498                 // DecimalLiteral '-'
     || lk == 10499                 // DoubleLiteral '-'
     || lk == 10500                 // StringLiteral '-'
     || lk == 10501                 // URIQualifiedName '-'
     || lk == 10511                 // QName^Token '-'
     || lk == 10517                 // Wildcard '-'
     || lk == 10530                 // '(' '-'
     || lk == 10535                 // '+' '-'
     || lk == 10537                 // '-' '-'
     || lk == 10539                 // '.' '-'
     || lk == 10540                 // '..' '-'
     || lk == 10541                 // '/' '-'
     || lk == 10565                 // '[' '-'
     || lk == 10573                 // 'ancestor' '-'
     || lk == 10574                 // 'ancestor-or-self' '-'
     || lk == 10575                 // 'and' '-'
     || lk == 10577                 // 'array' '-'
     || lk == 10579                 // 'ascending' '-'
     || lk == 10581                 // 'attribute' '-'
     || lk == 10587                 // 'case' '-'
     || lk == 10588                 // 'cast' '-'
     || lk == 10589                 // 'castable' '-'
     || lk == 10591                 // 'child' '-'
     || lk == 10592                 // 'collation' '-'
     || lk == 10593                 // 'comment' '-'
     || lk == 10599                 // 'count' '-'
     || lk == 10602                 // 'declare' '-'
     || lk == 10603                 // 'default' '-'
     || lk == 10605                 // 'descendant' '-'
     || lk == 10606                 // 'descendant-or-self' '-'
     || lk == 10607                 // 'descending' '-'
     || lk == 10609                 // 'div' '-'
     || lk == 10610                 // 'document' '-'
     || lk == 10611                 // 'document-node' '-'
     || lk == 10612                 // 'element' '-'
     || lk == 10613                 // 'else' '-'
     || lk == 10614                 // 'empty' '-'
     || lk == 10615                 // 'empty-sequence' '-'
     || lk == 10617                 // 'end' '-'
     || lk == 10618                 // 'eq' '-'
     || lk == 10619                 // 'every' '-'
     || lk == 10620                 // 'except' '-'
     || lk == 10625                 // 'following' '-'
     || lk == 10626                 // 'following-sibling' '-'
     || lk == 10627                 // 'for' '-'
     || lk == 10628                 // 'function' '-'
     || lk == 10629                 // 'ge' '-'
     || lk == 10631                 // 'group' '-'
     || lk == 10633                 // 'gt' '-'
     || lk == 10634                 // 'idiv' '-'
     || lk == 10635                 // 'if' '-'
     || lk == 10636                 // 'import' '-'
     || lk == 10641                 // 'instance' '-'
     || lk == 10642                 // 'intersect' '-'
     || lk == 10645                 // 'is' '-'
     || lk == 10646                 // 'item' '-'
     || lk == 10650                 // 'le' '-'
     || lk == 10652                 // 'let' '-'
     || lk == 10654                 // 'lt' '-'
     || lk == 10655                 // 'map' '-'
     || lk == 10657                 // 'mod' '-'
     || lk == 10659                 // 'module' '-'
     || lk == 10660                 // 'namespace' '-'
     || lk == 10661                 // 'namespace-node' '-'
     || lk == 10662                 // 'ne' '-'
     || lk == 10666                 // 'node' '-'
     || lk == 10669                 // 'only' '-'
     || lk == 10671                 // 'or' '-'
     || lk == 10672                 // 'order' '-'
     || lk == 10673                 // 'ordered' '-'
     || lk == 10675                 // 'parent' '-'
     || lk == 10680                 // 'preceding' '-'
     || lk == 10681                 // 'preceding-sibling' '-'
     || lk == 10684                 // 'processing-instruction' '-'
     || lk == 10687                 // 'return' '-'
     || lk == 10690                 // 'satisfies' '-'
     || lk == 10692                 // 'schema-attribute' '-'
     || lk == 10693                 // 'schema-element' '-'
     || lk == 10694                 // 'self' '-'
     || lk == 10697                 // 'some' '-'
     || lk == 10698                 // 'stable' '-'
     || lk == 10699                 // 'start' '-'
     || lk == 10702                 // 'switch' '-'
     || lk == 10703                 // 'text' '-'
     || lk == 10705                 // 'to' '-'
     || lk == 10707                 // 'treat' '-'
     || lk == 10708                 // 'try' '-'
     || lk == 10711                 // 'typeswitch' '-'
     || lk == 10712                 // 'union' '-'
     || lk == 10713                 // 'unordered' '-'
     || lk == 10715                 // 'validate' '-'
     || lk == 10720                 // 'where' '-'
     || lk == 10724                 // 'xquery' '-'
     || lk == 11042                 // '(' '.'
     || lk == 11047                 // '+' '.'
     || lk == 11049                 // '-' '.'
     || lk == 11053                 // '/' '.'
     || lk == 11054                 // '//' '.'
     || lk == 11077                 // '[' '.'
     || lk == 11199                 // 'return' '.'
     || lk == 11298                 // '(' '..'
     || lk == 11303                 // '+' '..'
     || lk == 11305                 // '-' '..'
     || lk == 11309                 // '/' '..'
     || lk == 11310                 // '//' '..'
     || lk == 11333                 // '[' '..'
     || lk == 11455                 // 'return' '..'
     || lk == 11521                 // IntegerLiteral '/'
     || lk == 11522                 // DecimalLiteral '/'
     || lk == 11523                 // DoubleLiteral '/'
     || lk == 11524                 // StringLiteral '/'
     || lk == 11525                 // URIQualifiedName '/'
     || lk == 11535                 // QName^Token '/'
     || lk == 11541                 // Wildcard '/'
     || lk == 11554                 // '(' '/'
     || lk == 11559                 // '+' '/'
     || lk == 11561                 // '-' '/'
     || lk == 11563                 // '.' '/'
     || lk == 11564                 // '..' '/'
     || lk == 11589                 // '[' '/'
     || lk == 11597                 // 'ancestor' '/'
     || lk == 11598                 // 'ancestor-or-self' '/'
     || lk == 11599                 // 'and' '/'
     || lk == 11601                 // 'array' '/'
     || lk == 11603                 // 'ascending' '/'
     || lk == 11605                 // 'attribute' '/'
     || lk == 11611                 // 'case' '/'
     || lk == 11612                 // 'cast' '/'
     || lk == 11613                 // 'castable' '/'
     || lk == 11615                 // 'child' '/'
     || lk == 11616                 // 'collation' '/'
     || lk == 11617                 // 'comment' '/'
     || lk == 11623                 // 'count' '/'
     || lk == 11626                 // 'declare' '/'
     || lk == 11627                 // 'default' '/'
     || lk == 11629                 // 'descendant' '/'
     || lk == 11630                 // 'descendant-or-self' '/'
     || lk == 11631                 // 'descending' '/'
     || lk == 11633                 // 'div' '/'
     || lk == 11634                 // 'document' '/'
     || lk == 11635                 // 'document-node' '/'
     || lk == 11636                 // 'element' '/'
     || lk == 11637                 // 'else' '/'
     || lk == 11638                 // 'empty' '/'
     || lk == 11639                 // 'empty-sequence' '/'
     || lk == 11641                 // 'end' '/'
     || lk == 11642                 // 'eq' '/'
     || lk == 11643                 // 'every' '/'
     || lk == 11644                 // 'except' '/'
     || lk == 11649                 // 'following' '/'
     || lk == 11650                 // 'following-sibling' '/'
     || lk == 11651                 // 'for' '/'
     || lk == 11652                 // 'function' '/'
     || lk == 11653                 // 'ge' '/'
     || lk == 11655                 // 'group' '/'
     || lk == 11657                 // 'gt' '/'
     || lk == 11658                 // 'idiv' '/'
     || lk == 11659                 // 'if' '/'
     || lk == 11660                 // 'import' '/'
     || lk == 11665                 // 'instance' '/'
     || lk == 11666                 // 'intersect' '/'
     || lk == 11669                 // 'is' '/'
     || lk == 11670                 // 'item' '/'
     || lk == 11674                 // 'le' '/'
     || lk == 11676                 // 'let' '/'
     || lk == 11678                 // 'lt' '/'
     || lk == 11679                 // 'map' '/'
     || lk == 11681                 // 'mod' '/'
     || lk == 11683                 // 'module' '/'
     || lk == 11684                 // 'namespace' '/'
     || lk == 11685                 // 'namespace-node' '/'
     || lk == 11686                 // 'ne' '/'
     || lk == 11690                 // 'node' '/'
     || lk == 11693                 // 'only' '/'
     || lk == 11695                 // 'or' '/'
     || lk == 11696                 // 'order' '/'
     || lk == 11697                 // 'ordered' '/'
     || lk == 11699                 // 'parent' '/'
     || lk == 11704                 // 'preceding' '/'
     || lk == 11705                 // 'preceding-sibling' '/'
     || lk == 11708                 // 'processing-instruction' '/'
     || lk == 11711                 // 'return' '/'
     || lk == 11714                 // 'satisfies' '/'
     || lk == 11716                 // 'schema-attribute' '/'
     || lk == 11717                 // 'schema-element' '/'
     || lk == 11718                 // 'self' '/'
     || lk == 11721                 // 'some' '/'
     || lk == 11722                 // 'stable' '/'
     || lk == 11723                 // 'start' '/'
     || lk == 11726                 // 'switch' '/'
     || lk == 11727                 // 'text' '/'
     || lk == 11729                 // 'to' '/'
     || lk == 11731                 // 'treat' '/'
     || lk == 11732                 // 'try' '/'
     || lk == 11735                 // 'typeswitch' '/'
     || lk == 11736                 // 'union' '/'
     || lk == 11737                 // 'unordered' '/'
     || lk == 11739                 // 'validate' '/'
     || lk == 11744                 // 'where' '/'
     || lk == 11748                 // 'xquery' '/'
     || lk == 11777                 // IntegerLiteral '//'
     || lk == 11778                 // DecimalLiteral '//'
     || lk == 11779                 // DoubleLiteral '//'
     || lk == 11780                 // StringLiteral '//'
     || lk == 11781                 // URIQualifiedName '//'
     || lk == 11791                 // QName^Token '//'
     || lk == 11797                 // Wildcard '//'
     || lk == 11810                 // '(' '//'
     || lk == 11815                 // '+' '//'
     || lk == 11817                 // '-' '//'
     || lk == 11819                 // '.' '//'
     || lk == 11820                 // '..' '//'
     || lk == 11845                 // '[' '//'
     || lk == 11853                 // 'ancestor' '//'
     || lk == 11854                 // 'ancestor-or-self' '//'
     || lk == 11855                 // 'and' '//'
     || lk == 11857                 // 'array' '//'
     || lk == 11859                 // 'ascending' '//'
     || lk == 11861                 // 'attribute' '//'
     || lk == 11867                 // 'case' '//'
     || lk == 11868                 // 'cast' '//'
     || lk == 11869                 // 'castable' '//'
     || lk == 11871                 // 'child' '//'
     || lk == 11872                 // 'collation' '//'
     || lk == 11873                 // 'comment' '//'
     || lk == 11879                 // 'count' '//'
     || lk == 11882                 // 'declare' '//'
     || lk == 11883                 // 'default' '//'
     || lk == 11885                 // 'descendant' '//'
     || lk == 11886                 // 'descendant-or-self' '//'
     || lk == 11887                 // 'descending' '//'
     || lk == 11889                 // 'div' '//'
     || lk == 11890                 // 'document' '//'
     || lk == 11891                 // 'document-node' '//'
     || lk == 11892                 // 'element' '//'
     || lk == 11893                 // 'else' '//'
     || lk == 11894                 // 'empty' '//'
     || lk == 11895                 // 'empty-sequence' '//'
     || lk == 11897                 // 'end' '//'
     || lk == 11898                 // 'eq' '//'
     || lk == 11899                 // 'every' '//'
     || lk == 11900                 // 'except' '//'
     || lk == 11905                 // 'following' '//'
     || lk == 11906                 // 'following-sibling' '//'
     || lk == 11907                 // 'for' '//'
     || lk == 11908                 // 'function' '//'
     || lk == 11909                 // 'ge' '//'
     || lk == 11911                 // 'group' '//'
     || lk == 11913                 // 'gt' '//'
     || lk == 11914                 // 'idiv' '//'
     || lk == 11915                 // 'if' '//'
     || lk == 11916                 // 'import' '//'
     || lk == 11921                 // 'instance' '//'
     || lk == 11922                 // 'intersect' '//'
     || lk == 11925                 // 'is' '//'
     || lk == 11926                 // 'item' '//'
     || lk == 11930                 // 'le' '//'
     || lk == 11932                 // 'let' '//'
     || lk == 11934                 // 'lt' '//'
     || lk == 11935                 // 'map' '//'
     || lk == 11937                 // 'mod' '//'
     || lk == 11939                 // 'module' '//'
     || lk == 11940                 // 'namespace' '//'
     || lk == 11941                 // 'namespace-node' '//'
     || lk == 11942                 // 'ne' '//'
     || lk == 11946                 // 'node' '//'
     || lk == 11949                 // 'only' '//'
     || lk == 11951                 // 'or' '//'
     || lk == 11952                 // 'order' '//'
     || lk == 11953                 // 'ordered' '//'
     || lk == 11955                 // 'parent' '//'
     || lk == 11960                 // 'preceding' '//'
     || lk == 11961                 // 'preceding-sibling' '//'
     || lk == 11964                 // 'processing-instruction' '//'
     || lk == 11967                 // 'return' '//'
     || lk == 11970                 // 'satisfies' '//'
     || lk == 11972                 // 'schema-attribute' '//'
     || lk == 11973                 // 'schema-element' '//'
     || lk == 11974                 // 'self' '//'
     || lk == 11977                 // 'some' '//'
     || lk == 11978                 // 'stable' '//'
     || lk == 11979                 // 'start' '//'
     || lk == 11982                 // 'switch' '//'
     || lk == 11983                 // 'text' '//'
     || lk == 11985                 // 'to' '//'
     || lk == 11987                 // 'treat' '//'
     || lk == 11988                 // 'try' '//'
     || lk == 11991                 // 'typeswitch' '//'
     || lk == 11992                 // 'union' '//'
     || lk == 11993                 // 'unordered' '//'
     || lk == 11995                 // 'validate' '//'
     || lk == 12000                 // 'where' '//'
     || lk == 12004                 // 'xquery' '//'
     || lk == 12877                 // 'ancestor' '::'
     || lk == 12878                 // 'ancestor-or-self' '::'
     || lk == 12885                 // 'attribute' '::'
     || lk == 12895                 // 'child' '::'
     || lk == 12909                 // 'descendant' '::'
     || lk == 12910                 // 'descendant-or-self' '::'
     || lk == 12929                 // 'following' '::'
     || lk == 12930                 // 'following-sibling' '::'
     || lk == 12979                 // 'parent' '::'
     || lk == 12984                 // 'preceding' '::'
     || lk == 12985                 // 'preceding-sibling' '::'
     || lk == 12998                 // 'self' '::'
     || lk == 13313                 // IntegerLiteral ';'
     || lk == 13314                 // DecimalLiteral ';'
     || lk == 13315                 // DoubleLiteral ';'
     || lk == 13316                 // StringLiteral ';'
     || lk == 13317                 // URIQualifiedName ';'
     || lk == 13327                 // QName^Token ';'
     || lk == 13333                 // Wildcard ';'
     || lk == 13355                 // '.' ';'
     || lk == 13356                 // '..' ';'
     || lk == 13357                 // '/' ';'
     || lk == 13389                 // 'ancestor' ';'
     || lk == 13390                 // 'ancestor-or-self' ';'
     || lk == 13391                 // 'and' ';'
     || lk == 13393                 // 'array' ';'
     || lk == 13395                 // 'ascending' ';'
     || lk == 13397                 // 'attribute' ';'
     || lk == 13403                 // 'case' ';'
     || lk == 13404                 // 'cast' ';'
     || lk == 13405                 // 'castable' ';'
     || lk == 13407                 // 'child' ';'
     || lk == 13408                 // 'collation' ';'
     || lk == 13409                 // 'comment' ';'
     || lk == 13415                 // 'count' ';'
     || lk == 13418                 // 'declare' ';'
     || lk == 13419                 // 'default' ';'
     || lk == 13421                 // 'descendant' ';'
     || lk == 13422                 // 'descendant-or-self' ';'
     || lk == 13423                 // 'descending' ';'
     || lk == 13425                 // 'div' ';'
     || lk == 13426                 // 'document' ';'
     || lk == 13427                 // 'document-node' ';'
     || lk == 13428                 // 'element' ';'
     || lk == 13429                 // 'else' ';'
     || lk == 13430                 // 'empty' ';'
     || lk == 13431                 // 'empty-sequence' ';'
     || lk == 13433                 // 'end' ';'
     || lk == 13434                 // 'eq' ';'
     || lk == 13435                 // 'every' ';'
     || lk == 13436                 // 'except' ';'
     || lk == 13441                 // 'following' ';'
     || lk == 13442                 // 'following-sibling' ';'
     || lk == 13443                 // 'for' ';'
     || lk == 13444                 // 'function' ';'
     || lk == 13445                 // 'ge' ';'
     || lk == 13447                 // 'group' ';'
     || lk == 13449                 // 'gt' ';'
     || lk == 13450                 // 'idiv' ';'
     || lk == 13451                 // 'if' ';'
     || lk == 13452                 // 'import' ';'
     || lk == 13457                 // 'instance' ';'
     || lk == 13458                 // 'intersect' ';'
     || lk == 13461                 // 'is' ';'
     || lk == 13462                 // 'item' ';'
     || lk == 13466                 // 'le' ';'
     || lk == 13468                 // 'let' ';'
     || lk == 13470                 // 'lt' ';'
     || lk == 13471                 // 'map' ';'
     || lk == 13473                 // 'mod' ';'
     || lk == 13475                 // 'module' ';'
     || lk == 13476                 // 'namespace' ';'
     || lk == 13477                 // 'namespace-node' ';'
     || lk == 13478                 // 'ne' ';'
     || lk == 13482                 // 'node' ';'
     || lk == 13485                 // 'only' ';'
     || lk == 13487                 // 'or' ';'
     || lk == 13488                 // 'order' ';'
     || lk == 13489                 // 'ordered' ';'
     || lk == 13491                 // 'parent' ';'
     || lk == 13496                 // 'preceding' ';'
     || lk == 13497                 // 'preceding-sibling' ';'
     || lk == 13500                 // 'processing-instruction' ';'
     || lk == 13503                 // 'return' ';'
     || lk == 13506                 // 'satisfies' ';'
     || lk == 13508                 // 'schema-attribute' ';'
     || lk == 13509                 // 'schema-element' ';'
     || lk == 13510                 // 'self' ';'
     || lk == 13513                 // 'some' ';'
     || lk == 13514                 // 'stable' ';'
     || lk == 13515                 // 'start' ';'
     || lk == 13518                 // 'switch' ';'
     || lk == 13519                 // 'text' ';'
     || lk == 13521                 // 'to' ';'
     || lk == 13523                 // 'treat' ';'
     || lk == 13524                 // 'try' ';'
     || lk == 13527                 // 'typeswitch' ';'
     || lk == 13528                 // 'union' ';'
     || lk == 13529                 // 'unordered' ';'
     || lk == 13531                 // 'validate' ';'
     || lk == 13536                 // 'where' ';'
     || lk == 13540                 // 'xquery' ';'
     || lk == 13569                 // IntegerLiteral '<'
     || lk == 13570                 // DecimalLiteral '<'
     || lk == 13571                 // DoubleLiteral '<'
     || lk == 13572                 // StringLiteral '<'
     || lk == 13573                 // URIQualifiedName '<'
     || lk == 13583                 // QName^Token '<'
     || lk == 13589                 // Wildcard '<'
     || lk == 13602                 // '(' '<'
     || lk == 13607                 // '+' '<'
     || lk == 13609                 // '-' '<'
     || lk == 13611                 // '.' '<'
     || lk == 13612                 // '..' '<'
     || lk == 13613                 // '/' '<'
     || lk == 13614                 // '//' '<'
     || lk == 13637                 // '[' '<'
     || lk == 13645                 // 'ancestor' '<'
     || lk == 13646                 // 'ancestor-or-self' '<'
     || lk == 13647                 // 'and' '<'
     || lk == 13649                 // 'array' '<'
     || lk == 13651                 // 'ascending' '<'
     || lk == 13653                 // 'attribute' '<'
     || lk == 13659                 // 'case' '<'
     || lk == 13660                 // 'cast' '<'
     || lk == 13661                 // 'castable' '<'
     || lk == 13663                 // 'child' '<'
     || lk == 13664                 // 'collation' '<'
     || lk == 13665                 // 'comment' '<'
     || lk == 13671                 // 'count' '<'
     || lk == 13674                 // 'declare' '<'
     || lk == 13675                 // 'default' '<'
     || lk == 13677                 // 'descendant' '<'
     || lk == 13678                 // 'descendant-or-self' '<'
     || lk == 13679                 // 'descending' '<'
     || lk == 13681                 // 'div' '<'
     || lk == 13682                 // 'document' '<'
     || lk == 13683                 // 'document-node' '<'
     || lk == 13684                 // 'element' '<'
     || lk == 13685                 // 'else' '<'
     || lk == 13686                 // 'empty' '<'
     || lk == 13687                 // 'empty-sequence' '<'
     || lk == 13689                 // 'end' '<'
     || lk == 13690                 // 'eq' '<'
     || lk == 13691                 // 'every' '<'
     || lk == 13692                 // 'except' '<'
     || lk == 13697                 // 'following' '<'
     || lk == 13698                 // 'following-sibling' '<'
     || lk == 13699                 // 'for' '<'
     || lk == 13700                 // 'function' '<'
     || lk == 13701                 // 'ge' '<'
     || lk == 13703                 // 'group' '<'
     || lk == 13705                 // 'gt' '<'
     || lk == 13706                 // 'idiv' '<'
     || lk == 13707                 // 'if' '<'
     || lk == 13708                 // 'import' '<'
     || lk == 13713                 // 'instance' '<'
     || lk == 13714                 // 'intersect' '<'
     || lk == 13717                 // 'is' '<'
     || lk == 13718                 // 'item' '<'
     || lk == 13722                 // 'le' '<'
     || lk == 13724                 // 'let' '<'
     || lk == 13726                 // 'lt' '<'
     || lk == 13727                 // 'map' '<'
     || lk == 13729                 // 'mod' '<'
     || lk == 13731                 // 'module' '<'
     || lk == 13732                 // 'namespace' '<'
     || lk == 13733                 // 'namespace-node' '<'
     || lk == 13734                 // 'ne' '<'
     || lk == 13738                 // 'node' '<'
     || lk == 13741                 // 'only' '<'
     || lk == 13743                 // 'or' '<'
     || lk == 13744                 // 'order' '<'
     || lk == 13745                 // 'ordered' '<'
     || lk == 13747                 // 'parent' '<'
     || lk == 13752                 // 'preceding' '<'
     || lk == 13753                 // 'preceding-sibling' '<'
     || lk == 13756                 // 'processing-instruction' '<'
     || lk == 13759                 // 'return' '<'
     || lk == 13762                 // 'satisfies' '<'
     || lk == 13764                 // 'schema-attribute' '<'
     || lk == 13765                 // 'schema-element' '<'
     || lk == 13766                 // 'self' '<'
     || lk == 13769                 // 'some' '<'
     || lk == 13770                 // 'stable' '<'
     || lk == 13771                 // 'start' '<'
     || lk == 13774                 // 'switch' '<'
     || lk == 13775                 // 'text' '<'
     || lk == 13777                 // 'to' '<'
     || lk == 13779                 // 'treat' '<'
     || lk == 13780                 // 'try' '<'
     || lk == 13783                 // 'typeswitch' '<'
     || lk == 13784                 // 'union' '<'
     || lk == 13785                 // 'unordered' '<'
     || lk == 13787                 // 'validate' '<'
     || lk == 13792                 // 'where' '<'
     || lk == 13796                 // 'xquery' '<'
     || lk == 13858                 // '(' '<!--'
     || lk == 13863                 // '+' '<!--'
     || lk == 13865                 // '-' '<!--'
     || lk == 13869                 // '/' '<!--'
     || lk == 13870                 // '//' '<!--'
     || lk == 13893                 // '[' '<!--'
     || lk == 14015                 // 'return' '<!--'
     || lk == 14593                 // IntegerLiteral '<<'
     || lk == 14594                 // DecimalLiteral '<<'
     || lk == 14595                 // DoubleLiteral '<<'
     || lk == 14596                 // StringLiteral '<<'
     || lk == 14597                 // URIQualifiedName '<<'
     || lk == 14607                 // QName^Token '<<'
     || lk == 14613                 // Wildcard '<<'
     || lk == 14635                 // '.' '<<'
     || lk == 14636                 // '..' '<<'
     || lk == 14637                 // '/' '<<'
     || lk == 14669                 // 'ancestor' '<<'
     || lk == 14670                 // 'ancestor-or-self' '<<'
     || lk == 14671                 // 'and' '<<'
     || lk == 14673                 // 'array' '<<'
     || lk == 14675                 // 'ascending' '<<'
     || lk == 14677                 // 'attribute' '<<'
     || lk == 14683                 // 'case' '<<'
     || lk == 14684                 // 'cast' '<<'
     || lk == 14685                 // 'castable' '<<'
     || lk == 14687                 // 'child' '<<'
     || lk == 14688                 // 'collation' '<<'
     || lk == 14689                 // 'comment' '<<'
     || lk == 14695                 // 'count' '<<'
     || lk == 14698                 // 'declare' '<<'
     || lk == 14699                 // 'default' '<<'
     || lk == 14701                 // 'descendant' '<<'
     || lk == 14702                 // 'descendant-or-self' '<<'
     || lk == 14703                 // 'descending' '<<'
     || lk == 14705                 // 'div' '<<'
     || lk == 14706                 // 'document' '<<'
     || lk == 14707                 // 'document-node' '<<'
     || lk == 14708                 // 'element' '<<'
     || lk == 14709                 // 'else' '<<'
     || lk == 14710                 // 'empty' '<<'
     || lk == 14711                 // 'empty-sequence' '<<'
     || lk == 14713                 // 'end' '<<'
     || lk == 14714                 // 'eq' '<<'
     || lk == 14715                 // 'every' '<<'
     || lk == 14716                 // 'except' '<<'
     || lk == 14721                 // 'following' '<<'
     || lk == 14722                 // 'following-sibling' '<<'
     || lk == 14723                 // 'for' '<<'
     || lk == 14724                 // 'function' '<<'
     || lk == 14725                 // 'ge' '<<'
     || lk == 14727                 // 'group' '<<'
     || lk == 14729                 // 'gt' '<<'
     || lk == 14730                 // 'idiv' '<<'
     || lk == 14731                 // 'if' '<<'
     || lk == 14732                 // 'import' '<<'
     || lk == 14737                 // 'instance' '<<'
     || lk == 14738                 // 'intersect' '<<'
     || lk == 14741                 // 'is' '<<'
     || lk == 14742                 // 'item' '<<'
     || lk == 14746                 // 'le' '<<'
     || lk == 14748                 // 'let' '<<'
     || lk == 14750                 // 'lt' '<<'
     || lk == 14751                 // 'map' '<<'
     || lk == 14753                 // 'mod' '<<'
     || lk == 14755                 // 'module' '<<'
     || lk == 14756                 // 'namespace' '<<'
     || lk == 14757                 // 'namespace-node' '<<'
     || lk == 14758                 // 'ne' '<<'
     || lk == 14762                 // 'node' '<<'
     || lk == 14765                 // 'only' '<<'
     || lk == 14767                 // 'or' '<<'
     || lk == 14768                 // 'order' '<<'
     || lk == 14769                 // 'ordered' '<<'
     || lk == 14771                 // 'parent' '<<'
     || lk == 14776                 // 'preceding' '<<'
     || lk == 14777                 // 'preceding-sibling' '<<'
     || lk == 14780                 // 'processing-instruction' '<<'
     || lk == 14783                 // 'return' '<<'
     || lk == 14786                 // 'satisfies' '<<'
     || lk == 14788                 // 'schema-attribute' '<<'
     || lk == 14789                 // 'schema-element' '<<'
     || lk == 14790                 // 'self' '<<'
     || lk == 14793                 // 'some' '<<'
     || lk == 14794                 // 'stable' '<<'
     || lk == 14795                 // 'start' '<<'
     || lk == 14798                 // 'switch' '<<'
     || lk == 14799                 // 'text' '<<'
     || lk == 14801                 // 'to' '<<'
     || lk == 14803                 // 'treat' '<<'
     || lk == 14804                 // 'try' '<<'
     || lk == 14807                 // 'typeswitch' '<<'
     || lk == 14808                 // 'union' '<<'
     || lk == 14809                 // 'unordered' '<<'
     || lk == 14811                 // 'validate' '<<'
     || lk == 14816                 // 'where' '<<'
     || lk == 14820                 // 'xquery' '<<'
     || lk == 14849                 // IntegerLiteral '<='
     || lk == 14850                 // DecimalLiteral '<='
     || lk == 14851                 // DoubleLiteral '<='
     || lk == 14852                 // StringLiteral '<='
     || lk == 14853                 // URIQualifiedName '<='
     || lk == 14863                 // QName^Token '<='
     || lk == 14869                 // Wildcard '<='
     || lk == 14891                 // '.' '<='
     || lk == 14892                 // '..' '<='
     || lk == 14893                 // '/' '<='
     || lk == 14925                 // 'ancestor' '<='
     || lk == 14926                 // 'ancestor-or-self' '<='
     || lk == 14927                 // 'and' '<='
     || lk == 14929                 // 'array' '<='
     || lk == 14931                 // 'ascending' '<='
     || lk == 14933                 // 'attribute' '<='
     || lk == 14939                 // 'case' '<='
     || lk == 14940                 // 'cast' '<='
     || lk == 14941                 // 'castable' '<='
     || lk == 14943                 // 'child' '<='
     || lk == 14944                 // 'collation' '<='
     || lk == 14945                 // 'comment' '<='
     || lk == 14951                 // 'count' '<='
     || lk == 14954                 // 'declare' '<='
     || lk == 14955                 // 'default' '<='
     || lk == 14957                 // 'descendant' '<='
     || lk == 14958                 // 'descendant-or-self' '<='
     || lk == 14959                 // 'descending' '<='
     || lk == 14961                 // 'div' '<='
     || lk == 14962                 // 'document' '<='
     || lk == 14963                 // 'document-node' '<='
     || lk == 14964                 // 'element' '<='
     || lk == 14965                 // 'else' '<='
     || lk == 14966                 // 'empty' '<='
     || lk == 14967                 // 'empty-sequence' '<='
     || lk == 14969                 // 'end' '<='
     || lk == 14970                 // 'eq' '<='
     || lk == 14971                 // 'every' '<='
     || lk == 14972                 // 'except' '<='
     || lk == 14977                 // 'following' '<='
     || lk == 14978                 // 'following-sibling' '<='
     || lk == 14979                 // 'for' '<='
     || lk == 14980                 // 'function' '<='
     || lk == 14981                 // 'ge' '<='
     || lk == 14983                 // 'group' '<='
     || lk == 14985                 // 'gt' '<='
     || lk == 14986                 // 'idiv' '<='
     || lk == 14987                 // 'if' '<='
     || lk == 14988                 // 'import' '<='
     || lk == 14993                 // 'instance' '<='
     || lk == 14994                 // 'intersect' '<='
     || lk == 14997                 // 'is' '<='
     || lk == 14998                 // 'item' '<='
     || lk == 15002                 // 'le' '<='
     || lk == 15004                 // 'let' '<='
     || lk == 15006                 // 'lt' '<='
     || lk == 15007                 // 'map' '<='
     || lk == 15009                 // 'mod' '<='
     || lk == 15011                 // 'module' '<='
     || lk == 15012                 // 'namespace' '<='
     || lk == 15013                 // 'namespace-node' '<='
     || lk == 15014                 // 'ne' '<='
     || lk == 15018                 // 'node' '<='
     || lk == 15021                 // 'only' '<='
     || lk == 15023                 // 'or' '<='
     || lk == 15024                 // 'order' '<='
     || lk == 15025                 // 'ordered' '<='
     || lk == 15027                 // 'parent' '<='
     || lk == 15032                 // 'preceding' '<='
     || lk == 15033                 // 'preceding-sibling' '<='
     || lk == 15036                 // 'processing-instruction' '<='
     || lk == 15039                 // 'return' '<='
     || lk == 15042                 // 'satisfies' '<='
     || lk == 15044                 // 'schema-attribute' '<='
     || lk == 15045                 // 'schema-element' '<='
     || lk == 15046                 // 'self' '<='
     || lk == 15049                 // 'some' '<='
     || lk == 15050                 // 'stable' '<='
     || lk == 15051                 // 'start' '<='
     || lk == 15054                 // 'switch' '<='
     || lk == 15055                 // 'text' '<='
     || lk == 15057                 // 'to' '<='
     || lk == 15059                 // 'treat' '<='
     || lk == 15060                 // 'try' '<='
     || lk == 15063                 // 'typeswitch' '<='
     || lk == 15064                 // 'union' '<='
     || lk == 15065                 // 'unordered' '<='
     || lk == 15067                 // 'validate' '<='
     || lk == 15072                 // 'where' '<='
     || lk == 15076                 // 'xquery' '<='
     || lk == 15138                 // '(' '<?'
     || lk == 15143                 // '+' '<?'
     || lk == 15145                 // '-' '<?'
     || lk == 15149                 // '/' '<?'
     || lk == 15150                 // '//' '<?'
     || lk == 15173                 // '[' '<?'
     || lk == 15295                 // 'return' '<?'
     || lk == 15361                 // IntegerLiteral '='
     || lk == 15362                 // DecimalLiteral '='
     || lk == 15363                 // DoubleLiteral '='
     || lk == 15364                 // StringLiteral '='
     || lk == 15365                 // URIQualifiedName '='
     || lk == 15375                 // QName^Token '='
     || lk == 15381                 // Wildcard '='
     || lk == 15403                 // '.' '='
     || lk == 15404                 // '..' '='
     || lk == 15405                 // '/' '='
     || lk == 15437                 // 'ancestor' '='
     || lk == 15438                 // 'ancestor-or-self' '='
     || lk == 15439                 // 'and' '='
     || lk == 15441                 // 'array' '='
     || lk == 15443                 // 'ascending' '='
     || lk == 15445                 // 'attribute' '='
     || lk == 15451                 // 'case' '='
     || lk == 15452                 // 'cast' '='
     || lk == 15453                 // 'castable' '='
     || lk == 15455                 // 'child' '='
     || lk == 15456                 // 'collation' '='
     || lk == 15457                 // 'comment' '='
     || lk == 15463                 // 'count' '='
     || lk == 15466                 // 'declare' '='
     || lk == 15467                 // 'default' '='
     || lk == 15469                 // 'descendant' '='
     || lk == 15470                 // 'descendant-or-self' '='
     || lk == 15471                 // 'descending' '='
     || lk == 15473                 // 'div' '='
     || lk == 15474                 // 'document' '='
     || lk == 15475                 // 'document-node' '='
     || lk == 15476                 // 'element' '='
     || lk == 15477                 // 'else' '='
     || lk == 15478                 // 'empty' '='
     || lk == 15479                 // 'empty-sequence' '='
     || lk == 15481                 // 'end' '='
     || lk == 15482                 // 'eq' '='
     || lk == 15483                 // 'every' '='
     || lk == 15484                 // 'except' '='
     || lk == 15489                 // 'following' '='
     || lk == 15490                 // 'following-sibling' '='
     || lk == 15491                 // 'for' '='
     || lk == 15492                 // 'function' '='
     || lk == 15493                 // 'ge' '='
     || lk == 15495                 // 'group' '='
     || lk == 15497                 // 'gt' '='
     || lk == 15498                 // 'idiv' '='
     || lk == 15499                 // 'if' '='
     || lk == 15500                 // 'import' '='
     || lk == 15505                 // 'instance' '='
     || lk == 15506                 // 'intersect' '='
     || lk == 15509                 // 'is' '='
     || lk == 15510                 // 'item' '='
     || lk == 15514                 // 'le' '='
     || lk == 15516                 // 'let' '='
     || lk == 15518                 // 'lt' '='
     || lk == 15519                 // 'map' '='
     || lk == 15521                 // 'mod' '='
     || lk == 15523                 // 'module' '='
     || lk == 15524                 // 'namespace' '='
     || lk == 15525                 // 'namespace-node' '='
     || lk == 15526                 // 'ne' '='
     || lk == 15530                 // 'node' '='
     || lk == 15533                 // 'only' '='
     || lk == 15535                 // 'or' '='
     || lk == 15536                 // 'order' '='
     || lk == 15537                 // 'ordered' '='
     || lk == 15539                 // 'parent' '='
     || lk == 15544                 // 'preceding' '='
     || lk == 15545                 // 'preceding-sibling' '='
     || lk == 15548                 // 'processing-instruction' '='
     || lk == 15551                 // 'return' '='
     || lk == 15554                 // 'satisfies' '='
     || lk == 15556                 // 'schema-attribute' '='
     || lk == 15557                 // 'schema-element' '='
     || lk == 15558                 // 'self' '='
     || lk == 15561                 // 'some' '='
     || lk == 15562                 // 'stable' '='
     || lk == 15563                 // 'start' '='
     || lk == 15566                 // 'switch' '='
     || lk == 15567                 // 'text' '='
     || lk == 15569                 // 'to' '='
     || lk == 15571                 // 'treat' '='
     || lk == 15572                 // 'try' '='
     || lk == 15575                 // 'typeswitch' '='
     || lk == 15576                 // 'union' '='
     || lk == 15577                 // 'unordered' '='
     || lk == 15579                 // 'validate' '='
     || lk == 15584                 // 'where' '='
     || lk == 15588                 // 'xquery' '='
     || lk == 15617                 // IntegerLiteral '=>'
     || lk == 15618                 // DecimalLiteral '=>'
     || lk == 15619                 // DoubleLiteral '=>'
     || lk == 15620                 // StringLiteral '=>'
     || lk == 15621                 // URIQualifiedName '=>'
     || lk == 15631                 // QName^Token '=>'
     || lk == 15637                 // Wildcard '=>'
     || lk == 15659                 // '.' '=>'
     || lk == 15660                 // '..' '=>'
     || lk == 15661                 // '/' '=>'
     || lk == 15693                 // 'ancestor' '=>'
     || lk == 15694                 // 'ancestor-or-self' '=>'
     || lk == 15695                 // 'and' '=>'
     || lk == 15697                 // 'array' '=>'
     || lk == 15699                 // 'ascending' '=>'
     || lk == 15701                 // 'attribute' '=>'
     || lk == 15707                 // 'case' '=>'
     || lk == 15708                 // 'cast' '=>'
     || lk == 15709                 // 'castable' '=>'
     || lk == 15711                 // 'child' '=>'
     || lk == 15712                 // 'collation' '=>'
     || lk == 15713                 // 'comment' '=>'
     || lk == 15719                 // 'count' '=>'
     || lk == 15722                 // 'declare' '=>'
     || lk == 15723                 // 'default' '=>'
     || lk == 15725                 // 'descendant' '=>'
     || lk == 15726                 // 'descendant-or-self' '=>'
     || lk == 15727                 // 'descending' '=>'
     || lk == 15729                 // 'div' '=>'
     || lk == 15730                 // 'document' '=>'
     || lk == 15731                 // 'document-node' '=>'
     || lk == 15732                 // 'element' '=>'
     || lk == 15733                 // 'else' '=>'
     || lk == 15734                 // 'empty' '=>'
     || lk == 15735                 // 'empty-sequence' '=>'
     || lk == 15737                 // 'end' '=>'
     || lk == 15738                 // 'eq' '=>'
     || lk == 15739                 // 'every' '=>'
     || lk == 15740                 // 'except' '=>'
     || lk == 15745                 // 'following' '=>'
     || lk == 15746                 // 'following-sibling' '=>'
     || lk == 15747                 // 'for' '=>'
     || lk == 15748                 // 'function' '=>'
     || lk == 15749                 // 'ge' '=>'
     || lk == 15751                 // 'group' '=>'
     || lk == 15753                 // 'gt' '=>'
     || lk == 15754                 // 'idiv' '=>'
     || lk == 15755                 // 'if' '=>'
     || lk == 15756                 // 'import' '=>'
     || lk == 15761                 // 'instance' '=>'
     || lk == 15762                 // 'intersect' '=>'
     || lk == 15765                 // 'is' '=>'
     || lk == 15766                 // 'item' '=>'
     || lk == 15770                 // 'le' '=>'
     || lk == 15772                 // 'let' '=>'
     || lk == 15774                 // 'lt' '=>'
     || lk == 15775                 // 'map' '=>'
     || lk == 15777                 // 'mod' '=>'
     || lk == 15779                 // 'module' '=>'
     || lk == 15780                 // 'namespace' '=>'
     || lk == 15781                 // 'namespace-node' '=>'
     || lk == 15782                 // 'ne' '=>'
     || lk == 15786                 // 'node' '=>'
     || lk == 15789                 // 'only' '=>'
     || lk == 15791                 // 'or' '=>'
     || lk == 15792                 // 'order' '=>'
     || lk == 15793                 // 'ordered' '=>'
     || lk == 15795                 // 'parent' '=>'
     || lk == 15800                 // 'preceding' '=>'
     || lk == 15801                 // 'preceding-sibling' '=>'
     || lk == 15804                 // 'processing-instruction' '=>'
     || lk == 15807                 // 'return' '=>'
     || lk == 15810                 // 'satisfies' '=>'
     || lk == 15812                 // 'schema-attribute' '=>'
     || lk == 15813                 // 'schema-element' '=>'
     || lk == 15814                 // 'self' '=>'
     || lk == 15817                 // 'some' '=>'
     || lk == 15818                 // 'stable' '=>'
     || lk == 15819                 // 'start' '=>'
     || lk == 15822                 // 'switch' '=>'
     || lk == 15823                 // 'text' '=>'
     || lk == 15825                 // 'to' '=>'
     || lk == 15827                 // 'treat' '=>'
     || lk == 15828                 // 'try' '=>'
     || lk == 15831                 // 'typeswitch' '=>'
     || lk == 15832                 // 'union' '=>'
     || lk == 15833                 // 'unordered' '=>'
     || lk == 15835                 // 'validate' '=>'
     || lk == 15840                 // 'where' '=>'
     || lk == 15844                 // 'xquery' '=>'
     || lk == 15873                 // IntegerLiteral '>'
     || lk == 15874                 // DecimalLiteral '>'
     || lk == 15875                 // DoubleLiteral '>'
     || lk == 15876                 // StringLiteral '>'
     || lk == 15877                 // URIQualifiedName '>'
     || lk == 15887                 // QName^Token '>'
     || lk == 15893                 // Wildcard '>'
     || lk == 15915                 // '.' '>'
     || lk == 15916                 // '..' '>'
     || lk == 15917                 // '/' '>'
     || lk == 15949                 // 'ancestor' '>'
     || lk == 15950                 // 'ancestor-or-self' '>'
     || lk == 15951                 // 'and' '>'
     || lk == 15953                 // 'array' '>'
     || lk == 15955                 // 'ascending' '>'
     || lk == 15957                 // 'attribute' '>'
     || lk == 15963                 // 'case' '>'
     || lk == 15964                 // 'cast' '>'
     || lk == 15965                 // 'castable' '>'
     || lk == 15967                 // 'child' '>'
     || lk == 15968                 // 'collation' '>'
     || lk == 15969                 // 'comment' '>'
     || lk == 15975                 // 'count' '>'
     || lk == 15978                 // 'declare' '>'
     || lk == 15979                 // 'default' '>'
     || lk == 15981                 // 'descendant' '>'
     || lk == 15982                 // 'descendant-or-self' '>'
     || lk == 15983                 // 'descending' '>'
     || lk == 15985                 // 'div' '>'
     || lk == 15986                 // 'document' '>'
     || lk == 15987                 // 'document-node' '>'
     || lk == 15988                 // 'element' '>'
     || lk == 15989                 // 'else' '>'
     || lk == 15990                 // 'empty' '>'
     || lk == 15991                 // 'empty-sequence' '>'
     || lk == 15993                 // 'end' '>'
     || lk == 15994                 // 'eq' '>'
     || lk == 15995                 // 'every' '>'
     || lk == 15996                 // 'except' '>'
     || lk == 16001                 // 'following' '>'
     || lk == 16002                 // 'following-sibling' '>'
     || lk == 16003                 // 'for' '>'
     || lk == 16004                 // 'function' '>'
     || lk == 16005                 // 'ge' '>'
     || lk == 16007                 // 'group' '>'
     || lk == 16009                 // 'gt' '>'
     || lk == 16010                 // 'idiv' '>'
     || lk == 16011                 // 'if' '>'
     || lk == 16012                 // 'import' '>'
     || lk == 16017                 // 'instance' '>'
     || lk == 16018                 // 'intersect' '>'
     || lk == 16021                 // 'is' '>'
     || lk == 16022                 // 'item' '>'
     || lk == 16026                 // 'le' '>'
     || lk == 16028                 // 'let' '>'
     || lk == 16030                 // 'lt' '>'
     || lk == 16031                 // 'map' '>'
     || lk == 16033                 // 'mod' '>'
     || lk == 16035                 // 'module' '>'
     || lk == 16036                 // 'namespace' '>'
     || lk == 16037                 // 'namespace-node' '>'
     || lk == 16038                 // 'ne' '>'
     || lk == 16042                 // 'node' '>'
     || lk == 16045                 // 'only' '>'
     || lk == 16047                 // 'or' '>'
     || lk == 16048                 // 'order' '>'
     || lk == 16049                 // 'ordered' '>'
     || lk == 16051                 // 'parent' '>'
     || lk == 16056                 // 'preceding' '>'
     || lk == 16057                 // 'preceding-sibling' '>'
     || lk == 16060                 // 'processing-instruction' '>'
     || lk == 16063                 // 'return' '>'
     || lk == 16066                 // 'satisfies' '>'
     || lk == 16068                 // 'schema-attribute' '>'
     || lk == 16069                 // 'schema-element' '>'
     || lk == 16070                 // 'self' '>'
     || lk == 16073                 // 'some' '>'
     || lk == 16074                 // 'stable' '>'
     || lk == 16075                 // 'start' '>'
     || lk == 16078                 // 'switch' '>'
     || lk == 16079                 // 'text' '>'
     || lk == 16081                 // 'to' '>'
     || lk == 16083                 // 'treat' '>'
     || lk == 16084                 // 'try' '>'
     || lk == 16087                 // 'typeswitch' '>'
     || lk == 16088                 // 'union' '>'
     || lk == 16089                 // 'unordered' '>'
     || lk == 16091                 // 'validate' '>'
     || lk == 16096                 // 'where' '>'
     || lk == 16100                 // 'xquery' '>'
     || lk == 16129                 // IntegerLiteral '>='
     || lk == 16130                 // DecimalLiteral '>='
     || lk == 16131                 // DoubleLiteral '>='
     || lk == 16132                 // StringLiteral '>='
     || lk == 16133                 // URIQualifiedName '>='
     || lk == 16143                 // QName^Token '>='
     || lk == 16149                 // Wildcard '>='
     || lk == 16171                 // '.' '>='
     || lk == 16172                 // '..' '>='
     || lk == 16173                 // '/' '>='
     || lk == 16205                 // 'ancestor' '>='
     || lk == 16206                 // 'ancestor-or-self' '>='
     || lk == 16207                 // 'and' '>='
     || lk == 16209                 // 'array' '>='
     || lk == 16211                 // 'ascending' '>='
     || lk == 16213                 // 'attribute' '>='
     || lk == 16219                 // 'case' '>='
     || lk == 16220                 // 'cast' '>='
     || lk == 16221                 // 'castable' '>='
     || lk == 16223                 // 'child' '>='
     || lk == 16224                 // 'collation' '>='
     || lk == 16225                 // 'comment' '>='
     || lk == 16231                 // 'count' '>='
     || lk == 16234                 // 'declare' '>='
     || lk == 16235                 // 'default' '>='
     || lk == 16237                 // 'descendant' '>='
     || lk == 16238                 // 'descendant-or-self' '>='
     || lk == 16239                 // 'descending' '>='
     || lk == 16241                 // 'div' '>='
     || lk == 16242                 // 'document' '>='
     || lk == 16243                 // 'document-node' '>='
     || lk == 16244                 // 'element' '>='
     || lk == 16245                 // 'else' '>='
     || lk == 16246                 // 'empty' '>='
     || lk == 16247                 // 'empty-sequence' '>='
     || lk == 16249                 // 'end' '>='
     || lk == 16250                 // 'eq' '>='
     || lk == 16251                 // 'every' '>='
     || lk == 16252                 // 'except' '>='
     || lk == 16257                 // 'following' '>='
     || lk == 16258                 // 'following-sibling' '>='
     || lk == 16259                 // 'for' '>='
     || lk == 16260                 // 'function' '>='
     || lk == 16261                 // 'ge' '>='
     || lk == 16263                 // 'group' '>='
     || lk == 16265                 // 'gt' '>='
     || lk == 16266                 // 'idiv' '>='
     || lk == 16267                 // 'if' '>='
     || lk == 16268                 // 'import' '>='
     || lk == 16273                 // 'instance' '>='
     || lk == 16274                 // 'intersect' '>='
     || lk == 16277                 // 'is' '>='
     || lk == 16278                 // 'item' '>='
     || lk == 16282                 // 'le' '>='
     || lk == 16284                 // 'let' '>='
     || lk == 16286                 // 'lt' '>='
     || lk == 16287                 // 'map' '>='
     || lk == 16289                 // 'mod' '>='
     || lk == 16291                 // 'module' '>='
     || lk == 16292                 // 'namespace' '>='
     || lk == 16293                 // 'namespace-node' '>='
     || lk == 16294                 // 'ne' '>='
     || lk == 16298                 // 'node' '>='
     || lk == 16301                 // 'only' '>='
     || lk == 16303                 // 'or' '>='
     || lk == 16304                 // 'order' '>='
     || lk == 16305                 // 'ordered' '>='
     || lk == 16307                 // 'parent' '>='
     || lk == 16312                 // 'preceding' '>='
     || lk == 16313                 // 'preceding-sibling' '>='
     || lk == 16316                 // 'processing-instruction' '>='
     || lk == 16319                 // 'return' '>='
     || lk == 16322                 // 'satisfies' '>='
     || lk == 16324                 // 'schema-attribute' '>='
     || lk == 16325                 // 'schema-element' '>='
     || lk == 16326                 // 'self' '>='
     || lk == 16329                 // 'some' '>='
     || lk == 16330                 // 'stable' '>='
     || lk == 16331                 // 'start' '>='
     || lk == 16334                 // 'switch' '>='
     || lk == 16335                 // 'text' '>='
     || lk == 16337                 // 'to' '>='
     || lk == 16339                 // 'treat' '>='
     || lk == 16340                 // 'try' '>='
     || lk == 16343                 // 'typeswitch' '>='
     || lk == 16344                 // 'union' '>='
     || lk == 16345                 // 'unordered' '>='
     || lk == 16347                 // 'validate' '>='
     || lk == 16352                 // 'where' '>='
     || lk == 16356                 // 'xquery' '>='
     || lk == 16385                 // IntegerLiteral '>>'
     || lk == 16386                 // DecimalLiteral '>>'
     || lk == 16387                 // DoubleLiteral '>>'
     || lk == 16388                 // StringLiteral '>>'
     || lk == 16389                 // URIQualifiedName '>>'
     || lk == 16399                 // QName^Token '>>'
     || lk == 16405                 // Wildcard '>>'
     || lk == 16427                 // '.' '>>'
     || lk == 16428                 // '..' '>>'
     || lk == 16429                 // '/' '>>'
     || lk == 16461                 // 'ancestor' '>>'
     || lk == 16462                 // 'ancestor-or-self' '>>'
     || lk == 16463                 // 'and' '>>'
     || lk == 16465                 // 'array' '>>'
     || lk == 16467                 // 'ascending' '>>'
     || lk == 16469                 // 'attribute' '>>'
     || lk == 16475                 // 'case' '>>'
     || lk == 16476                 // 'cast' '>>'
     || lk == 16477                 // 'castable' '>>'
     || lk == 16479                 // 'child' '>>'
     || lk == 16480                 // 'collation' '>>'
     || lk == 16481                 // 'comment' '>>'
     || lk == 16487                 // 'count' '>>'
     || lk == 16490                 // 'declare' '>>'
     || lk == 16491                 // 'default' '>>'
     || lk == 16493                 // 'descendant' '>>'
     || lk == 16494                 // 'descendant-or-self' '>>'
     || lk == 16495                 // 'descending' '>>'
     || lk == 16497                 // 'div' '>>'
     || lk == 16498                 // 'document' '>>'
     || lk == 16499                 // 'document-node' '>>'
     || lk == 16500                 // 'element' '>>'
     || lk == 16501                 // 'else' '>>'
     || lk == 16502                 // 'empty' '>>'
     || lk == 16503                 // 'empty-sequence' '>>'
     || lk == 16505                 // 'end' '>>'
     || lk == 16506                 // 'eq' '>>'
     || lk == 16507                 // 'every' '>>'
     || lk == 16508                 // 'except' '>>'
     || lk == 16513                 // 'following' '>>'
     || lk == 16514                 // 'following-sibling' '>>'
     || lk == 16515                 // 'for' '>>'
     || lk == 16516                 // 'function' '>>'
     || lk == 16517                 // 'ge' '>>'
     || lk == 16519                 // 'group' '>>'
     || lk == 16521                 // 'gt' '>>'
     || lk == 16522                 // 'idiv' '>>'
     || lk == 16523                 // 'if' '>>'
     || lk == 16524                 // 'import' '>>'
     || lk == 16529                 // 'instance' '>>'
     || lk == 16530                 // 'intersect' '>>'
     || lk == 16533                 // 'is' '>>'
     || lk == 16534                 // 'item' '>>'
     || lk == 16538                 // 'le' '>>'
     || lk == 16540                 // 'let' '>>'
     || lk == 16542                 // 'lt' '>>'
     || lk == 16543                 // 'map' '>>'
     || lk == 16545                 // 'mod' '>>'
     || lk == 16547                 // 'module' '>>'
     || lk == 16548                 // 'namespace' '>>'
     || lk == 16549                 // 'namespace-node' '>>'
     || lk == 16550                 // 'ne' '>>'
     || lk == 16554                 // 'node' '>>'
     || lk == 16557                 // 'only' '>>'
     || lk == 16559                 // 'or' '>>'
     || lk == 16560                 // 'order' '>>'
     || lk == 16561                 // 'ordered' '>>'
     || lk == 16563                 // 'parent' '>>'
     || lk == 16568                 // 'preceding' '>>'
     || lk == 16569                 // 'preceding-sibling' '>>'
     || lk == 16572                 // 'processing-instruction' '>>'
     || lk == 16575                 // 'return' '>>'
     || lk == 16578                 // 'satisfies' '>>'
     || lk == 16580                 // 'schema-attribute' '>>'
     || lk == 16581                 // 'schema-element' '>>'
     || lk == 16582                 // 'self' '>>'
     || lk == 16585                 // 'some' '>>'
     || lk == 16586                 // 'stable' '>>'
     || lk == 16587                 // 'start' '>>'
     || lk == 16590                 // 'switch' '>>'
     || lk == 16591                 // 'text' '>>'
     || lk == 16593                 // 'to' '>>'
     || lk == 16595                 // 'treat' '>>'
     || lk == 16596                 // 'try' '>>'
     || lk == 16599                 // 'typeswitch' '>>'
     || lk == 16600                 // 'union' '>>'
     || lk == 16601                 // 'unordered' '>>'
     || lk == 16603                 // 'validate' '>>'
     || lk == 16608                 // 'where' '>>'
     || lk == 16612                 // 'xquery' '>>'
     || lk == 16641                 // IntegerLiteral '?'
     || lk == 16642                 // DecimalLiteral '?'
     || lk == 16643                 // DoubleLiteral '?'
     || lk == 16644                 // StringLiteral '?'
     || lk == 16674                 // '(' '?'
     || lk == 16679                 // '+' '?'
     || lk == 16681                 // '-' '?'
     || lk == 16683                 // '.' '?'
     || lk == 16685                 // '/' '?'
     || lk == 16686                 // '//' '?'
     || lk == 16709                 // '[' '?'
     || lk == 16831                 // 'return' '?'
     || lk == 17186                 // '(' '@'
     || lk == 17191                 // '+' '@'
     || lk == 17193                 // '-' '@'
     || lk == 17197                 // '/' '@'
     || lk == 17198                 // '//' '@'
     || lk == 17221                 // '[' '@'
     || lk == 17343                 // 'return' '@'
     || lk == 17665                 // IntegerLiteral '['
     || lk == 17666                 // DecimalLiteral '['
     || lk == 17667                 // DoubleLiteral '['
     || lk == 17668                 // StringLiteral '['
     || lk == 17669                 // URIQualifiedName '['
     || lk == 17679                 // QName^Token '['
     || lk == 17685                 // Wildcard '['
     || lk == 17698                 // '(' '['
     || lk == 17703                 // '+' '['
     || lk == 17705                 // '-' '['
     || lk == 17707                 // '.' '['
     || lk == 17708                 // '..' '['
     || lk == 17709                 // '/' '['
     || lk == 17710                 // '//' '['
     || lk == 17733                 // '[' '['
     || lk == 17741                 // 'ancestor' '['
     || lk == 17742                 // 'ancestor-or-self' '['
     || lk == 17743                 // 'and' '['
     || lk == 17745                 // 'array' '['
     || lk == 17747                 // 'ascending' '['
     || lk == 17749                 // 'attribute' '['
     || lk == 17755                 // 'case' '['
     || lk == 17756                 // 'cast' '['
     || lk == 17757                 // 'castable' '['
     || lk == 17759                 // 'child' '['
     || lk == 17760                 // 'collation' '['
     || lk == 17761                 // 'comment' '['
     || lk == 17767                 // 'count' '['
     || lk == 17770                 // 'declare' '['
     || lk == 17771                 // 'default' '['
     || lk == 17773                 // 'descendant' '['
     || lk == 17774                 // 'descendant-or-self' '['
     || lk == 17775                 // 'descending' '['
     || lk == 17777                 // 'div' '['
     || lk == 17778                 // 'document' '['
     || lk == 17779                 // 'document-node' '['
     || lk == 17780                 // 'element' '['
     || lk == 17781                 // 'else' '['
     || lk == 17782                 // 'empty' '['
     || lk == 17783                 // 'empty-sequence' '['
     || lk == 17785                 // 'end' '['
     || lk == 17786                 // 'eq' '['
     || lk == 17787                 // 'every' '['
     || lk == 17788                 // 'except' '['
     || lk == 17793                 // 'following' '['
     || lk == 17794                 // 'following-sibling' '['
     || lk == 17795                 // 'for' '['
     || lk == 17796                 // 'function' '['
     || lk == 17797                 // 'ge' '['
     || lk == 17799                 // 'group' '['
     || lk == 17801                 // 'gt' '['
     || lk == 17802                 // 'idiv' '['
     || lk == 17803                 // 'if' '['
     || lk == 17804                 // 'import' '['
     || lk == 17809                 // 'instance' '['
     || lk == 17810                 // 'intersect' '['
     || lk == 17813                 // 'is' '['
     || lk == 17814                 // 'item' '['
     || lk == 17818                 // 'le' '['
     || lk == 17820                 // 'let' '['
     || lk == 17822                 // 'lt' '['
     || lk == 17823                 // 'map' '['
     || lk == 17825                 // 'mod' '['
     || lk == 17827                 // 'module' '['
     || lk == 17828                 // 'namespace' '['
     || lk == 17829                 // 'namespace-node' '['
     || lk == 17830                 // 'ne' '['
     || lk == 17834                 // 'node' '['
     || lk == 17837                 // 'only' '['
     || lk == 17839                 // 'or' '['
     || lk == 17840                 // 'order' '['
     || lk == 17841                 // 'ordered' '['
     || lk == 17843                 // 'parent' '['
     || lk == 17848                 // 'preceding' '['
     || lk == 17849                 // 'preceding-sibling' '['
     || lk == 17852                 // 'processing-instruction' '['
     || lk == 17855                 // 'return' '['
     || lk == 17858                 // 'satisfies' '['
     || lk == 17860                 // 'schema-attribute' '['
     || lk == 17861                 // 'schema-element' '['
     || lk == 17862                 // 'self' '['
     || lk == 17865                 // 'some' '['
     || lk == 17866                 // 'stable' '['
     || lk == 17867                 // 'start' '['
     || lk == 17870                 // 'switch' '['
     || lk == 17871                 // 'text' '['
     || lk == 17873                 // 'to' '['
     || lk == 17875                 // 'treat' '['
     || lk == 17876                 // 'try' '['
     || lk == 17879                 // 'typeswitch' '['
     || lk == 17880                 // 'union' '['
     || lk == 17881                 // 'unordered' '['
     || lk == 17883                 // 'validate' '['
     || lk == 17888                 // 'where' '['
     || lk == 17892                 // 'xquery' '['
     || lk == 17989                 // '[' ']'
     || lk == 18722                 // '(' '``['
     || lk == 18727                 // '+' '``['
     || lk == 18729                 // '-' '``['
     || lk == 18733                 // '/' '``['
     || lk == 18734                 // '//' '``['
     || lk == 18757                 // '[' '``['
     || lk == 18879                 // 'return' '``['
     || lk == 19743                 // '$' 'ancestor'
     || lk == 19744                 // '%' 'ancestor'
     || lk == 19746                 // '(' 'ancestor'
     || lk == 19747                 // '(#' 'ancestor'
     || lk == 19751                 // '+' 'ancestor'
     || lk == 19753                 // '-' 'ancestor'
     || lk == 19757                 // '/' 'ancestor'
     || lk == 19758                 // '//' 'ancestor'
     || lk == 19765                 // '<' 'ancestor'
     || lk == 19779                 // '@' 'ancestor'
     || lk == 19781                 // '[' 'ancestor'
     || lk == 19797                 // 'attribute' 'ancestor'
     || lk == 19828                 // 'element' 'ancestor'
     || lk == 19903                 // 'return' 'ancestor'
     || lk == 19999                 // '$' 'ancestor-or-self'
     || lk == 20000                 // '%' 'ancestor-or-self'
     || lk == 20002                 // '(' 'ancestor-or-self'
     || lk == 20003                 // '(#' 'ancestor-or-self'
     || lk == 20007                 // '+' 'ancestor-or-self'
     || lk == 20009                 // '-' 'ancestor-or-self'
     || lk == 20013                 // '/' 'ancestor-or-self'
     || lk == 20014                 // '//' 'ancestor-or-self'
     || lk == 20021                 // '<' 'ancestor-or-self'
     || lk == 20035                 // '@' 'ancestor-or-self'
     || lk == 20037                 // '[' 'ancestor-or-self'
     || lk == 20053                 // 'attribute' 'ancestor-or-self'
     || lk == 20084                 // 'element' 'ancestor-or-self'
     || lk == 20159                 // 'return' 'ancestor-or-self'
     || lk == 20225                 // IntegerLiteral 'and'
     || lk == 20226                 // DecimalLiteral 'and'
     || lk == 20227                 // DoubleLiteral 'and'
     || lk == 20228                 // StringLiteral 'and'
     || lk == 20229                 // URIQualifiedName 'and'
     || lk == 20239                 // QName^Token 'and'
     || lk == 20245                 // Wildcard 'and'
     || lk == 20255                 // '$' 'and'
     || lk == 20256                 // '%' 'and'
     || lk == 20258                 // '(' 'and'
     || lk == 20259                 // '(#' 'and'
     || lk == 20263                 // '+' 'and'
     || lk == 20265                 // '-' 'and'
     || lk == 20267                 // '.' 'and'
     || lk == 20268                 // '..' 'and'
     || lk == 20269                 // '/' 'and'
     || lk == 20270                 // '//' 'and'
     || lk == 20277                 // '<' 'and'
     || lk == 20289                 // '?' 'and'
     || lk == 20291                 // '@' 'and'
     || lk == 20293                 // '[' 'and'
     || lk == 20301                 // 'ancestor' 'and'
     || lk == 20302                 // 'ancestor-or-self' 'and'
     || lk == 20303                 // 'and' 'and'
     || lk == 20305                 // 'array' 'and'
     || lk == 20307                 // 'ascending' 'and'
     || lk == 20309                 // 'attribute' 'and'
     || lk == 20315                 // 'case' 'and'
     || lk == 20316                 // 'cast' 'and'
     || lk == 20317                 // 'castable' 'and'
     || lk == 20319                 // 'child' 'and'
     || lk == 20320                 // 'collation' 'and'
     || lk == 20321                 // 'comment' 'and'
     || lk == 20327                 // 'count' 'and'
     || lk == 20330                 // 'declare' 'and'
     || lk == 20331                 // 'default' 'and'
     || lk == 20333                 // 'descendant' 'and'
     || lk == 20334                 // 'descendant-or-self' 'and'
     || lk == 20335                 // 'descending' 'and'
     || lk == 20337                 // 'div' 'and'
     || lk == 20338                 // 'document' 'and'
     || lk == 20339                 // 'document-node' 'and'
     || lk == 20340                 // 'element' 'and'
     || lk == 20341                 // 'else' 'and'
     || lk == 20342                 // 'empty' 'and'
     || lk == 20343                 // 'empty-sequence' 'and'
     || lk == 20345                 // 'end' 'and'
     || lk == 20346                 // 'eq' 'and'
     || lk == 20347                 // 'every' 'and'
     || lk == 20348                 // 'except' 'and'
     || lk == 20353                 // 'following' 'and'
     || lk == 20354                 // 'following-sibling' 'and'
     || lk == 20355                 // 'for' 'and'
     || lk == 20356                 // 'function' 'and'
     || lk == 20357                 // 'ge' 'and'
     || lk == 20359                 // 'group' 'and'
     || lk == 20361                 // 'gt' 'and'
     || lk == 20362                 // 'idiv' 'and'
     || lk == 20363                 // 'if' 'and'
     || lk == 20364                 // 'import' 'and'
     || lk == 20369                 // 'instance' 'and'
     || lk == 20370                 // 'intersect' 'and'
     || lk == 20373                 // 'is' 'and'
     || lk == 20374                 // 'item' 'and'
     || lk == 20378                 // 'le' 'and'
     || lk == 20380                 // 'let' 'and'
     || lk == 20382                 // 'lt' 'and'
     || lk == 20383                 // 'map' 'and'
     || lk == 20385                 // 'mod' 'and'
     || lk == 20387                 // 'module' 'and'
     || lk == 20388                 // 'namespace' 'and'
     || lk == 20389                 // 'namespace-node' 'and'
     || lk == 20390                 // 'ne' 'and'
     || lk == 20394                 // 'node' 'and'
     || lk == 20397                 // 'only' 'and'
     || lk == 20399                 // 'or' 'and'
     || lk == 20400                 // 'order' 'and'
     || lk == 20401                 // 'ordered' 'and'
     || lk == 20403                 // 'parent' 'and'
     || lk == 20408                 // 'preceding' 'and'
     || lk == 20409                 // 'preceding-sibling' 'and'
     || lk == 20412                 // 'processing-instruction' 'and'
     || lk == 20415                 // 'return' 'and'
     || lk == 20418                 // 'satisfies' 'and'
     || lk == 20420                 // 'schema-attribute' 'and'
     || lk == 20421                 // 'schema-element' 'and'
     || lk == 20422                 // 'self' 'and'
     || lk == 20425                 // 'some' 'and'
     || lk == 20426                 // 'stable' 'and'
     || lk == 20427                 // 'start' 'and'
     || lk == 20430                 // 'switch' 'and'
     || lk == 20431                 // 'text' 'and'
     || lk == 20433                 // 'to' 'and'
     || lk == 20435                 // 'treat' 'and'
     || lk == 20436                 // 'try' 'and'
     || lk == 20439                 // 'typeswitch' 'and'
     || lk == 20440                 // 'union' 'and'
     || lk == 20441                 // 'unordered' 'and'
     || lk == 20443                 // 'validate' 'and'
     || lk == 20448                 // 'where' 'and'
     || lk == 20452                 // 'xquery' 'and'
     || lk == 20767                 // '$' 'array'
     || lk == 20768                 // '%' 'array'
     || lk == 20770                 // '(' 'array'
     || lk == 20771                 // '(#' 'array'
     || lk == 20775                 // '+' 'array'
     || lk == 20777                 // '-' 'array'
     || lk == 20781                 // '/' 'array'
     || lk == 20782                 // '//' 'array'
     || lk == 20789                 // '<' 'array'
     || lk == 20803                 // '@' 'array'
     || lk == 20805                 // '[' 'array'
     || lk == 20821                 // 'attribute' 'array'
     || lk == 20852                 // 'element' 'array'
     || lk == 20927                 // 'return' 'array'
     || lk == 21279                 // '$' 'ascending'
     || lk == 21280                 // '%' 'ascending'
     || lk == 21282                 // '(' 'ascending'
     || lk == 21283                 // '(#' 'ascending'
     || lk == 21287                 // '+' 'ascending'
     || lk == 21289                 // '-' 'ascending'
     || lk == 21293                 // '/' 'ascending'
     || lk == 21294                 // '//' 'ascending'
     || lk == 21301                 // '<' 'ascending'
     || lk == 21313                 // '?' 'ascending'
     || lk == 21315                 // '@' 'ascending'
     || lk == 21317                 // '[' 'ascending'
     || lk == 21333                 // 'attribute' 'ascending'
     || lk == 21364                 // 'element' 'ascending'
     || lk == 21412                 // 'namespace' 'ascending'
     || lk == 21436                 // 'processing-instruction' 'ascending'
     || lk == 21439                 // 'return' 'ascending'
     || lk == 21791                 // '$' 'attribute'
     || lk == 21792                 // '%' 'attribute'
     || lk == 21794                 // '(' 'attribute'
     || lk == 21795                 // '(#' 'attribute'
     || lk == 21799                 // '+' 'attribute'
     || lk == 21801                 // '-' 'attribute'
     || lk == 21805                 // '/' 'attribute'
     || lk == 21806                 // '//' 'attribute'
     || lk == 21813                 // '<' 'attribute'
     || lk == 21827                 // '@' 'attribute'
     || lk == 21829                 // '[' 'attribute'
     || lk == 21845                 // 'attribute' 'attribute'
     || lk == 21876                 // 'element' 'attribute'
     || lk == 21951                 // 'return' 'attribute'
     || lk == 23327                 // '$' 'case'
     || lk == 23328                 // '%' 'case'
     || lk == 23330                 // '(' 'case'
     || lk == 23331                 // '(#' 'case'
     || lk == 23335                 // '+' 'case'
     || lk == 23337                 // '-' 'case'
     || lk == 23341                 // '/' 'case'
     || lk == 23342                 // '//' 'case'
     || lk == 23349                 // '<' 'case'
     || lk == 23361                 // '?' 'case'
     || lk == 23363                 // '@' 'case'
     || lk == 23365                 // '[' 'case'
     || lk == 23381                 // 'attribute' 'case'
     || lk == 23412                 // 'element' 'case'
     || lk == 23460                 // 'namespace' 'case'
     || lk == 23484                 // 'processing-instruction' 'case'
     || lk == 23487                 // 'return' 'case'
     || lk == 23553                 // IntegerLiteral 'cast'
     || lk == 23554                 // DecimalLiteral 'cast'
     || lk == 23555                 // DoubleLiteral 'cast'
     || lk == 23556                 // StringLiteral 'cast'
     || lk == 23557                 // URIQualifiedName 'cast'
     || lk == 23567                 // QName^Token 'cast'
     || lk == 23573                 // Wildcard 'cast'
     || lk == 23583                 // '$' 'cast'
     || lk == 23584                 // '%' 'cast'
     || lk == 23586                 // '(' 'cast'
     || lk == 23587                 // '(#' 'cast'
     || lk == 23591                 // '+' 'cast'
     || lk == 23593                 // '-' 'cast'
     || lk == 23595                 // '.' 'cast'
     || lk == 23596                 // '..' 'cast'
     || lk == 23597                 // '/' 'cast'
     || lk == 23598                 // '//' 'cast'
     || lk == 23605                 // '<' 'cast'
     || lk == 23617                 // '?' 'cast'
     || lk == 23619                 // '@' 'cast'
     || lk == 23621                 // '[' 'cast'
     || lk == 23629                 // 'ancestor' 'cast'
     || lk == 23630                 // 'ancestor-or-self' 'cast'
     || lk == 23631                 // 'and' 'cast'
     || lk == 23633                 // 'array' 'cast'
     || lk == 23635                 // 'ascending' 'cast'
     || lk == 23637                 // 'attribute' 'cast'
     || lk == 23643                 // 'case' 'cast'
     || lk == 23644                 // 'cast' 'cast'
     || lk == 23645                 // 'castable' 'cast'
     || lk == 23647                 // 'child' 'cast'
     || lk == 23648                 // 'collation' 'cast'
     || lk == 23649                 // 'comment' 'cast'
     || lk == 23655                 // 'count' 'cast'
     || lk == 23658                 // 'declare' 'cast'
     || lk == 23659                 // 'default' 'cast'
     || lk == 23661                 // 'descendant' 'cast'
     || lk == 23662                 // 'descendant-or-self' 'cast'
     || lk == 23663                 // 'descending' 'cast'
     || lk == 23665                 // 'div' 'cast'
     || lk == 23666                 // 'document' 'cast'
     || lk == 23667                 // 'document-node' 'cast'
     || lk == 23668                 // 'element' 'cast'
     || lk == 23669                 // 'else' 'cast'
     || lk == 23670                 // 'empty' 'cast'
     || lk == 23671                 // 'empty-sequence' 'cast'
     || lk == 23673                 // 'end' 'cast'
     || lk == 23674                 // 'eq' 'cast'
     || lk == 23675                 // 'every' 'cast'
     || lk == 23676                 // 'except' 'cast'
     || lk == 23681                 // 'following' 'cast'
     || lk == 23682                 // 'following-sibling' 'cast'
     || lk == 23683                 // 'for' 'cast'
     || lk == 23684                 // 'function' 'cast'
     || lk == 23685                 // 'ge' 'cast'
     || lk == 23687                 // 'group' 'cast'
     || lk == 23689                 // 'gt' 'cast'
     || lk == 23690                 // 'idiv' 'cast'
     || lk == 23691                 // 'if' 'cast'
     || lk == 23692                 // 'import' 'cast'
     || lk == 23697                 // 'instance' 'cast'
     || lk == 23698                 // 'intersect' 'cast'
     || lk == 23701                 // 'is' 'cast'
     || lk == 23702                 // 'item' 'cast'
     || lk == 23706                 // 'le' 'cast'
     || lk == 23708                 // 'let' 'cast'
     || lk == 23710                 // 'lt' 'cast'
     || lk == 23711                 // 'map' 'cast'
     || lk == 23713                 // 'mod' 'cast'
     || lk == 23715                 // 'module' 'cast'
     || lk == 23716                 // 'namespace' 'cast'
     || lk == 23717                 // 'namespace-node' 'cast'
     || lk == 23718                 // 'ne' 'cast'
     || lk == 23722                 // 'node' 'cast'
     || lk == 23725                 // 'only' 'cast'
     || lk == 23727                 // 'or' 'cast'
     || lk == 23728                 // 'order' 'cast'
     || lk == 23729                 // 'ordered' 'cast'
     || lk == 23731                 // 'parent' 'cast'
     || lk == 23736                 // 'preceding' 'cast'
     || lk == 23737                 // 'preceding-sibling' 'cast'
     || lk == 23740                 // 'processing-instruction' 'cast'
     || lk == 23743                 // 'return' 'cast'
     || lk == 23746                 // 'satisfies' 'cast'
     || lk == 23748                 // 'schema-attribute' 'cast'
     || lk == 23749                 // 'schema-element' 'cast'
     || lk == 23750                 // 'self' 'cast'
     || lk == 23753                 // 'some' 'cast'
     || lk == 23754                 // 'stable' 'cast'
     || lk == 23755                 // 'start' 'cast'
     || lk == 23758                 // 'switch' 'cast'
     || lk == 23759                 // 'text' 'cast'
     || lk == 23761                 // 'to' 'cast'
     || lk == 23763                 // 'treat' 'cast'
     || lk == 23764                 // 'try' 'cast'
     || lk == 23767                 // 'typeswitch' 'cast'
     || lk == 23768                 // 'union' 'cast'
     || lk == 23769                 // 'unordered' 'cast'
     || lk == 23771                 // 'validate' 'cast'
     || lk == 23776                 // 'where' 'cast'
     || lk == 23780                 // 'xquery' 'cast'
     || lk == 23809                 // IntegerLiteral 'castable'
     || lk == 23810                 // DecimalLiteral 'castable'
     || lk == 23811                 // DoubleLiteral 'castable'
     || lk == 23812                 // StringLiteral 'castable'
     || lk == 23813                 // URIQualifiedName 'castable'
     || lk == 23823                 // QName^Token 'castable'
     || lk == 23829                 // Wildcard 'castable'
     || lk == 23839                 // '$' 'castable'
     || lk == 23840                 // '%' 'castable'
     || lk == 23842                 // '(' 'castable'
     || lk == 23843                 // '(#' 'castable'
     || lk == 23847                 // '+' 'castable'
     || lk == 23849                 // '-' 'castable'
     || lk == 23851                 // '.' 'castable'
     || lk == 23852                 // '..' 'castable'
     || lk == 23853                 // '/' 'castable'
     || lk == 23854                 // '//' 'castable'
     || lk == 23861                 // '<' 'castable'
     || lk == 23873                 // '?' 'castable'
     || lk == 23875                 // '@' 'castable'
     || lk == 23877                 // '[' 'castable'
     || lk == 23885                 // 'ancestor' 'castable'
     || lk == 23886                 // 'ancestor-or-self' 'castable'
     || lk == 23887                 // 'and' 'castable'
     || lk == 23889                 // 'array' 'castable'
     || lk == 23891                 // 'ascending' 'castable'
     || lk == 23893                 // 'attribute' 'castable'
     || lk == 23899                 // 'case' 'castable'
     || lk == 23900                 // 'cast' 'castable'
     || lk == 23901                 // 'castable' 'castable'
     || lk == 23903                 // 'child' 'castable'
     || lk == 23904                 // 'collation' 'castable'
     || lk == 23905                 // 'comment' 'castable'
     || lk == 23911                 // 'count' 'castable'
     || lk == 23914                 // 'declare' 'castable'
     || lk == 23915                 // 'default' 'castable'
     || lk == 23917                 // 'descendant' 'castable'
     || lk == 23918                 // 'descendant-or-self' 'castable'
     || lk == 23919                 // 'descending' 'castable'
     || lk == 23921                 // 'div' 'castable'
     || lk == 23922                 // 'document' 'castable'
     || lk == 23923                 // 'document-node' 'castable'
     || lk == 23924                 // 'element' 'castable'
     || lk == 23925                 // 'else' 'castable'
     || lk == 23926                 // 'empty' 'castable'
     || lk == 23927                 // 'empty-sequence' 'castable'
     || lk == 23929                 // 'end' 'castable'
     || lk == 23930                 // 'eq' 'castable'
     || lk == 23931                 // 'every' 'castable'
     || lk == 23932                 // 'except' 'castable'
     || lk == 23937                 // 'following' 'castable'
     || lk == 23938                 // 'following-sibling' 'castable'
     || lk == 23939                 // 'for' 'castable'
     || lk == 23940                 // 'function' 'castable'
     || lk == 23941                 // 'ge' 'castable'
     || lk == 23943                 // 'group' 'castable'
     || lk == 23945                 // 'gt' 'castable'
     || lk == 23946                 // 'idiv' 'castable'
     || lk == 23947                 // 'if' 'castable'
     || lk == 23948                 // 'import' 'castable'
     || lk == 23953                 // 'instance' 'castable'
     || lk == 23954                 // 'intersect' 'castable'
     || lk == 23957                 // 'is' 'castable'
     || lk == 23958                 // 'item' 'castable'
     || lk == 23962                 // 'le' 'castable'
     || lk == 23964                 // 'let' 'castable'
     || lk == 23966                 // 'lt' 'castable'
     || lk == 23967                 // 'map' 'castable'
     || lk == 23969                 // 'mod' 'castable'
     || lk == 23971                 // 'module' 'castable'
     || lk == 23972                 // 'namespace' 'castable'
     || lk == 23973                 // 'namespace-node' 'castable'
     || lk == 23974                 // 'ne' 'castable'
     || lk == 23978                 // 'node' 'castable'
     || lk == 23981                 // 'only' 'castable'
     || lk == 23983                 // 'or' 'castable'
     || lk == 23984                 // 'order' 'castable'
     || lk == 23985                 // 'ordered' 'castable'
     || lk == 23987                 // 'parent' 'castable'
     || lk == 23992                 // 'preceding' 'castable'
     || lk == 23993                 // 'preceding-sibling' 'castable'
     || lk == 23996                 // 'processing-instruction' 'castable'
     || lk == 23999                 // 'return' 'castable'
     || lk == 24002                 // 'satisfies' 'castable'
     || lk == 24004                 // 'schema-attribute' 'castable'
     || lk == 24005                 // 'schema-element' 'castable'
     || lk == 24006                 // 'self' 'castable'
     || lk == 24009                 // 'some' 'castable'
     || lk == 24010                 // 'stable' 'castable'
     || lk == 24011                 // 'start' 'castable'
     || lk == 24014                 // 'switch' 'castable'
     || lk == 24015                 // 'text' 'castable'
     || lk == 24017                 // 'to' 'castable'
     || lk == 24019                 // 'treat' 'castable'
     || lk == 24020                 // 'try' 'castable'
     || lk == 24023                 // 'typeswitch' 'castable'
     || lk == 24024                 // 'union' 'castable'
     || lk == 24025                 // 'unordered' 'castable'
     || lk == 24027                 // 'validate' 'castable'
     || lk == 24032                 // 'where' 'castable'
     || lk == 24036                 // 'xquery' 'castable'
     || lk == 24351                 // '$' 'child'
     || lk == 24352                 // '%' 'child'
     || lk == 24354                 // '(' 'child'
     || lk == 24355                 // '(#' 'child'
     || lk == 24359                 // '+' 'child'
     || lk == 24361                 // '-' 'child'
     || lk == 24365                 // '/' 'child'
     || lk == 24366                 // '//' 'child'
     || lk == 24373                 // '<' 'child'
     || lk == 24387                 // '@' 'child'
     || lk == 24389                 // '[' 'child'
     || lk == 24405                 // 'attribute' 'child'
     || lk == 24436                 // 'element' 'child'
     || lk == 24511                 // 'return' 'child'
     || lk == 24607                 // '$' 'collation'
     || lk == 24608                 // '%' 'collation'
     || lk == 24610                 // '(' 'collation'
     || lk == 24611                 // '(#' 'collation'
     || lk == 24615                 // '+' 'collation'
     || lk == 24617                 // '-' 'collation'
     || lk == 24621                 // '/' 'collation'
     || lk == 24622                 // '//' 'collation'
     || lk == 24629                 // '<' 'collation'
     || lk == 24641                 // '?' 'collation'
     || lk == 24643                 // '@' 'collation'
     || lk == 24645                 // '[' 'collation'
     || lk == 24661                 // 'attribute' 'collation'
     || lk == 24692                 // 'element' 'collation'
     || lk == 24740                 // 'namespace' 'collation'
     || lk == 24764                 // 'processing-instruction' 'collation'
     || lk == 24767                 // 'return' 'collation'
     || lk == 24863                 // '$' 'comment'
     || lk == 24864                 // '%' 'comment'
     || lk == 24866                 // '(' 'comment'
     || lk == 24867                 // '(#' 'comment'
     || lk == 24871                 // '+' 'comment'
     || lk == 24873                 // '-' 'comment'
     || lk == 24877                 // '/' 'comment'
     || lk == 24878                 // '//' 'comment'
     || lk == 24885                 // '<' 'comment'
     || lk == 24899                 // '@' 'comment'
     || lk == 24901                 // '[' 'comment'
     || lk == 24917                 // 'attribute' 'comment'
     || lk == 24948                 // 'element' 'comment'
     || lk == 25023                 // 'return' 'comment'
     || lk == 25890                 // '(' 'copy'
     || lk == 25925                 // '[' 'copy'
     || lk == 26047                 // 'return' 'copy'
     || lk == 26399                 // '$' 'count'
     || lk == 26400                 // '%' 'count'
     || lk == 26402                 // '(' 'count'
     || lk == 26403                 // '(#' 'count'
     || lk == 26407                 // '+' 'count'
     || lk == 26409                 // '-' 'count'
     || lk == 26413                 // '/' 'count'
     || lk == 26414                 // '//' 'count'
     || lk == 26421                 // '<' 'count'
     || lk == 26433                 // '?' 'count'
     || lk == 26435                 // '@' 'count'
     || lk == 26437                 // '[' 'count'
     || lk == 26453                 // 'attribute' 'count'
     || lk == 26484                 // 'element' 'count'
     || lk == 26532                 // 'namespace' 'count'
     || lk == 26556                 // 'processing-instruction' 'count'
     || lk == 26559                 // 'return' 'count'
     || lk == 27167                 // '$' 'declare'
     || lk == 27168                 // '%' 'declare'
     || lk == 27170                 // '(' 'declare'
     || lk == 27171                 // '(#' 'declare'
     || lk == 27175                 // '+' 'declare'
     || lk == 27177                 // '-' 'declare'
     || lk == 27181                 // '/' 'declare'
     || lk == 27182                 // '//' 'declare'
     || lk == 27189                 // '<' 'declare'
     || lk == 27203                 // '@' 'declare'
     || lk == 27205                 // '[' 'declare'
     || lk == 27221                 // 'attribute' 'declare'
     || lk == 27252                 // 'element' 'declare'
     || lk == 27327                 // 'return' 'declare'
     || lk == 27423                 // '$' 'default'
     || lk == 27424                 // '%' 'default'
     || lk == 27426                 // '(' 'default'
     || lk == 27427                 // '(#' 'default'
     || lk == 27431                 // '+' 'default'
     || lk == 27433                 // '-' 'default'
     || lk == 27437                 // '/' 'default'
     || lk == 27438                 // '//' 'default'
     || lk == 27445                 // '<' 'default'
     || lk == 27457                 // '?' 'default'
     || lk == 27459                 // '@' 'default'
     || lk == 27461                 // '[' 'default'
     || lk == 27477                 // 'attribute' 'default'
     || lk == 27508                 // 'element' 'default'
     || lk == 27556                 // 'namespace' 'default'
     || lk == 27580                 // 'processing-instruction' 'default'
     || lk == 27583                 // 'return' 'default'
     || lk == 27682                 // '(' 'delete'
     || lk == 27717                 // '[' 'delete'
     || lk == 27839                 // 'return' 'delete'
     || lk == 27935                 // '$' 'descendant'
     || lk == 27936                 // '%' 'descendant'
     || lk == 27938                 // '(' 'descendant'
     || lk == 27939                 // '(#' 'descendant'
     || lk == 27943                 // '+' 'descendant'
     || lk == 27945                 // '-' 'descendant'
     || lk == 27949                 // '/' 'descendant'
     || lk == 27950                 // '//' 'descendant'
     || lk == 27957                 // '<' 'descendant'
     || lk == 27971                 // '@' 'descendant'
     || lk == 27973                 // '[' 'descendant'
     || lk == 27989                 // 'attribute' 'descendant'
     || lk == 28020                 // 'element' 'descendant'
     || lk == 28095                 // 'return' 'descendant'
     || lk == 28191                 // '$' 'descendant-or-self'
     || lk == 28192                 // '%' 'descendant-or-self'
     || lk == 28194                 // '(' 'descendant-or-self'
     || lk == 28195                 // '(#' 'descendant-or-self'
     || lk == 28199                 // '+' 'descendant-or-self'
     || lk == 28201                 // '-' 'descendant-or-self'
     || lk == 28205                 // '/' 'descendant-or-self'
     || lk == 28206                 // '//' 'descendant-or-self'
     || lk == 28213                 // '<' 'descendant-or-self'
     || lk == 28227                 // '@' 'descendant-or-self'
     || lk == 28229                 // '[' 'descendant-or-self'
     || lk == 28245                 // 'attribute' 'descendant-or-self'
     || lk == 28276                 // 'element' 'descendant-or-self'
     || lk == 28351                 // 'return' 'descendant-or-self'
     || lk == 28447                 // '$' 'descending'
     || lk == 28448                 // '%' 'descending'
     || lk == 28450                 // '(' 'descending'
     || lk == 28451                 // '(#' 'descending'
     || lk == 28455                 // '+' 'descending'
     || lk == 28457                 // '-' 'descending'
     || lk == 28461                 // '/' 'descending'
     || lk == 28462                 // '//' 'descending'
     || lk == 28469                 // '<' 'descending'
     || lk == 28481                 // '?' 'descending'
     || lk == 28483                 // '@' 'descending'
     || lk == 28485                 // '[' 'descending'
     || lk == 28501                 // 'attribute' 'descending'
     || lk == 28532                 // 'element' 'descending'
     || lk == 28580                 // 'namespace' 'descending'
     || lk == 28604                 // 'processing-instruction' 'descending'
     || lk == 28607                 // 'return' 'descending'
     || lk == 28929                 // IntegerLiteral 'div'
     || lk == 28930                 // DecimalLiteral 'div'
     || lk == 28931                 // DoubleLiteral 'div'
     || lk == 28932                 // StringLiteral 'div'
     || lk == 28933                 // URIQualifiedName 'div'
     || lk == 28943                 // QName^Token 'div'
     || lk == 28949                 // Wildcard 'div'
     || lk == 28959                 // '$' 'div'
     || lk == 28960                 // '%' 'div'
     || lk == 28962                 // '(' 'div'
     || lk == 28963                 // '(#' 'div'
     || lk == 28967                 // '+' 'div'
     || lk == 28969                 // '-' 'div'
     || lk == 28971                 // '.' 'div'
     || lk == 28972                 // '..' 'div'
     || lk == 28973                 // '/' 'div'
     || lk == 28974                 // '//' 'div'
     || lk == 28981                 // '<' 'div'
     || lk == 28993                 // '?' 'div'
     || lk == 28995                 // '@' 'div'
     || lk == 28997                 // '[' 'div'
     || lk == 29005                 // 'ancestor' 'div'
     || lk == 29006                 // 'ancestor-or-self' 'div'
     || lk == 29007                 // 'and' 'div'
     || lk == 29009                 // 'array' 'div'
     || lk == 29011                 // 'ascending' 'div'
     || lk == 29013                 // 'attribute' 'div'
     || lk == 29019                 // 'case' 'div'
     || lk == 29020                 // 'cast' 'div'
     || lk == 29021                 // 'castable' 'div'
     || lk == 29023                 // 'child' 'div'
     || lk == 29024                 // 'collation' 'div'
     || lk == 29025                 // 'comment' 'div'
     || lk == 29031                 // 'count' 'div'
     || lk == 29034                 // 'declare' 'div'
     || lk == 29035                 // 'default' 'div'
     || lk == 29037                 // 'descendant' 'div'
     || lk == 29038                 // 'descendant-or-self' 'div'
     || lk == 29039                 // 'descending' 'div'
     || lk == 29041                 // 'div' 'div'
     || lk == 29042                 // 'document' 'div'
     || lk == 29043                 // 'document-node' 'div'
     || lk == 29044                 // 'element' 'div'
     || lk == 29045                 // 'else' 'div'
     || lk == 29046                 // 'empty' 'div'
     || lk == 29047                 // 'empty-sequence' 'div'
     || lk == 29049                 // 'end' 'div'
     || lk == 29050                 // 'eq' 'div'
     || lk == 29051                 // 'every' 'div'
     || lk == 29052                 // 'except' 'div'
     || lk == 29057                 // 'following' 'div'
     || lk == 29058                 // 'following-sibling' 'div'
     || lk == 29059                 // 'for' 'div'
     || lk == 29060                 // 'function' 'div'
     || lk == 29061                 // 'ge' 'div'
     || lk == 29063                 // 'group' 'div'
     || lk == 29065                 // 'gt' 'div'
     || lk == 29066                 // 'idiv' 'div'
     || lk == 29067                 // 'if' 'div'
     || lk == 29068                 // 'import' 'div'
     || lk == 29073                 // 'instance' 'div'
     || lk == 29074                 // 'intersect' 'div'
     || lk == 29077                 // 'is' 'div'
     || lk == 29078                 // 'item' 'div'
     || lk == 29082                 // 'le' 'div'
     || lk == 29084                 // 'let' 'div'
     || lk == 29086                 // 'lt' 'div'
     || lk == 29087                 // 'map' 'div'
     || lk == 29089                 // 'mod' 'div'
     || lk == 29091                 // 'module' 'div'
     || lk == 29092                 // 'namespace' 'div'
     || lk == 29093                 // 'namespace-node' 'div'
     || lk == 29094                 // 'ne' 'div'
     || lk == 29098                 // 'node' 'div'
     || lk == 29101                 // 'only' 'div'
     || lk == 29103                 // 'or' 'div'
     || lk == 29104                 // 'order' 'div'
     || lk == 29105                 // 'ordered' 'div'
     || lk == 29107                 // 'parent' 'div'
     || lk == 29112                 // 'preceding' 'div'
     || lk == 29113                 // 'preceding-sibling' 'div'
     || lk == 29116                 // 'processing-instruction' 'div'
     || lk == 29119                 // 'return' 'div'
     || lk == 29122                 // 'satisfies' 'div'
     || lk == 29124                 // 'schema-attribute' 'div'
     || lk == 29125                 // 'schema-element' 'div'
     || lk == 29126                 // 'self' 'div'
     || lk == 29129                 // 'some' 'div'
     || lk == 29130                 // 'stable' 'div'
     || lk == 29131                 // 'start' 'div'
     || lk == 29134                 // 'switch' 'div'
     || lk == 29135                 // 'text' 'div'
     || lk == 29137                 // 'to' 'div'
     || lk == 29139                 // 'treat' 'div'
     || lk == 29140                 // 'try' 'div'
     || lk == 29143                 // 'typeswitch' 'div'
     || lk == 29144                 // 'union' 'div'
     || lk == 29145                 // 'unordered' 'div'
     || lk == 29147                 // 'validate' 'div'
     || lk == 29152                 // 'where' 'div'
     || lk == 29156                 // 'xquery' 'div'
     || lk == 29215                 // '$' 'document'
     || lk == 29216                 // '%' 'document'
     || lk == 29218                 // '(' 'document'
     || lk == 29219                 // '(#' 'document'
     || lk == 29223                 // '+' 'document'
     || lk == 29225                 // '-' 'document'
     || lk == 29229                 // '/' 'document'
     || lk == 29230                 // '//' 'document'
     || lk == 29237                 // '<' 'document'
     || lk == 29251                 // '@' 'document'
     || lk == 29253                 // '[' 'document'
     || lk == 29269                 // 'attribute' 'document'
     || lk == 29300                 // 'element' 'document'
     || lk == 29375                 // 'return' 'document'
     || lk == 29471                 // '$' 'document-node'
     || lk == 29472                 // '%' 'document-node'
     || lk == 29474                 // '(' 'document-node'
     || lk == 29475                 // '(#' 'document-node'
     || lk == 29479                 // '+' 'document-node'
     || lk == 29481                 // '-' 'document-node'
     || lk == 29485                 // '/' 'document-node'
     || lk == 29486                 // '//' 'document-node'
     || lk == 29493                 // '<' 'document-node'
     || lk == 29507                 // '@' 'document-node'
     || lk == 29509                 // '[' 'document-node'
     || lk == 29525                 // 'attribute' 'document-node'
     || lk == 29556                 // 'element' 'document-node'
     || lk == 29631                 // 'return' 'document-node'
     || lk == 29727                 // '$' 'element'
     || lk == 29728                 // '%' 'element'
     || lk == 29730                 // '(' 'element'
     || lk == 29731                 // '(#' 'element'
     || lk == 29735                 // '+' 'element'
     || lk == 29737                 // '-' 'element'
     || lk == 29741                 // '/' 'element'
     || lk == 29742                 // '//' 'element'
     || lk == 29749                 // '<' 'element'
     || lk == 29763                 // '@' 'element'
     || lk == 29765                 // '[' 'element'
     || lk == 29781                 // 'attribute' 'element'
     || lk == 29812                 // 'element' 'element'
     || lk == 29887                 // 'return' 'element'
     || lk == 29983                 // '$' 'else'
     || lk == 29984                 // '%' 'else'
     || lk == 29986                 // '(' 'else'
     || lk == 29987                 // '(#' 'else'
     || lk == 29991                 // '+' 'else'
     || lk == 29993                 // '-' 'else'
     || lk == 29997                 // '/' 'else'
     || lk == 29998                 // '//' 'else'
     || lk == 30005                 // '<' 'else'
     || lk == 30017                 // '?' 'else'
     || lk == 30019                 // '@' 'else'
     || lk == 30021                 // '[' 'else'
     || lk == 30037                 // 'attribute' 'else'
     || lk == 30068                 // 'element' 'else'
     || lk == 30116                 // 'namespace' 'else'
     || lk == 30140                 // 'processing-instruction' 'else'
     || lk == 30143                 // 'return' 'else'
     || lk == 30239                 // '$' 'empty'
     || lk == 30240                 // '%' 'empty'
     || lk == 30242                 // '(' 'empty'
     || lk == 30243                 // '(#' 'empty'
     || lk == 30247                 // '+' 'empty'
     || lk == 30249                 // '-' 'empty'
     || lk == 30253                 // '/' 'empty'
     || lk == 30254                 // '//' 'empty'
     || lk == 30261                 // '<' 'empty'
     || lk == 30273                 // '?' 'empty'
     || lk == 30275                 // '@' 'empty'
     || lk == 30277                 // '[' 'empty'
     || lk == 30293                 // 'attribute' 'empty'
     || lk == 30324                 // 'element' 'empty'
     || lk == 30372                 // 'namespace' 'empty'
     || lk == 30396                 // 'processing-instruction' 'empty'
     || lk == 30399                 // 'return' 'empty'
     || lk == 30495                 // '$' 'empty-sequence'
     || lk == 30496                 // '%' 'empty-sequence'
     || lk == 30498                 // '(' 'empty-sequence'
     || lk == 30499                 // '(#' 'empty-sequence'
     || lk == 30503                 // '+' 'empty-sequence'
     || lk == 30505                 // '-' 'empty-sequence'
     || lk == 30509                 // '/' 'empty-sequence'
     || lk == 30510                 // '//' 'empty-sequence'
     || lk == 30517                 // '<' 'empty-sequence'
     || lk == 30531                 // '@' 'empty-sequence'
     || lk == 30533                 // '[' 'empty-sequence'
     || lk == 30549                 // 'attribute' 'empty-sequence'
     || lk == 30580                 // 'element' 'empty-sequence'
     || lk == 30655                 // 'return' 'empty-sequence'
     || lk == 31007                 // '$' 'end'
     || lk == 31008                 // '%' 'end'
     || lk == 31010                 // '(' 'end'
     || lk == 31011                 // '(#' 'end'
     || lk == 31015                 // '+' 'end'
     || lk == 31017                 // '-' 'end'
     || lk == 31021                 // '/' 'end'
     || lk == 31022                 // '//' 'end'
     || lk == 31029                 // '<' 'end'
     || lk == 31041                 // '?' 'end'
     || lk == 31043                 // '@' 'end'
     || lk == 31045                 // '[' 'end'
     || lk == 31061                 // 'attribute' 'end'
     || lk == 31092                 // 'element' 'end'
     || lk == 31140                 // 'namespace' 'end'
     || lk == 31164                 // 'processing-instruction' 'end'
     || lk == 31167                 // 'return' 'end'
     || lk == 31233                 // IntegerLiteral 'eq'
     || lk == 31234                 // DecimalLiteral 'eq'
     || lk == 31235                 // DoubleLiteral 'eq'
     || lk == 31236                 // StringLiteral 'eq'
     || lk == 31237                 // URIQualifiedName 'eq'
     || lk == 31247                 // QName^Token 'eq'
     || lk == 31253                 // Wildcard 'eq'
     || lk == 31263                 // '$' 'eq'
     || lk == 31264                 // '%' 'eq'
     || lk == 31266                 // '(' 'eq'
     || lk == 31267                 // '(#' 'eq'
     || lk == 31271                 // '+' 'eq'
     || lk == 31273                 // '-' 'eq'
     || lk == 31275                 // '.' 'eq'
     || lk == 31276                 // '..' 'eq'
     || lk == 31277                 // '/' 'eq'
     || lk == 31278                 // '//' 'eq'
     || lk == 31285                 // '<' 'eq'
     || lk == 31297                 // '?' 'eq'
     || lk == 31299                 // '@' 'eq'
     || lk == 31301                 // '[' 'eq'
     || lk == 31309                 // 'ancestor' 'eq'
     || lk == 31310                 // 'ancestor-or-self' 'eq'
     || lk == 31311                 // 'and' 'eq'
     || lk == 31313                 // 'array' 'eq'
     || lk == 31315                 // 'ascending' 'eq'
     || lk == 31317                 // 'attribute' 'eq'
     || lk == 31323                 // 'case' 'eq'
     || lk == 31324                 // 'cast' 'eq'
     || lk == 31325                 // 'castable' 'eq'
     || lk == 31327                 // 'child' 'eq'
     || lk == 31328                 // 'collation' 'eq'
     || lk == 31329                 // 'comment' 'eq'
     || lk == 31335                 // 'count' 'eq'
     || lk == 31338                 // 'declare' 'eq'
     || lk == 31339                 // 'default' 'eq'
     || lk == 31341                 // 'descendant' 'eq'
     || lk == 31342                 // 'descendant-or-self' 'eq'
     || lk == 31343                 // 'descending' 'eq'
     || lk == 31345                 // 'div' 'eq'
     || lk == 31346                 // 'document' 'eq'
     || lk == 31347                 // 'document-node' 'eq'
     || lk == 31348                 // 'element' 'eq'
     || lk == 31349                 // 'else' 'eq'
     || lk == 31350                 // 'empty' 'eq'
     || lk == 31351                 // 'empty-sequence' 'eq'
     || lk == 31353                 // 'end' 'eq'
     || lk == 31354                 // 'eq' 'eq'
     || lk == 31355                 // 'every' 'eq'
     || lk == 31356                 // 'except' 'eq'
     || lk == 31361                 // 'following' 'eq'
     || lk == 31362                 // 'following-sibling' 'eq'
     || lk == 31363                 // 'for' 'eq'
     || lk == 31364                 // 'function' 'eq'
     || lk == 31365                 // 'ge' 'eq'
     || lk == 31367                 // 'group' 'eq'
     || lk == 31369                 // 'gt' 'eq'
     || lk == 31370                 // 'idiv' 'eq'
     || lk == 31371                 // 'if' 'eq'
     || lk == 31372                 // 'import' 'eq'
     || lk == 31377                 // 'instance' 'eq'
     || lk == 31378                 // 'intersect' 'eq'
     || lk == 31381                 // 'is' 'eq'
     || lk == 31382                 // 'item' 'eq'
     || lk == 31386                 // 'le' 'eq'
     || lk == 31388                 // 'let' 'eq'
     || lk == 31390                 // 'lt' 'eq'
     || lk == 31391                 // 'map' 'eq'
     || lk == 31393                 // 'mod' 'eq'
     || lk == 31395                 // 'module' 'eq'
     || lk == 31396                 // 'namespace' 'eq'
     || lk == 31397                 // 'namespace-node' 'eq'
     || lk == 31398                 // 'ne' 'eq'
     || lk == 31402                 // 'node' 'eq'
     || lk == 31405                 // 'only' 'eq'
     || lk == 31407                 // 'or' 'eq'
     || lk == 31408                 // 'order' 'eq'
     || lk == 31409                 // 'ordered' 'eq'
     || lk == 31411                 // 'parent' 'eq'
     || lk == 31416                 // 'preceding' 'eq'
     || lk == 31417                 // 'preceding-sibling' 'eq'
     || lk == 31420                 // 'processing-instruction' 'eq'
     || lk == 31423                 // 'return' 'eq'
     || lk == 31426                 // 'satisfies' 'eq'
     || lk == 31428                 // 'schema-attribute' 'eq'
     || lk == 31429                 // 'schema-element' 'eq'
     || lk == 31430                 // 'self' 'eq'
     || lk == 31433                 // 'some' 'eq'
     || lk == 31434                 // 'stable' 'eq'
     || lk == 31435                 // 'start' 'eq'
     || lk == 31438                 // 'switch' 'eq'
     || lk == 31439                 // 'text' 'eq'
     || lk == 31441                 // 'to' 'eq'
     || lk == 31443                 // 'treat' 'eq'
     || lk == 31444                 // 'try' 'eq'
     || lk == 31447                 // 'typeswitch' 'eq'
     || lk == 31448                 // 'union' 'eq'
     || lk == 31449                 // 'unordered' 'eq'
     || lk == 31451                 // 'validate' 'eq'
     || lk == 31456                 // 'where' 'eq'
     || lk == 31460                 // 'xquery' 'eq'
     || lk == 31519                 // '$' 'every'
     || lk == 31520                 // '%' 'every'
     || lk == 31522                 // '(' 'every'
     || lk == 31523                 // '(#' 'every'
     || lk == 31527                 // '+' 'every'
     || lk == 31529                 // '-' 'every'
     || lk == 31533                 // '/' 'every'
     || lk == 31534                 // '//' 'every'
     || lk == 31541                 // '<' 'every'
     || lk == 31555                 // '@' 'every'
     || lk == 31557                 // '[' 'every'
     || lk == 31573                 // 'attribute' 'every'
     || lk == 31604                 // 'element' 'every'
     || lk == 31679                 // 'return' 'every'
     || lk == 31745                 // IntegerLiteral 'except'
     || lk == 31746                 // DecimalLiteral 'except'
     || lk == 31747                 // DoubleLiteral 'except'
     || lk == 31748                 // StringLiteral 'except'
     || lk == 31749                 // URIQualifiedName 'except'
     || lk == 31759                 // QName^Token 'except'
     || lk == 31765                 // Wildcard 'except'
     || lk == 31775                 // '$' 'except'
     || lk == 31776                 // '%' 'except'
     || lk == 31778                 // '(' 'except'
     || lk == 31779                 // '(#' 'except'
     || lk == 31783                 // '+' 'except'
     || lk == 31785                 // '-' 'except'
     || lk == 31787                 // '.' 'except'
     || lk == 31788                 // '..' 'except'
     || lk == 31789                 // '/' 'except'
     || lk == 31790                 // '//' 'except'
     || lk == 31797                 // '<' 'except'
     || lk == 31809                 // '?' 'except'
     || lk == 31811                 // '@' 'except'
     || lk == 31813                 // '[' 'except'
     || lk == 31821                 // 'ancestor' 'except'
     || lk == 31822                 // 'ancestor-or-self' 'except'
     || lk == 31823                 // 'and' 'except'
     || lk == 31825                 // 'array' 'except'
     || lk == 31827                 // 'ascending' 'except'
     || lk == 31829                 // 'attribute' 'except'
     || lk == 31835                 // 'case' 'except'
     || lk == 31836                 // 'cast' 'except'
     || lk == 31837                 // 'castable' 'except'
     || lk == 31839                 // 'child' 'except'
     || lk == 31840                 // 'collation' 'except'
     || lk == 31841                 // 'comment' 'except'
     || lk == 31847                 // 'count' 'except'
     || lk == 31850                 // 'declare' 'except'
     || lk == 31851                 // 'default' 'except'
     || lk == 31853                 // 'descendant' 'except'
     || lk == 31854                 // 'descendant-or-self' 'except'
     || lk == 31855                 // 'descending' 'except'
     || lk == 31857                 // 'div' 'except'
     || lk == 31858                 // 'document' 'except'
     || lk == 31859                 // 'document-node' 'except'
     || lk == 31860                 // 'element' 'except'
     || lk == 31861                 // 'else' 'except'
     || lk == 31862                 // 'empty' 'except'
     || lk == 31863                 // 'empty-sequence' 'except'
     || lk == 31865                 // 'end' 'except'
     || lk == 31866                 // 'eq' 'except'
     || lk == 31867                 // 'every' 'except'
     || lk == 31868                 // 'except' 'except'
     || lk == 31873                 // 'following' 'except'
     || lk == 31874                 // 'following-sibling' 'except'
     || lk == 31875                 // 'for' 'except'
     || lk == 31876                 // 'function' 'except'
     || lk == 31877                 // 'ge' 'except'
     || lk == 31879                 // 'group' 'except'
     || lk == 31881                 // 'gt' 'except'
     || lk == 31882                 // 'idiv' 'except'
     || lk == 31883                 // 'if' 'except'
     || lk == 31884                 // 'import' 'except'
     || lk == 31889                 // 'instance' 'except'
     || lk == 31890                 // 'intersect' 'except'
     || lk == 31893                 // 'is' 'except'
     || lk == 31894                 // 'item' 'except'
     || lk == 31898                 // 'le' 'except'
     || lk == 31900                 // 'let' 'except'
     || lk == 31902                 // 'lt' 'except'
     || lk == 31903                 // 'map' 'except'
     || lk == 31905                 // 'mod' 'except'
     || lk == 31907                 // 'module' 'except'
     || lk == 31908                 // 'namespace' 'except'
     || lk == 31909                 // 'namespace-node' 'except'
     || lk == 31910                 // 'ne' 'except'
     || lk == 31914                 // 'node' 'except'
     || lk == 31917                 // 'only' 'except'
     || lk == 31919                 // 'or' 'except'
     || lk == 31920                 // 'order' 'except'
     || lk == 31921                 // 'ordered' 'except'
     || lk == 31923                 // 'parent' 'except'
     || lk == 31928                 // 'preceding' 'except'
     || lk == 31929                 // 'preceding-sibling' 'except'
     || lk == 31932                 // 'processing-instruction' 'except'
     || lk == 31935                 // 'return' 'except'
     || lk == 31938                 // 'satisfies' 'except'
     || lk == 31940                 // 'schema-attribute' 'except'
     || lk == 31941                 // 'schema-element' 'except'
     || lk == 31942                 // 'self' 'except'
     || lk == 31945                 // 'some' 'except'
     || lk == 31946                 // 'stable' 'except'
     || lk == 31947                 // 'start' 'except'
     || lk == 31950                 // 'switch' 'except'
     || lk == 31951                 // 'text' 'except'
     || lk == 31953                 // 'to' 'except'
     || lk == 31955                 // 'treat' 'except'
     || lk == 31956                 // 'try' 'except'
     || lk == 31959                 // 'typeswitch' 'except'
     || lk == 31960                 // 'union' 'except'
     || lk == 31961                 // 'unordered' 'except'
     || lk == 31963                 // 'validate' 'except'
     || lk == 31968                 // 'where' 'except'
     || lk == 31972                 // 'xquery' 'except'
     || lk == 33055                 // '$' 'following'
     || lk == 33056                 // '%' 'following'
     || lk == 33058                 // '(' 'following'
     || lk == 33059                 // '(#' 'following'
     || lk == 33063                 // '+' 'following'
     || lk == 33065                 // '-' 'following'
     || lk == 33069                 // '/' 'following'
     || lk == 33070                 // '//' 'following'
     || lk == 33077                 // '<' 'following'
     || lk == 33091                 // '@' 'following'
     || lk == 33093                 // '[' 'following'
     || lk == 33109                 // 'attribute' 'following'
     || lk == 33140                 // 'element' 'following'
     || lk == 33215                 // 'return' 'following'
     || lk == 33311                 // '$' 'following-sibling'
     || lk == 33312                 // '%' 'following-sibling'
     || lk == 33314                 // '(' 'following-sibling'
     || lk == 33315                 // '(#' 'following-sibling'
     || lk == 33319                 // '+' 'following-sibling'
     || lk == 33321                 // '-' 'following-sibling'
     || lk == 33325                 // '/' 'following-sibling'
     || lk == 33326                 // '//' 'following-sibling'
     || lk == 33333                 // '<' 'following-sibling'
     || lk == 33347                 // '@' 'following-sibling'
     || lk == 33349                 // '[' 'following-sibling'
     || lk == 33365                 // 'attribute' 'following-sibling'
     || lk == 33396                 // 'element' 'following-sibling'
     || lk == 33471                 // 'return' 'following-sibling'
     || lk == 33567                 // '$' 'for'
     || lk == 33568                 // '%' 'for'
     || lk == 33570                 // '(' 'for'
     || lk == 33571                 // '(#' 'for'
     || lk == 33575                 // '+' 'for'
     || lk == 33577                 // '-' 'for'
     || lk == 33581                 // '/' 'for'
     || lk == 33582                 // '//' 'for'
     || lk == 33589                 // '<' 'for'
     || lk == 33601                 // '?' 'for'
     || lk == 33603                 // '@' 'for'
     || lk == 33605                 // '[' 'for'
     || lk == 33621                 // 'attribute' 'for'
     || lk == 33652                 // 'element' 'for'
     || lk == 33700                 // 'namespace' 'for'
     || lk == 33724                 // 'processing-instruction' 'for'
     || lk == 33727                 // 'return' 'for'
     || lk == 33823                 // '$' 'function'
     || lk == 33824                 // '%' 'function'
     || lk == 33826                 // '(' 'function'
     || lk == 33827                 // '(#' 'function'
     || lk == 33831                 // '+' 'function'
     || lk == 33833                 // '-' 'function'
     || lk == 33837                 // '/' 'function'
     || lk == 33838                 // '//' 'function'
     || lk == 33845                 // '<' 'function'
     || lk == 33859                 // '@' 'function'
     || lk == 33861                 // '[' 'function'
     || lk == 33877                 // 'attribute' 'function'
     || lk == 33908                 // 'element' 'function'
     || lk == 33983                 // 'return' 'function'
     || lk == 34049                 // IntegerLiteral 'ge'
     || lk == 34050                 // DecimalLiteral 'ge'
     || lk == 34051                 // DoubleLiteral 'ge'
     || lk == 34052                 // StringLiteral 'ge'
     || lk == 34053                 // URIQualifiedName 'ge'
     || lk == 34063                 // QName^Token 'ge'
     || lk == 34069                 // Wildcard 'ge'
     || lk == 34079                 // '$' 'ge'
     || lk == 34080                 // '%' 'ge'
     || lk == 34082                 // '(' 'ge'
     || lk == 34083                 // '(#' 'ge'
     || lk == 34087                 // '+' 'ge'
     || lk == 34089                 // '-' 'ge'
     || lk == 34091                 // '.' 'ge'
     || lk == 34092                 // '..' 'ge'
     || lk == 34093                 // '/' 'ge'
     || lk == 34094                 // '//' 'ge'
     || lk == 34101                 // '<' 'ge'
     || lk == 34113                 // '?' 'ge'
     || lk == 34115                 // '@' 'ge'
     || lk == 34117                 // '[' 'ge'
     || lk == 34125                 // 'ancestor' 'ge'
     || lk == 34126                 // 'ancestor-or-self' 'ge'
     || lk == 34127                 // 'and' 'ge'
     || lk == 34129                 // 'array' 'ge'
     || lk == 34131                 // 'ascending' 'ge'
     || lk == 34133                 // 'attribute' 'ge'
     || lk == 34139                 // 'case' 'ge'
     || lk == 34140                 // 'cast' 'ge'
     || lk == 34141                 // 'castable' 'ge'
     || lk == 34143                 // 'child' 'ge'
     || lk == 34144                 // 'collation' 'ge'
     || lk == 34145                 // 'comment' 'ge'
     || lk == 34151                 // 'count' 'ge'
     || lk == 34154                 // 'declare' 'ge'
     || lk == 34155                 // 'default' 'ge'
     || lk == 34157                 // 'descendant' 'ge'
     || lk == 34158                 // 'descendant-or-self' 'ge'
     || lk == 34159                 // 'descending' 'ge'
     || lk == 34161                 // 'div' 'ge'
     || lk == 34162                 // 'document' 'ge'
     || lk == 34163                 // 'document-node' 'ge'
     || lk == 34164                 // 'element' 'ge'
     || lk == 34165                 // 'else' 'ge'
     || lk == 34166                 // 'empty' 'ge'
     || lk == 34167                 // 'empty-sequence' 'ge'
     || lk == 34169                 // 'end' 'ge'
     || lk == 34170                 // 'eq' 'ge'
     || lk == 34171                 // 'every' 'ge'
     || lk == 34172                 // 'except' 'ge'
     || lk == 34177                 // 'following' 'ge'
     || lk == 34178                 // 'following-sibling' 'ge'
     || lk == 34179                 // 'for' 'ge'
     || lk == 34180                 // 'function' 'ge'
     || lk == 34181                 // 'ge' 'ge'
     || lk == 34183                 // 'group' 'ge'
     || lk == 34185                 // 'gt' 'ge'
     || lk == 34186                 // 'idiv' 'ge'
     || lk == 34187                 // 'if' 'ge'
     || lk == 34188                 // 'import' 'ge'
     || lk == 34193                 // 'instance' 'ge'
     || lk == 34194                 // 'intersect' 'ge'
     || lk == 34197                 // 'is' 'ge'
     || lk == 34198                 // 'item' 'ge'
     || lk == 34202                 // 'le' 'ge'
     || lk == 34204                 // 'let' 'ge'
     || lk == 34206                 // 'lt' 'ge'
     || lk == 34207                 // 'map' 'ge'
     || lk == 34209                 // 'mod' 'ge'
     || lk == 34211                 // 'module' 'ge'
     || lk == 34212                 // 'namespace' 'ge'
     || lk == 34213                 // 'namespace-node' 'ge'
     || lk == 34214                 // 'ne' 'ge'
     || lk == 34218                 // 'node' 'ge'
     || lk == 34221                 // 'only' 'ge'
     || lk == 34223                 // 'or' 'ge'
     || lk == 34224                 // 'order' 'ge'
     || lk == 34225                 // 'ordered' 'ge'
     || lk == 34227                 // 'parent' 'ge'
     || lk == 34232                 // 'preceding' 'ge'
     || lk == 34233                 // 'preceding-sibling' 'ge'
     || lk == 34236                 // 'processing-instruction' 'ge'
     || lk == 34239                 // 'return' 'ge'
     || lk == 34242                 // 'satisfies' 'ge'
     || lk == 34244                 // 'schema-attribute' 'ge'
     || lk == 34245                 // 'schema-element' 'ge'
     || lk == 34246                 // 'self' 'ge'
     || lk == 34249                 // 'some' 'ge'
     || lk == 34250                 // 'stable' 'ge'
     || lk == 34251                 // 'start' 'ge'
     || lk == 34254                 // 'switch' 'ge'
     || lk == 34255                 // 'text' 'ge'
     || lk == 34257                 // 'to' 'ge'
     || lk == 34259                 // 'treat' 'ge'
     || lk == 34260                 // 'try' 'ge'
     || lk == 34263                 // 'typeswitch' 'ge'
     || lk == 34264                 // 'union' 'ge'
     || lk == 34265                 // 'unordered' 'ge'
     || lk == 34267                 // 'validate' 'ge'
     || lk == 34272                 // 'where' 'ge'
     || lk == 34276                 // 'xquery' 'ge'
     || lk == 34591                 // '$' 'group'
     || lk == 34592                 // '%' 'group'
     || lk == 34594                 // '(' 'group'
     || lk == 34595                 // '(#' 'group'
     || lk == 34599                 // '+' 'group'
     || lk == 34601                 // '-' 'group'
     || lk == 34605                 // '/' 'group'
     || lk == 34606                 // '//' 'group'
     || lk == 34613                 // '<' 'group'
     || lk == 34625                 // '?' 'group'
     || lk == 34627                 // '@' 'group'
     || lk == 34629                 // '[' 'group'
     || lk == 34645                 // 'attribute' 'group'
     || lk == 34676                 // 'element' 'group'
     || lk == 34724                 // 'namespace' 'group'
     || lk == 34748                 // 'processing-instruction' 'group'
     || lk == 34751                 // 'return' 'group'
     || lk == 35073                 // IntegerLiteral 'gt'
     || lk == 35074                 // DecimalLiteral 'gt'
     || lk == 35075                 // DoubleLiteral 'gt'
     || lk == 35076                 // StringLiteral 'gt'
     || lk == 35077                 // URIQualifiedName 'gt'
     || lk == 35087                 // QName^Token 'gt'
     || lk == 35093                 // Wildcard 'gt'
     || lk == 35103                 // '$' 'gt'
     || lk == 35104                 // '%' 'gt'
     || lk == 35106                 // '(' 'gt'
     || lk == 35107                 // '(#' 'gt'
     || lk == 35111                 // '+' 'gt'
     || lk == 35113                 // '-' 'gt'
     || lk == 35115                 // '.' 'gt'
     || lk == 35116                 // '..' 'gt'
     || lk == 35117                 // '/' 'gt'
     || lk == 35118                 // '//' 'gt'
     || lk == 35125                 // '<' 'gt'
     || lk == 35137                 // '?' 'gt'
     || lk == 35139                 // '@' 'gt'
     || lk == 35141                 // '[' 'gt'
     || lk == 35149                 // 'ancestor' 'gt'
     || lk == 35150                 // 'ancestor-or-self' 'gt'
     || lk == 35151                 // 'and' 'gt'
     || lk == 35153                 // 'array' 'gt'
     || lk == 35155                 // 'ascending' 'gt'
     || lk == 35157                 // 'attribute' 'gt'
     || lk == 35163                 // 'case' 'gt'
     || lk == 35164                 // 'cast' 'gt'
     || lk == 35165                 // 'castable' 'gt'
     || lk == 35167                 // 'child' 'gt'
     || lk == 35168                 // 'collation' 'gt'
     || lk == 35169                 // 'comment' 'gt'
     || lk == 35175                 // 'count' 'gt'
     || lk == 35178                 // 'declare' 'gt'
     || lk == 35179                 // 'default' 'gt'
     || lk == 35181                 // 'descendant' 'gt'
     || lk == 35182                 // 'descendant-or-self' 'gt'
     || lk == 35183                 // 'descending' 'gt'
     || lk == 35185                 // 'div' 'gt'
     || lk == 35186                 // 'document' 'gt'
     || lk == 35187                 // 'document-node' 'gt'
     || lk == 35188                 // 'element' 'gt'
     || lk == 35189                 // 'else' 'gt'
     || lk == 35190                 // 'empty' 'gt'
     || lk == 35191                 // 'empty-sequence' 'gt'
     || lk == 35193                 // 'end' 'gt'
     || lk == 35194                 // 'eq' 'gt'
     || lk == 35195                 // 'every' 'gt'
     || lk == 35196                 // 'except' 'gt'
     || lk == 35201                 // 'following' 'gt'
     || lk == 35202                 // 'following-sibling' 'gt'
     || lk == 35203                 // 'for' 'gt'
     || lk == 35204                 // 'function' 'gt'
     || lk == 35205                 // 'ge' 'gt'
     || lk == 35207                 // 'group' 'gt'
     || lk == 35209                 // 'gt' 'gt'
     || lk == 35210                 // 'idiv' 'gt'
     || lk == 35211                 // 'if' 'gt'
     || lk == 35212                 // 'import' 'gt'
     || lk == 35217                 // 'instance' 'gt'
     || lk == 35218                 // 'intersect' 'gt'
     || lk == 35221                 // 'is' 'gt'
     || lk == 35222                 // 'item' 'gt'
     || lk == 35226                 // 'le' 'gt'
     || lk == 35228                 // 'let' 'gt'
     || lk == 35230                 // 'lt' 'gt'
     || lk == 35231                 // 'map' 'gt'
     || lk == 35233                 // 'mod' 'gt'
     || lk == 35235                 // 'module' 'gt'
     || lk == 35236                 // 'namespace' 'gt'
     || lk == 35237                 // 'namespace-node' 'gt'
     || lk == 35238                 // 'ne' 'gt'
     || lk == 35242                 // 'node' 'gt'
     || lk == 35245                 // 'only' 'gt'
     || lk == 35247                 // 'or' 'gt'
     || lk == 35248                 // 'order' 'gt'
     || lk == 35249                 // 'ordered' 'gt'
     || lk == 35251                 // 'parent' 'gt'
     || lk == 35256                 // 'preceding' 'gt'
     || lk == 35257                 // 'preceding-sibling' 'gt'
     || lk == 35260                 // 'processing-instruction' 'gt'
     || lk == 35263                 // 'return' 'gt'
     || lk == 35266                 // 'satisfies' 'gt'
     || lk == 35268                 // 'schema-attribute' 'gt'
     || lk == 35269                 // 'schema-element' 'gt'
     || lk == 35270                 // 'self' 'gt'
     || lk == 35273                 // 'some' 'gt'
     || lk == 35274                 // 'stable' 'gt'
     || lk == 35275                 // 'start' 'gt'
     || lk == 35278                 // 'switch' 'gt'
     || lk == 35279                 // 'text' 'gt'
     || lk == 35281                 // 'to' 'gt'
     || lk == 35283                 // 'treat' 'gt'
     || lk == 35284                 // 'try' 'gt'
     || lk == 35287                 // 'typeswitch' 'gt'
     || lk == 35288                 // 'union' 'gt'
     || lk == 35289                 // 'unordered' 'gt'
     || lk == 35291                 // 'validate' 'gt'
     || lk == 35296                 // 'where' 'gt'
     || lk == 35300                 // 'xquery' 'gt'
     || lk == 35329                 // IntegerLiteral 'idiv'
     || lk == 35330                 // DecimalLiteral 'idiv'
     || lk == 35331                 // DoubleLiteral 'idiv'
     || lk == 35332                 // StringLiteral 'idiv'
     || lk == 35333                 // URIQualifiedName 'idiv'
     || lk == 35343                 // QName^Token 'idiv'
     || lk == 35349                 // Wildcard 'idiv'
     || lk == 35359                 // '$' 'idiv'
     || lk == 35360                 // '%' 'idiv'
     || lk == 35362                 // '(' 'idiv'
     || lk == 35363                 // '(#' 'idiv'
     || lk == 35367                 // '+' 'idiv'
     || lk == 35369                 // '-' 'idiv'
     || lk == 35371                 // '.' 'idiv'
     || lk == 35372                 // '..' 'idiv'
     || lk == 35373                 // '/' 'idiv'
     || lk == 35374                 // '//' 'idiv'
     || lk == 35381                 // '<' 'idiv'
     || lk == 35393                 // '?' 'idiv'
     || lk == 35395                 // '@' 'idiv'
     || lk == 35397                 // '[' 'idiv'
     || lk == 35405                 // 'ancestor' 'idiv'
     || lk == 35406                 // 'ancestor-or-self' 'idiv'
     || lk == 35407                 // 'and' 'idiv'
     || lk == 35409                 // 'array' 'idiv'
     || lk == 35411                 // 'ascending' 'idiv'
     || lk == 35413                 // 'attribute' 'idiv'
     || lk == 35419                 // 'case' 'idiv'
     || lk == 35420                 // 'cast' 'idiv'
     || lk == 35421                 // 'castable' 'idiv'
     || lk == 35423                 // 'child' 'idiv'
     || lk == 35424                 // 'collation' 'idiv'
     || lk == 35425                 // 'comment' 'idiv'
     || lk == 35431                 // 'count' 'idiv'
     || lk == 35434                 // 'declare' 'idiv'
     || lk == 35435                 // 'default' 'idiv'
     || lk == 35437                 // 'descendant' 'idiv'
     || lk == 35438                 // 'descendant-or-self' 'idiv'
     || lk == 35439                 // 'descending' 'idiv'
     || lk == 35441                 // 'div' 'idiv'
     || lk == 35442                 // 'document' 'idiv'
     || lk == 35443                 // 'document-node' 'idiv'
     || lk == 35444                 // 'element' 'idiv'
     || lk == 35445                 // 'else' 'idiv'
     || lk == 35446                 // 'empty' 'idiv'
     || lk == 35447                 // 'empty-sequence' 'idiv'
     || lk == 35449                 // 'end' 'idiv'
     || lk == 35450                 // 'eq' 'idiv'
     || lk == 35451                 // 'every' 'idiv'
     || lk == 35452                 // 'except' 'idiv'
     || lk == 35457                 // 'following' 'idiv'
     || lk == 35458                 // 'following-sibling' 'idiv'
     || lk == 35459                 // 'for' 'idiv'
     || lk == 35460                 // 'function' 'idiv'
     || lk == 35461                 // 'ge' 'idiv'
     || lk == 35463                 // 'group' 'idiv'
     || lk == 35465                 // 'gt' 'idiv'
     || lk == 35466                 // 'idiv' 'idiv'
     || lk == 35467                 // 'if' 'idiv'
     || lk == 35468                 // 'import' 'idiv'
     || lk == 35473                 // 'instance' 'idiv'
     || lk == 35474                 // 'intersect' 'idiv'
     || lk == 35477                 // 'is' 'idiv'
     || lk == 35478                 // 'item' 'idiv'
     || lk == 35482                 // 'le' 'idiv'
     || lk == 35484                 // 'let' 'idiv'
     || lk == 35486                 // 'lt' 'idiv'
     || lk == 35487                 // 'map' 'idiv'
     || lk == 35489                 // 'mod' 'idiv'
     || lk == 35491                 // 'module' 'idiv'
     || lk == 35492                 // 'namespace' 'idiv'
     || lk == 35493                 // 'namespace-node' 'idiv'
     || lk == 35494                 // 'ne' 'idiv'
     || lk == 35498                 // 'node' 'idiv'
     || lk == 35501                 // 'only' 'idiv'
     || lk == 35503                 // 'or' 'idiv'
     || lk == 35504                 // 'order' 'idiv'
     || lk == 35505                 // 'ordered' 'idiv'
     || lk == 35507                 // 'parent' 'idiv'
     || lk == 35512                 // 'preceding' 'idiv'
     || lk == 35513                 // 'preceding-sibling' 'idiv'
     || lk == 35516                 // 'processing-instruction' 'idiv'
     || lk == 35519                 // 'return' 'idiv'
     || lk == 35522                 // 'satisfies' 'idiv'
     || lk == 35524                 // 'schema-attribute' 'idiv'
     || lk == 35525                 // 'schema-element' 'idiv'
     || lk == 35526                 // 'self' 'idiv'
     || lk == 35529                 // 'some' 'idiv'
     || lk == 35530                 // 'stable' 'idiv'
     || lk == 35531                 // 'start' 'idiv'
     || lk == 35534                 // 'switch' 'idiv'
     || lk == 35535                 // 'text' 'idiv'
     || lk == 35537                 // 'to' 'idiv'
     || lk == 35539                 // 'treat' 'idiv'
     || lk == 35540                 // 'try' 'idiv'
     || lk == 35543                 // 'typeswitch' 'idiv'
     || lk == 35544                 // 'union' 'idiv'
     || lk == 35545                 // 'unordered' 'idiv'
     || lk == 35547                 // 'validate' 'idiv'
     || lk == 35552                 // 'where' 'idiv'
     || lk == 35556                 // 'xquery' 'idiv'
     || lk == 35615                 // '$' 'if'
     || lk == 35616                 // '%' 'if'
     || lk == 35618                 // '(' 'if'
     || lk == 35619                 // '(#' 'if'
     || lk == 35623                 // '+' 'if'
     || lk == 35625                 // '-' 'if'
     || lk == 35629                 // '/' 'if'
     || lk == 35630                 // '//' 'if'
     || lk == 35637                 // '<' 'if'
     || lk == 35651                 // '@' 'if'
     || lk == 35653                 // '[' 'if'
     || lk == 35669                 // 'attribute' 'if'
     || lk == 35700                 // 'element' 'if'
     || lk == 35775                 // 'return' 'if'
     || lk == 35871                 // '$' 'import'
     || lk == 35872                 // '%' 'import'
     || lk == 35874                 // '(' 'import'
     || lk == 35875                 // '(#' 'import'
     || lk == 35879                 // '+' 'import'
     || lk == 35881                 // '-' 'import'
     || lk == 35885                 // '/' 'import'
     || lk == 35886                 // '//' 'import'
     || lk == 35893                 // '<' 'import'
     || lk == 35907                 // '@' 'import'
     || lk == 35909                 // '[' 'import'
     || lk == 35925                 // 'attribute' 'import'
     || lk == 35956                 // 'element' 'import'
     || lk == 36031                 // 'return' 'import'
     || lk == 36898                 // '(' 'insert'
     || lk == 36933                 // '[' 'insert'
     || lk == 37055                 // 'return' 'insert'
     || lk == 37121                 // IntegerLiteral 'instance'
     || lk == 37122                 // DecimalLiteral 'instance'
     || lk == 37123                 // DoubleLiteral 'instance'
     || lk == 37124                 // StringLiteral 'instance'
     || lk == 37125                 // URIQualifiedName 'instance'
     || lk == 37135                 // QName^Token 'instance'
     || lk == 37141                 // Wildcard 'instance'
     || lk == 37151                 // '$' 'instance'
     || lk == 37152                 // '%' 'instance'
     || lk == 37154                 // '(' 'instance'
     || lk == 37155                 // '(#' 'instance'
     || lk == 37159                 // '+' 'instance'
     || lk == 37161                 // '-' 'instance'
     || lk == 37163                 // '.' 'instance'
     || lk == 37164                 // '..' 'instance'
     || lk == 37165                 // '/' 'instance'
     || lk == 37166                 // '//' 'instance'
     || lk == 37173                 // '<' 'instance'
     || lk == 37185                 // '?' 'instance'
     || lk == 37187                 // '@' 'instance'
     || lk == 37189                 // '[' 'instance'
     || lk == 37197                 // 'ancestor' 'instance'
     || lk == 37198                 // 'ancestor-or-self' 'instance'
     || lk == 37199                 // 'and' 'instance'
     || lk == 37201                 // 'array' 'instance'
     || lk == 37203                 // 'ascending' 'instance'
     || lk == 37205                 // 'attribute' 'instance'
     || lk == 37211                 // 'case' 'instance'
     || lk == 37212                 // 'cast' 'instance'
     || lk == 37213                 // 'castable' 'instance'
     || lk == 37215                 // 'child' 'instance'
     || lk == 37216                 // 'collation' 'instance'
     || lk == 37217                 // 'comment' 'instance'
     || lk == 37223                 // 'count' 'instance'
     || lk == 37226                 // 'declare' 'instance'
     || lk == 37227                 // 'default' 'instance'
     || lk == 37229                 // 'descendant' 'instance'
     || lk == 37230                 // 'descendant-or-self' 'instance'
     || lk == 37231                 // 'descending' 'instance'
     || lk == 37233                 // 'div' 'instance'
     || lk == 37234                 // 'document' 'instance'
     || lk == 37235                 // 'document-node' 'instance'
     || lk == 37236                 // 'element' 'instance'
     || lk == 37237                 // 'else' 'instance'
     || lk == 37238                 // 'empty' 'instance'
     || lk == 37239                 // 'empty-sequence' 'instance'
     || lk == 37241                 // 'end' 'instance'
     || lk == 37242                 // 'eq' 'instance'
     || lk == 37243                 // 'every' 'instance'
     || lk == 37244                 // 'except' 'instance'
     || lk == 37249                 // 'following' 'instance'
     || lk == 37250                 // 'following-sibling' 'instance'
     || lk == 37251                 // 'for' 'instance'
     || lk == 37252                 // 'function' 'instance'
     || lk == 37253                 // 'ge' 'instance'
     || lk == 37255                 // 'group' 'instance'
     || lk == 37257                 // 'gt' 'instance'
     || lk == 37258                 // 'idiv' 'instance'
     || lk == 37259                 // 'if' 'instance'
     || lk == 37260                 // 'import' 'instance'
     || lk == 37265                 // 'instance' 'instance'
     || lk == 37266                 // 'intersect' 'instance'
     || lk == 37269                 // 'is' 'instance'
     || lk == 37270                 // 'item' 'instance'
     || lk == 37274                 // 'le' 'instance'
     || lk == 37276                 // 'let' 'instance'
     || lk == 37278                 // 'lt' 'instance'
     || lk == 37279                 // 'map' 'instance'
     || lk == 37281                 // 'mod' 'instance'
     || lk == 37283                 // 'module' 'instance'
     || lk == 37284                 // 'namespace' 'instance'
     || lk == 37285                 // 'namespace-node' 'instance'
     || lk == 37286                 // 'ne' 'instance'
     || lk == 37290                 // 'node' 'instance'
     || lk == 37293                 // 'only' 'instance'
     || lk == 37295                 // 'or' 'instance'
     || lk == 37296                 // 'order' 'instance'
     || lk == 37297                 // 'ordered' 'instance'
     || lk == 37299                 // 'parent' 'instance'
     || lk == 37304                 // 'preceding' 'instance'
     || lk == 37305                 // 'preceding-sibling' 'instance'
     || lk == 37308                 // 'processing-instruction' 'instance'
     || lk == 37311                 // 'return' 'instance'
     || lk == 37314                 // 'satisfies' 'instance'
     || lk == 37316                 // 'schema-attribute' 'instance'
     || lk == 37317                 // 'schema-element' 'instance'
     || lk == 37318                 // 'self' 'instance'
     || lk == 37321                 // 'some' 'instance'
     || lk == 37322                 // 'stable' 'instance'
     || lk == 37323                 // 'start' 'instance'
     || lk == 37326                 // 'switch' 'instance'
     || lk == 37327                 // 'text' 'instance'
     || lk == 37329                 // 'to' 'instance'
     || lk == 37331                 // 'treat' 'instance'
     || lk == 37332                 // 'try' 'instance'
     || lk == 37335                 // 'typeswitch' 'instance'
     || lk == 37336                 // 'union' 'instance'
     || lk == 37337                 // 'unordered' 'instance'
     || lk == 37339                 // 'validate' 'instance'
     || lk == 37344                 // 'where' 'instance'
     || lk == 37348                 // 'xquery' 'instance'
     || lk == 37377                 // IntegerLiteral 'intersect'
     || lk == 37378                 // DecimalLiteral 'intersect'
     || lk == 37379                 // DoubleLiteral 'intersect'
     || lk == 37380                 // StringLiteral 'intersect'
     || lk == 37381                 // URIQualifiedName 'intersect'
     || lk == 37391                 // QName^Token 'intersect'
     || lk == 37397                 // Wildcard 'intersect'
     || lk == 37407                 // '$' 'intersect'
     || lk == 37408                 // '%' 'intersect'
     || lk == 37410                 // '(' 'intersect'
     || lk == 37411                 // '(#' 'intersect'
     || lk == 37415                 // '+' 'intersect'
     || lk == 37417                 // '-' 'intersect'
     || lk == 37419                 // '.' 'intersect'
     || lk == 37420                 // '..' 'intersect'
     || lk == 37421                 // '/' 'intersect'
     || lk == 37422                 // '//' 'intersect'
     || lk == 37429                 // '<' 'intersect'
     || lk == 37441                 // '?' 'intersect'
     || lk == 37443                 // '@' 'intersect'
     || lk == 37445                 // '[' 'intersect'
     || lk == 37453                 // 'ancestor' 'intersect'
     || lk == 37454                 // 'ancestor-or-self' 'intersect'
     || lk == 37455                 // 'and' 'intersect'
     || lk == 37457                 // 'array' 'intersect'
     || lk == 37459                 // 'ascending' 'intersect'
     || lk == 37461                 // 'attribute' 'intersect'
     || lk == 37467                 // 'case' 'intersect'
     || lk == 37468                 // 'cast' 'intersect'
     || lk == 37469                 // 'castable' 'intersect'
     || lk == 37471                 // 'child' 'intersect'
     || lk == 37472                 // 'collation' 'intersect'
     || lk == 37473                 // 'comment' 'intersect'
     || lk == 37479                 // 'count' 'intersect'
     || lk == 37482                 // 'declare' 'intersect'
     || lk == 37483                 // 'default' 'intersect'
     || lk == 37485                 // 'descendant' 'intersect'
     || lk == 37486                 // 'descendant-or-self' 'intersect'
     || lk == 37487                 // 'descending' 'intersect'
     || lk == 37489                 // 'div' 'intersect'
     || lk == 37490                 // 'document' 'intersect'
     || lk == 37491                 // 'document-node' 'intersect'
     || lk == 37492                 // 'element' 'intersect'
     || lk == 37493                 // 'else' 'intersect'
     || lk == 37494                 // 'empty' 'intersect'
     || lk == 37495                 // 'empty-sequence' 'intersect'
     || lk == 37497                 // 'end' 'intersect'
     || lk == 37498                 // 'eq' 'intersect'
     || lk == 37499                 // 'every' 'intersect'
     || lk == 37500                 // 'except' 'intersect'
     || lk == 37505                 // 'following' 'intersect'
     || lk == 37506                 // 'following-sibling' 'intersect'
     || lk == 37507                 // 'for' 'intersect'
     || lk == 37508                 // 'function' 'intersect'
     || lk == 37509                 // 'ge' 'intersect'
     || lk == 37511                 // 'group' 'intersect'
     || lk == 37513                 // 'gt' 'intersect'
     || lk == 37514                 // 'idiv' 'intersect'
     || lk == 37515                 // 'if' 'intersect'
     || lk == 37516                 // 'import' 'intersect'
     || lk == 37521                 // 'instance' 'intersect'
     || lk == 37522                 // 'intersect' 'intersect'
     || lk == 37525                 // 'is' 'intersect'
     || lk == 37526                 // 'item' 'intersect'
     || lk == 37530                 // 'le' 'intersect'
     || lk == 37532                 // 'let' 'intersect'
     || lk == 37534                 // 'lt' 'intersect'
     || lk == 37535                 // 'map' 'intersect'
     || lk == 37537                 // 'mod' 'intersect'
     || lk == 37539                 // 'module' 'intersect'
     || lk == 37540                 // 'namespace' 'intersect'
     || lk == 37541                 // 'namespace-node' 'intersect'
     || lk == 37542                 // 'ne' 'intersect'
     || lk == 37546                 // 'node' 'intersect'
     || lk == 37549                 // 'only' 'intersect'
     || lk == 37551                 // 'or' 'intersect'
     || lk == 37552                 // 'order' 'intersect'
     || lk == 37553                 // 'ordered' 'intersect'
     || lk == 37555                 // 'parent' 'intersect'
     || lk == 37560                 // 'preceding' 'intersect'
     || lk == 37561                 // 'preceding-sibling' 'intersect'
     || lk == 37564                 // 'processing-instruction' 'intersect'
     || lk == 37567                 // 'return' 'intersect'
     || lk == 37570                 // 'satisfies' 'intersect'
     || lk == 37572                 // 'schema-attribute' 'intersect'
     || lk == 37573                 // 'schema-element' 'intersect'
     || lk == 37574                 // 'self' 'intersect'
     || lk == 37577                 // 'some' 'intersect'
     || lk == 37578                 // 'stable' 'intersect'
     || lk == 37579                 // 'start' 'intersect'
     || lk == 37582                 // 'switch' 'intersect'
     || lk == 37583                 // 'text' 'intersect'
     || lk == 37585                 // 'to' 'intersect'
     || lk == 37587                 // 'treat' 'intersect'
     || lk == 37588                 // 'try' 'intersect'
     || lk == 37591                 // 'typeswitch' 'intersect'
     || lk == 37592                 // 'union' 'intersect'
     || lk == 37593                 // 'unordered' 'intersect'
     || lk == 37595                 // 'validate' 'intersect'
     || lk == 37600                 // 'where' 'intersect'
     || lk == 37604                 // 'xquery' 'intersect'
     || lk == 37922                 // '(' 'invoke'
     || lk == 37957                 // '[' 'invoke'
     || lk == 38079                 // 'return' 'invoke'
     || lk == 38145                 // IntegerLiteral 'is'
     || lk == 38146                 // DecimalLiteral 'is'
     || lk == 38147                 // DoubleLiteral 'is'
     || lk == 38148                 // StringLiteral 'is'
     || lk == 38149                 // URIQualifiedName 'is'
     || lk == 38159                 // QName^Token 'is'
     || lk == 38165                 // Wildcard 'is'
     || lk == 38175                 // '$' 'is'
     || lk == 38176                 // '%' 'is'
     || lk == 38178                 // '(' 'is'
     || lk == 38179                 // '(#' 'is'
     || lk == 38183                 // '+' 'is'
     || lk == 38185                 // '-' 'is'
     || lk == 38187                 // '.' 'is'
     || lk == 38188                 // '..' 'is'
     || lk == 38189                 // '/' 'is'
     || lk == 38190                 // '//' 'is'
     || lk == 38197                 // '<' 'is'
     || lk == 38209                 // '?' 'is'
     || lk == 38211                 // '@' 'is'
     || lk == 38213                 // '[' 'is'
     || lk == 38221                 // 'ancestor' 'is'
     || lk == 38222                 // 'ancestor-or-self' 'is'
     || lk == 38223                 // 'and' 'is'
     || lk == 38225                 // 'array' 'is'
     || lk == 38227                 // 'ascending' 'is'
     || lk == 38229                 // 'attribute' 'is'
     || lk == 38235                 // 'case' 'is'
     || lk == 38236                 // 'cast' 'is'
     || lk == 38237                 // 'castable' 'is'
     || lk == 38239                 // 'child' 'is'
     || lk == 38240                 // 'collation' 'is'
     || lk == 38241                 // 'comment' 'is'
     || lk == 38247                 // 'count' 'is'
     || lk == 38250                 // 'declare' 'is'
     || lk == 38251                 // 'default' 'is'
     || lk == 38253                 // 'descendant' 'is'
     || lk == 38254                 // 'descendant-or-self' 'is'
     || lk == 38255                 // 'descending' 'is'
     || lk == 38257                 // 'div' 'is'
     || lk == 38258                 // 'document' 'is'
     || lk == 38259                 // 'document-node' 'is'
     || lk == 38260                 // 'element' 'is'
     || lk == 38261                 // 'else' 'is'
     || lk == 38262                 // 'empty' 'is'
     || lk == 38263                 // 'empty-sequence' 'is'
     || lk == 38265                 // 'end' 'is'
     || lk == 38266                 // 'eq' 'is'
     || lk == 38267                 // 'every' 'is'
     || lk == 38268                 // 'except' 'is'
     || lk == 38273                 // 'following' 'is'
     || lk == 38274                 // 'following-sibling' 'is'
     || lk == 38275                 // 'for' 'is'
     || lk == 38276                 // 'function' 'is'
     || lk == 38277                 // 'ge' 'is'
     || lk == 38279                 // 'group' 'is'
     || lk == 38281                 // 'gt' 'is'
     || lk == 38282                 // 'idiv' 'is'
     || lk == 38283                 // 'if' 'is'
     || lk == 38284                 // 'import' 'is'
     || lk == 38289                 // 'instance' 'is'
     || lk == 38290                 // 'intersect' 'is'
     || lk == 38293                 // 'is' 'is'
     || lk == 38294                 // 'item' 'is'
     || lk == 38298                 // 'le' 'is'
     || lk == 38300                 // 'let' 'is'
     || lk == 38302                 // 'lt' 'is'
     || lk == 38303                 // 'map' 'is'
     || lk == 38305                 // 'mod' 'is'
     || lk == 38307                 // 'module' 'is'
     || lk == 38308                 // 'namespace' 'is'
     || lk == 38309                 // 'namespace-node' 'is'
     || lk == 38310                 // 'ne' 'is'
     || lk == 38314                 // 'node' 'is'
     || lk == 38317                 // 'only' 'is'
     || lk == 38319                 // 'or' 'is'
     || lk == 38320                 // 'order' 'is'
     || lk == 38321                 // 'ordered' 'is'
     || lk == 38323                 // 'parent' 'is'
     || lk == 38328                 // 'preceding' 'is'
     || lk == 38329                 // 'preceding-sibling' 'is'
     || lk == 38332                 // 'processing-instruction' 'is'
     || lk == 38335                 // 'return' 'is'
     || lk == 38338                 // 'satisfies' 'is'
     || lk == 38340                 // 'schema-attribute' 'is'
     || lk == 38341                 // 'schema-element' 'is'
     || lk == 38342                 // 'self' 'is'
     || lk == 38345                 // 'some' 'is'
     || lk == 38346                 // 'stable' 'is'
     || lk == 38347                 // 'start' 'is'
     || lk == 38350                 // 'switch' 'is'
     || lk == 38351                 // 'text' 'is'
     || lk == 38353                 // 'to' 'is'
     || lk == 38355                 // 'treat' 'is'
     || lk == 38356                 // 'try' 'is'
     || lk == 38359                 // 'typeswitch' 'is'
     || lk == 38360                 // 'union' 'is'
     || lk == 38361                 // 'unordered' 'is'
     || lk == 38363                 // 'validate' 'is'
     || lk == 38368                 // 'where' 'is'
     || lk == 38372                 // 'xquery' 'is'
     || lk == 38431                 // '$' 'item'
     || lk == 38432                 // '%' 'item'
     || lk == 38434                 // '(' 'item'
     || lk == 38435                 // '(#' 'item'
     || lk == 38439                 // '+' 'item'
     || lk == 38441                 // '-' 'item'
     || lk == 38445                 // '/' 'item'
     || lk == 38446                 // '//' 'item'
     || lk == 38453                 // '<' 'item'
     || lk == 38467                 // '@' 'item'
     || lk == 38469                 // '[' 'item'
     || lk == 38485                 // 'attribute' 'item'
     || lk == 38516                 // 'element' 'item'
     || lk == 38591                 // 'return' 'item'
     || lk == 39387                 // 'validate' 'lax'
     || lk == 39425                 // IntegerLiteral 'le'
     || lk == 39426                 // DecimalLiteral 'le'
     || lk == 39427                 // DoubleLiteral 'le'
     || lk == 39428                 // StringLiteral 'le'
     || lk == 39429                 // URIQualifiedName 'le'
     || lk == 39439                 // QName^Token 'le'
     || lk == 39445                 // Wildcard 'le'
     || lk == 39455                 // '$' 'le'
     || lk == 39456                 // '%' 'le'
     || lk == 39458                 // '(' 'le'
     || lk == 39459                 // '(#' 'le'
     || lk == 39463                 // '+' 'le'
     || lk == 39465                 // '-' 'le'
     || lk == 39467                 // '.' 'le'
     || lk == 39468                 // '..' 'le'
     || lk == 39469                 // '/' 'le'
     || lk == 39470                 // '//' 'le'
     || lk == 39477                 // '<' 'le'
     || lk == 39489                 // '?' 'le'
     || lk == 39491                 // '@' 'le'
     || lk == 39493                 // '[' 'le'
     || lk == 39501                 // 'ancestor' 'le'
     || lk == 39502                 // 'ancestor-or-self' 'le'
     || lk == 39503                 // 'and' 'le'
     || lk == 39505                 // 'array' 'le'
     || lk == 39507                 // 'ascending' 'le'
     || lk == 39509                 // 'attribute' 'le'
     || lk == 39515                 // 'case' 'le'
     || lk == 39516                 // 'cast' 'le'
     || lk == 39517                 // 'castable' 'le'
     || lk == 39519                 // 'child' 'le'
     || lk == 39520                 // 'collation' 'le'
     || lk == 39521                 // 'comment' 'le'
     || lk == 39527                 // 'count' 'le'
     || lk == 39530                 // 'declare' 'le'
     || lk == 39531                 // 'default' 'le'
     || lk == 39533                 // 'descendant' 'le'
     || lk == 39534                 // 'descendant-or-self' 'le'
     || lk == 39535                 // 'descending' 'le'
     || lk == 39537                 // 'div' 'le'
     || lk == 39538                 // 'document' 'le'
     || lk == 39539                 // 'document-node' 'le'
     || lk == 39540                 // 'element' 'le'
     || lk == 39541                 // 'else' 'le'
     || lk == 39542                 // 'empty' 'le'
     || lk == 39543                 // 'empty-sequence' 'le'
     || lk == 39545                 // 'end' 'le'
     || lk == 39546                 // 'eq' 'le'
     || lk == 39547                 // 'every' 'le'
     || lk == 39548                 // 'except' 'le'
     || lk == 39553                 // 'following' 'le'
     || lk == 39554                 // 'following-sibling' 'le'
     || lk == 39555                 // 'for' 'le'
     || lk == 39556                 // 'function' 'le'
     || lk == 39557                 // 'ge' 'le'
     || lk == 39559                 // 'group' 'le'
     || lk == 39561                 // 'gt' 'le'
     || lk == 39562                 // 'idiv' 'le'
     || lk == 39563                 // 'if' 'le'
     || lk == 39564                 // 'import' 'le'
     || lk == 39569                 // 'instance' 'le'
     || lk == 39570                 // 'intersect' 'le'
     || lk == 39573                 // 'is' 'le'
     || lk == 39574                 // 'item' 'le'
     || lk == 39578                 // 'le' 'le'
     || lk == 39580                 // 'let' 'le'
     || lk == 39582                 // 'lt' 'le'
     || lk == 39583                 // 'map' 'le'
     || lk == 39585                 // 'mod' 'le'
     || lk == 39587                 // 'module' 'le'
     || lk == 39588                 // 'namespace' 'le'
     || lk == 39589                 // 'namespace-node' 'le'
     || lk == 39590                 // 'ne' 'le'
     || lk == 39594                 // 'node' 'le'
     || lk == 39597                 // 'only' 'le'
     || lk == 39599                 // 'or' 'le'
     || lk == 39600                 // 'order' 'le'
     || lk == 39601                 // 'ordered' 'le'
     || lk == 39603                 // 'parent' 'le'
     || lk == 39608                 // 'preceding' 'le'
     || lk == 39609                 // 'preceding-sibling' 'le'
     || lk == 39612                 // 'processing-instruction' 'le'
     || lk == 39615                 // 'return' 'le'
     || lk == 39618                 // 'satisfies' 'le'
     || lk == 39620                 // 'schema-attribute' 'le'
     || lk == 39621                 // 'schema-element' 'le'
     || lk == 39622                 // 'self' 'le'
     || lk == 39625                 // 'some' 'le'
     || lk == 39626                 // 'stable' 'le'
     || lk == 39627                 // 'start' 'le'
     || lk == 39630                 // 'switch' 'le'
     || lk == 39631                 // 'text' 'le'
     || lk == 39633                 // 'to' 'le'
     || lk == 39635                 // 'treat' 'le'
     || lk == 39636                 // 'try' 'le'
     || lk == 39639                 // 'typeswitch' 'le'
     || lk == 39640                 // 'union' 'le'
     || lk == 39641                 // 'unordered' 'le'
     || lk == 39643                 // 'validate' 'le'
     || lk == 39648                 // 'where' 'le'
     || lk == 39652                 // 'xquery' 'le'
     || lk == 39967                 // '$' 'let'
     || lk == 39968                 // '%' 'let'
     || lk == 39970                 // '(' 'let'
     || lk == 39971                 // '(#' 'let'
     || lk == 39975                 // '+' 'let'
     || lk == 39977                 // '-' 'let'
     || lk == 39981                 // '/' 'let'
     || lk == 39982                 // '//' 'let'
     || lk == 39989                 // '<' 'let'
     || lk == 40001                 // '?' 'let'
     || lk == 40003                 // '@' 'let'
     || lk == 40005                 // '[' 'let'
     || lk == 40021                 // 'attribute' 'let'
     || lk == 40052                 // 'element' 'let'
     || lk == 40100                 // 'namespace' 'let'
     || lk == 40124                 // 'processing-instruction' 'let'
     || lk == 40127                 // 'return' 'let'
     || lk == 40449                 // IntegerLiteral 'lt'
     || lk == 40450                 // DecimalLiteral 'lt'
     || lk == 40451                 // DoubleLiteral 'lt'
     || lk == 40452                 // StringLiteral 'lt'
     || lk == 40453                 // URIQualifiedName 'lt'
     || lk == 40463                 // QName^Token 'lt'
     || lk == 40469                 // Wildcard 'lt'
     || lk == 40479                 // '$' 'lt'
     || lk == 40480                 // '%' 'lt'
     || lk == 40482                 // '(' 'lt'
     || lk == 40483                 // '(#' 'lt'
     || lk == 40487                 // '+' 'lt'
     || lk == 40489                 // '-' 'lt'
     || lk == 40491                 // '.' 'lt'
     || lk == 40492                 // '..' 'lt'
     || lk == 40493                 // '/' 'lt'
     || lk == 40494                 // '//' 'lt'
     || lk == 40501                 // '<' 'lt'
     || lk == 40513                 // '?' 'lt'
     || lk == 40515                 // '@' 'lt'
     || lk == 40517                 // '[' 'lt'
     || lk == 40525                 // 'ancestor' 'lt'
     || lk == 40526                 // 'ancestor-or-self' 'lt'
     || lk == 40527                 // 'and' 'lt'
     || lk == 40529                 // 'array' 'lt'
     || lk == 40531                 // 'ascending' 'lt'
     || lk == 40533                 // 'attribute' 'lt'
     || lk == 40539                 // 'case' 'lt'
     || lk == 40540                 // 'cast' 'lt'
     || lk == 40541                 // 'castable' 'lt'
     || lk == 40543                 // 'child' 'lt'
     || lk == 40544                 // 'collation' 'lt'
     || lk == 40545                 // 'comment' 'lt'
     || lk == 40551                 // 'count' 'lt'
     || lk == 40554                 // 'declare' 'lt'
     || lk == 40555                 // 'default' 'lt'
     || lk == 40557                 // 'descendant' 'lt'
     || lk == 40558                 // 'descendant-or-self' 'lt'
     || lk == 40559                 // 'descending' 'lt'
     || lk == 40561                 // 'div' 'lt'
     || lk == 40562                 // 'document' 'lt'
     || lk == 40563                 // 'document-node' 'lt'
     || lk == 40564                 // 'element' 'lt'
     || lk == 40565                 // 'else' 'lt'
     || lk == 40566                 // 'empty' 'lt'
     || lk == 40567                 // 'empty-sequence' 'lt'
     || lk == 40569                 // 'end' 'lt'
     || lk == 40570                 // 'eq' 'lt'
     || lk == 40571                 // 'every' 'lt'
     || lk == 40572                 // 'except' 'lt'
     || lk == 40577                 // 'following' 'lt'
     || lk == 40578                 // 'following-sibling' 'lt'
     || lk == 40579                 // 'for' 'lt'
     || lk == 40580                 // 'function' 'lt'
     || lk == 40581                 // 'ge' 'lt'
     || lk == 40583                 // 'group' 'lt'
     || lk == 40585                 // 'gt' 'lt'
     || lk == 40586                 // 'idiv' 'lt'
     || lk == 40587                 // 'if' 'lt'
     || lk == 40588                 // 'import' 'lt'
     || lk == 40593                 // 'instance' 'lt'
     || lk == 40594                 // 'intersect' 'lt'
     || lk == 40597                 // 'is' 'lt'
     || lk == 40598                 // 'item' 'lt'
     || lk == 40602                 // 'le' 'lt'
     || lk == 40604                 // 'let' 'lt'
     || lk == 40606                 // 'lt' 'lt'
     || lk == 40607                 // 'map' 'lt'
     || lk == 40609                 // 'mod' 'lt'
     || lk == 40611                 // 'module' 'lt'
     || lk == 40612                 // 'namespace' 'lt'
     || lk == 40613                 // 'namespace-node' 'lt'
     || lk == 40614                 // 'ne' 'lt'
     || lk == 40618                 // 'node' 'lt'
     || lk == 40621                 // 'only' 'lt'
     || lk == 40623                 // 'or' 'lt'
     || lk == 40624                 // 'order' 'lt'
     || lk == 40625                 // 'ordered' 'lt'
     || lk == 40627                 // 'parent' 'lt'
     || lk == 40632                 // 'preceding' 'lt'
     || lk == 40633                 // 'preceding-sibling' 'lt'
     || lk == 40636                 // 'processing-instruction' 'lt'
     || lk == 40639                 // 'return' 'lt'
     || lk == 40642                 // 'satisfies' 'lt'
     || lk == 40644                 // 'schema-attribute' 'lt'
     || lk == 40645                 // 'schema-element' 'lt'
     || lk == 40646                 // 'self' 'lt'
     || lk == 40649                 // 'some' 'lt'
     || lk == 40650                 // 'stable' 'lt'
     || lk == 40651                 // 'start' 'lt'
     || lk == 40654                 // 'switch' 'lt'
     || lk == 40655                 // 'text' 'lt'
     || lk == 40657                 // 'to' 'lt'
     || lk == 40659                 // 'treat' 'lt'
     || lk == 40660                 // 'try' 'lt'
     || lk == 40663                 // 'typeswitch' 'lt'
     || lk == 40664                 // 'union' 'lt'
     || lk == 40665                 // 'unordered' 'lt'
     || lk == 40667                 // 'validate' 'lt'
     || lk == 40672                 // 'where' 'lt'
     || lk == 40676                 // 'xquery' 'lt'
     || lk == 40735                 // '$' 'map'
     || lk == 40736                 // '%' 'map'
     || lk == 40738                 // '(' 'map'
     || lk == 40739                 // '(#' 'map'
     || lk == 40743                 // '+' 'map'
     || lk == 40745                 // '-' 'map'
     || lk == 40749                 // '/' 'map'
     || lk == 40750                 // '//' 'map'
     || lk == 40757                 // '<' 'map'
     || lk == 40771                 // '@' 'map'
     || lk == 40773                 // '[' 'map'
     || lk == 40789                 // 'attribute' 'map'
     || lk == 40820                 // 'element' 'map'
     || lk == 40895                 // 'return' 'map'
     || lk == 41217                 // IntegerLiteral 'mod'
     || lk == 41218                 // DecimalLiteral 'mod'
     || lk == 41219                 // DoubleLiteral 'mod'
     || lk == 41220                 // StringLiteral 'mod'
     || lk == 41221                 // URIQualifiedName 'mod'
     || lk == 41231                 // QName^Token 'mod'
     || lk == 41237                 // Wildcard 'mod'
     || lk == 41247                 // '$' 'mod'
     || lk == 41248                 // '%' 'mod'
     || lk == 41250                 // '(' 'mod'
     || lk == 41251                 // '(#' 'mod'
     || lk == 41255                 // '+' 'mod'
     || lk == 41257                 // '-' 'mod'
     || lk == 41259                 // '.' 'mod'
     || lk == 41260                 // '..' 'mod'
     || lk == 41261                 // '/' 'mod'
     || lk == 41262                 // '//' 'mod'
     || lk == 41269                 // '<' 'mod'
     || lk == 41281                 // '?' 'mod'
     || lk == 41283                 // '@' 'mod'
     || lk == 41285                 // '[' 'mod'
     || lk == 41293                 // 'ancestor' 'mod'
     || lk == 41294                 // 'ancestor-or-self' 'mod'
     || lk == 41295                 // 'and' 'mod'
     || lk == 41297                 // 'array' 'mod'
     || lk == 41299                 // 'ascending' 'mod'
     || lk == 41301                 // 'attribute' 'mod'
     || lk == 41307                 // 'case' 'mod'
     || lk == 41308                 // 'cast' 'mod'
     || lk == 41309                 // 'castable' 'mod'
     || lk == 41311                 // 'child' 'mod'
     || lk == 41312                 // 'collation' 'mod'
     || lk == 41313                 // 'comment' 'mod'
     || lk == 41319                 // 'count' 'mod'
     || lk == 41322                 // 'declare' 'mod'
     || lk == 41323                 // 'default' 'mod'
     || lk == 41325                 // 'descendant' 'mod'
     || lk == 41326                 // 'descendant-or-self' 'mod'
     || lk == 41327                 // 'descending' 'mod'
     || lk == 41329                 // 'div' 'mod'
     || lk == 41330                 // 'document' 'mod'
     || lk == 41331                 // 'document-node' 'mod'
     || lk == 41332                 // 'element' 'mod'
     || lk == 41333                 // 'else' 'mod'
     || lk == 41334                 // 'empty' 'mod'
     || lk == 41335                 // 'empty-sequence' 'mod'
     || lk == 41337                 // 'end' 'mod'
     || lk == 41338                 // 'eq' 'mod'
     || lk == 41339                 // 'every' 'mod'
     || lk == 41340                 // 'except' 'mod'
     || lk == 41345                 // 'following' 'mod'
     || lk == 41346                 // 'following-sibling' 'mod'
     || lk == 41347                 // 'for' 'mod'
     || lk == 41348                 // 'function' 'mod'
     || lk == 41349                 // 'ge' 'mod'
     || lk == 41351                 // 'group' 'mod'
     || lk == 41353                 // 'gt' 'mod'
     || lk == 41354                 // 'idiv' 'mod'
     || lk == 41355                 // 'if' 'mod'
     || lk == 41356                 // 'import' 'mod'
     || lk == 41361                 // 'instance' 'mod'
     || lk == 41362                 // 'intersect' 'mod'
     || lk == 41365                 // 'is' 'mod'
     || lk == 41366                 // 'item' 'mod'
     || lk == 41370                 // 'le' 'mod'
     || lk == 41372                 // 'let' 'mod'
     || lk == 41374                 // 'lt' 'mod'
     || lk == 41375                 // 'map' 'mod'
     || lk == 41377                 // 'mod' 'mod'
     || lk == 41379                 // 'module' 'mod'
     || lk == 41380                 // 'namespace' 'mod'
     || lk == 41381                 // 'namespace-node' 'mod'
     || lk == 41382                 // 'ne' 'mod'
     || lk == 41386                 // 'node' 'mod'
     || lk == 41389                 // 'only' 'mod'
     || lk == 41391                 // 'or' 'mod'
     || lk == 41392                 // 'order' 'mod'
     || lk == 41393                 // 'ordered' 'mod'
     || lk == 41395                 // 'parent' 'mod'
     || lk == 41400                 // 'preceding' 'mod'
     || lk == 41401                 // 'preceding-sibling' 'mod'
     || lk == 41404                 // 'processing-instruction' 'mod'
     || lk == 41407                 // 'return' 'mod'
     || lk == 41410                 // 'satisfies' 'mod'
     || lk == 41412                 // 'schema-attribute' 'mod'
     || lk == 41413                 // 'schema-element' 'mod'
     || lk == 41414                 // 'self' 'mod'
     || lk == 41417                 // 'some' 'mod'
     || lk == 41418                 // 'stable' 'mod'
     || lk == 41419                 // 'start' 'mod'
     || lk == 41422                 // 'switch' 'mod'
     || lk == 41423                 // 'text' 'mod'
     || lk == 41425                 // 'to' 'mod'
     || lk == 41427                 // 'treat' 'mod'
     || lk == 41428                 // 'try' 'mod'
     || lk == 41431                 // 'typeswitch' 'mod'
     || lk == 41432                 // 'union' 'mod'
     || lk == 41433                 // 'unordered' 'mod'
     || lk == 41435                 // 'validate' 'mod'
     || lk == 41440                 // 'where' 'mod'
     || lk == 41444                 // 'xquery' 'mod'
     || lk == 41759                 // '$' 'module'
     || lk == 41760                 // '%' 'module'
     || lk == 41762                 // '(' 'module'
     || lk == 41763                 // '(#' 'module'
     || lk == 41767                 // '+' 'module'
     || lk == 41769                 // '-' 'module'
     || lk == 41773                 // '/' 'module'
     || lk == 41774                 // '//' 'module'
     || lk == 41781                 // '<' 'module'
     || lk == 41795                 // '@' 'module'
     || lk == 41797                 // '[' 'module'
     || lk == 41813                 // 'attribute' 'module'
     || lk == 41844                 // 'element' 'module'
     || lk == 41919                 // 'return' 'module'
     || lk == 42015                 // '$' 'namespace'
     || lk == 42016                 // '%' 'namespace'
     || lk == 42018                 // '(' 'namespace'
     || lk == 42019                 // '(#' 'namespace'
     || lk == 42023                 // '+' 'namespace'
     || lk == 42025                 // '-' 'namespace'
     || lk == 42029                 // '/' 'namespace'
     || lk == 42030                 // '//' 'namespace'
     || lk == 42037                 // '<' 'namespace'
     || lk == 42051                 // '@' 'namespace'
     || lk == 42053                 // '[' 'namespace'
     || lk == 42069                 // 'attribute' 'namespace'
     || lk == 42100                 // 'element' 'namespace'
     || lk == 42175                 // 'return' 'namespace'
     || lk == 42271                 // '$' 'namespace-node'
     || lk == 42272                 // '%' 'namespace-node'
     || lk == 42274                 // '(' 'namespace-node'
     || lk == 42275                 // '(#' 'namespace-node'
     || lk == 42279                 // '+' 'namespace-node'
     || lk == 42281                 // '-' 'namespace-node'
     || lk == 42285                 // '/' 'namespace-node'
     || lk == 42286                 // '//' 'namespace-node'
     || lk == 42293                 // '<' 'namespace-node'
     || lk == 42307                 // '@' 'namespace-node'
     || lk == 42309                 // '[' 'namespace-node'
     || lk == 42325                 // 'attribute' 'namespace-node'
     || lk == 42356                 // 'element' 'namespace-node'
     || lk == 42431                 // 'return' 'namespace-node'
     || lk == 42497                 // IntegerLiteral 'ne'
     || lk == 42498                 // DecimalLiteral 'ne'
     || lk == 42499                 // DoubleLiteral 'ne'
     || lk == 42500                 // StringLiteral 'ne'
     || lk == 42501                 // URIQualifiedName 'ne'
     || lk == 42511                 // QName^Token 'ne'
     || lk == 42517                 // Wildcard 'ne'
     || lk == 42527                 // '$' 'ne'
     || lk == 42528                 // '%' 'ne'
     || lk == 42530                 // '(' 'ne'
     || lk == 42531                 // '(#' 'ne'
     || lk == 42535                 // '+' 'ne'
     || lk == 42537                 // '-' 'ne'
     || lk == 42539                 // '.' 'ne'
     || lk == 42540                 // '..' 'ne'
     || lk == 42541                 // '/' 'ne'
     || lk == 42542                 // '//' 'ne'
     || lk == 42549                 // '<' 'ne'
     || lk == 42561                 // '?' 'ne'
     || lk == 42563                 // '@' 'ne'
     || lk == 42565                 // '[' 'ne'
     || lk == 42573                 // 'ancestor' 'ne'
     || lk == 42574                 // 'ancestor-or-self' 'ne'
     || lk == 42575                 // 'and' 'ne'
     || lk == 42577                 // 'array' 'ne'
     || lk == 42579                 // 'ascending' 'ne'
     || lk == 42581                 // 'attribute' 'ne'
     || lk == 42587                 // 'case' 'ne'
     || lk == 42588                 // 'cast' 'ne'
     || lk == 42589                 // 'castable' 'ne'
     || lk == 42591                 // 'child' 'ne'
     || lk == 42592                 // 'collation' 'ne'
     || lk == 42593                 // 'comment' 'ne'
     || lk == 42599                 // 'count' 'ne'
     || lk == 42602                 // 'declare' 'ne'
     || lk == 42603                 // 'default' 'ne'
     || lk == 42605                 // 'descendant' 'ne'
     || lk == 42606                 // 'descendant-or-self' 'ne'
     || lk == 42607                 // 'descending' 'ne'
     || lk == 42609                 // 'div' 'ne'
     || lk == 42610                 // 'document' 'ne'
     || lk == 42611                 // 'document-node' 'ne'
     || lk == 42612                 // 'element' 'ne'
     || lk == 42613                 // 'else' 'ne'
     || lk == 42614                 // 'empty' 'ne'
     || lk == 42615                 // 'empty-sequence' 'ne'
     || lk == 42617                 // 'end' 'ne'
     || lk == 42618                 // 'eq' 'ne'
     || lk == 42619                 // 'every' 'ne'
     || lk == 42620                 // 'except' 'ne'
     || lk == 42625                 // 'following' 'ne'
     || lk == 42626                 // 'following-sibling' 'ne'
     || lk == 42627                 // 'for' 'ne'
     || lk == 42628                 // 'function' 'ne'
     || lk == 42629                 // 'ge' 'ne'
     || lk == 42631                 // 'group' 'ne'
     || lk == 42633                 // 'gt' 'ne'
     || lk == 42634                 // 'idiv' 'ne'
     || lk == 42635                 // 'if' 'ne'
     || lk == 42636                 // 'import' 'ne'
     || lk == 42641                 // 'instance' 'ne'
     || lk == 42642                 // 'intersect' 'ne'
     || lk == 42645                 // 'is' 'ne'
     || lk == 42646                 // 'item' 'ne'
     || lk == 42650                 // 'le' 'ne'
     || lk == 42652                 // 'let' 'ne'
     || lk == 42654                 // 'lt' 'ne'
     || lk == 42655                 // 'map' 'ne'
     || lk == 42657                 // 'mod' 'ne'
     || lk == 42659                 // 'module' 'ne'
     || lk == 42660                 // 'namespace' 'ne'
     || lk == 42661                 // 'namespace-node' 'ne'
     || lk == 42662                 // 'ne' 'ne'
     || lk == 42666                 // 'node' 'ne'
     || lk == 42669                 // 'only' 'ne'
     || lk == 42671                 // 'or' 'ne'
     || lk == 42672                 // 'order' 'ne'
     || lk == 42673                 // 'ordered' 'ne'
     || lk == 42675                 // 'parent' 'ne'
     || lk == 42680                 // 'preceding' 'ne'
     || lk == 42681                 // 'preceding-sibling' 'ne'
     || lk == 42684                 // 'processing-instruction' 'ne'
     || lk == 42687                 // 'return' 'ne'
     || lk == 42690                 // 'satisfies' 'ne'
     || lk == 42692                 // 'schema-attribute' 'ne'
     || lk == 42693                 // 'schema-element' 'ne'
     || lk == 42694                 // 'self' 'ne'
     || lk == 42697                 // 'some' 'ne'
     || lk == 42698                 // 'stable' 'ne'
     || lk == 42699                 // 'start' 'ne'
     || lk == 42702                 // 'switch' 'ne'
     || lk == 42703                 // 'text' 'ne'
     || lk == 42705                 // 'to' 'ne'
     || lk == 42707                 // 'treat' 'ne'
     || lk == 42708                 // 'try' 'ne'
     || lk == 42711                 // 'typeswitch' 'ne'
     || lk == 42712                 // 'union' 'ne'
     || lk == 42713                 // 'unordered' 'ne'
     || lk == 42715                 // 'validate' 'ne'
     || lk == 42720                 // 'where' 'ne'
     || lk == 42724                 // 'xquery' 'ne'
     || lk == 43551                 // '$' 'node'
     || lk == 43552                 // '%' 'node'
     || lk == 43554                 // '(' 'node'
     || lk == 43555                 // '(#' 'node'
     || lk == 43559                 // '+' 'node'
     || lk == 43561                 // '-' 'node'
     || lk == 43565                 // '/' 'node'
     || lk == 43566                 // '//' 'node'
     || lk == 43573                 // '<' 'node'
     || lk == 43587                 // '@' 'node'
     || lk == 43589                 // '[' 'node'
     || lk == 43605                 // 'attribute' 'node'
     || lk == 43628                 // 'delete' 'node'
     || lk == 43636                 // 'element' 'node'
     || lk == 43664                 // 'insert' 'node'
     || lk == 43709                 // 'rename' 'node'
     || lk == 43710                 // 'replace' 'node'
     || lk == 43711                 // 'return' 'node'
     || lk == 43884                 // 'delete' 'nodes'
     || lk == 43920                 // 'insert' 'nodes'
     || lk == 44319                 // '$' 'only'
     || lk == 44320                 // '%' 'only'
     || lk == 44322                 // '(' 'only'
     || lk == 44323                 // '(#' 'only'
     || lk == 44327                 // '+' 'only'
     || lk == 44329                 // '-' 'only'
     || lk == 44333                 // '/' 'only'
     || lk == 44334                 // '//' 'only'
     || lk == 44341                 // '<' 'only'
     || lk == 44353                 // '?' 'only'
     || lk == 44355                 // '@' 'only'
     || lk == 44357                 // '[' 'only'
     || lk == 44373                 // 'attribute' 'only'
     || lk == 44404                 // 'element' 'only'
     || lk == 44452                 // 'namespace' 'only'
     || lk == 44476                 // 'processing-instruction' 'only'
     || lk == 44479                 // 'return' 'only'
     || lk == 44801                 // IntegerLiteral 'or'
     || lk == 44802                 // DecimalLiteral 'or'
     || lk == 44803                 // DoubleLiteral 'or'
     || lk == 44804                 // StringLiteral 'or'
     || lk == 44805                 // URIQualifiedName 'or'
     || lk == 44815                 // QName^Token 'or'
     || lk == 44821                 // Wildcard 'or'
     || lk == 44831                 // '$' 'or'
     || lk == 44832                 // '%' 'or'
     || lk == 44834                 // '(' 'or'
     || lk == 44835                 // '(#' 'or'
     || lk == 44839                 // '+' 'or'
     || lk == 44841                 // '-' 'or'
     || lk == 44843                 // '.' 'or'
     || lk == 44844                 // '..' 'or'
     || lk == 44845                 // '/' 'or'
     || lk == 44846                 // '//' 'or'
     || lk == 44853                 // '<' 'or'
     || lk == 44865                 // '?' 'or'
     || lk == 44867                 // '@' 'or'
     || lk == 44869                 // '[' 'or'
     || lk == 44877                 // 'ancestor' 'or'
     || lk == 44878                 // 'ancestor-or-self' 'or'
     || lk == 44879                 // 'and' 'or'
     || lk == 44881                 // 'array' 'or'
     || lk == 44883                 // 'ascending' 'or'
     || lk == 44885                 // 'attribute' 'or'
     || lk == 44891                 // 'case' 'or'
     || lk == 44892                 // 'cast' 'or'
     || lk == 44893                 // 'castable' 'or'
     || lk == 44895                 // 'child' 'or'
     || lk == 44896                 // 'collation' 'or'
     || lk == 44897                 // 'comment' 'or'
     || lk == 44903                 // 'count' 'or'
     || lk == 44906                 // 'declare' 'or'
     || lk == 44907                 // 'default' 'or'
     || lk == 44909                 // 'descendant' 'or'
     || lk == 44910                 // 'descendant-or-self' 'or'
     || lk == 44911                 // 'descending' 'or'
     || lk == 44913                 // 'div' 'or'
     || lk == 44914                 // 'document' 'or'
     || lk == 44915                 // 'document-node' 'or'
     || lk == 44916                 // 'element' 'or'
     || lk == 44917                 // 'else' 'or'
     || lk == 44918                 // 'empty' 'or'
     || lk == 44919                 // 'empty-sequence' 'or'
     || lk == 44921                 // 'end' 'or'
     || lk == 44922                 // 'eq' 'or'
     || lk == 44923                 // 'every' 'or'
     || lk == 44924                 // 'except' 'or'
     || lk == 44929                 // 'following' 'or'
     || lk == 44930                 // 'following-sibling' 'or'
     || lk == 44931                 // 'for' 'or'
     || lk == 44932                 // 'function' 'or'
     || lk == 44933                 // 'ge' 'or'
     || lk == 44935                 // 'group' 'or'
     || lk == 44937                 // 'gt' 'or'
     || lk == 44938                 // 'idiv' 'or'
     || lk == 44939                 // 'if' 'or'
     || lk == 44940                 // 'import' 'or'
     || lk == 44945                 // 'instance' 'or'
     || lk == 44946                 // 'intersect' 'or'
     || lk == 44949                 // 'is' 'or'
     || lk == 44950                 // 'item' 'or'
     || lk == 44954                 // 'le' 'or'
     || lk == 44956                 // 'let' 'or'
     || lk == 44958                 // 'lt' 'or'
     || lk == 44959                 // 'map' 'or'
     || lk == 44961                 // 'mod' 'or'
     || lk == 44963                 // 'module' 'or'
     || lk == 44964                 // 'namespace' 'or'
     || lk == 44965                 // 'namespace-node' 'or'
     || lk == 44966                 // 'ne' 'or'
     || lk == 44970                 // 'node' 'or'
     || lk == 44973                 // 'only' 'or'
     || lk == 44975                 // 'or' 'or'
     || lk == 44976                 // 'order' 'or'
     || lk == 44977                 // 'ordered' 'or'
     || lk == 44979                 // 'parent' 'or'
     || lk == 44984                 // 'preceding' 'or'
     || lk == 44985                 // 'preceding-sibling' 'or'
     || lk == 44988                 // 'processing-instruction' 'or'
     || lk == 44991                 // 'return' 'or'
     || lk == 44994                 // 'satisfies' 'or'
     || lk == 44996                 // 'schema-attribute' 'or'
     || lk == 44997                 // 'schema-element' 'or'
     || lk == 44998                 // 'self' 'or'
     || lk == 45001                 // 'some' 'or'
     || lk == 45002                 // 'stable' 'or'
     || lk == 45003                 // 'start' 'or'
     || lk == 45006                 // 'switch' 'or'
     || lk == 45007                 // 'text' 'or'
     || lk == 45009                 // 'to' 'or'
     || lk == 45011                 // 'treat' 'or'
     || lk == 45012                 // 'try' 'or'
     || lk == 45015                 // 'typeswitch' 'or'
     || lk == 45016                 // 'union' 'or'
     || lk == 45017                 // 'unordered' 'or'
     || lk == 45019                 // 'validate' 'or'
     || lk == 45024                 // 'where' 'or'
     || lk == 45028                 // 'xquery' 'or'
     || lk == 45087                 // '$' 'order'
     || lk == 45088                 // '%' 'order'
     || lk == 45090                 // '(' 'order'
     || lk == 45091                 // '(#' 'order'
     || lk == 45095                 // '+' 'order'
     || lk == 45097                 // '-' 'order'
     || lk == 45101                 // '/' 'order'
     || lk == 45102                 // '//' 'order'
     || lk == 45109                 // '<' 'order'
     || lk == 45121                 // '?' 'order'
     || lk == 45123                 // '@' 'order'
     || lk == 45125                 // '[' 'order'
     || lk == 45141                 // 'attribute' 'order'
     || lk == 45172                 // 'element' 'order'
     || lk == 45220                 // 'namespace' 'order'
     || lk == 45244                 // 'processing-instruction' 'order'
     || lk == 45247                 // 'return' 'order'
     || lk == 45343                 // '$' 'ordered'
     || lk == 45344                 // '%' 'ordered'
     || lk == 45346                 // '(' 'ordered'
     || lk == 45347                 // '(#' 'ordered'
     || lk == 45351                 // '+' 'ordered'
     || lk == 45353                 // '-' 'ordered'
     || lk == 45357                 // '/' 'ordered'
     || lk == 45358                 // '//' 'ordered'
     || lk == 45365                 // '<' 'ordered'
     || lk == 45379                 // '@' 'ordered'
     || lk == 45381                 // '[' 'ordered'
     || lk == 45397                 // 'attribute' 'ordered'
     || lk == 45428                 // 'element' 'ordered'
     || lk == 45503                 // 'return' 'ordered'
     || lk == 45855                 // '$' 'parent'
     || lk == 45856                 // '%' 'parent'
     || lk == 45858                 // '(' 'parent'
     || lk == 45859                 // '(#' 'parent'
     || lk == 45863                 // '+' 'parent'
     || lk == 45865                 // '-' 'parent'
     || lk == 45869                 // '/' 'parent'
     || lk == 45870                 // '//' 'parent'
     || lk == 45877                 // '<' 'parent'
     || lk == 45891                 // '@' 'parent'
     || lk == 45893                 // '[' 'parent'
     || lk == 45909                 // 'attribute' 'parent'
     || lk == 45940                 // 'element' 'parent'
     || lk == 46015                 // 'return' 'parent'
     || lk == 47135                 // '$' 'preceding'
     || lk == 47136                 // '%' 'preceding'
     || lk == 47138                 // '(' 'preceding'
     || lk == 47139                 // '(#' 'preceding'
     || lk == 47143                 // '+' 'preceding'
     || lk == 47145                 // '-' 'preceding'
     || lk == 47149                 // '/' 'preceding'
     || lk == 47150                 // '//' 'preceding'
     || lk == 47157                 // '<' 'preceding'
     || lk == 47171                 // '@' 'preceding'
     || lk == 47173                 // '[' 'preceding'
     || lk == 47189                 // 'attribute' 'preceding'
     || lk == 47220                 // 'element' 'preceding'
     || lk == 47295                 // 'return' 'preceding'
     || lk == 47391                 // '$' 'preceding-sibling'
     || lk == 47392                 // '%' 'preceding-sibling'
     || lk == 47394                 // '(' 'preceding-sibling'
     || lk == 47395                 // '(#' 'preceding-sibling'
     || lk == 47399                 // '+' 'preceding-sibling'
     || lk == 47401                 // '-' 'preceding-sibling'
     || lk == 47405                 // '/' 'preceding-sibling'
     || lk == 47406                 // '//' 'preceding-sibling'
     || lk == 47413                 // '<' 'preceding-sibling'
     || lk == 47427                 // '@' 'preceding-sibling'
     || lk == 47429                 // '[' 'preceding-sibling'
     || lk == 47445                 // 'attribute' 'preceding-sibling'
     || lk == 47476                 // 'element' 'preceding-sibling'
     || lk == 47551                 // 'return' 'preceding-sibling'
     || lk == 48159                 // '$' 'processing-instruction'
     || lk == 48160                 // '%' 'processing-instruction'
     || lk == 48162                 // '(' 'processing-instruction'
     || lk == 48163                 // '(#' 'processing-instruction'
     || lk == 48167                 // '+' 'processing-instruction'
     || lk == 48169                 // '-' 'processing-instruction'
     || lk == 48173                 // '/' 'processing-instruction'
     || lk == 48174                 // '//' 'processing-instruction'
     || lk == 48181                 // '<' 'processing-instruction'
     || lk == 48195                 // '@' 'processing-instruction'
     || lk == 48197                 // '[' 'processing-instruction'
     || lk == 48213                 // 'attribute' 'processing-instruction'
     || lk == 48244                 // 'element' 'processing-instruction'
     || lk == 48319                 // 'return' 'processing-instruction'
     || lk == 48418                 // '(' 'rename'
     || lk == 48453                 // '[' 'rename'
     || lk == 48575                 // 'return' 'rename'
     || lk == 48674                 // '(' 'replace'
     || lk == 48709                 // '[' 'replace'
     || lk == 48831                 // 'return' 'replace'
     || lk == 48927                 // '$' 'return'
     || lk == 48928                 // '%' 'return'
     || lk == 48930                 // '(' 'return'
     || lk == 48931                 // '(#' 'return'
     || lk == 48935                 // '+' 'return'
     || lk == 48937                 // '-' 'return'
     || lk == 48941                 // '/' 'return'
     || lk == 48942                 // '//' 'return'
     || lk == 48949                 // '<' 'return'
     || lk == 48961                 // '?' 'return'
     || lk == 48963                 // '@' 'return'
     || lk == 48965                 // '[' 'return'
     || lk == 48981                 // 'attribute' 'return'
     || lk == 49012                 // 'element' 'return'
     || lk == 49060                 // 'namespace' 'return'
     || lk == 49084                 // 'processing-instruction' 'return'
     || lk == 49087                 // 'return' 'return'
     || lk == 49695                 // '$' 'satisfies'
     || lk == 49696                 // '%' 'satisfies'
     || lk == 49698                 // '(' 'satisfies'
     || lk == 49699                 // '(#' 'satisfies'
     || lk == 49703                 // '+' 'satisfies'
     || lk == 49705                 // '-' 'satisfies'
     || lk == 49709                 // '/' 'satisfies'
     || lk == 49710                 // '//' 'satisfies'
     || lk == 49717                 // '<' 'satisfies'
     || lk == 49729                 // '?' 'satisfies'
     || lk == 49731                 // '@' 'satisfies'
     || lk == 49733                 // '[' 'satisfies'
     || lk == 49749                 // 'attribute' 'satisfies'
     || lk == 49780                 // 'element' 'satisfies'
     || lk == 49828                 // 'namespace' 'satisfies'
     || lk == 49852                 // 'processing-instruction' 'satisfies'
     || lk == 49855                 // 'return' 'satisfies'
     || lk == 50207                 // '$' 'schema-attribute'
     || lk == 50208                 // '%' 'schema-attribute'
     || lk == 50210                 // '(' 'schema-attribute'
     || lk == 50211                 // '(#' 'schema-attribute'
     || lk == 50215                 // '+' 'schema-attribute'
     || lk == 50217                 // '-' 'schema-attribute'
     || lk == 50221                 // '/' 'schema-attribute'
     || lk == 50222                 // '//' 'schema-attribute'
     || lk == 50229                 // '<' 'schema-attribute'
     || lk == 50243                 // '@' 'schema-attribute'
     || lk == 50245                 // '[' 'schema-attribute'
     || lk == 50261                 // 'attribute' 'schema-attribute'
     || lk == 50292                 // 'element' 'schema-attribute'
     || lk == 50367                 // 'return' 'schema-attribute'
     || lk == 50463                 // '$' 'schema-element'
     || lk == 50464                 // '%' 'schema-element'
     || lk == 50466                 // '(' 'schema-element'
     || lk == 50467                 // '(#' 'schema-element'
     || lk == 50471                 // '+' 'schema-element'
     || lk == 50473                 // '-' 'schema-element'
     || lk == 50477                 // '/' 'schema-element'
     || lk == 50478                 // '//' 'schema-element'
     || lk == 50485                 // '<' 'schema-element'
     || lk == 50499                 // '@' 'schema-element'
     || lk == 50501                 // '[' 'schema-element'
     || lk == 50517                 // 'attribute' 'schema-element'
     || lk == 50548                 // 'element' 'schema-element'
     || lk == 50623                 // 'return' 'schema-element'
     || lk == 50719                 // '$' 'self'
     || lk == 50720                 // '%' 'self'
     || lk == 50722                 // '(' 'self'
     || lk == 50723                 // '(#' 'self'
     || lk == 50727                 // '+' 'self'
     || lk == 50729                 // '-' 'self'
     || lk == 50733                 // '/' 'self'
     || lk == 50734                 // '//' 'self'
     || lk == 50741                 // '<' 'self'
     || lk == 50755                 // '@' 'self'
     || lk == 50757                 // '[' 'self'
     || lk == 50773                 // 'attribute' 'self'
     || lk == 50804                 // 'element' 'self'
     || lk == 50879                 // 'return' 'self'
     || lk == 51331                 // 'for' 'sliding'
     || lk == 51487                 // '$' 'some'
     || lk == 51488                 // '%' 'some'
     || lk == 51490                 // '(' 'some'
     || lk == 51491                 // '(#' 'some'
     || lk == 51495                 // '+' 'some'
     || lk == 51497                 // '-' 'some'
     || lk == 51501                 // '/' 'some'
     || lk == 51502                 // '//' 'some'
     || lk == 51509                 // '<' 'some'
     || lk == 51523                 // '@' 'some'
     || lk == 51525                 // '[' 'some'
     || lk == 51541                 // 'attribute' 'some'
     || lk == 51572                 // 'element' 'some'
     || lk == 51647                 // 'return' 'some'
     || lk == 51743                 // '$' 'stable'
     || lk == 51744                 // '%' 'stable'
     || lk == 51746                 // '(' 'stable'
     || lk == 51747                 // '(#' 'stable'
     || lk == 51751                 // '+' 'stable'
     || lk == 51753                 // '-' 'stable'
     || lk == 51757                 // '/' 'stable'
     || lk == 51758                 // '//' 'stable'
     || lk == 51765                 // '<' 'stable'
     || lk == 51777                 // '?' 'stable'
     || lk == 51779                 // '@' 'stable'
     || lk == 51781                 // '[' 'stable'
     || lk == 51797                 // 'attribute' 'stable'
     || lk == 51828                 // 'element' 'stable'
     || lk == 51876                 // 'namespace' 'stable'
     || lk == 51900                 // 'processing-instruction' 'stable'
     || lk == 51903                 // 'return' 'stable'
     || lk == 51999                 // '$' 'start'
     || lk == 52000                 // '%' 'start'
     || lk == 52002                 // '(' 'start'
     || lk == 52003                 // '(#' 'start'
     || lk == 52007                 // '+' 'start'
     || lk == 52009                 // '-' 'start'
     || lk == 52013                 // '/' 'start'
     || lk == 52014                 // '//' 'start'
     || lk == 52021                 // '<' 'start'
     || lk == 52033                 // '?' 'start'
     || lk == 52035                 // '@' 'start'
     || lk == 52037                 // '[' 'start'
     || lk == 52053                 // 'attribute' 'start'
     || lk == 52084                 // 'element' 'start'
     || lk == 52132                 // 'namespace' 'start'
     || lk == 52156                 // 'processing-instruction' 'start'
     || lk == 52159                 // 'return' 'start'
     || lk == 52443                 // 'validate' 'strict'
     || lk == 52767                 // '$' 'switch'
     || lk == 52768                 // '%' 'switch'
     || lk == 52770                 // '(' 'switch'
     || lk == 52771                 // '(#' 'switch'
     || lk == 52775                 // '+' 'switch'
     || lk == 52777                 // '-' 'switch'
     || lk == 52781                 // '/' 'switch'
     || lk == 52782                 // '//' 'switch'
     || lk == 52789                 // '<' 'switch'
     || lk == 52803                 // '@' 'switch'
     || lk == 52805                 // '[' 'switch'
     || lk == 52821                 // 'attribute' 'switch'
     || lk == 52852                 // 'element' 'switch'
     || lk == 52927                 // 'return' 'switch'
     || lk == 53023                 // '$' 'text'
     || lk == 53024                 // '%' 'text'
     || lk == 53026                 // '(' 'text'
     || lk == 53027                 // '(#' 'text'
     || lk == 53031                 // '+' 'text'
     || lk == 53033                 // '-' 'text'
     || lk == 53037                 // '/' 'text'
     || lk == 53038                 // '//' 'text'
     || lk == 53045                 // '<' 'text'
     || lk == 53059                 // '@' 'text'
     || lk == 53061                 // '[' 'text'
     || lk == 53077                 // 'attribute' 'text'
     || lk == 53108                 // 'element' 'text'
     || lk == 53183                 // 'return' 'text'
     || lk == 53505                 // IntegerLiteral 'to'
     || lk == 53506                 // DecimalLiteral 'to'
     || lk == 53507                 // DoubleLiteral 'to'
     || lk == 53508                 // StringLiteral 'to'
     || lk == 53509                 // URIQualifiedName 'to'
     || lk == 53519                 // QName^Token 'to'
     || lk == 53525                 // Wildcard 'to'
     || lk == 53535                 // '$' 'to'
     || lk == 53536                 // '%' 'to'
     || lk == 53538                 // '(' 'to'
     || lk == 53539                 // '(#' 'to'
     || lk == 53543                 // '+' 'to'
     || lk == 53545                 // '-' 'to'
     || lk == 53547                 // '.' 'to'
     || lk == 53548                 // '..' 'to'
     || lk == 53549                 // '/' 'to'
     || lk == 53550                 // '//' 'to'
     || lk == 53557                 // '<' 'to'
     || lk == 53569                 // '?' 'to'
     || lk == 53571                 // '@' 'to'
     || lk == 53573                 // '[' 'to'
     || lk == 53581                 // 'ancestor' 'to'
     || lk == 53582                 // 'ancestor-or-self' 'to'
     || lk == 53583                 // 'and' 'to'
     || lk == 53585                 // 'array' 'to'
     || lk == 53587                 // 'ascending' 'to'
     || lk == 53589                 // 'attribute' 'to'
     || lk == 53595                 // 'case' 'to'
     || lk == 53596                 // 'cast' 'to'
     || lk == 53597                 // 'castable' 'to'
     || lk == 53599                 // 'child' 'to'
     || lk == 53600                 // 'collation' 'to'
     || lk == 53601                 // 'comment' 'to'
     || lk == 53607                 // 'count' 'to'
     || lk == 53610                 // 'declare' 'to'
     || lk == 53611                 // 'default' 'to'
     || lk == 53613                 // 'descendant' 'to'
     || lk == 53614                 // 'descendant-or-self' 'to'
     || lk == 53615                 // 'descending' 'to'
     || lk == 53617                 // 'div' 'to'
     || lk == 53618                 // 'document' 'to'
     || lk == 53619                 // 'document-node' 'to'
     || lk == 53620                 // 'element' 'to'
     || lk == 53621                 // 'else' 'to'
     || lk == 53622                 // 'empty' 'to'
     || lk == 53623                 // 'empty-sequence' 'to'
     || lk == 53625                 // 'end' 'to'
     || lk == 53626                 // 'eq' 'to'
     || lk == 53627                 // 'every' 'to'
     || lk == 53628                 // 'except' 'to'
     || lk == 53633                 // 'following' 'to'
     || lk == 53634                 // 'following-sibling' 'to'
     || lk == 53635                 // 'for' 'to'
     || lk == 53636                 // 'function' 'to'
     || lk == 53637                 // 'ge' 'to'
     || lk == 53639                 // 'group' 'to'
     || lk == 53641                 // 'gt' 'to'
     || lk == 53642                 // 'idiv' 'to'
     || lk == 53643                 // 'if' 'to'
     || lk == 53644                 // 'import' 'to'
     || lk == 53649                 // 'instance' 'to'
     || lk == 53650                 // 'intersect' 'to'
     || lk == 53653                 // 'is' 'to'
     || lk == 53654                 // 'item' 'to'
     || lk == 53658                 // 'le' 'to'
     || lk == 53660                 // 'let' 'to'
     || lk == 53662                 // 'lt' 'to'
     || lk == 53663                 // 'map' 'to'
     || lk == 53665                 // 'mod' 'to'
     || lk == 53667                 // 'module' 'to'
     || lk == 53668                 // 'namespace' 'to'
     || lk == 53669                 // 'namespace-node' 'to'
     || lk == 53670                 // 'ne' 'to'
     || lk == 53674                 // 'node' 'to'
     || lk == 53677                 // 'only' 'to'
     || lk == 53679                 // 'or' 'to'
     || lk == 53680                 // 'order' 'to'
     || lk == 53681                 // 'ordered' 'to'
     || lk == 53683                 // 'parent' 'to'
     || lk == 53688                 // 'preceding' 'to'
     || lk == 53689                 // 'preceding-sibling' 'to'
     || lk == 53692                 // 'processing-instruction' 'to'
     || lk == 53695                 // 'return' 'to'
     || lk == 53698                 // 'satisfies' 'to'
     || lk == 53700                 // 'schema-attribute' 'to'
     || lk == 53701                 // 'schema-element' 'to'
     || lk == 53702                 // 'self' 'to'
     || lk == 53705                 // 'some' 'to'
     || lk == 53706                 // 'stable' 'to'
     || lk == 53707                 // 'start' 'to'
     || lk == 53710                 // 'switch' 'to'
     || lk == 53711                 // 'text' 'to'
     || lk == 53713                 // 'to' 'to'
     || lk == 53715                 // 'treat' 'to'
     || lk == 53716                 // 'try' 'to'
     || lk == 53719                 // 'typeswitch' 'to'
     || lk == 53720                 // 'union' 'to'
     || lk == 53721                 // 'unordered' 'to'
     || lk == 53723                 // 'validate' 'to'
     || lk == 53728                 // 'where' 'to'
     || lk == 53732                 // 'xquery' 'to'
     || lk == 53761                 // IntegerLiteral 'transform'
     || lk == 53762                 // DecimalLiteral 'transform'
     || lk == 53763                 // DoubleLiteral 'transform'
     || lk == 53764                 // StringLiteral 'transform'
     || lk == 53765                 // URIQualifiedName 'transform'
     || lk == 53775                 // QName^Token 'transform'
     || lk == 53781                 // Wildcard 'transform'
     || lk == 53803                 // '.' 'transform'
     || lk == 53804                 // '..' 'transform'
     || lk == 53805                 // '/' 'transform'
     || lk == 53837                 // 'ancestor' 'transform'
     || lk == 53838                 // 'ancestor-or-self' 'transform'
     || lk == 53839                 // 'and' 'transform'
     || lk == 53841                 // 'array' 'transform'
     || lk == 53843                 // 'ascending' 'transform'
     || lk == 53845                 // 'attribute' 'transform'
     || lk == 53851                 // 'case' 'transform'
     || lk == 53852                 // 'cast' 'transform'
     || lk == 53853                 // 'castable' 'transform'
     || lk == 53855                 // 'child' 'transform'
     || lk == 53856                 // 'collation' 'transform'
     || lk == 53857                 // 'comment' 'transform'
     || lk == 53863                 // 'count' 'transform'
     || lk == 53866                 // 'declare' 'transform'
     || lk == 53867                 // 'default' 'transform'
     || lk == 53869                 // 'descendant' 'transform'
     || lk == 53870                 // 'descendant-or-self' 'transform'
     || lk == 53871                 // 'descending' 'transform'
     || lk == 53873                 // 'div' 'transform'
     || lk == 53874                 // 'document' 'transform'
     || lk == 53875                 // 'document-node' 'transform'
     || lk == 53876                 // 'element' 'transform'
     || lk == 53877                 // 'else' 'transform'
     || lk == 53878                 // 'empty' 'transform'
     || lk == 53879                 // 'empty-sequence' 'transform'
     || lk == 53881                 // 'end' 'transform'
     || lk == 53882                 // 'eq' 'transform'
     || lk == 53883                 // 'every' 'transform'
     || lk == 53884                 // 'except' 'transform'
     || lk == 53889                 // 'following' 'transform'
     || lk == 53890                 // 'following-sibling' 'transform'
     || lk == 53891                 // 'for' 'transform'
     || lk == 53892                 // 'function' 'transform'
     || lk == 53893                 // 'ge' 'transform'
     || lk == 53895                 // 'group' 'transform'
     || lk == 53897                 // 'gt' 'transform'
     || lk == 53898                 // 'idiv' 'transform'
     || lk == 53899                 // 'if' 'transform'
     || lk == 53900                 // 'import' 'transform'
     || lk == 53905                 // 'instance' 'transform'
     || lk == 53906                 // 'intersect' 'transform'
     || lk == 53909                 // 'is' 'transform'
     || lk == 53910                 // 'item' 'transform'
     || lk == 53914                 // 'le' 'transform'
     || lk == 53916                 // 'let' 'transform'
     || lk == 53918                 // 'lt' 'transform'
     || lk == 53919                 // 'map' 'transform'
     || lk == 53921                 // 'mod' 'transform'
     || lk == 53923                 // 'module' 'transform'
     || lk == 53924                 // 'namespace' 'transform'
     || lk == 53925                 // 'namespace-node' 'transform'
     || lk == 53926                 // 'ne' 'transform'
     || lk == 53930                 // 'node' 'transform'
     || lk == 53933                 // 'only' 'transform'
     || lk == 53935                 // 'or' 'transform'
     || lk == 53936                 // 'order' 'transform'
     || lk == 53937                 // 'ordered' 'transform'
     || lk == 53939                 // 'parent' 'transform'
     || lk == 53944                 // 'preceding' 'transform'
     || lk == 53945                 // 'preceding-sibling' 'transform'
     || lk == 53948                 // 'processing-instruction' 'transform'
     || lk == 53951                 // 'return' 'transform'
     || lk == 53954                 // 'satisfies' 'transform'
     || lk == 53956                 // 'schema-attribute' 'transform'
     || lk == 53957                 // 'schema-element' 'transform'
     || lk == 53958                 // 'self' 'transform'
     || lk == 53961                 // 'some' 'transform'
     || lk == 53962                 // 'stable' 'transform'
     || lk == 53963                 // 'start' 'transform'
     || lk == 53966                 // 'switch' 'transform'
     || lk == 53967                 // 'text' 'transform'
     || lk == 53969                 // 'to' 'transform'
     || lk == 53971                 // 'treat' 'transform'
     || lk == 53972                 // 'try' 'transform'
     || lk == 53975                 // 'typeswitch' 'transform'
     || lk == 53976                 // 'union' 'transform'
     || lk == 53977                 // 'unordered' 'transform'
     || lk == 53979                 // 'validate' 'transform'
     || lk == 53984                 // 'where' 'transform'
     || lk == 53988                 // 'xquery' 'transform'
     || lk == 54017                 // IntegerLiteral 'treat'
     || lk == 54018                 // DecimalLiteral 'treat'
     || lk == 54019                 // DoubleLiteral 'treat'
     || lk == 54020                 // StringLiteral 'treat'
     || lk == 54021                 // URIQualifiedName 'treat'
     || lk == 54031                 // QName^Token 'treat'
     || lk == 54037                 // Wildcard 'treat'
     || lk == 54047                 // '$' 'treat'
     || lk == 54048                 // '%' 'treat'
     || lk == 54050                 // '(' 'treat'
     || lk == 54051                 // '(#' 'treat'
     || lk == 54055                 // '+' 'treat'
     || lk == 54057                 // '-' 'treat'
     || lk == 54059                 // '.' 'treat'
     || lk == 54060                 // '..' 'treat'
     || lk == 54061                 // '/' 'treat'
     || lk == 54062                 // '//' 'treat'
     || lk == 54069                 // '<' 'treat'
     || lk == 54081                 // '?' 'treat'
     || lk == 54083                 // '@' 'treat'
     || lk == 54085                 // '[' 'treat'
     || lk == 54093                 // 'ancestor' 'treat'
     || lk == 54094                 // 'ancestor-or-self' 'treat'
     || lk == 54095                 // 'and' 'treat'
     || lk == 54097                 // 'array' 'treat'
     || lk == 54099                 // 'ascending' 'treat'
     || lk == 54101                 // 'attribute' 'treat'
     || lk == 54107                 // 'case' 'treat'
     || lk == 54108                 // 'cast' 'treat'
     || lk == 54109                 // 'castable' 'treat'
     || lk == 54111                 // 'child' 'treat'
     || lk == 54112                 // 'collation' 'treat'
     || lk == 54113                 // 'comment' 'treat'
     || lk == 54119                 // 'count' 'treat'
     || lk == 54122                 // 'declare' 'treat'
     || lk == 54123                 // 'default' 'treat'
     || lk == 54125                 // 'descendant' 'treat'
     || lk == 54126                 // 'descendant-or-self' 'treat'
     || lk == 54127                 // 'descending' 'treat'
     || lk == 54129                 // 'div' 'treat'
     || lk == 54130                 // 'document' 'treat'
     || lk == 54131                 // 'document-node' 'treat'
     || lk == 54132                 // 'element' 'treat'
     || lk == 54133                 // 'else' 'treat'
     || lk == 54134                 // 'empty' 'treat'
     || lk == 54135                 // 'empty-sequence' 'treat'
     || lk == 54137                 // 'end' 'treat'
     || lk == 54138                 // 'eq' 'treat'
     || lk == 54139                 // 'every' 'treat'
     || lk == 54140                 // 'except' 'treat'
     || lk == 54145                 // 'following' 'treat'
     || lk == 54146                 // 'following-sibling' 'treat'
     || lk == 54147                 // 'for' 'treat'
     || lk == 54148                 // 'function' 'treat'
     || lk == 54149                 // 'ge' 'treat'
     || lk == 54151                 // 'group' 'treat'
     || lk == 54153                 // 'gt' 'treat'
     || lk == 54154                 // 'idiv' 'treat'
     || lk == 54155                 // 'if' 'treat'
     || lk == 54156                 // 'import' 'treat'
     || lk == 54161                 // 'instance' 'treat'
     || lk == 54162                 // 'intersect' 'treat'
     || lk == 54165                 // 'is' 'treat'
     || lk == 54166                 // 'item' 'treat'
     || lk == 54170                 // 'le' 'treat'
     || lk == 54172                 // 'let' 'treat'
     || lk == 54174                 // 'lt' 'treat'
     || lk == 54175                 // 'map' 'treat'
     || lk == 54177                 // 'mod' 'treat'
     || lk == 54179                 // 'module' 'treat'
     || lk == 54180                 // 'namespace' 'treat'
     || lk == 54181                 // 'namespace-node' 'treat'
     || lk == 54182                 // 'ne' 'treat'
     || lk == 54186                 // 'node' 'treat'
     || lk == 54189                 // 'only' 'treat'
     || lk == 54191                 // 'or' 'treat'
     || lk == 54192                 // 'order' 'treat'
     || lk == 54193                 // 'ordered' 'treat'
     || lk == 54195                 // 'parent' 'treat'
     || lk == 54200                 // 'preceding' 'treat'
     || lk == 54201                 // 'preceding-sibling' 'treat'
     || lk == 54204                 // 'processing-instruction' 'treat'
     || lk == 54207                 // 'return' 'treat'
     || lk == 54210                 // 'satisfies' 'treat'
     || lk == 54212                 // 'schema-attribute' 'treat'
     || lk == 54213                 // 'schema-element' 'treat'
     || lk == 54214                 // 'self' 'treat'
     || lk == 54217                 // 'some' 'treat'
     || lk == 54218                 // 'stable' 'treat'
     || lk == 54219                 // 'start' 'treat'
     || lk == 54222                 // 'switch' 'treat'
     || lk == 54223                 // 'text' 'treat'
     || lk == 54225                 // 'to' 'treat'
     || lk == 54227                 // 'treat' 'treat'
     || lk == 54228                 // 'try' 'treat'
     || lk == 54231                 // 'typeswitch' 'treat'
     || lk == 54232                 // 'union' 'treat'
     || lk == 54233                 // 'unordered' 'treat'
     || lk == 54235                 // 'validate' 'treat'
     || lk == 54240                 // 'where' 'treat'
     || lk == 54244                 // 'xquery' 'treat'
     || lk == 54303                 // '$' 'try'
     || lk == 54304                 // '%' 'try'
     || lk == 54306                 // '(' 'try'
     || lk == 54307                 // '(#' 'try'
     || lk == 54311                 // '+' 'try'
     || lk == 54313                 // '-' 'try'
     || lk == 54317                 // '/' 'try'
     || lk == 54318                 // '//' 'try'
     || lk == 54325                 // '<' 'try'
     || lk == 54339                 // '@' 'try'
     || lk == 54341                 // '[' 'try'
     || lk == 54357                 // 'attribute' 'try'
     || lk == 54388                 // 'element' 'try'
     || lk == 54463                 // 'return' 'try'
     || lk == 54659                 // 'for' 'tumbling'
     || lk == 55003                 // 'validate' 'type'
     || lk == 55071                 // '$' 'typeswitch'
     || lk == 55072                 // '%' 'typeswitch'
     || lk == 55074                 // '(' 'typeswitch'
     || lk == 55075                 // '(#' 'typeswitch'
     || lk == 55079                 // '+' 'typeswitch'
     || lk == 55081                 // '-' 'typeswitch'
     || lk == 55085                 // '/' 'typeswitch'
     || lk == 55086                 // '//' 'typeswitch'
     || lk == 55093                 // '<' 'typeswitch'
     || lk == 55107                 // '@' 'typeswitch'
     || lk == 55109                 // '[' 'typeswitch'
     || lk == 55125                 // 'attribute' 'typeswitch'
     || lk == 55156                 // 'element' 'typeswitch'
     || lk == 55231                 // 'return' 'typeswitch'
     || lk == 55297                 // IntegerLiteral 'union'
     || lk == 55298                 // DecimalLiteral 'union'
     || lk == 55299                 // DoubleLiteral 'union'
     || lk == 55300                 // StringLiteral 'union'
     || lk == 55301                 // URIQualifiedName 'union'
     || lk == 55311                 // QName^Token 'union'
     || lk == 55317                 // Wildcard 'union'
     || lk == 55327                 // '$' 'union'
     || lk == 55328                 // '%' 'union'
     || lk == 55330                 // '(' 'union'
     || lk == 55331                 // '(#' 'union'
     || lk == 55335                 // '+' 'union'
     || lk == 55337                 // '-' 'union'
     || lk == 55339                 // '.' 'union'
     || lk == 55340                 // '..' 'union'
     || lk == 55341                 // '/' 'union'
     || lk == 55342                 // '//' 'union'
     || lk == 55349                 // '<' 'union'
     || lk == 55361                 // '?' 'union'
     || lk == 55363                 // '@' 'union'
     || lk == 55365                 // '[' 'union'
     || lk == 55373                 // 'ancestor' 'union'
     || lk == 55374                 // 'ancestor-or-self' 'union'
     || lk == 55375                 // 'and' 'union'
     || lk == 55377                 // 'array' 'union'
     || lk == 55379                 // 'ascending' 'union'
     || lk == 55381                 // 'attribute' 'union'
     || lk == 55387                 // 'case' 'union'
     || lk == 55388                 // 'cast' 'union'
     || lk == 55389                 // 'castable' 'union'
     || lk == 55391                 // 'child' 'union'
     || lk == 55392                 // 'collation' 'union'
     || lk == 55393                 // 'comment' 'union'
     || lk == 55399                 // 'count' 'union'
     || lk == 55402                 // 'declare' 'union'
     || lk == 55403                 // 'default' 'union'
     || lk == 55405                 // 'descendant' 'union'
     || lk == 55406                 // 'descendant-or-self' 'union'
     || lk == 55407                 // 'descending' 'union'
     || lk == 55409                 // 'div' 'union'
     || lk == 55410                 // 'document' 'union'
     || lk == 55411                 // 'document-node' 'union'
     || lk == 55412                 // 'element' 'union'
     || lk == 55413                 // 'else' 'union'
     || lk == 55414                 // 'empty' 'union'
     || lk == 55415                 // 'empty-sequence' 'union'
     || lk == 55417                 // 'end' 'union'
     || lk == 55418                 // 'eq' 'union'
     || lk == 55419                 // 'every' 'union'
     || lk == 55420                 // 'except' 'union'
     || lk == 55425                 // 'following' 'union'
     || lk == 55426                 // 'following-sibling' 'union'
     || lk == 55427                 // 'for' 'union'
     || lk == 55428                 // 'function' 'union'
     || lk == 55429                 // 'ge' 'union'
     || lk == 55431                 // 'group' 'union'
     || lk == 55433                 // 'gt' 'union'
     || lk == 55434                 // 'idiv' 'union'
     || lk == 55435                 // 'if' 'union'
     || lk == 55436                 // 'import' 'union'
     || lk == 55441                 // 'instance' 'union'
     || lk == 55442                 // 'intersect' 'union'
     || lk == 55445                 // 'is' 'union'
     || lk == 55446                 // 'item' 'union'
     || lk == 55450                 // 'le' 'union'
     || lk == 55452                 // 'let' 'union'
     || lk == 55454                 // 'lt' 'union'
     || lk == 55455                 // 'map' 'union'
     || lk == 55457                 // 'mod' 'union'
     || lk == 55459                 // 'module' 'union'
     || lk == 55460                 // 'namespace' 'union'
     || lk == 55461                 // 'namespace-node' 'union'
     || lk == 55462                 // 'ne' 'union'
     || lk == 55466                 // 'node' 'union'
     || lk == 55469                 // 'only' 'union'
     || lk == 55471                 // 'or' 'union'
     || lk == 55472                 // 'order' 'union'
     || lk == 55473                 // 'ordered' 'union'
     || lk == 55475                 // 'parent' 'union'
     || lk == 55480                 // 'preceding' 'union'
     || lk == 55481                 // 'preceding-sibling' 'union'
     || lk == 55484                 // 'processing-instruction' 'union'
     || lk == 55487                 // 'return' 'union'
     || lk == 55490                 // 'satisfies' 'union'
     || lk == 55492                 // 'schema-attribute' 'union'
     || lk == 55493                 // 'schema-element' 'union'
     || lk == 55494                 // 'self' 'union'
     || lk == 55497                 // 'some' 'union'
     || lk == 55498                 // 'stable' 'union'
     || lk == 55499                 // 'start' 'union'
     || lk == 55502                 // 'switch' 'union'
     || lk == 55503                 // 'text' 'union'
     || lk == 55505                 // 'to' 'union'
     || lk == 55507                 // 'treat' 'union'
     || lk == 55508                 // 'try' 'union'
     || lk == 55511                 // 'typeswitch' 'union'
     || lk == 55512                 // 'union' 'union'
     || lk == 55513                 // 'unordered' 'union'
     || lk == 55515                 // 'validate' 'union'
     || lk == 55520                 // 'where' 'union'
     || lk == 55524                 // 'xquery' 'union'
     || lk == 55583                 // '$' 'unordered'
     || lk == 55584                 // '%' 'unordered'
     || lk == 55586                 // '(' 'unordered'
     || lk == 55587                 // '(#' 'unordered'
     || lk == 55591                 // '+' 'unordered'
     || lk == 55593                 // '-' 'unordered'
     || lk == 55597                 // '/' 'unordered'
     || lk == 55598                 // '//' 'unordered'
     || lk == 55605                 // '<' 'unordered'
     || lk == 55619                 // '@' 'unordered'
     || lk == 55621                 // '[' 'unordered'
     || lk == 55637                 // 'attribute' 'unordered'
     || lk == 55668                 // 'element' 'unordered'
     || lk == 55743                 // 'return' 'unordered'
     || lk == 55956                 // 'invoke' 'updating'
     || lk == 56095                 // '$' 'validate'
     || lk == 56096                 // '%' 'validate'
     || lk == 56098                 // '(' 'validate'
     || lk == 56099                 // '(#' 'validate'
     || lk == 56103                 // '+' 'validate'
     || lk == 56105                 // '-' 'validate'
     || lk == 56109                 // '/' 'validate'
     || lk == 56110                 // '//' 'validate'
     || lk == 56117                 // '<' 'validate'
     || lk == 56131                 // '@' 'validate'
     || lk == 56133                 // '[' 'validate'
     || lk == 56149                 // 'attribute' 'validate'
     || lk == 56180                 // 'element' 'validate'
     || lk == 56255                 // 'return' 'validate'
     || lk == 56510                 // 'replace' 'value'
     || lk == 57375                 // '$' 'where'
     || lk == 57376                 // '%' 'where'
     || lk == 57378                 // '(' 'where'
     || lk == 57379                 // '(#' 'where'
     || lk == 57383                 // '+' 'where'
     || lk == 57385                 // '-' 'where'
     || lk == 57389                 // '/' 'where'
     || lk == 57390                 // '//' 'where'
     || lk == 57397                 // '<' 'where'
     || lk == 57409                 // '?' 'where'
     || lk == 57411                 // '@' 'where'
     || lk == 57413                 // '[' 'where'
     || lk == 57429                 // 'attribute' 'where'
     || lk == 57460                 // 'element' 'where'
     || lk == 57508                 // 'namespace' 'where'
     || lk == 57532                 // 'processing-instruction' 'where'
     || lk == 57535                 // 'return' 'where'
     || lk == 58399                 // '$' 'xquery'
     || lk == 58400                 // '%' 'xquery'
     || lk == 58402                 // '(' 'xquery'
     || lk == 58403                 // '(#' 'xquery'
     || lk == 58407                 // '+' 'xquery'
     || lk == 58409                 // '-' 'xquery'
     || lk == 58413                 // '/' 'xquery'
     || lk == 58414                 // '//' 'xquery'
     || lk == 58421                 // '<' 'xquery'
     || lk == 58435                 // '@' 'xquery'
     || lk == 58437                 // '[' 'xquery'
     || lk == 58453                 // 'attribute' 'xquery'
     || lk == 58484                 // 'element' 'xquery'
     || lk == 58559                 // 'return' 'xquery'
     || lk == 58961                 // 'array' '{'
     || lk == 58965                 // 'attribute' '{'
     || lk == 58977                 // 'comment' '{'
     || lk == 58994                 // 'document' '{'
     || lk == 58996                 // 'element' '{'
     || lk == 59039                 // 'map' '{'
     || lk == 59044                 // 'namespace' '{'
     || lk == 59057                 // 'ordered' '{'
     || lk == 59068                 // 'processing-instruction' '{'
     || lk == 59087                 // 'text' '{'
     || lk == 59092                 // 'try' '{'
     || lk == 59097                 // 'unordered' '{'
     || lk == 59099                 // 'validate' '{'
     || lk == 59393                 // IntegerLiteral '|'
     || lk == 59394                 // DecimalLiteral '|'
     || lk == 59395                 // DoubleLiteral '|'
     || lk == 59396                 // StringLiteral '|'
     || lk == 59397                 // URIQualifiedName '|'
     || lk == 59407                 // QName^Token '|'
     || lk == 59413                 // Wildcard '|'
     || lk == 59435                 // '.' '|'
     || lk == 59436                 // '..' '|'
     || lk == 59437                 // '/' '|'
     || lk == 59469                 // 'ancestor' '|'
     || lk == 59470                 // 'ancestor-or-self' '|'
     || lk == 59471                 // 'and' '|'
     || lk == 59473                 // 'array' '|'
     || lk == 59475                 // 'ascending' '|'
     || lk == 59477                 // 'attribute' '|'
     || lk == 59483                 // 'case' '|'
     || lk == 59484                 // 'cast' '|'
     || lk == 59485                 // 'castable' '|'
     || lk == 59487                 // 'child' '|'
     || lk == 59488                 // 'collation' '|'
     || lk == 59489                 // 'comment' '|'
     || lk == 59495                 // 'count' '|'
     || lk == 59498                 // 'declare' '|'
     || lk == 59499                 // 'default' '|'
     || lk == 59501                 // 'descendant' '|'
     || lk == 59502                 // 'descendant-or-self' '|'
     || lk == 59503                 // 'descending' '|'
     || lk == 59505                 // 'div' '|'
     || lk == 59506                 // 'document' '|'
     || lk == 59507                 // 'document-node' '|'
     || lk == 59508                 // 'element' '|'
     || lk == 59509                 // 'else' '|'
     || lk == 59510                 // 'empty' '|'
     || lk == 59511                 // 'empty-sequence' '|'
     || lk == 59513                 // 'end' '|'
     || lk == 59514                 // 'eq' '|'
     || lk == 59515                 // 'every' '|'
     || lk == 59516                 // 'except' '|'
     || lk == 59521                 // 'following' '|'
     || lk == 59522                 // 'following-sibling' '|'
     || lk == 59523                 // 'for' '|'
     || lk == 59524                 // 'function' '|'
     || lk == 59525                 // 'ge' '|'
     || lk == 59527                 // 'group' '|'
     || lk == 59529                 // 'gt' '|'
     || lk == 59530                 // 'idiv' '|'
     || lk == 59531                 // 'if' '|'
     || lk == 59532                 // 'import' '|'
     || lk == 59537                 // 'instance' '|'
     || lk == 59538                 // 'intersect' '|'
     || lk == 59541                 // 'is' '|'
     || lk == 59542                 // 'item' '|'
     || lk == 59546                 // 'le' '|'
     || lk == 59548                 // 'let' '|'
     || lk == 59550                 // 'lt' '|'
     || lk == 59551                 // 'map' '|'
     || lk == 59553                 // 'mod' '|'
     || lk == 59555                 // 'module' '|'
     || lk == 59556                 // 'namespace' '|'
     || lk == 59557                 // 'namespace-node' '|'
     || lk == 59558                 // 'ne' '|'
     || lk == 59562                 // 'node' '|'
     || lk == 59565                 // 'only' '|'
     || lk == 59567                 // 'or' '|'
     || lk == 59568                 // 'order' '|'
     || lk == 59569                 // 'ordered' '|'
     || lk == 59571                 // 'parent' '|'
     || lk == 59576                 // 'preceding' '|'
     || lk == 59577                 // 'preceding-sibling' '|'
     || lk == 59580                 // 'processing-instruction' '|'
     || lk == 59583                 // 'return' '|'
     || lk == 59586                 // 'satisfies' '|'
     || lk == 59588                 // 'schema-attribute' '|'
     || lk == 59589                 // 'schema-element' '|'
     || lk == 59590                 // 'self' '|'
     || lk == 59593                 // 'some' '|'
     || lk == 59594                 // 'stable' '|'
     || lk == 59595                 // 'start' '|'
     || lk == 59598                 // 'switch' '|'
     || lk == 59599                 // 'text' '|'
     || lk == 59601                 // 'to' '|'
     || lk == 59603                 // 'treat' '|'
     || lk == 59604                 // 'try' '|'
     || lk == 59607                 // 'typeswitch' '|'
     || lk == 59608                 // 'union' '|'
     || lk == 59609                 // 'unordered' '|'
     || lk == 59611                 // 'validate' '|'
     || lk == 59616                 // 'where' '|'
     || lk == 59620                 // 'xquery' '|'
     || lk == 59649                 // IntegerLiteral '||'
     || lk == 59650                 // DecimalLiteral '||'
     || lk == 59651                 // DoubleLiteral '||'
     || lk == 59652                 // StringLiteral '||'
     || lk == 59653                 // URIQualifiedName '||'
     || lk == 59663                 // QName^Token '||'
     || lk == 59669                 // Wildcard '||'
     || lk == 59691                 // '.' '||'
     || lk == 59692                 // '..' '||'
     || lk == 59693                 // '/' '||'
     || lk == 59725                 // 'ancestor' '||'
     || lk == 59726                 // 'ancestor-or-self' '||'
     || lk == 59727                 // 'and' '||'
     || lk == 59729                 // 'array' '||'
     || lk == 59731                 // 'ascending' '||'
     || lk == 59733                 // 'attribute' '||'
     || lk == 59739                 // 'case' '||'
     || lk == 59740                 // 'cast' '||'
     || lk == 59741                 // 'castable' '||'
     || lk == 59743                 // 'child' '||'
     || lk == 59744                 // 'collation' '||'
     || lk == 59745                 // 'comment' '||'
     || lk == 59751                 // 'count' '||'
     || lk == 59754                 // 'declare' '||'
     || lk == 59755                 // 'default' '||'
     || lk == 59757                 // 'descendant' '||'
     || lk == 59758                 // 'descendant-or-self' '||'
     || lk == 59759                 // 'descending' '||'
     || lk == 59761                 // 'div' '||'
     || lk == 59762                 // 'document' '||'
     || lk == 59763                 // 'document-node' '||'
     || lk == 59764                 // 'element' '||'
     || lk == 59765                 // 'else' '||'
     || lk == 59766                 // 'empty' '||'
     || lk == 59767                 // 'empty-sequence' '||'
     || lk == 59769                 // 'end' '||'
     || lk == 59770                 // 'eq' '||'
     || lk == 59771                 // 'every' '||'
     || lk == 59772                 // 'except' '||'
     || lk == 59777                 // 'following' '||'
     || lk == 59778                 // 'following-sibling' '||'
     || lk == 59779                 // 'for' '||'
     || lk == 59780                 // 'function' '||'
     || lk == 59781                 // 'ge' '||'
     || lk == 59783                 // 'group' '||'
     || lk == 59785                 // 'gt' '||'
     || lk == 59786                 // 'idiv' '||'
     || lk == 59787                 // 'if' '||'
     || lk == 59788                 // 'import' '||'
     || lk == 59793                 // 'instance' '||'
     || lk == 59794                 // 'intersect' '||'
     || lk == 59797                 // 'is' '||'
     || lk == 59798                 // 'item' '||'
     || lk == 59802                 // 'le' '||'
     || lk == 59804                 // 'let' '||'
     || lk == 59806                 // 'lt' '||'
     || lk == 59807                 // 'map' '||'
     || lk == 59809                 // 'mod' '||'
     || lk == 59811                 // 'module' '||'
     || lk == 59812                 // 'namespace' '||'
     || lk == 59813                 // 'namespace-node' '||'
     || lk == 59814                 // 'ne' '||'
     || lk == 59818                 // 'node' '||'
     || lk == 59821                 // 'only' '||'
     || lk == 59823                 // 'or' '||'
     || lk == 59824                 // 'order' '||'
     || lk == 59825                 // 'ordered' '||'
     || lk == 59827                 // 'parent' '||'
     || lk == 59832                 // 'preceding' '||'
     || lk == 59833                 // 'preceding-sibling' '||'
     || lk == 59836                 // 'processing-instruction' '||'
     || lk == 59839                 // 'return' '||'
     || lk == 59842                 // 'satisfies' '||'
     || lk == 59844                 // 'schema-attribute' '||'
     || lk == 59845                 // 'schema-element' '||'
     || lk == 59846                 // 'self' '||'
     || lk == 59849                 // 'some' '||'
     || lk == 59850                 // 'stable' '||'
     || lk == 59851                 // 'start' '||'
     || lk == 59854                 // 'switch' '||'
     || lk == 59855                 // 'text' '||'
     || lk == 59857                 // 'to' '||'
     || lk == 59859                 // 'treat' '||'
     || lk == 59860                 // 'try' '||'
     || lk == 59863                 // 'typeswitch' '||'
     || lk == 59864                 // 'union' '||'
     || lk == 59865                 // 'unordered' '||'
     || lk == 59867                 // 'validate' '||'
     || lk == 59872                 // 'where' '||'
     || lk == 59876)                // 'xquery' '||'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(6, e0A, -1);
          lk = -17;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(6, e0A, -2);
            lk = -17;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_FLWORExpr();
              memoize(6, e0A, -7);
              lk = -17;
            }
            catch (p7A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_ReturnClause();
                memoize(6, e0A, -8);
                lk = -17;
              }
              catch (p8A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_IfStatement();
                  memoize(6, e0A, -9);
                  lk = -17;
                }
                catch (p9A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_SwitchStatement();
                    memoize(6, e0A, -10);
                    lk = -17;
                  }
                  catch (p10A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_TryCatchStatement();
                      memoize(6, e0A, -11);
                      lk = -17;
                    }
                    catch (p11A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_TypeswitchStatement();
                        memoize(6, e0A, -12);
                        lk = -17;
                      }
                      catch (p12A)
                      {
                        try
                        {
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          try_VarDeclStatement();
                          memoize(6, e0A, -13);
                          lk = -17;
                        }
                        catch (p13A)
                        {
                          lk = -16;
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          memoize(6, e0A, -16);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 80:                        // 'append'
    case 38764:                     // 'delete' 'json'
    case 38800:                     // 'insert' 'json'
    case 38845:                     // 'rename' 'json'
      try_ApplyStatement();
      break;
    case -2:
      try_AssignStatement();
      break;
    case 230:                       // '{'
      try_BlockStatement();
      break;
    case 89:                        // 'break'
      try_BreakStatement();
      break;
    case 100:                       // 'continue'
      try_ContinueStatement();
      break;
    case 125:                       // 'exit'
      try_ExitStatement();
      break;
    case -7:
      try_FLWORExpr();
      break;
    case -8:
      try_ReturnClause();
      break;
    case -9:
      try_IfStatement();
      break;
    case -10:
      try_SwitchStatement();
      break;
    case -11:
      try_TryCatchStatement();
      break;
    case -12:
      try_TypeswitchStatement();
      break;
    case -13:
    case 221:                       // 'variable'
      try_VarDeclStatement();
      break;
    case 225:                       // 'while'
      try_WhileStatement();
      break;
    case 52:                        // ';'
      try_VoidStatement();
      break;
    case -17:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(230);                   // '{'
    lookahead1W(188);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '}'
    whitespace();
    parse_Statements();
    consume(234);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(230);                  // '{'
    lookahead1W(188);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '}'
    try_Statements();
    consumeT(234);                  // '}'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(31);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(31);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(89);                    // 'break'
    lookahead1W(53);                // S^WS | '(:' | 'loop'
    consume(157);                   // 'loop'
    lookahead1W(31);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(89);                   // 'break'
    lookahead1W(53);                // S^WS | '(:' | 'loop'
    consumeT(157);                  // 'loop'
    lookahead1W(31);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(100);                   // 'continue'
    lookahead1W(53);                // S^WS | '(:' | 'loop'
    consume(157);                   // 'loop'
    lookahead1W(31);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(100);                  // 'continue'
    lookahead1W(53);                // S^WS | '(:' | 'loop'
    consumeT(157);                  // 'loop'
    lookahead1W(31);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(125);                   // 'exit'
    lookahead1W(63);                // S^WS | '(:' | 'returning'
    consume(192);                   // 'returning'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(31);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(125);                  // 'exit'
    lookahead1W(63);                // S^WS | '(:' | 'returning'
    consumeT(192);                  // 'returning'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(31);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(139);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(67);                // S^WS | '(:' | 'then'
    consume(208);                   // 'then'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    lookahead1W(46);                // S^WS | '(:' | 'else'
    consume(117);                   // 'else'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(139);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(67);                // S^WS | '(:' | 'then'
    consumeT(208);                  // 'then'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
    lookahead1W(46);                // S^WS | '(:' | 'else'
    consumeT(117);                  // 'else'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(206);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      switch (l1)
      {
      case 91:                      // 'case'
        lookahead2W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_SwitchCaseStatement();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_SwitchCaseStatement();
        break;
      default:
        whitespace();
        parse_SwitchCaseClause();
      }
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(107);                   // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(191);                   // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(206);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      switch (l1)
      {
      case 91:                      // 'case'
        lookahead2W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_SwitchCaseStatement();
          memoize(7, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0A, -2);
        }
      }
      switch (lk)
      {
      case -1:
        try_SwitchCaseStatement();
        break;
      case -3:
        break;
      default:
        try_SwitchCaseClause();
      }
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(107);                  // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(191);                  // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(191);                   // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(191);                  // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    parse_TryStatementClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchStatementClause();
      lookahead1W(189);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                    // 'following' | 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '}'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    try_TryStatementClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      try_CatchStatementClause();
      lookahead1W(189);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' |
                                    // 'following' | 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{' | '}'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryStatementClause()
  {
    eventHandler.startNonterminal("TryStatementClause", e0);
    consume(212);                   // 'try'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    eventHandler.endNonterminal("TryStatementClause", e0);
  }

  function try_TryStatementClause()
  {
    consumeT(212);                  // 'try'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_BlockStatement();
  }

  function parse_CatchStatementClause()
  {
    eventHandler.startNonterminal("CatchStatementClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(169);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_BlockStatement();
    eventHandler.endNonterminal("CatchStatementClause", e0);
  }

  function try_CatchStatementClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(169);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(215);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(107);                   // 'default'
    lookahead1W(79);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(191);                   // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(215);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(107);                  // 'default'
    lookahead1W(79);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(191);                  // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(91);                    // 'case'
    lookahead1W(175);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
    }
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(191);                   // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(91);                   // 'case'
    lookahead1W(175);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
    }
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(191);                  // 'return'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(81);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(221);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(135);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(126);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 51)                   // ':='
    {
      consume(51);                  // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      lookahead1W(85);              // S^WS | '(:' | ',' | ';'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(135);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(126);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(52);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(81);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(221);                  // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(135);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(126);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 51)                   // ':='
    {
      consumeT(51);                 // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
    for (;;)
    {
      lookahead1W(85);              // S^WS | '(:' | ',' | ';'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(135);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(126);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consumeT(51);               // ':='
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(52);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(225);                   // 'while'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(225);                  // 'while'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(186);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'xquery' | '{'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    consumeT(52);                   // ';'
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(144);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(144);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 131:                       // 'for'
      lookahead2W(220);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'tumbling' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      break;
    case 123:                       // 'every'
    case 139:                       // 'if'
    case 156:                       // 'let'
    case 201:                       // 'some'
    case 206:                       // 'switch'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
      lookahead2W(215);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8059                  // 'every' '$'
     || lk == 8067                  // 'for' '$'
     || lk == 8092                  // 'let' '$'
     || lk == 8137                  // 'some' '$'
     || lk == 8843                  // 'if' '('
     || lk == 8910                  // 'switch' '('
     || lk == 8919                  // 'typeswitch' '('
     || lk == 59092)                // 'try' '{'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_FLWORExpr();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_QuantifiedExpr();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_SwitchExpr();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_TypeswitchExpr();
                lk = -4;
              }
              catch (p4A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_IfExpr();
                  lk = -5;
                }
                catch (p5A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_TryCatchExpr();
                    lk = -6;
                  }
                  catch (p6A)
                  {
                    lk = -13;
                  }
                }
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 51331:                     // 'for' 'sliding'
    case 54659:                     // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case -2:
      parse_QuantifiedExpr();
      break;
    case -3:
      parse_SwitchExpr();
      break;
    case -4:
      parse_TypeswitchExpr();
      break;
    case -5:
      parse_IfExpr();
      break;
    case -6:
      parse_TryCatchExpr();
      break;
    case 144:                       // 'insert'
      parse_InsertExpr();
      break;
    case 108:                       // 'delete'
      parse_DeleteExpr();
      break;
    case 189:                       // 'rename'
      parse_RenameExpr();
      break;
    case 190:                       // 'replace'
      parse_ReplaceExpr();
      break;
    case 148:                       // 'invoke'
      parse_UpdatingFunctionCall();
      break;
    case 101:                       // 'copy'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 131:                       // 'for'
      lookahead2W(220);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'tumbling' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      break;
    case 123:                       // 'every'
    case 139:                       // 'if'
    case 156:                       // 'let'
    case 201:                       // 'some'
    case 206:                       // 'switch'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
      lookahead2W(215);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8059                  // 'every' '$'
     || lk == 8067                  // 'for' '$'
     || lk == 8092                  // 'let' '$'
     || lk == 8137                  // 'some' '$'
     || lk == 8843                  // 'if' '('
     || lk == 8910                  // 'switch' '('
     || lk == 8919                  // 'typeswitch' '('
     || lk == 59092)                // 'try' '{'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_FLWORExpr();
          memoize(8, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_QuantifiedExpr();
            memoize(8, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_SwitchExpr();
              memoize(8, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_TypeswitchExpr();
                memoize(8, e0A, -4);
                lk = -14;
              }
              catch (p4A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_IfExpr();
                  memoize(8, e0A, -5);
                  lk = -14;
                }
                catch (p5A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_TryCatchExpr();
                    memoize(8, e0A, -6);
                    lk = -14;
                  }
                  catch (p6A)
                  {
                    lk = -13;
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    memoize(8, e0A, -13);
                  }
                }
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 51331:                     // 'for' 'sliding'
    case 54659:                     // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case -2:
      try_QuantifiedExpr();
      break;
    case -3:
      try_SwitchExpr();
      break;
    case -4:
      try_TypeswitchExpr();
      break;
    case -5:
      try_IfExpr();
      break;
    case -6:
      try_TryCatchExpr();
      break;
    case 144:                       // 'insert'
      try_InsertExpr();
      break;
    case 108:                       // 'delete'
      try_DeleteExpr();
      break;
    case 189:                       // 'rename'
      try_RenameExpr();
      break;
    case 190:                       // 'replace'
      try_ReplaceExpr();
      break;
    case 148:                       // 'invoke'
      try_UpdatingFunctionCall();
      break;
    case 101:                       // 'copy'
      try_CopyModifyExpr();
      break;
    case -14:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    lookahead1W(31);                // S^WS | '(:' | ';'
    consume(52);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    lookahead1W(31);                // S^WS | '(:' | ';'
    consumeT(52);                   // ';'
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 189:                       // 'rename'
      lookahead2W(109);             // S^WS | '(:' | 'json' | 'node'
      break;
    case 190:                       // 'replace'
      lookahead2W(114);             // S^WS | '(:' | 'node' | 'value'
      break;
    case 108:                       // 'delete'
    case 144:                       // 'insert'
      lookahead2W(130);             // S^WS | '(:' | 'json' | 'node' | 'nodes'
      break;
    default:
      lk = l1;
    }
    if (lk == 56510)                // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -5;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 38764:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 38800:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 38845:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case -5:
      parse_JSONReplaceExpr();
      break;
    case 80:                        // 'append'
      parse_JSONAppendExpr();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 189:                       // 'rename'
      lookahead2W(109);             // S^WS | '(:' | 'json' | 'node'
      break;
    case 190:                       // 'replace'
      lookahead2W(114);             // S^WS | '(:' | 'node' | 'value'
      break;
    case 108:                       // 'delete'
    case 144:                       // 'insert'
      lookahead2W(130);             // S^WS | '(:' | 'json' | 'node' | 'nodes'
      break;
    default:
      lk = l1;
    }
    if (lk == 56510)                // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          memoize(9, e0A, -1);
          lk = -7;
        }
        catch (p1A)
        {
          lk = -5;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -5);
        }
      }
    }
    switch (lk)
    {
    case 38764:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 38800:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 38845:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case -5:
      try_JSONReplaceExpr();
      break;
    case 80:                        // 'append'
      try_JSONAppendExpr();
      break;
    case -7:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(108);                   // 'delete'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consume(151);                   // 'json'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(108);                  // 'delete'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consumeT(151);                  // 'json'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 144:                       // 'insert'
      lookahead2W(52);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(144);              // 'insert'
        lookahead1W(52);            // S^WS | '(:' | 'json'
        consumeT(151);              // 'json'
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
        lookahead1W(50);            // S^WS | '(:' | 'into'
        consumeT(147);              // 'into'
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
        lookahead1W(94);            // S^WS | '(:' | ';' | 'at'
        if (l1 == 84)               // 'at'
        {
          consumeT(84);             // 'at'
          lookahead1W(61);          // S^WS | '(:' | 'position'
          consumeT(183);            // 'position'
          lookahead1W(181);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(144);                 // 'insert'
      lookahead1W(52);              // S^WS | '(:' | 'json'
      consume(151);                 // 'json'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
      lookahead1W(50);              // S^WS | '(:' | 'into'
      consume(147);                 // 'into'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
      lookahead1W(94);              // S^WS | '(:' | ';' | 'at'
      if (l1 == 84)                 // 'at'
      {
        consume(84);                // 'at'
        lookahead1W(61);            // S^WS | '(:' | 'position'
        consume(183);               // 'position'
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      consume(144);                 // 'insert'
      lookahead1W(52);              // S^WS | '(:' | 'json'
      consume(151);                 // 'json'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_PairConstructorList();
      consume(147);                 // 'into'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 144:                       // 'insert'
      lookahead2W(52);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(144);              // 'insert'
        lookahead1W(52);            // S^WS | '(:' | 'json'
        consumeT(151);              // 'json'
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
        lookahead1W(50);            // S^WS | '(:' | 'into'
        consumeT(147);              // 'into'
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
        lookahead1W(94);            // S^WS | '(:' | ';' | 'at'
        if (l1 == 84)               // 'at'
        {
          consumeT(84);             // 'at'
          lookahead1W(61);          // S^WS | '(:' | 'position'
          consumeT(183);            // 'position'
          lookahead1W(181);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
          try_ExprSingle();
        }
        memoize(10, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(144);                // 'insert'
      lookahead1W(52);              // S^WS | '(:' | 'json'
      consumeT(151);                // 'json'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
      lookahead1W(50);              // S^WS | '(:' | 'into'
      consumeT(147);                // 'into'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
      lookahead1W(94);              // S^WS | '(:' | ';' | 'at'
      if (l1 == 84)                 // 'at'
      {
        consumeT(84);               // 'at'
        lookahead1W(61);            // S^WS | '(:' | 'position'
        consumeT(183);              // 'position'
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      consumeT(144);                // 'insert'
      lookahead1W(52);              // S^WS | '(:' | 'json'
      consumeT(151);                // 'json'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_PairConstructorList();
      consumeT(147);                // 'into'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      lookahead1W(87);              // S^WS | '(:' | ',' | 'into'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      lookahead1W(87);              // S^WS | '(:' | ',' | 'into'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(189);                   // 'rename'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consume(151);                   // 'json'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_PostfixExpr();
    consume(82);                    // 'as'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(189);                  // 'rename'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consumeT(151);                  // 'json'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    try_PostfixExpr();
    consumeT(82);                   // 'as'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(190);                   // 'replace'
    lookahead1W(69);                // S^WS | '(:' | 'value'
    consume(220);                   // 'value'
    lookahead1W(57);                // S^WS | '(:' | 'of'
    consume(172);                   // 'of'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consume(151);                   // 'json'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_PostfixExpr();
    consume(227);                   // 'with'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(190);                  // 'replace'
    lookahead1W(69);                // S^WS | '(:' | 'value'
    consumeT(220);                  // 'value'
    lookahead1W(57);                // S^WS | '(:' | 'of'
    consumeT(172);                  // 'of'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consumeT(151);                  // 'json'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    try_PostfixExpr();
    consumeT(227);                  // 'with'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(80);                    // 'append'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consume(151);                   // 'json'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(50);                // S^WS | '(:' | 'into'
    consume(147);                   // 'into'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(80);                   // 'append'
    lookahead1W(52);                // S^WS | '(:' | 'json'
    consumeT(151);                  // 'json'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(50);                // S^WS | '(:' | 'into'
    consumeT(147);                  // 'into'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(144);                   // 'insert'
    lookahead1W(113);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 170:                       // 'node'
      consume(170);                 // 'node'
      break;
    default:
      consume(171);                 // 'nodes'
    }
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(136);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(144);                  // 'insert'
    lookahead1W(113);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 170:                       // 'node'
      consumeT(170);                // 'node'
      break;
    default:
      consumeT(171);                // 'nodes'
    }
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_SourceExpr();
    lookahead1W(136);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_TargetExpr();
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 87:                        // 'before'
      consume(87);                  // 'before'
      break;
    default:
      if (l1 == 82)                 // 'as'
      {
        consume(82);                // 'as'
        lookahead1W(106);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 128:                   // 'first'
          consume(128);             // 'first'
          break;
        default:
          consume(152);             // 'last'
        }
      }
      lookahead1W(50);              // S^WS | '(:' | 'into'
      consume(147);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 87:                        // 'before'
      consumeT(87);                 // 'before'
      break;
    default:
      if (l1 == 82)                 // 'as'
      {
        consumeT(82);               // 'as'
        lookahead1W(106);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 128:                   // 'first'
          consumeT(128);            // 'first'
          break;
        default:
          consumeT(152);            // 'last'
        }
      }
      lookahead1W(50);              // S^WS | '(:' | 'into'
      consumeT(147);                // 'into'
    }
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(108);                   // 'delete'
    lookahead1W(113);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 170:                       // 'node'
      consume(170);                 // 'node'
      break;
    default:
      consume(171);                 // 'nodes'
    }
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(108);                  // 'delete'
    lookahead1W(113);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 170:                       // 'node'
      consumeT(170);                // 'node'
      break;
    default:
      consumeT(171);                // 'nodes'
    }
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_TargetExpr();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(189);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'node'
    consume(170);                   // 'node'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(82);                    // 'as'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(189);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'node'
    consumeT(170);                  // 'node'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(82);                   // 'as'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_NewNameExpr();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(190);                   // 'replace'
    lookahead1W(114);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 220)                  // 'value'
    {
      consume(220);                 // 'value'
      lookahead1W(57);              // S^WS | '(:' | 'of'
      consume(172);                 // 'of'
    }
    lookahead1W(56);                // S^WS | '(:' | 'node'
    consume(170);                   // 'node'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(72);                // S^WS | '(:' | 'with'
    consume(227);                   // 'with'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(190);                  // 'replace'
    lookahead1W(114);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 220)                  // 'value'
    {
      consumeT(220);                // 'value'
      lookahead1W(57);              // S^WS | '(:' | 'of'
      consumeT(172);                // 'of'
    }
    lookahead1W(56);                // S^WS | '(:' | 'node'
    consumeT(170);                  // 'node'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_TargetExpr();
    lookahead1W(72);                // S^WS | '(:' | 'with'
    consumeT(227);                  // 'with'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(148);                   // 'invoke'
    lookahead1W(68);                // S^WS | '(:' | 'updating'
    consume(218);                   // 'updating'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(182);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  function try_UpdatingFunctionCall()
  {
    consumeT(148);                  // 'invoke'
    lookahead1W(68);                // S^WS | '(:' | 'updating'
    consumeT(218);                  // 'updating'
    lookahead1W(177);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(182);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(101);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(88);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(162);                   // 'modify'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(191);                   // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  function try_CopyModifyExpr()
  {
    consumeT(101);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(88);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
    consumeT(162);                  // 'modify'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(191);                  // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(147);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 191)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(147);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 191)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 131:                       // 'for'
      lookahead2W(123);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8067:                      // 'for' '$'
      parse_ForClause();
      break;
    case 156:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 131:                       // 'for'
      lookahead2W(123);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 8067:                      // 'for' '$'
      try_ForClause();
      break;
    case 156:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 131:                       // 'for'
    case 156:                       // 'let'
      parse_InitialClause();
      break;
    case 224:                       // 'where'
      parse_WhereClause();
      break;
    case 135:                       // 'group'
      parse_GroupByClause();
      break;
    case 103:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 131:                       // 'for'
    case 156:                       // 'let'
      try_InitialClause();
      break;
    case 224:                       // 'where'
      try_WhereClause();
      break;
    case 135:                       // 'group'
      try_GroupByClause();
      break;
    case 103:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(131);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(131);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(137);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(128);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 76)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(98);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 84)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consume(141);                   // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(137);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(128);               // S^WS | '(:' | 'allowing' | 'at' | 'in'
    if (l1 == 76)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(98);                // S^WS | '(:' | 'at' | 'in'
    if (l1 == 84)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consumeT(141);                  // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(76);                    // 'allowing'
    lookahead1W(47);                // S^WS | '(:' | 'empty'
    consume(118);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(76);                   // 'allowing'
    lookahead1W(47);                // S^WS | '(:' | 'empty'
    consumeT(118);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(84);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(84);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(156);                   // 'let'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(156);                  // 'let'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(92);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(92);                // S^WS | '(:' | ':=' | 'as'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(131);                   // 'for'
    lookahead1W(118);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 213:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(131);                  // 'for'
    lookahead1W(118);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 213:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(213);                   // 'tumbling'
    lookahead1W(71);                // S^WS | '(:' | 'window'
    consume(226);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consume(141);                   // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(152);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 121                   // 'end'
     || l1 == 173)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(213);                  // 'tumbling'
    lookahead1W(71);                // S^WS | '(:' | 'window'
    consumeT(226);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consumeT(141);                  // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(152);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 121                   // 'end'
     || l1 == 173)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(200);                   // 'sliding'
    lookahead1W(71);                // S^WS | '(:' | 'window'
    consume(226);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consume(141);                   // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(104);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(200);                  // 'sliding'
    lookahead1W(71);                // S^WS | '(:' | 'window'
    consumeT(226);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consumeT(141);                  // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(104);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(203);                   // 'start'
    lookahead1W(140);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(70);                // S^WS | '(:' | 'when'
    consume(223);                   // 'when'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(203);                  // 'start'
    lookahead1W(140);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(70);                // S^WS | '(:' | 'when'
    consumeT(223);                  // 'when'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 173)                  // 'only'
    {
      consume(173);                 // 'only'
    }
    lookahead1W(48);                // S^WS | '(:' | 'end'
    consume(121);                   // 'end'
    lookahead1W(140);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(70);                // S^WS | '(:' | 'when'
    consume(223);                   // 'when'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 173)                  // 'only'
    {
      consumeT(173);                // 'only'
    }
    lookahead1W(48);                // S^WS | '(:' | 'end'
    consumeT(121);                  // 'end'
    lookahead1W(140);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(70);                // S^WS | '(:' | 'when'
    consumeT(223);                  // 'when'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(138);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 84)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(132);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 187)                  // 'previous'
    {
      consume(187);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(111);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 167)                  // 'next'
    {
      consume(167);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(138);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 84)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(132);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 187)                  // 'previous'
    {
      consumeT(187);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(111);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 167)                  // 'next'
    {
      consumeT(167);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(103);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(103);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(224);                   // 'where'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(224);                  // 'where'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(135);                   // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(135);                  // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(154);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 51                    // ':='
     || l1 == 82)                   // 'as'
    {
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    lookahead1W(151);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(154);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 51                    // ':='
     || l1 == 82)                   // 'as'
    {
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
    lookahead1W(151);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 176:                       // 'order'
      consume(176);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(202);                 // 'stable'
      lookahead1W(59);              // S^WS | '(:' | 'order'
      consume(176);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 176:                       // 'order'
      consumeT(176);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(202);                // 'stable'
      lookahead1W(59);              // S^WS | '(:' | 'order'
      consumeT(176);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(149);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(156);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(156);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 83                    // 'ascending'
     || l1 == 111)                  // 'descending'
    {
      switch (l1)
      {
      case 83:                      // 'ascending'
        consume(83);                // 'ascending'
        break;
      default:
        consume(111);               // 'descending'
      }
    }
    lookahead1W(153);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 118)                  // 'empty'
    {
      consume(118);                 // 'empty'
      lookahead1W(107);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 134:                     // 'greatest'
        consume(134);               // 'greatest'
        break;
      default:
        consume(155);               // 'least'
      }
    }
    lookahead1W(151);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 83                    // 'ascending'
     || l1 == 111)                  // 'descending'
    {
      switch (l1)
      {
      case 83:                      // 'ascending'
        consumeT(83);               // 'ascending'
        break;
      default:
        consumeT(111);              // 'descending'
      }
    }
    lookahead1W(153);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 118)                  // 'empty'
    {
      consumeT(118);                // 'empty'
      lookahead1W(107);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 134:                     // 'greatest'
        consumeT(134);              // 'greatest'
        break;
      default:
        consumeT(155);              // 'least'
      }
    }
    lookahead1W(151);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(191);                   // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(191);                  // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 201:                       // 'some'
      consume(201);                 // 'some'
      break;
    default:
      consume(123);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consume(141);                   // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(96);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 82)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(49);              // S^WS | '(:' | 'in'
      consume(141);                 // 'in'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(194);                   // 'satisfies'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 201:                       // 'some'
      consumeT(201);                // 'some'
      break;
    default:
      consumeT(123);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
    lookahead1W(96);                // S^WS | '(:' | 'as' | 'in'
    if (l1 == 82)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(49);                // S^WS | '(:' | 'in'
    consumeT(141);                  // 'in'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(89);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(96);              // S^WS | '(:' | 'as' | 'in'
      if (l1 == 82)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(49);              // S^WS | '(:' | 'in'
      consumeT(141);                // 'in'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ExprSingle();
    }
    consumeT(194);                  // 'satisfies'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(206);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(107);                   // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(191);                   // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(206);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(107);                  // 'default'
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(191);                  // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(191);                   // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(100);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(191);                  // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(215);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(107);                   // 'default'
    lookahead1W(79);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consume(191);                   // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(215);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(99);              // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(107);                  // 'default'
    lookahead1W(79);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
    }
    lookahead1W(62);                // S^WS | '(:' | 'return'
    consumeT(191);                  // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(175);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
    }
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(191);                   // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(175);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
    }
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(191);                  // 'return'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(117);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 232)                // '|'
      {
        break;
      }
      consume(232);                 // '|'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(117);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 232)                // '|'
      {
        break;
      }
      consumeT(232);                // '|'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(139);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(67);                // S^WS | '(:' | 'then'
    consume(208);                   // 'then'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(46);                // S^WS | '(:' | 'else'
    consume(117);                   // 'else'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(139);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(67);                // S^WS | '(:' | 'then'
    consumeT(208);                  // 'then'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
    lookahead1W(46);                // S^WS | '(:' | 'else'
    consumeT(117);                  // 'else'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(191);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(191);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(212);                   // 'try'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(212);                  // 'try'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  function parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  function try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(169);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(169);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(119);             // S^WS | '(:' | '{' | '|'
      if (l1 != 232)                // '|'
      {
        break;
      }
      consume(232);                 // '|'
      lookahead1W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(119);             // S^WS | '(:' | '{' | '|'
      if (l1 != 232)                // '|'
      {
        break;
      }
      consumeT(232);                // '|'
      lookahead1W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 175:                     // 'or'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 431                 // 'or' IntegerLiteral
       || lk == 687                 // 'or' DecimalLiteral
       || lk == 943                 // 'or' DoubleLiteral
       || lk == 1199                // 'or' StringLiteral
       || lk == 1455                // 'or' URIQualifiedName
       || lk == 4015                // 'or' QName^Token
       || lk == 5551                // 'or' Wildcard
       || lk == 8111                // 'or' '$'
       || lk == 8367                // 'or' '%'
       || lk == 8879                // 'or' '('
       || lk == 9135                // 'or' '(#'
       || lk == 10159               // 'or' '+'
       || lk == 10671               // 'or' '-'
       || lk == 11183               // 'or' '.'
       || lk == 11439               // 'or' '..'
       || lk == 11695               // 'or' '/'
       || lk == 11951               // 'or' '//'
       || lk == 13743               // 'or' '<'
       || lk == 13999               // 'or' '<!--'
       || lk == 15279               // 'or' '<?'
       || lk == 16815               // 'or' '?'
       || lk == 17327               // 'or' '@'
       || lk == 17839               // 'or' '['
       || lk == 18863               // 'or' '``['
       || lk == 19887               // 'or' 'ancestor'
       || lk == 20143               // 'or' 'ancestor-or-self'
       || lk == 20399               // 'or' 'and'
       || lk == 20911               // 'or' 'array'
       || lk == 21423               // 'or' 'ascending'
       || lk == 21935               // 'or' 'attribute'
       || lk == 23471               // 'or' 'case'
       || lk == 23727               // 'or' 'cast'
       || lk == 23983               // 'or' 'castable'
       || lk == 24495               // 'or' 'child'
       || lk == 24751               // 'or' 'collation'
       || lk == 25007               // 'or' 'comment'
       || lk == 26543               // 'or' 'count'
       || lk == 27311               // 'or' 'declare'
       || lk == 27567               // 'or' 'default'
       || lk == 28079               // 'or' 'descendant'
       || lk == 28335               // 'or' 'descendant-or-self'
       || lk == 28591               // 'or' 'descending'
       || lk == 29103               // 'or' 'div'
       || lk == 29359               // 'or' 'document'
       || lk == 29615               // 'or' 'document-node'
       || lk == 29871               // 'or' 'element'
       || lk == 30127               // 'or' 'else'
       || lk == 30383               // 'or' 'empty'
       || lk == 30639               // 'or' 'empty-sequence'
       || lk == 31151               // 'or' 'end'
       || lk == 31407               // 'or' 'eq'
       || lk == 31663               // 'or' 'every'
       || lk == 31919               // 'or' 'except'
       || lk == 33199               // 'or' 'following'
       || lk == 33455               // 'or' 'following-sibling'
       || lk == 33711               // 'or' 'for'
       || lk == 33967               // 'or' 'function'
       || lk == 34223               // 'or' 'ge'
       || lk == 34735               // 'or' 'group'
       || lk == 35247               // 'or' 'gt'
       || lk == 35503               // 'or' 'idiv'
       || lk == 35759               // 'or' 'if'
       || lk == 36015               // 'or' 'import'
       || lk == 37295               // 'or' 'instance'
       || lk == 37551               // 'or' 'intersect'
       || lk == 38319               // 'or' 'is'
       || lk == 38575               // 'or' 'item'
       || lk == 39599               // 'or' 'le'
       || lk == 40111               // 'or' 'let'
       || lk == 40623               // 'or' 'lt'
       || lk == 40879               // 'or' 'map'
       || lk == 41391               // 'or' 'mod'
       || lk == 41903               // 'or' 'module'
       || lk == 42159               // 'or' 'namespace'
       || lk == 42415               // 'or' 'namespace-node'
       || lk == 42671               // 'or' 'ne'
       || lk == 43695               // 'or' 'node'
       || lk == 44463               // 'or' 'only'
       || lk == 44975               // 'or' 'or'
       || lk == 45231               // 'or' 'order'
       || lk == 45487               // 'or' 'ordered'
       || lk == 45999               // 'or' 'parent'
       || lk == 47279               // 'or' 'preceding'
       || lk == 47535               // 'or' 'preceding-sibling'
       || lk == 48303               // 'or' 'processing-instruction'
       || lk == 49071               // 'or' 'return'
       || lk == 49839               // 'or' 'satisfies'
       || lk == 50351               // 'or' 'schema-attribute'
       || lk == 50607               // 'or' 'schema-element'
       || lk == 50863               // 'or' 'self'
       || lk == 51631               // 'or' 'some'
       || lk == 51887               // 'or' 'stable'
       || lk == 52143               // 'or' 'start'
       || lk == 52911               // 'or' 'switch'
       || lk == 53167               // 'or' 'text'
       || lk == 53679               // 'or' 'to'
       || lk == 54191               // 'or' 'treat'
       || lk == 54447               // 'or' 'try'
       || lk == 55215               // 'or' 'typeswitch'
       || lk == 55471               // 'or' 'union'
       || lk == 55727               // 'or' 'unordered'
       || lk == 56239               // 'or' 'validate'
       || lk == 57519               // 'or' 'where'
       || lk == 58543)              // 'or' 'xquery'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(175);          // 'or'
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_AndExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(175);                 // 'or'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 175:                     // 'or'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 431                 // 'or' IntegerLiteral
       || lk == 687                 // 'or' DecimalLiteral
       || lk == 943                 // 'or' DoubleLiteral
       || lk == 1199                // 'or' StringLiteral
       || lk == 1455                // 'or' URIQualifiedName
       || lk == 4015                // 'or' QName^Token
       || lk == 5551                // 'or' Wildcard
       || lk == 8111                // 'or' '$'
       || lk == 8367                // 'or' '%'
       || lk == 8879                // 'or' '('
       || lk == 9135                // 'or' '(#'
       || lk == 10159               // 'or' '+'
       || lk == 10671               // 'or' '-'
       || lk == 11183               // 'or' '.'
       || lk == 11439               // 'or' '..'
       || lk == 11695               // 'or' '/'
       || lk == 11951               // 'or' '//'
       || lk == 13743               // 'or' '<'
       || lk == 13999               // 'or' '<!--'
       || lk == 15279               // 'or' '<?'
       || lk == 16815               // 'or' '?'
       || lk == 17327               // 'or' '@'
       || lk == 17839               // 'or' '['
       || lk == 18863               // 'or' '``['
       || lk == 19887               // 'or' 'ancestor'
       || lk == 20143               // 'or' 'ancestor-or-self'
       || lk == 20399               // 'or' 'and'
       || lk == 20911               // 'or' 'array'
       || lk == 21423               // 'or' 'ascending'
       || lk == 21935               // 'or' 'attribute'
       || lk == 23471               // 'or' 'case'
       || lk == 23727               // 'or' 'cast'
       || lk == 23983               // 'or' 'castable'
       || lk == 24495               // 'or' 'child'
       || lk == 24751               // 'or' 'collation'
       || lk == 25007               // 'or' 'comment'
       || lk == 26543               // 'or' 'count'
       || lk == 27311               // 'or' 'declare'
       || lk == 27567               // 'or' 'default'
       || lk == 28079               // 'or' 'descendant'
       || lk == 28335               // 'or' 'descendant-or-self'
       || lk == 28591               // 'or' 'descending'
       || lk == 29103               // 'or' 'div'
       || lk == 29359               // 'or' 'document'
       || lk == 29615               // 'or' 'document-node'
       || lk == 29871               // 'or' 'element'
       || lk == 30127               // 'or' 'else'
       || lk == 30383               // 'or' 'empty'
       || lk == 30639               // 'or' 'empty-sequence'
       || lk == 31151               // 'or' 'end'
       || lk == 31407               // 'or' 'eq'
       || lk == 31663               // 'or' 'every'
       || lk == 31919               // 'or' 'except'
       || lk == 33199               // 'or' 'following'
       || lk == 33455               // 'or' 'following-sibling'
       || lk == 33711               // 'or' 'for'
       || lk == 33967               // 'or' 'function'
       || lk == 34223               // 'or' 'ge'
       || lk == 34735               // 'or' 'group'
       || lk == 35247               // 'or' 'gt'
       || lk == 35503               // 'or' 'idiv'
       || lk == 35759               // 'or' 'if'
       || lk == 36015               // 'or' 'import'
       || lk == 37295               // 'or' 'instance'
       || lk == 37551               // 'or' 'intersect'
       || lk == 38319               // 'or' 'is'
       || lk == 38575               // 'or' 'item'
       || lk == 39599               // 'or' 'le'
       || lk == 40111               // 'or' 'let'
       || lk == 40623               // 'or' 'lt'
       || lk == 40879               // 'or' 'map'
       || lk == 41391               // 'or' 'mod'
       || lk == 41903               // 'or' 'module'
       || lk == 42159               // 'or' 'namespace'
       || lk == 42415               // 'or' 'namespace-node'
       || lk == 42671               // 'or' 'ne'
       || lk == 43695               // 'or' 'node'
       || lk == 44463               // 'or' 'only'
       || lk == 44975               // 'or' 'or'
       || lk == 45231               // 'or' 'order'
       || lk == 45487               // 'or' 'ordered'
       || lk == 45999               // 'or' 'parent'
       || lk == 47279               // 'or' 'preceding'
       || lk == 47535               // 'or' 'preceding-sibling'
       || lk == 48303               // 'or' 'processing-instruction'
       || lk == 49071               // 'or' 'return'
       || lk == 49839               // 'or' 'satisfies'
       || lk == 50351               // 'or' 'schema-attribute'
       || lk == 50607               // 'or' 'schema-element'
       || lk == 50863               // 'or' 'self'
       || lk == 51631               // 'or' 'some'
       || lk == 51887               // 'or' 'stable'
       || lk == 52143               // 'or' 'start'
       || lk == 52911               // 'or' 'switch'
       || lk == 53167               // 'or' 'text'
       || lk == 53679               // 'or' 'to'
       || lk == 54191               // 'or' 'treat'
       || lk == 54447               // 'or' 'try'
       || lk == 55215               // 'or' 'typeswitch'
       || lk == 55471               // 'or' 'union'
       || lk == 55727               // 'or' 'unordered'
       || lk == 56239               // 'or' 'validate'
       || lk == 57519               // 'or' 'where'
       || lk == 58543)              // 'or' 'xquery'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(175);          // 'or'
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_AndExpr();
            memoize(11, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(11, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(175);                // 'or'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 79:                      // 'and'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 335                 // 'and' IntegerLiteral
       || lk == 591                 // 'and' DecimalLiteral
       || lk == 847                 // 'and' DoubleLiteral
       || lk == 1103                // 'and' StringLiteral
       || lk == 1359                // 'and' URIQualifiedName
       || lk == 3919                // 'and' QName^Token
       || lk == 5455                // 'and' Wildcard
       || lk == 8015                // 'and' '$'
       || lk == 8271                // 'and' '%'
       || lk == 8783                // 'and' '('
       || lk == 9039                // 'and' '(#'
       || lk == 10063               // 'and' '+'
       || lk == 10575               // 'and' '-'
       || lk == 11087               // 'and' '.'
       || lk == 11343               // 'and' '..'
       || lk == 11599               // 'and' '/'
       || lk == 11855               // 'and' '//'
       || lk == 13647               // 'and' '<'
       || lk == 13903               // 'and' '<!--'
       || lk == 15183               // 'and' '<?'
       || lk == 16719               // 'and' '?'
       || lk == 17231               // 'and' '@'
       || lk == 17743               // 'and' '['
       || lk == 18767               // 'and' '``['
       || lk == 19791               // 'and' 'ancestor'
       || lk == 20047               // 'and' 'ancestor-or-self'
       || lk == 20303               // 'and' 'and'
       || lk == 20815               // 'and' 'array'
       || lk == 21327               // 'and' 'ascending'
       || lk == 21839               // 'and' 'attribute'
       || lk == 23375               // 'and' 'case'
       || lk == 23631               // 'and' 'cast'
       || lk == 23887               // 'and' 'castable'
       || lk == 24399               // 'and' 'child'
       || lk == 24655               // 'and' 'collation'
       || lk == 24911               // 'and' 'comment'
       || lk == 26447               // 'and' 'count'
       || lk == 27215               // 'and' 'declare'
       || lk == 27471               // 'and' 'default'
       || lk == 27983               // 'and' 'descendant'
       || lk == 28239               // 'and' 'descendant-or-self'
       || lk == 28495               // 'and' 'descending'
       || lk == 29007               // 'and' 'div'
       || lk == 29263               // 'and' 'document'
       || lk == 29519               // 'and' 'document-node'
       || lk == 29775               // 'and' 'element'
       || lk == 30031               // 'and' 'else'
       || lk == 30287               // 'and' 'empty'
       || lk == 30543               // 'and' 'empty-sequence'
       || lk == 31055               // 'and' 'end'
       || lk == 31311               // 'and' 'eq'
       || lk == 31567               // 'and' 'every'
       || lk == 31823               // 'and' 'except'
       || lk == 33103               // 'and' 'following'
       || lk == 33359               // 'and' 'following-sibling'
       || lk == 33615               // 'and' 'for'
       || lk == 33871               // 'and' 'function'
       || lk == 34127               // 'and' 'ge'
       || lk == 34639               // 'and' 'group'
       || lk == 35151               // 'and' 'gt'
       || lk == 35407               // 'and' 'idiv'
       || lk == 35663               // 'and' 'if'
       || lk == 35919               // 'and' 'import'
       || lk == 37199               // 'and' 'instance'
       || lk == 37455               // 'and' 'intersect'
       || lk == 38223               // 'and' 'is'
       || lk == 38479               // 'and' 'item'
       || lk == 39503               // 'and' 'le'
       || lk == 40015               // 'and' 'let'
       || lk == 40527               // 'and' 'lt'
       || lk == 40783               // 'and' 'map'
       || lk == 41295               // 'and' 'mod'
       || lk == 41807               // 'and' 'module'
       || lk == 42063               // 'and' 'namespace'
       || lk == 42319               // 'and' 'namespace-node'
       || lk == 42575               // 'and' 'ne'
       || lk == 43599               // 'and' 'node'
       || lk == 44367               // 'and' 'only'
       || lk == 44879               // 'and' 'or'
       || lk == 45135               // 'and' 'order'
       || lk == 45391               // 'and' 'ordered'
       || lk == 45903               // 'and' 'parent'
       || lk == 47183               // 'and' 'preceding'
       || lk == 47439               // 'and' 'preceding-sibling'
       || lk == 48207               // 'and' 'processing-instruction'
       || lk == 48975               // 'and' 'return'
       || lk == 49743               // 'and' 'satisfies'
       || lk == 50255               // 'and' 'schema-attribute'
       || lk == 50511               // 'and' 'schema-element'
       || lk == 50767               // 'and' 'self'
       || lk == 51535               // 'and' 'some'
       || lk == 51791               // 'and' 'stable'
       || lk == 52047               // 'and' 'start'
       || lk == 52815               // 'and' 'switch'
       || lk == 53071               // 'and' 'text'
       || lk == 53583               // 'and' 'to'
       || lk == 54095               // 'and' 'treat'
       || lk == 54351               // 'and' 'try'
       || lk == 55119               // 'and' 'typeswitch'
       || lk == 55375               // 'and' 'union'
       || lk == 55631               // 'and' 'unordered'
       || lk == 56143               // 'and' 'validate'
       || lk == 57423               // 'and' 'where'
       || lk == 58447)              // 'and' 'xquery'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(79);           // 'and'
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_ComparisonExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(79);                  // 'and'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 79:                      // 'and'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 335                 // 'and' IntegerLiteral
       || lk == 591                 // 'and' DecimalLiteral
       || lk == 847                 // 'and' DoubleLiteral
       || lk == 1103                // 'and' StringLiteral
       || lk == 1359                // 'and' URIQualifiedName
       || lk == 3919                // 'and' QName^Token
       || lk == 5455                // 'and' Wildcard
       || lk == 8015                // 'and' '$'
       || lk == 8271                // 'and' '%'
       || lk == 8783                // 'and' '('
       || lk == 9039                // 'and' '(#'
       || lk == 10063               // 'and' '+'
       || lk == 10575               // 'and' '-'
       || lk == 11087               // 'and' '.'
       || lk == 11343               // 'and' '..'
       || lk == 11599               // 'and' '/'
       || lk == 11855               // 'and' '//'
       || lk == 13647               // 'and' '<'
       || lk == 13903               // 'and' '<!--'
       || lk == 15183               // 'and' '<?'
       || lk == 16719               // 'and' '?'
       || lk == 17231               // 'and' '@'
       || lk == 17743               // 'and' '['
       || lk == 18767               // 'and' '``['
       || lk == 19791               // 'and' 'ancestor'
       || lk == 20047               // 'and' 'ancestor-or-self'
       || lk == 20303               // 'and' 'and'
       || lk == 20815               // 'and' 'array'
       || lk == 21327               // 'and' 'ascending'
       || lk == 21839               // 'and' 'attribute'
       || lk == 23375               // 'and' 'case'
       || lk == 23631               // 'and' 'cast'
       || lk == 23887               // 'and' 'castable'
       || lk == 24399               // 'and' 'child'
       || lk == 24655               // 'and' 'collation'
       || lk == 24911               // 'and' 'comment'
       || lk == 26447               // 'and' 'count'
       || lk == 27215               // 'and' 'declare'
       || lk == 27471               // 'and' 'default'
       || lk == 27983               // 'and' 'descendant'
       || lk == 28239               // 'and' 'descendant-or-self'
       || lk == 28495               // 'and' 'descending'
       || lk == 29007               // 'and' 'div'
       || lk == 29263               // 'and' 'document'
       || lk == 29519               // 'and' 'document-node'
       || lk == 29775               // 'and' 'element'
       || lk == 30031               // 'and' 'else'
       || lk == 30287               // 'and' 'empty'
       || lk == 30543               // 'and' 'empty-sequence'
       || lk == 31055               // 'and' 'end'
       || lk == 31311               // 'and' 'eq'
       || lk == 31567               // 'and' 'every'
       || lk == 31823               // 'and' 'except'
       || lk == 33103               // 'and' 'following'
       || lk == 33359               // 'and' 'following-sibling'
       || lk == 33615               // 'and' 'for'
       || lk == 33871               // 'and' 'function'
       || lk == 34127               // 'and' 'ge'
       || lk == 34639               // 'and' 'group'
       || lk == 35151               // 'and' 'gt'
       || lk == 35407               // 'and' 'idiv'
       || lk == 35663               // 'and' 'if'
       || lk == 35919               // 'and' 'import'
       || lk == 37199               // 'and' 'instance'
       || lk == 37455               // 'and' 'intersect'
       || lk == 38223               // 'and' 'is'
       || lk == 38479               // 'and' 'item'
       || lk == 39503               // 'and' 'le'
       || lk == 40015               // 'and' 'let'
       || lk == 40527               // 'and' 'lt'
       || lk == 40783               // 'and' 'map'
       || lk == 41295               // 'and' 'mod'
       || lk == 41807               // 'and' 'module'
       || lk == 42063               // 'and' 'namespace'
       || lk == 42319               // 'and' 'namespace-node'
       || lk == 42575               // 'and' 'ne'
       || lk == 43599               // 'and' 'node'
       || lk == 44367               // 'and' 'only'
       || lk == 44879               // 'and' 'or'
       || lk == 45135               // 'and' 'order'
       || lk == 45391               // 'and' 'ordered'
       || lk == 45903               // 'and' 'parent'
       || lk == 47183               // 'and' 'preceding'
       || lk == 47439               // 'and' 'preceding-sibling'
       || lk == 48207               // 'and' 'processing-instruction'
       || lk == 48975               // 'and' 'return'
       || lk == 49743               // 'and' 'satisfies'
       || lk == 50255               // 'and' 'schema-attribute'
       || lk == 50511               // 'and' 'schema-element'
       || lk == 50767               // 'and' 'self'
       || lk == 51535               // 'and' 'some'
       || lk == 51791               // 'and' 'stable'
       || lk == 52047               // 'and' 'start'
       || lk == 52815               // 'and' 'switch'
       || lk == 53071               // 'and' 'text'
       || lk == 53583               // 'and' 'to'
       || lk == 54095               // 'and' 'treat'
       || lk == 54351               // 'and' 'try'
       || lk == 55119               // 'and' 'typeswitch'
       || lk == 55375               // 'and' 'union'
       || lk == 55631               // 'and' 'unordered'
       || lk == 56143               // 'and' 'validate'
       || lk == 57423               // 'and' 'where'
       || lk == 58447)              // 'and' 'xquery'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            consumeT(79);           // 'and'
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_ComparisonExpr();
            memoize(12, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(12, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(79);                 // 'and'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_StringConcatExpr();
    switch (l1)
    {
    case 53:                        // '<'
      lookahead2W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 122:                       // 'eq'
    case 133:                       // 'ge'
    case 137:                       // 'gt'
    case 149:                       // 'is'
    case 154:                       // 'le'
    case 158:                       // 'lt'
    case 166:                       // 'ne'
      lookahead2W(198);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // IntegerLiteral
     && lk != 2                     // DecimalLiteral
     && lk != 3                     // DoubleLiteral
     && lk != 4                     // StringLiteral
     && lk != 5                     // URIQualifiedName
     && lk != 15                    // QName^Token
     && lk != 21                    // Wildcard
     && lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 31                    // '$'
     && lk != 32                    // '%'
     && lk != 34                    // '('
     && lk != 35                    // '(#'
     && lk != 37                    // ')'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 43                    // '.'
     && lk != 44                    // '..'
     && lk != 45                    // '/'
     && lk != 46                    // '//'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 54                    // '<!--'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 59                    // '<?'
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 65                    // '?'
     && lk != 67                    // '@'
     && lk != 69                    // '['
     && lk != 70                    // ']'
     && lk != 73                    // '``['
     && lk != 75                    // 'after'
     && lk != 77                    // 'ancestor'
     && lk != 78                    // 'ancestor-or-self'
     && lk != 79                    // 'and'
     && lk != 80                    // 'append'
     && lk != 81                    // 'array'
     && lk != 82                    // 'as'
     && lk != 83                    // 'ascending'
     && lk != 84                    // 'at'
     && lk != 85                    // 'attribute'
     && lk != 87                    // 'before'
     && lk != 89                    // 'break'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 95                    // 'child'
     && lk != 96                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 100                   // 'continue'
     && lk != 101                   // 'copy'
     && lk != 103                   // 'count'
     && lk != 106                   // 'declare'
     && lk != 107                   // 'default'
     && lk != 108                   // 'delete'
     && lk != 109                   // 'descendant'
     && lk != 110                   // 'descendant-or-self'
     && lk != 111                   // 'descending'
     && lk != 113                   // 'div'
     && lk != 114                   // 'document'
     && lk != 115                   // 'document-node'
     && lk != 116                   // 'element'
     && lk != 117                   // 'else'
     && lk != 118                   // 'empty'
     && lk != 119                   // 'empty-sequence'
     && lk != 121                   // 'end'
     && lk != 123                   // 'every'
     && lk != 124                   // 'except'
     && lk != 125                   // 'exit'
     && lk != 129                   // 'following'
     && lk != 130                   // 'following-sibling'
     && lk != 131                   // 'for'
     && lk != 132                   // 'function'
     && lk != 135                   // 'group'
     && lk != 138                   // 'idiv'
     && lk != 139                   // 'if'
     && lk != 140                   // 'import'
     && lk != 144                   // 'insert'
     && lk != 145                   // 'instance'
     && lk != 146                   // 'intersect'
     && lk != 147                   // 'into'
     && lk != 148                   // 'invoke'
     && lk != 150                   // 'item'
     && lk != 156                   // 'let'
     && lk != 159                   // 'map'
     && lk != 161                   // 'mod'
     && lk != 162                   // 'modify'
     && lk != 163                   // 'module'
     && lk != 164                   // 'namespace'
     && lk != 165                   // 'namespace-node'
     && lk != 170                   // 'node'
     && lk != 173                   // 'only'
     && lk != 175                   // 'or'
     && lk != 176                   // 'order'
     && lk != 177                   // 'ordered'
     && lk != 179                   // 'parent'
     && lk != 184                   // 'preceding'
     && lk != 185                   // 'preceding-sibling'
     && lk != 188                   // 'processing-instruction'
     && lk != 189                   // 'rename'
     && lk != 190                   // 'replace'
     && lk != 191                   // 'return'
     && lk != 194                   // 'satisfies'
     && lk != 196                   // 'schema-attribute'
     && lk != 197                   // 'schema-element'
     && lk != 198                   // 'self'
     && lk != 201                   // 'some'
     && lk != 202                   // 'stable'
     && lk != 203                   // 'start'
     && lk != 206                   // 'switch'
     && lk != 207                   // 'text'
     && lk != 209                   // 'to'
     && lk != 211                   // 'treat'
     && lk != 212                   // 'try'
     && lk != 215                   // 'typeswitch'
     && lk != 216                   // 'union'
     && lk != 217                   // 'unordered'
     && lk != 219                   // 'validate'
     && lk != 221                   // 'variable'
     && lk != 224                   // 'where'
     && lk != 225                   // 'while'
     && lk != 227                   // 'with'
     && lk != 228                   // 'xquery'
     && lk != 230                   // '{'
     && lk != 234                   // '}'
     && lk != 235                   // '}`'
     && lk != 309                   // '<' IntegerLiteral
     && lk != 565                   // '<' DecimalLiteral
     && lk != 821                   // '<' DoubleLiteral
     && lk != 1077                  // '<' StringLiteral
     && lk != 1333                  // '<' URIQualifiedName
     && lk != 5429                  // '<' Wildcard
     && lk != 6522                  // 'eq' EOF
     && lk != 6533                  // 'ge' EOF
     && lk != 6537                  // 'gt' EOF
     && lk != 6549                  // 'is' EOF
     && lk != 6554                  // 'le' EOF
     && lk != 6558                  // 'lt' EOF
     && lk != 6566                  // 'ne' EOF
     && lk != 6778                  // 'eq' '!'
     && lk != 6789                  // 'ge' '!'
     && lk != 6793                  // 'gt' '!'
     && lk != 6805                  // 'is' '!'
     && lk != 6810                  // 'le' '!'
     && lk != 6814                  // 'lt' '!'
     && lk != 6822                  // 'ne' '!'
     && lk != 7034                  // 'eq' '!='
     && lk != 7045                  // 'ge' '!='
     && lk != 7049                  // 'gt' '!='
     && lk != 7061                  // 'is' '!='
     && lk != 7066                  // 'le' '!='
     && lk != 7070                  // 'lt' '!='
     && lk != 7078                  // 'ne' '!='
     && lk != 7546                  // 'eq' '#'
     && lk != 7557                  // 'ge' '#'
     && lk != 7561                  // 'gt' '#'
     && lk != 7573                  // 'is' '#'
     && lk != 7578                  // 'le' '#'
     && lk != 7582                  // 'lt' '#'
     && lk != 7590                  // 'ne' '#'
     && lk != 7989                  // '<' '$'
     && lk != 8245                  // '<' '%'
     && lk != 8757                  // '<' '('
     && lk != 9013                  // '<' '(#'
     && lk != 9850                  // 'eq' '*'
     && lk != 9861                  // 'ge' '*'
     && lk != 9865                  // 'gt' '*'
     && lk != 9877                  // 'is' '*'
     && lk != 9882                  // 'le' '*'
     && lk != 9886                  // 'lt' '*'
     && lk != 9894                  // 'ne' '*'
     && lk != 10037                 // '<' '+'
     && lk != 10362                 // 'eq' ','
     && lk != 10373                 // 'ge' ','
     && lk != 10377                 // 'gt' ','
     && lk != 10389                 // 'is' ','
     && lk != 10394                 // 'le' ','
     && lk != 10398                 // 'lt' ','
     && lk != 10406                 // 'ne' ','
     && lk != 10549                 // '<' '-'
     && lk != 11061                 // '<' '.'
     && lk != 11317                 // '<' '..'
     && lk != 11573                 // '<' '/'
     && lk != 11829                 // '<' '//'
     && lk != 13434                 // 'eq' ';'
     && lk != 13445                 // 'ge' ';'
     && lk != 13449                 // 'gt' ';'
     && lk != 13461                 // 'is' ';'
     && lk != 13466                 // 'le' ';'
     && lk != 13470                 // 'lt' ';'
     && lk != 13478                 // 'ne' ';'
     && lk != 13621                 // '<' '<'
     && lk != 13877                 // '<' '<!--'
     && lk != 14714                 // 'eq' '<<'
     && lk != 14725                 // 'ge' '<<'
     && lk != 14729                 // 'gt' '<<'
     && lk != 14741                 // 'is' '<<'
     && lk != 14746                 // 'le' '<<'
     && lk != 14750                 // 'lt' '<<'
     && lk != 14758                 // 'ne' '<<'
     && lk != 14970                 // 'eq' '<='
     && lk != 14981                 // 'ge' '<='
     && lk != 14985                 // 'gt' '<='
     && lk != 14997                 // 'is' '<='
     && lk != 15002                 // 'le' '<='
     && lk != 15006                 // 'lt' '<='
     && lk != 15014                 // 'ne' '<='
     && lk != 15157                 // '<' '<?'
     && lk != 15482                 // 'eq' '='
     && lk != 15493                 // 'ge' '='
     && lk != 15497                 // 'gt' '='
     && lk != 15509                 // 'is' '='
     && lk != 15514                 // 'le' '='
     && lk != 15518                 // 'lt' '='
     && lk != 15526                 // 'ne' '='
     && lk != 15738                 // 'eq' '=>'
     && lk != 15749                 // 'ge' '=>'
     && lk != 15753                 // 'gt' '=>'
     && lk != 15765                 // 'is' '=>'
     && lk != 15770                 // 'le' '=>'
     && lk != 15774                 // 'lt' '=>'
     && lk != 15782                 // 'ne' '=>'
     && lk != 15994                 // 'eq' '>'
     && lk != 16005                 // 'ge' '>'
     && lk != 16009                 // 'gt' '>'
     && lk != 16021                 // 'is' '>'
     && lk != 16026                 // 'le' '>'
     && lk != 16030                 // 'lt' '>'
     && lk != 16038                 // 'ne' '>'
     && lk != 16250                 // 'eq' '>='
     && lk != 16261                 // 'ge' '>='
     && lk != 16265                 // 'gt' '>='
     && lk != 16277                 // 'is' '>='
     && lk != 16282                 // 'le' '>='
     && lk != 16286                 // 'lt' '>='
     && lk != 16294                 // 'ne' '>='
     && lk != 16506                 // 'eq' '>>'
     && lk != 16517                 // 'ge' '>>'
     && lk != 16521                 // 'gt' '>>'
     && lk != 16533                 // 'is' '>>'
     && lk != 16538                 // 'le' '>>'
     && lk != 16542                 // 'lt' '>>'
     && lk != 16550                 // 'ne' '>>'
     && lk != 16693                 // '<' '?'
     && lk != 17205                 // '<' '@'
     && lk != 17717                 // '<' '['
     && lk != 18741                 // '<' '``['
     && lk != 20602                 // 'eq' 'append'
     && lk != 20613                 // 'ge' 'append'
     && lk != 20617                 // 'gt' 'append'
     && lk != 20629                 // 'is' 'append'
     && lk != 20634                 // 'le' 'append'
     && lk != 20638                 // 'lt' 'append'
     && lk != 20646                 // 'ne' 'append'
     && lk != 22906                 // 'eq' 'break'
     && lk != 22917                 // 'ge' 'break'
     && lk != 22921                 // 'gt' 'break'
     && lk != 22933                 // 'is' 'break'
     && lk != 22938                 // 'le' 'break'
     && lk != 22942                 // 'lt' 'break'
     && lk != 22950                 // 'ne' 'break'
     && lk != 25722                 // 'eq' 'continue'
     && lk != 25733                 // 'ge' 'continue'
     && lk != 25737                 // 'gt' 'continue'
     && lk != 25749                 // 'is' 'continue'
     && lk != 25754                 // 'le' 'continue'
     && lk != 25758                 // 'lt' 'continue'
     && lk != 25766                 // 'ne' 'continue'
     && lk != 25978                 // 'eq' 'copy'
     && lk != 25989                 // 'ge' 'copy'
     && lk != 25993                 // 'gt' 'copy'
     && lk != 26005                 // 'is' 'copy'
     && lk != 26010                 // 'le' 'copy'
     && lk != 26014                 // 'lt' 'copy'
     && lk != 26022                 // 'ne' 'copy'
     && lk != 27770                 // 'eq' 'delete'
     && lk != 27781                 // 'ge' 'delete'
     && lk != 27785                 // 'gt' 'delete'
     && lk != 27797                 // 'is' 'delete'
     && lk != 27802                 // 'le' 'delete'
     && lk != 27806                 // 'lt' 'delete'
     && lk != 27814                 // 'ne' 'delete'
     && lk != 32122                 // 'eq' 'exit'
     && lk != 32133                 // 'ge' 'exit'
     && lk != 32137                 // 'gt' 'exit'
     && lk != 32149                 // 'is' 'exit'
     && lk != 32154                 // 'le' 'exit'
     && lk != 32158                 // 'lt' 'exit'
     && lk != 32166                 // 'ne' 'exit'
     && lk != 36986                 // 'eq' 'insert'
     && lk != 36997                 // 'ge' 'insert'
     && lk != 37001                 // 'gt' 'insert'
     && lk != 37013                 // 'is' 'insert'
     && lk != 37018                 // 'le' 'insert'
     && lk != 37022                 // 'lt' 'insert'
     && lk != 37030                 // 'ne' 'insert'
     && lk != 38010                 // 'eq' 'invoke'
     && lk != 38021                 // 'ge' 'invoke'
     && lk != 38025                 // 'gt' 'invoke'
     && lk != 38037                 // 'is' 'invoke'
     && lk != 38042                 // 'le' 'invoke'
     && lk != 38046                 // 'lt' 'invoke'
     && lk != 38054                 // 'ne' 'invoke'
     && lk != 48506                 // 'eq' 'rename'
     && lk != 48517                 // 'ge' 'rename'
     && lk != 48521                 // 'gt' 'rename'
     && lk != 48533                 // 'is' 'rename'
     && lk != 48538                 // 'le' 'rename'
     && lk != 48542                 // 'lt' 'rename'
     && lk != 48550                 // 'ne' 'rename'
     && lk != 48762                 // 'eq' 'replace'
     && lk != 48773                 // 'ge' 'replace'
     && lk != 48777                 // 'gt' 'replace'
     && lk != 48789                 // 'is' 'replace'
     && lk != 48794                 // 'le' 'replace'
     && lk != 48798                 // 'lt' 'replace'
     && lk != 48806                 // 'ne' 'replace'
     && lk != 53882                 // 'eq' 'transform'
     && lk != 53893                 // 'ge' 'transform'
     && lk != 53897                 // 'gt' 'transform'
     && lk != 53909                 // 'is' 'transform'
     && lk != 53914                 // 'le' 'transform'
     && lk != 53918                 // 'lt' 'transform'
     && lk != 53926                 // 'ne' 'transform'
     && lk != 56698                 // 'eq' 'variable'
     && lk != 56709                 // 'ge' 'variable'
     && lk != 56713                 // 'gt' 'variable'
     && lk != 56725                 // 'is' 'variable'
     && lk != 56730                 // 'le' 'variable'
     && lk != 56734                 // 'lt' 'variable'
     && lk != 56742                 // 'ne' 'variable'
     && lk != 57722                 // 'eq' 'while'
     && lk != 57733                 // 'ge' 'while'
     && lk != 57737                 // 'gt' 'while'
     && lk != 57749                 // 'is' 'while'
     && lk != 57754                 // 'le' 'while'
     && lk != 57758                 // 'lt' 'while'
     && lk != 57766                 // 'ne' 'while'
     && lk != 59002                 // 'eq' '{'
     && lk != 59013                 // 'ge' '{'
     && lk != 59017                 // 'gt' '{'
     && lk != 59029                 // 'is' '{'
     && lk != 59034                 // 'le' '{'
     && lk != 59038                 // 'lt' '{'
     && lk != 59046                 // 'ne' '{'
     && lk != 59514                 // 'eq' '|'
     && lk != 59525                 // 'ge' '|'
     && lk != 59529                 // 'gt' '|'
     && lk != 59541                 // 'is' '|'
     && lk != 59546                 // 'le' '|'
     && lk != 59550                 // 'lt' '|'
     && lk != 59558                 // 'ne' '|'
     && lk != 59770                 // 'eq' '||'
     && lk != 59781                 // 'ge' '||'
     && lk != 59785                 // 'gt' '||'
     && lk != 59797                 // 'is' '||'
     && lk != 59802                 // 'le' '||'
     && lk != 59806                 // 'lt' '||'
     && lk != 59814                 // 'ne' '||'
     && lk != 60026                 // 'eq' '}'
     && lk != 60037                 // 'ge' '}'
     && lk != 60041                 // 'gt' '}'
     && lk != 60053                 // 'is' '}'
     && lk != 60058                 // 'le' '}'
     && lk != 60062                 // 'lt' '}'
     && lk != 60070)                // 'ne' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          switch (l1)
          {
          case 122:                 // 'eq'
          case 133:                 // 'ge'
          case 137:                 // 'gt'
          case 154:                 // 'le'
          case 158:                 // 'lt'
          case 166:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 149:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(180);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
          try_StringConcatExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    if (lk == -1
     || lk == 27                    // '!='
     || lk == 57                    // '<<'
     || lk == 58                    // '<='
     || lk == 60                    // '='
     || lk == 62                    // '>'
     || lk == 63                    // '>='
     || lk == 64                    // '>>'
     || lk == 309                   // '<' IntegerLiteral
     || lk == 565                   // '<' DecimalLiteral
     || lk == 821                   // '<' DoubleLiteral
     || lk == 1077                  // '<' StringLiteral
     || lk == 1333                  // '<' URIQualifiedName
     || lk == 5429                  // '<' Wildcard
     || lk == 7989                  // '<' '$'
     || lk == 8245                  // '<' '%'
     || lk == 8757                  // '<' '('
     || lk == 9013                  // '<' '(#'
     || lk == 10037                 // '<' '+'
     || lk == 10549                 // '<' '-'
     || lk == 11061                 // '<' '.'
     || lk == 11317                 // '<' '..'
     || lk == 11573                 // '<' '/'
     || lk == 11829                 // '<' '//'
     || lk == 13621                 // '<' '<'
     || lk == 13877                 // '<' '<!--'
     || lk == 15157                 // '<' '<?'
     || lk == 16693                 // '<' '?'
     || lk == 17205                 // '<' '@'
     || lk == 17717                 // '<' '['
     || lk == 18741)                // '<' '``['
    {
      switch (l1)
      {
      case 122:                     // 'eq'
      case 133:                     // 'ge'
      case 137:                     // 'gt'
      case 154:                     // 'le'
      case 158:                     // 'lt'
      case 166:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 149:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_StringConcatExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_StringConcatExpr();
    switch (l1)
    {
    case 53:                        // '<'
      lookahead2W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 122:                       // 'eq'
    case 133:                       // 'ge'
    case 137:                       // 'gt'
    case 149:                       // 'is'
    case 154:                       // 'le'
    case 158:                       // 'lt'
    case 166:                       // 'ne'
      lookahead2W(198);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk != 1                     // IntegerLiteral
     && lk != 2                     // DecimalLiteral
     && lk != 3                     // DoubleLiteral
     && lk != 4                     // StringLiteral
     && lk != 5                     // URIQualifiedName
     && lk != 15                    // QName^Token
     && lk != 21                    // Wildcard
     && lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 31                    // '$'
     && lk != 32                    // '%'
     && lk != 34                    // '('
     && lk != 35                    // '(#'
     && lk != 37                    // ')'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 43                    // '.'
     && lk != 44                    // '..'
     && lk != 45                    // '/'
     && lk != 46                    // '//'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 54                    // '<!--'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 59                    // '<?'
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 65                    // '?'
     && lk != 67                    // '@'
     && lk != 69                    // '['
     && lk != 70                    // ']'
     && lk != 73                    // '``['
     && lk != 75                    // 'after'
     && lk != 77                    // 'ancestor'
     && lk != 78                    // 'ancestor-or-self'
     && lk != 79                    // 'and'
     && lk != 80                    // 'append'
     && lk != 81                    // 'array'
     && lk != 82                    // 'as'
     && lk != 83                    // 'ascending'
     && lk != 84                    // 'at'
     && lk != 85                    // 'attribute'
     && lk != 87                    // 'before'
     && lk != 89                    // 'break'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 95                    // 'child'
     && lk != 96                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 100                   // 'continue'
     && lk != 101                   // 'copy'
     && lk != 103                   // 'count'
     && lk != 106                   // 'declare'
     && lk != 107                   // 'default'
     && lk != 108                   // 'delete'
     && lk != 109                   // 'descendant'
     && lk != 110                   // 'descendant-or-self'
     && lk != 111                   // 'descending'
     && lk != 113                   // 'div'
     && lk != 114                   // 'document'
     && lk != 115                   // 'document-node'
     && lk != 116                   // 'element'
     && lk != 117                   // 'else'
     && lk != 118                   // 'empty'
     && lk != 119                   // 'empty-sequence'
     && lk != 121                   // 'end'
     && lk != 123                   // 'every'
     && lk != 124                   // 'except'
     && lk != 125                   // 'exit'
     && lk != 129                   // 'following'
     && lk != 130                   // 'following-sibling'
     && lk != 131                   // 'for'
     && lk != 132                   // 'function'
     && lk != 135                   // 'group'
     && lk != 138                   // 'idiv'
     && lk != 139                   // 'if'
     && lk != 140                   // 'import'
     && lk != 144                   // 'insert'
     && lk != 145                   // 'instance'
     && lk != 146                   // 'intersect'
     && lk != 147                   // 'into'
     && lk != 148                   // 'invoke'
     && lk != 150                   // 'item'
     && lk != 156                   // 'let'
     && lk != 159                   // 'map'
     && lk != 161                   // 'mod'
     && lk != 162                   // 'modify'
     && lk != 163                   // 'module'
     && lk != 164                   // 'namespace'
     && lk != 165                   // 'namespace-node'
     && lk != 170                   // 'node'
     && lk != 173                   // 'only'
     && lk != 175                   // 'or'
     && lk != 176                   // 'order'
     && lk != 177                   // 'ordered'
     && lk != 179                   // 'parent'
     && lk != 184                   // 'preceding'
     && lk != 185                   // 'preceding-sibling'
     && lk != 188                   // 'processing-instruction'
     && lk != 189                   // 'rename'
     && lk != 190                   // 'replace'
     && lk != 191                   // 'return'
     && lk != 194                   // 'satisfies'
     && lk != 196                   // 'schema-attribute'
     && lk != 197                   // 'schema-element'
     && lk != 198                   // 'self'
     && lk != 201                   // 'some'
     && lk != 202                   // 'stable'
     && lk != 203                   // 'start'
     && lk != 206                   // 'switch'
     && lk != 207                   // 'text'
     && lk != 209                   // 'to'
     && lk != 211                   // 'treat'
     && lk != 212                   // 'try'
     && lk != 215                   // 'typeswitch'
     && lk != 216                   // 'union'
     && lk != 217                   // 'unordered'
     && lk != 219                   // 'validate'
     && lk != 221                   // 'variable'
     && lk != 224                   // 'where'
     && lk != 225                   // 'while'
     && lk != 227                   // 'with'
     && lk != 228                   // 'xquery'
     && lk != 230                   // '{'
     && lk != 234                   // '}'
     && lk != 235                   // '}`'
     && lk != 309                   // '<' IntegerLiteral
     && lk != 565                   // '<' DecimalLiteral
     && lk != 821                   // '<' DoubleLiteral
     && lk != 1077                  // '<' StringLiteral
     && lk != 1333                  // '<' URIQualifiedName
     && lk != 5429                  // '<' Wildcard
     && lk != 6522                  // 'eq' EOF
     && lk != 6533                  // 'ge' EOF
     && lk != 6537                  // 'gt' EOF
     && lk != 6549                  // 'is' EOF
     && lk != 6554                  // 'le' EOF
     && lk != 6558                  // 'lt' EOF
     && lk != 6566                  // 'ne' EOF
     && lk != 6778                  // 'eq' '!'
     && lk != 6789                  // 'ge' '!'
     && lk != 6793                  // 'gt' '!'
     && lk != 6805                  // 'is' '!'
     && lk != 6810                  // 'le' '!'
     && lk != 6814                  // 'lt' '!'
     && lk != 6822                  // 'ne' '!'
     && lk != 7034                  // 'eq' '!='
     && lk != 7045                  // 'ge' '!='
     && lk != 7049                  // 'gt' '!='
     && lk != 7061                  // 'is' '!='
     && lk != 7066                  // 'le' '!='
     && lk != 7070                  // 'lt' '!='
     && lk != 7078                  // 'ne' '!='
     && lk != 7546                  // 'eq' '#'
     && lk != 7557                  // 'ge' '#'
     && lk != 7561                  // 'gt' '#'
     && lk != 7573                  // 'is' '#'
     && lk != 7578                  // 'le' '#'
     && lk != 7582                  // 'lt' '#'
     && lk != 7590                  // 'ne' '#'
     && lk != 7989                  // '<' '$'
     && lk != 8245                  // '<' '%'
     && lk != 8757                  // '<' '('
     && lk != 9013                  // '<' '(#'
     && lk != 9850                  // 'eq' '*'
     && lk != 9861                  // 'ge' '*'
     && lk != 9865                  // 'gt' '*'
     && lk != 9877                  // 'is' '*'
     && lk != 9882                  // 'le' '*'
     && lk != 9886                  // 'lt' '*'
     && lk != 9894                  // 'ne' '*'
     && lk != 10037                 // '<' '+'
     && lk != 10362                 // 'eq' ','
     && lk != 10373                 // 'ge' ','
     && lk != 10377                 // 'gt' ','
     && lk != 10389                 // 'is' ','
     && lk != 10394                 // 'le' ','
     && lk != 10398                 // 'lt' ','
     && lk != 10406                 // 'ne' ','
     && lk != 10549                 // '<' '-'
     && lk != 11061                 // '<' '.'
     && lk != 11317                 // '<' '..'
     && lk != 11573                 // '<' '/'
     && lk != 11829                 // '<' '//'
     && lk != 13434                 // 'eq' ';'
     && lk != 13445                 // 'ge' ';'
     && lk != 13449                 // 'gt' ';'
     && lk != 13461                 // 'is' ';'
     && lk != 13466                 // 'le' ';'
     && lk != 13470                 // 'lt' ';'
     && lk != 13478                 // 'ne' ';'
     && lk != 13621                 // '<' '<'
     && lk != 13877                 // '<' '<!--'
     && lk != 14714                 // 'eq' '<<'
     && lk != 14725                 // 'ge' '<<'
     && lk != 14729                 // 'gt' '<<'
     && lk != 14741                 // 'is' '<<'
     && lk != 14746                 // 'le' '<<'
     && lk != 14750                 // 'lt' '<<'
     && lk != 14758                 // 'ne' '<<'
     && lk != 14970                 // 'eq' '<='
     && lk != 14981                 // 'ge' '<='
     && lk != 14985                 // 'gt' '<='
     && lk != 14997                 // 'is' '<='
     && lk != 15002                 // 'le' '<='
     && lk != 15006                 // 'lt' '<='
     && lk != 15014                 // 'ne' '<='
     && lk != 15157                 // '<' '<?'
     && lk != 15482                 // 'eq' '='
     && lk != 15493                 // 'ge' '='
     && lk != 15497                 // 'gt' '='
     && lk != 15509                 // 'is' '='
     && lk != 15514                 // 'le' '='
     && lk != 15518                 // 'lt' '='
     && lk != 15526                 // 'ne' '='
     && lk != 15738                 // 'eq' '=>'
     && lk != 15749                 // 'ge' '=>'
     && lk != 15753                 // 'gt' '=>'
     && lk != 15765                 // 'is' '=>'
     && lk != 15770                 // 'le' '=>'
     && lk != 15774                 // 'lt' '=>'
     && lk != 15782                 // 'ne' '=>'
     && lk != 15994                 // 'eq' '>'
     && lk != 16005                 // 'ge' '>'
     && lk != 16009                 // 'gt' '>'
     && lk != 16021                 // 'is' '>'
     && lk != 16026                 // 'le' '>'
     && lk != 16030                 // 'lt' '>'
     && lk != 16038                 // 'ne' '>'
     && lk != 16250                 // 'eq' '>='
     && lk != 16261                 // 'ge' '>='
     && lk != 16265                 // 'gt' '>='
     && lk != 16277                 // 'is' '>='
     && lk != 16282                 // 'le' '>='
     && lk != 16286                 // 'lt' '>='
     && lk != 16294                 // 'ne' '>='
     && lk != 16506                 // 'eq' '>>'
     && lk != 16517                 // 'ge' '>>'
     && lk != 16521                 // 'gt' '>>'
     && lk != 16533                 // 'is' '>>'
     && lk != 16538                 // 'le' '>>'
     && lk != 16542                 // 'lt' '>>'
     && lk != 16550                 // 'ne' '>>'
     && lk != 16693                 // '<' '?'
     && lk != 17205                 // '<' '@'
     && lk != 17717                 // '<' '['
     && lk != 18741                 // '<' '``['
     && lk != 20602                 // 'eq' 'append'
     && lk != 20613                 // 'ge' 'append'
     && lk != 20617                 // 'gt' 'append'
     && lk != 20629                 // 'is' 'append'
     && lk != 20634                 // 'le' 'append'
     && lk != 20638                 // 'lt' 'append'
     && lk != 20646                 // 'ne' 'append'
     && lk != 22906                 // 'eq' 'break'
     && lk != 22917                 // 'ge' 'break'
     && lk != 22921                 // 'gt' 'break'
     && lk != 22933                 // 'is' 'break'
     && lk != 22938                 // 'le' 'break'
     && lk != 22942                 // 'lt' 'break'
     && lk != 22950                 // 'ne' 'break'
     && lk != 25722                 // 'eq' 'continue'
     && lk != 25733                 // 'ge' 'continue'
     && lk != 25737                 // 'gt' 'continue'
     && lk != 25749                 // 'is' 'continue'
     && lk != 25754                 // 'le' 'continue'
     && lk != 25758                 // 'lt' 'continue'
     && lk != 25766                 // 'ne' 'continue'
     && lk != 25978                 // 'eq' 'copy'
     && lk != 25989                 // 'ge' 'copy'
     && lk != 25993                 // 'gt' 'copy'
     && lk != 26005                 // 'is' 'copy'
     && lk != 26010                 // 'le' 'copy'
     && lk != 26014                 // 'lt' 'copy'
     && lk != 26022                 // 'ne' 'copy'
     && lk != 27770                 // 'eq' 'delete'
     && lk != 27781                 // 'ge' 'delete'
     && lk != 27785                 // 'gt' 'delete'
     && lk != 27797                 // 'is' 'delete'
     && lk != 27802                 // 'le' 'delete'
     && lk != 27806                 // 'lt' 'delete'
     && lk != 27814                 // 'ne' 'delete'
     && lk != 32122                 // 'eq' 'exit'
     && lk != 32133                 // 'ge' 'exit'
     && lk != 32137                 // 'gt' 'exit'
     && lk != 32149                 // 'is' 'exit'
     && lk != 32154                 // 'le' 'exit'
     && lk != 32158                 // 'lt' 'exit'
     && lk != 32166                 // 'ne' 'exit'
     && lk != 36986                 // 'eq' 'insert'
     && lk != 36997                 // 'ge' 'insert'
     && lk != 37001                 // 'gt' 'insert'
     && lk != 37013                 // 'is' 'insert'
     && lk != 37018                 // 'le' 'insert'
     && lk != 37022                 // 'lt' 'insert'
     && lk != 37030                 // 'ne' 'insert'
     && lk != 38010                 // 'eq' 'invoke'
     && lk != 38021                 // 'ge' 'invoke'
     && lk != 38025                 // 'gt' 'invoke'
     && lk != 38037                 // 'is' 'invoke'
     && lk != 38042                 // 'le' 'invoke'
     && lk != 38046                 // 'lt' 'invoke'
     && lk != 38054                 // 'ne' 'invoke'
     && lk != 48506                 // 'eq' 'rename'
     && lk != 48517                 // 'ge' 'rename'
     && lk != 48521                 // 'gt' 'rename'
     && lk != 48533                 // 'is' 'rename'
     && lk != 48538                 // 'le' 'rename'
     && lk != 48542                 // 'lt' 'rename'
     && lk != 48550                 // 'ne' 'rename'
     && lk != 48762                 // 'eq' 'replace'
     && lk != 48773                 // 'ge' 'replace'
     && lk != 48777                 // 'gt' 'replace'
     && lk != 48789                 // 'is' 'replace'
     && lk != 48794                 // 'le' 'replace'
     && lk != 48798                 // 'lt' 'replace'
     && lk != 48806                 // 'ne' 'replace'
     && lk != 53882                 // 'eq' 'transform'
     && lk != 53893                 // 'ge' 'transform'
     && lk != 53897                 // 'gt' 'transform'
     && lk != 53909                 // 'is' 'transform'
     && lk != 53914                 // 'le' 'transform'
     && lk != 53918                 // 'lt' 'transform'
     && lk != 53926                 // 'ne' 'transform'
     && lk != 56698                 // 'eq' 'variable'
     && lk != 56709                 // 'ge' 'variable'
     && lk != 56713                 // 'gt' 'variable'
     && lk != 56725                 // 'is' 'variable'
     && lk != 56730                 // 'le' 'variable'
     && lk != 56734                 // 'lt' 'variable'
     && lk != 56742                 // 'ne' 'variable'
     && lk != 57722                 // 'eq' 'while'
     && lk != 57733                 // 'ge' 'while'
     && lk != 57737                 // 'gt' 'while'
     && lk != 57749                 // 'is' 'while'
     && lk != 57754                 // 'le' 'while'
     && lk != 57758                 // 'lt' 'while'
     && lk != 57766                 // 'ne' 'while'
     && lk != 59002                 // 'eq' '{'
     && lk != 59013                 // 'ge' '{'
     && lk != 59017                 // 'gt' '{'
     && lk != 59029                 // 'is' '{'
     && lk != 59034                 // 'le' '{'
     && lk != 59038                 // 'lt' '{'
     && lk != 59046                 // 'ne' '{'
     && lk != 59514                 // 'eq' '|'
     && lk != 59525                 // 'ge' '|'
     && lk != 59529                 // 'gt' '|'
     && lk != 59541                 // 'is' '|'
     && lk != 59546                 // 'le' '|'
     && lk != 59550                 // 'lt' '|'
     && lk != 59558                 // 'ne' '|'
     && lk != 59770                 // 'eq' '||'
     && lk != 59781                 // 'ge' '||'
     && lk != 59785                 // 'gt' '||'
     && lk != 59797                 // 'is' '||'
     && lk != 59802                 // 'le' '||'
     && lk != 59806                 // 'lt' '||'
     && lk != 59814                 // 'ne' '||'
     && lk != 60026                 // 'eq' '}'
     && lk != 60037                 // 'ge' '}'
     && lk != 60041                 // 'gt' '}'
     && lk != 60053                 // 'is' '}'
     && lk != 60058                 // 'le' '}'
     && lk != 60062                 // 'lt' '}'
     && lk != 60070)                // 'ne' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          switch (l1)
          {
          case 122:                 // 'eq'
          case 133:                 // 'ge'
          case 137:                 // 'gt'
          case 154:                 // 'le'
          case 158:                 // 'lt'
          case 166:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 149:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(180);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
          try_StringConcatExpr();
          memoize(13, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 27                    // '!='
     || lk == 57                    // '<<'
     || lk == 58                    // '<='
     || lk == 60                    // '='
     || lk == 62                    // '>'
     || lk == 63                    // '>='
     || lk == 64                    // '>>'
     || lk == 309                   // '<' IntegerLiteral
     || lk == 565                   // '<' DecimalLiteral
     || lk == 821                   // '<' DoubleLiteral
     || lk == 1077                  // '<' StringLiteral
     || lk == 1333                  // '<' URIQualifiedName
     || lk == 5429                  // '<' Wildcard
     || lk == 7989                  // '<' '$'
     || lk == 8245                  // '<' '%'
     || lk == 8757                  // '<' '('
     || lk == 9013                  // '<' '(#'
     || lk == 10037                 // '<' '+'
     || lk == 10549                 // '<' '-'
     || lk == 11061                 // '<' '.'
     || lk == 11317                 // '<' '..'
     || lk == 11573                 // '<' '/'
     || lk == 11829                 // '<' '//'
     || lk == 13621                 // '<' '<'
     || lk == 13877                 // '<' '<!--'
     || lk == 15157                 // '<' '<?'
     || lk == 16693                 // '<' '?'
     || lk == 17205                 // '<' '@'
     || lk == 17717                 // '<' '['
     || lk == 18741)                // '<' '``['
    {
      switch (l1)
      {
      case 122:                     // 'eq'
      case 133:                     // 'ge'
      case 137:                     // 'gt'
      case 154:                     // 'le'
      case 158:                     // 'lt'
      case 166:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 149:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_StringConcatExpr();
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 233)                // '||'
      {
        break;
      }
      consume(233);                 // '||'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 233)                // '||'
      {
        break;
      }
      consumeT(233);                // '||'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    switch (l1)
    {
    case 209:                       // 'to'
      lookahead2W(198);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 465                   // 'to' IntegerLiteral
     || lk == 721                   // 'to' DecimalLiteral
     || lk == 977                   // 'to' DoubleLiteral
     || lk == 1233                  // 'to' StringLiteral
     || lk == 1489                  // 'to' URIQualifiedName
     || lk == 4049                  // 'to' QName^Token
     || lk == 5585                  // 'to' Wildcard
     || lk == 8145                  // 'to' '$'
     || lk == 8401                  // 'to' '%'
     || lk == 8913                  // 'to' '('
     || lk == 9169                  // 'to' '(#'
     || lk == 10193                 // 'to' '+'
     || lk == 10705                 // 'to' '-'
     || lk == 11217                 // 'to' '.'
     || lk == 11473                 // 'to' '..'
     || lk == 11729                 // 'to' '/'
     || lk == 11985                 // 'to' '//'
     || lk == 13777                 // 'to' '<'
     || lk == 14033                 // 'to' '<!--'
     || lk == 15313                 // 'to' '<?'
     || lk == 16849                 // 'to' '?'
     || lk == 17361                 // 'to' '@'
     || lk == 17873                 // 'to' '['
     || lk == 18897                 // 'to' '``['
     || lk == 19921                 // 'to' 'ancestor'
     || lk == 20177                 // 'to' 'ancestor-or-self'
     || lk == 20433                 // 'to' 'and'
     || lk == 20945                 // 'to' 'array'
     || lk == 21457                 // 'to' 'ascending'
     || lk == 21969                 // 'to' 'attribute'
     || lk == 23505                 // 'to' 'case'
     || lk == 23761                 // 'to' 'cast'
     || lk == 24017                 // 'to' 'castable'
     || lk == 24529                 // 'to' 'child'
     || lk == 24785                 // 'to' 'collation'
     || lk == 25041                 // 'to' 'comment'
     || lk == 26577                 // 'to' 'count'
     || lk == 27345                 // 'to' 'declare'
     || lk == 27601                 // 'to' 'default'
     || lk == 28113                 // 'to' 'descendant'
     || lk == 28369                 // 'to' 'descendant-or-self'
     || lk == 28625                 // 'to' 'descending'
     || lk == 29137                 // 'to' 'div'
     || lk == 29393                 // 'to' 'document'
     || lk == 29649                 // 'to' 'document-node'
     || lk == 29905                 // 'to' 'element'
     || lk == 30161                 // 'to' 'else'
     || lk == 30417                 // 'to' 'empty'
     || lk == 30673                 // 'to' 'empty-sequence'
     || lk == 31185                 // 'to' 'end'
     || lk == 31441                 // 'to' 'eq'
     || lk == 31697                 // 'to' 'every'
     || lk == 31953                 // 'to' 'except'
     || lk == 33233                 // 'to' 'following'
     || lk == 33489                 // 'to' 'following-sibling'
     || lk == 33745                 // 'to' 'for'
     || lk == 34001                 // 'to' 'function'
     || lk == 34257                 // 'to' 'ge'
     || lk == 34769                 // 'to' 'group'
     || lk == 35281                 // 'to' 'gt'
     || lk == 35537                 // 'to' 'idiv'
     || lk == 35793                 // 'to' 'if'
     || lk == 36049                 // 'to' 'import'
     || lk == 37329                 // 'to' 'instance'
     || lk == 37585                 // 'to' 'intersect'
     || lk == 38353                 // 'to' 'is'
     || lk == 38609                 // 'to' 'item'
     || lk == 39633                 // 'to' 'le'
     || lk == 40145                 // 'to' 'let'
     || lk == 40657                 // 'to' 'lt'
     || lk == 40913                 // 'to' 'map'
     || lk == 41425                 // 'to' 'mod'
     || lk == 41937                 // 'to' 'module'
     || lk == 42193                 // 'to' 'namespace'
     || lk == 42449                 // 'to' 'namespace-node'
     || lk == 42705                 // 'to' 'ne'
     || lk == 43729                 // 'to' 'node'
     || lk == 44497                 // 'to' 'only'
     || lk == 45009                 // 'to' 'or'
     || lk == 45265                 // 'to' 'order'
     || lk == 45521                 // 'to' 'ordered'
     || lk == 46033                 // 'to' 'parent'
     || lk == 47313                 // 'to' 'preceding'
     || lk == 47569                 // 'to' 'preceding-sibling'
     || lk == 48337                 // 'to' 'processing-instruction'
     || lk == 49105                 // 'to' 'return'
     || lk == 49873                 // 'to' 'satisfies'
     || lk == 50385                 // 'to' 'schema-attribute'
     || lk == 50641                 // 'to' 'schema-element'
     || lk == 50897                 // 'to' 'self'
     || lk == 51665                 // 'to' 'some'
     || lk == 51921                 // 'to' 'stable'
     || lk == 52177                 // 'to' 'start'
     || lk == 52945                 // 'to' 'switch'
     || lk == 53201                 // 'to' 'text'
     || lk == 53713                 // 'to' 'to'
     || lk == 54225                 // 'to' 'treat'
     || lk == 54481                 // 'to' 'try'
     || lk == 55249                 // 'to' 'typeswitch'
     || lk == 55505                 // 'to' 'union'
     || lk == 55761                 // 'to' 'unordered'
     || lk == 56273                 // 'to' 'validate'
     || lk == 57553                 // 'to' 'where'
     || lk == 58577)                // 'to' 'xquery'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(209);            // 'to'
          lookahead1W(180);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
          try_AdditiveExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(209);                 // 'to'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    switch (l1)
    {
    case 209:                       // 'to'
      lookahead2W(198);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 465                   // 'to' IntegerLiteral
     || lk == 721                   // 'to' DecimalLiteral
     || lk == 977                   // 'to' DoubleLiteral
     || lk == 1233                  // 'to' StringLiteral
     || lk == 1489                  // 'to' URIQualifiedName
     || lk == 4049                  // 'to' QName^Token
     || lk == 5585                  // 'to' Wildcard
     || lk == 8145                  // 'to' '$'
     || lk == 8401                  // 'to' '%'
     || lk == 8913                  // 'to' '('
     || lk == 9169                  // 'to' '(#'
     || lk == 10193                 // 'to' '+'
     || lk == 10705                 // 'to' '-'
     || lk == 11217                 // 'to' '.'
     || lk == 11473                 // 'to' '..'
     || lk == 11729                 // 'to' '/'
     || lk == 11985                 // 'to' '//'
     || lk == 13777                 // 'to' '<'
     || lk == 14033                 // 'to' '<!--'
     || lk == 15313                 // 'to' '<?'
     || lk == 16849                 // 'to' '?'
     || lk == 17361                 // 'to' '@'
     || lk == 17873                 // 'to' '['
     || lk == 18897                 // 'to' '``['
     || lk == 19921                 // 'to' 'ancestor'
     || lk == 20177                 // 'to' 'ancestor-or-self'
     || lk == 20433                 // 'to' 'and'
     || lk == 20945                 // 'to' 'array'
     || lk == 21457                 // 'to' 'ascending'
     || lk == 21969                 // 'to' 'attribute'
     || lk == 23505                 // 'to' 'case'
     || lk == 23761                 // 'to' 'cast'
     || lk == 24017                 // 'to' 'castable'
     || lk == 24529                 // 'to' 'child'
     || lk == 24785                 // 'to' 'collation'
     || lk == 25041                 // 'to' 'comment'
     || lk == 26577                 // 'to' 'count'
     || lk == 27345                 // 'to' 'declare'
     || lk == 27601                 // 'to' 'default'
     || lk == 28113                 // 'to' 'descendant'
     || lk == 28369                 // 'to' 'descendant-or-self'
     || lk == 28625                 // 'to' 'descending'
     || lk == 29137                 // 'to' 'div'
     || lk == 29393                 // 'to' 'document'
     || lk == 29649                 // 'to' 'document-node'
     || lk == 29905                 // 'to' 'element'
     || lk == 30161                 // 'to' 'else'
     || lk == 30417                 // 'to' 'empty'
     || lk == 30673                 // 'to' 'empty-sequence'
     || lk == 31185                 // 'to' 'end'
     || lk == 31441                 // 'to' 'eq'
     || lk == 31697                 // 'to' 'every'
     || lk == 31953                 // 'to' 'except'
     || lk == 33233                 // 'to' 'following'
     || lk == 33489                 // 'to' 'following-sibling'
     || lk == 33745                 // 'to' 'for'
     || lk == 34001                 // 'to' 'function'
     || lk == 34257                 // 'to' 'ge'
     || lk == 34769                 // 'to' 'group'
     || lk == 35281                 // 'to' 'gt'
     || lk == 35537                 // 'to' 'idiv'
     || lk == 35793                 // 'to' 'if'
     || lk == 36049                 // 'to' 'import'
     || lk == 37329                 // 'to' 'instance'
     || lk == 37585                 // 'to' 'intersect'
     || lk == 38353                 // 'to' 'is'
     || lk == 38609                 // 'to' 'item'
     || lk == 39633                 // 'to' 'le'
     || lk == 40145                 // 'to' 'let'
     || lk == 40657                 // 'to' 'lt'
     || lk == 40913                 // 'to' 'map'
     || lk == 41425                 // 'to' 'mod'
     || lk == 41937                 // 'to' 'module'
     || lk == 42193                 // 'to' 'namespace'
     || lk == 42449                 // 'to' 'namespace-node'
     || lk == 42705                 // 'to' 'ne'
     || lk == 43729                 // 'to' 'node'
     || lk == 44497                 // 'to' 'only'
     || lk == 45009                 // 'to' 'or'
     || lk == 45265                 // 'to' 'order'
     || lk == 45521                 // 'to' 'ordered'
     || lk == 46033                 // 'to' 'parent'
     || lk == 47313                 // 'to' 'preceding'
     || lk == 47569                 // 'to' 'preceding-sibling'
     || lk == 48337                 // 'to' 'processing-instruction'
     || lk == 49105                 // 'to' 'return'
     || lk == 49873                 // 'to' 'satisfies'
     || lk == 50385                 // 'to' 'schema-attribute'
     || lk == 50641                 // 'to' 'schema-element'
     || lk == 50897                 // 'to' 'self'
     || lk == 51665                 // 'to' 'some'
     || lk == 51921                 // 'to' 'stable'
     || lk == 52177                 // 'to' 'start'
     || lk == 52945                 // 'to' 'switch'
     || lk == 53201                 // 'to' 'text'
     || lk == 53713                 // 'to' 'to'
     || lk == 54225                 // 'to' 'treat'
     || lk == 54481                 // 'to' 'try'
     || lk == 55249                 // 'to' 'typeswitch'
     || lk == 55505                 // 'to' 'union'
     || lk == 55761                 // 'to' 'unordered'
     || lk == 56273                 // 'to' 'validate'
     || lk == 57553                 // 'to' 'where'
     || lk == 58577)                // 'to' 'xquery'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(209);            // 'to'
          lookahead1W(180);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
          try_AdditiveExpr();
          memoize(14, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(209);                // 'to'
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(180);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 40                  // ','
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235)                // '}`'
      {
        lk = memoized(15, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_MultiplicativeExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(180);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 40                  // ','
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235)                // '}`'
      {
        lk = memoized(15, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_MultiplicativeExpr();
            memoize(15, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(15, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 113:                     // 'div'
      case 138:                     // 'idiv'
      case 161:                     // 'mod'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 6513                // 'div' EOF
       && lk != 6538                // 'idiv' EOF
       && lk != 6561                // 'mod' EOF
       && lk != 6769                // 'div' '!'
       && lk != 6794                // 'idiv' '!'
       && lk != 6817                // 'mod' '!'
       && lk != 7025                // 'div' '!='
       && lk != 7050                // 'idiv' '!='
       && lk != 7073                // 'mod' '!='
       && lk != 7537                // 'div' '#'
       && lk != 7562                // 'idiv' '#'
       && lk != 7585                // 'mod' '#'
       && lk != 9841                // 'div' '*'
       && lk != 9866                // 'idiv' '*'
       && lk != 9889                // 'mod' '*'
       && lk != 10353               // 'div' ','
       && lk != 10378               // 'idiv' ','
       && lk != 10401               // 'mod' ','
       && lk != 13425               // 'div' ';'
       && lk != 13450               // 'idiv' ';'
       && lk != 13473               // 'mod' ';'
       && lk != 14705               // 'div' '<<'
       && lk != 14730               // 'idiv' '<<'
       && lk != 14753               // 'mod' '<<'
       && lk != 14961               // 'div' '<='
       && lk != 14986               // 'idiv' '<='
       && lk != 15009               // 'mod' '<='
       && lk != 15473               // 'div' '='
       && lk != 15498               // 'idiv' '='
       && lk != 15521               // 'mod' '='
       && lk != 15729               // 'div' '=>'
       && lk != 15754               // 'idiv' '=>'
       && lk != 15777               // 'mod' '=>'
       && lk != 15985               // 'div' '>'
       && lk != 16010               // 'idiv' '>'
       && lk != 16033               // 'mod' '>'
       && lk != 16241               // 'div' '>='
       && lk != 16266               // 'idiv' '>='
       && lk != 16289               // 'mod' '>='
       && lk != 16497               // 'div' '>>'
       && lk != 16522               // 'idiv' '>>'
       && lk != 16545               // 'mod' '>>'
       && lk != 20593               // 'div' 'append'
       && lk != 20618               // 'idiv' 'append'
       && lk != 20641               // 'mod' 'append'
       && lk != 22897               // 'div' 'break'
       && lk != 22922               // 'idiv' 'break'
       && lk != 22945               // 'mod' 'break'
       && lk != 25713               // 'div' 'continue'
       && lk != 25738               // 'idiv' 'continue'
       && lk != 25761               // 'mod' 'continue'
       && lk != 25969               // 'div' 'copy'
       && lk != 25994               // 'idiv' 'copy'
       && lk != 26017               // 'mod' 'copy'
       && lk != 27761               // 'div' 'delete'
       && lk != 27786               // 'idiv' 'delete'
       && lk != 27809               // 'mod' 'delete'
       && lk != 32113               // 'div' 'exit'
       && lk != 32138               // 'idiv' 'exit'
       && lk != 32161               // 'mod' 'exit'
       && lk != 36977               // 'div' 'insert'
       && lk != 37002               // 'idiv' 'insert'
       && lk != 37025               // 'mod' 'insert'
       && lk != 38001               // 'div' 'invoke'
       && lk != 38026               // 'idiv' 'invoke'
       && lk != 38049               // 'mod' 'invoke'
       && lk != 48497               // 'div' 'rename'
       && lk != 48522               // 'idiv' 'rename'
       && lk != 48545               // 'mod' 'rename'
       && lk != 48753               // 'div' 'replace'
       && lk != 48778               // 'idiv' 'replace'
       && lk != 48801               // 'mod' 'replace'
       && lk != 53873               // 'div' 'transform'
       && lk != 53898               // 'idiv' 'transform'
       && lk != 53921               // 'mod' 'transform'
       && lk != 56689               // 'div' 'variable'
       && lk != 56714               // 'idiv' 'variable'
       && lk != 56737               // 'mod' 'variable'
       && lk != 57713               // 'div' 'while'
       && lk != 57738               // 'idiv' 'while'
       && lk != 57761               // 'mod' 'while'
       && lk != 58993               // 'div' '{'
       && lk != 59018               // 'idiv' '{'
       && lk != 59041               // 'mod' '{'
       && lk != 59505               // 'div' '|'
       && lk != 59530               // 'idiv' '|'
       && lk != 59553               // 'mod' '|'
       && lk != 59761               // 'div' '||'
       && lk != 59786               // 'idiv' '||'
       && lk != 59809               // 'mod' '||'
       && lk != 60017               // 'div' '}'
       && lk != 60042               // 'idiv' '}'
       && lk != 60065)              // 'mod' '}'
      {
        lk = memoized(16, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 113:               // 'div'
              consumeT(113);        // 'div'
              break;
            case 138:               // 'idiv'
              consumeT(138);        // 'idiv'
              break;
            default:
              consumeT(161);        // 'mod'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_UnionExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0, lk);
        }
      }
      if (lk != -1
       && lk != 38)                 // '*'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 113:                     // 'div'
        consume(113);               // 'div'
        break;
      case 138:                     // 'idiv'
        consume(138);               // 'idiv'
        break;
      default:
        consume(161);               // 'mod'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 113:                     // 'div'
      case 138:                     // 'idiv'
      case 161:                     // 'mod'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 6513                // 'div' EOF
       && lk != 6538                // 'idiv' EOF
       && lk != 6561                // 'mod' EOF
       && lk != 6769                // 'div' '!'
       && lk != 6794                // 'idiv' '!'
       && lk != 6817                // 'mod' '!'
       && lk != 7025                // 'div' '!='
       && lk != 7050                // 'idiv' '!='
       && lk != 7073                // 'mod' '!='
       && lk != 7537                // 'div' '#'
       && lk != 7562                // 'idiv' '#'
       && lk != 7585                // 'mod' '#'
       && lk != 9841                // 'div' '*'
       && lk != 9866                // 'idiv' '*'
       && lk != 9889                // 'mod' '*'
       && lk != 10353               // 'div' ','
       && lk != 10378               // 'idiv' ','
       && lk != 10401               // 'mod' ','
       && lk != 13425               // 'div' ';'
       && lk != 13450               // 'idiv' ';'
       && lk != 13473               // 'mod' ';'
       && lk != 14705               // 'div' '<<'
       && lk != 14730               // 'idiv' '<<'
       && lk != 14753               // 'mod' '<<'
       && lk != 14961               // 'div' '<='
       && lk != 14986               // 'idiv' '<='
       && lk != 15009               // 'mod' '<='
       && lk != 15473               // 'div' '='
       && lk != 15498               // 'idiv' '='
       && lk != 15521               // 'mod' '='
       && lk != 15729               // 'div' '=>'
       && lk != 15754               // 'idiv' '=>'
       && lk != 15777               // 'mod' '=>'
       && lk != 15985               // 'div' '>'
       && lk != 16010               // 'idiv' '>'
       && lk != 16033               // 'mod' '>'
       && lk != 16241               // 'div' '>='
       && lk != 16266               // 'idiv' '>='
       && lk != 16289               // 'mod' '>='
       && lk != 16497               // 'div' '>>'
       && lk != 16522               // 'idiv' '>>'
       && lk != 16545               // 'mod' '>>'
       && lk != 20593               // 'div' 'append'
       && lk != 20618               // 'idiv' 'append'
       && lk != 20641               // 'mod' 'append'
       && lk != 22897               // 'div' 'break'
       && lk != 22922               // 'idiv' 'break'
       && lk != 22945               // 'mod' 'break'
       && lk != 25713               // 'div' 'continue'
       && lk != 25738               // 'idiv' 'continue'
       && lk != 25761               // 'mod' 'continue'
       && lk != 25969               // 'div' 'copy'
       && lk != 25994               // 'idiv' 'copy'
       && lk != 26017               // 'mod' 'copy'
       && lk != 27761               // 'div' 'delete'
       && lk != 27786               // 'idiv' 'delete'
       && lk != 27809               // 'mod' 'delete'
       && lk != 32113               // 'div' 'exit'
       && lk != 32138               // 'idiv' 'exit'
       && lk != 32161               // 'mod' 'exit'
       && lk != 36977               // 'div' 'insert'
       && lk != 37002               // 'idiv' 'insert'
       && lk != 37025               // 'mod' 'insert'
       && lk != 38001               // 'div' 'invoke'
       && lk != 38026               // 'idiv' 'invoke'
       && lk != 38049               // 'mod' 'invoke'
       && lk != 48497               // 'div' 'rename'
       && lk != 48522               // 'idiv' 'rename'
       && lk != 48545               // 'mod' 'rename'
       && lk != 48753               // 'div' 'replace'
       && lk != 48778               // 'idiv' 'replace'
       && lk != 48801               // 'mod' 'replace'
       && lk != 53873               // 'div' 'transform'
       && lk != 53898               // 'idiv' 'transform'
       && lk != 53921               // 'mod' 'transform'
       && lk != 56689               // 'div' 'variable'
       && lk != 56714               // 'idiv' 'variable'
       && lk != 56737               // 'mod' 'variable'
       && lk != 57713               // 'div' 'while'
       && lk != 57738               // 'idiv' 'while'
       && lk != 57761               // 'mod' 'while'
       && lk != 58993               // 'div' '{'
       && lk != 59018               // 'idiv' '{'
       && lk != 59041               // 'mod' '{'
       && lk != 59505               // 'div' '|'
       && lk != 59530               // 'idiv' '|'
       && lk != 59553               // 'mod' '|'
       && lk != 59761               // 'div' '||'
       && lk != 59786               // 'idiv' '||'
       && lk != 59809               // 'mod' '||'
       && lk != 60017               // 'div' '}'
       && lk != 60042               // 'idiv' '}'
       && lk != 60065)              // 'mod' '}'
      {
        lk = memoized(16, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 113:               // 'div'
              consumeT(113);        // 'div'
              break;
            case 138:               // 'idiv'
              consumeT(138);        // 'idiv'
              break;
            default:
              consumeT(161);        // 'mod'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_UnionExpr();
            memoize(16, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(16, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 38)                 // '*'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 113:                     // 'div'
        consumeT(113);              // 'div'
        break;
      case 138:                     // 'idiv'
        consumeT(138);              // 'idiv'
        break;
      default:
        consumeT(161);              // 'mod'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 216:                     // 'union'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 472                 // 'union' IntegerLiteral
       || lk == 728                 // 'union' DecimalLiteral
       || lk == 984                 // 'union' DoubleLiteral
       || lk == 1240                // 'union' StringLiteral
       || lk == 1496                // 'union' URIQualifiedName
       || lk == 4056                // 'union' QName^Token
       || lk == 5592                // 'union' Wildcard
       || lk == 8152                // 'union' '$'
       || lk == 8408                // 'union' '%'
       || lk == 8920                // 'union' '('
       || lk == 9176                // 'union' '(#'
       || lk == 10200               // 'union' '+'
       || lk == 10712               // 'union' '-'
       || lk == 11224               // 'union' '.'
       || lk == 11480               // 'union' '..'
       || lk == 11736               // 'union' '/'
       || lk == 11992               // 'union' '//'
       || lk == 13784               // 'union' '<'
       || lk == 14040               // 'union' '<!--'
       || lk == 15320               // 'union' '<?'
       || lk == 16856               // 'union' '?'
       || lk == 17368               // 'union' '@'
       || lk == 17880               // 'union' '['
       || lk == 18904               // 'union' '``['
       || lk == 19928               // 'union' 'ancestor'
       || lk == 20184               // 'union' 'ancestor-or-self'
       || lk == 20440               // 'union' 'and'
       || lk == 20952               // 'union' 'array'
       || lk == 21464               // 'union' 'ascending'
       || lk == 21976               // 'union' 'attribute'
       || lk == 23512               // 'union' 'case'
       || lk == 23768               // 'union' 'cast'
       || lk == 24024               // 'union' 'castable'
       || lk == 24536               // 'union' 'child'
       || lk == 24792               // 'union' 'collation'
       || lk == 25048               // 'union' 'comment'
       || lk == 26584               // 'union' 'count'
       || lk == 27352               // 'union' 'declare'
       || lk == 27608               // 'union' 'default'
       || lk == 28120               // 'union' 'descendant'
       || lk == 28376               // 'union' 'descendant-or-self'
       || lk == 28632               // 'union' 'descending'
       || lk == 29144               // 'union' 'div'
       || lk == 29400               // 'union' 'document'
       || lk == 29656               // 'union' 'document-node'
       || lk == 29912               // 'union' 'element'
       || lk == 30168               // 'union' 'else'
       || lk == 30424               // 'union' 'empty'
       || lk == 30680               // 'union' 'empty-sequence'
       || lk == 31192               // 'union' 'end'
       || lk == 31448               // 'union' 'eq'
       || lk == 31704               // 'union' 'every'
       || lk == 31960               // 'union' 'except'
       || lk == 33240               // 'union' 'following'
       || lk == 33496               // 'union' 'following-sibling'
       || lk == 33752               // 'union' 'for'
       || lk == 34008               // 'union' 'function'
       || lk == 34264               // 'union' 'ge'
       || lk == 34776               // 'union' 'group'
       || lk == 35288               // 'union' 'gt'
       || lk == 35544               // 'union' 'idiv'
       || lk == 35800               // 'union' 'if'
       || lk == 36056               // 'union' 'import'
       || lk == 37336               // 'union' 'instance'
       || lk == 37592               // 'union' 'intersect'
       || lk == 38360               // 'union' 'is'
       || lk == 38616               // 'union' 'item'
       || lk == 39640               // 'union' 'le'
       || lk == 40152               // 'union' 'let'
       || lk == 40664               // 'union' 'lt'
       || lk == 40920               // 'union' 'map'
       || lk == 41432               // 'union' 'mod'
       || lk == 41944               // 'union' 'module'
       || lk == 42200               // 'union' 'namespace'
       || lk == 42456               // 'union' 'namespace-node'
       || lk == 42712               // 'union' 'ne'
       || lk == 43736               // 'union' 'node'
       || lk == 44504               // 'union' 'only'
       || lk == 45016               // 'union' 'or'
       || lk == 45272               // 'union' 'order'
       || lk == 45528               // 'union' 'ordered'
       || lk == 46040               // 'union' 'parent'
       || lk == 47320               // 'union' 'preceding'
       || lk == 47576               // 'union' 'preceding-sibling'
       || lk == 48344               // 'union' 'processing-instruction'
       || lk == 49112               // 'union' 'return'
       || lk == 49880               // 'union' 'satisfies'
       || lk == 50392               // 'union' 'schema-attribute'
       || lk == 50648               // 'union' 'schema-element'
       || lk == 50904               // 'union' 'self'
       || lk == 51672               // 'union' 'some'
       || lk == 51928               // 'union' 'stable'
       || lk == 52184               // 'union' 'start'
       || lk == 52952               // 'union' 'switch'
       || lk == 53208               // 'union' 'text'
       || lk == 53720               // 'union' 'to'
       || lk == 54232               // 'union' 'treat'
       || lk == 54488               // 'union' 'try'
       || lk == 55256               // 'union' 'typeswitch'
       || lk == 55512               // 'union' 'union'
       || lk == 55768               // 'union' 'unordered'
       || lk == 56280               // 'union' 'validate'
       || lk == 57560               // 'union' 'where'
       || lk == 58584)              // 'union' 'xquery'
      {
        lk = memoized(17, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 216:               // 'union'
              consumeT(216);        // 'union'
              break;
            default:
              consumeT(232);        // '|'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_IntersectExceptExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0, lk);
        }
      }
      if (lk != -1
       && lk != 232)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 216:                     // 'union'
        consume(216);               // 'union'
        break;
      default:
        consume(232);               // '|'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 216:                     // 'union'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 472                 // 'union' IntegerLiteral
       || lk == 728                 // 'union' DecimalLiteral
       || lk == 984                 // 'union' DoubleLiteral
       || lk == 1240                // 'union' StringLiteral
       || lk == 1496                // 'union' URIQualifiedName
       || lk == 4056                // 'union' QName^Token
       || lk == 5592                // 'union' Wildcard
       || lk == 8152                // 'union' '$'
       || lk == 8408                // 'union' '%'
       || lk == 8920                // 'union' '('
       || lk == 9176                // 'union' '(#'
       || lk == 10200               // 'union' '+'
       || lk == 10712               // 'union' '-'
       || lk == 11224               // 'union' '.'
       || lk == 11480               // 'union' '..'
       || lk == 11736               // 'union' '/'
       || lk == 11992               // 'union' '//'
       || lk == 13784               // 'union' '<'
       || lk == 14040               // 'union' '<!--'
       || lk == 15320               // 'union' '<?'
       || lk == 16856               // 'union' '?'
       || lk == 17368               // 'union' '@'
       || lk == 17880               // 'union' '['
       || lk == 18904               // 'union' '``['
       || lk == 19928               // 'union' 'ancestor'
       || lk == 20184               // 'union' 'ancestor-or-self'
       || lk == 20440               // 'union' 'and'
       || lk == 20952               // 'union' 'array'
       || lk == 21464               // 'union' 'ascending'
       || lk == 21976               // 'union' 'attribute'
       || lk == 23512               // 'union' 'case'
       || lk == 23768               // 'union' 'cast'
       || lk == 24024               // 'union' 'castable'
       || lk == 24536               // 'union' 'child'
       || lk == 24792               // 'union' 'collation'
       || lk == 25048               // 'union' 'comment'
       || lk == 26584               // 'union' 'count'
       || lk == 27352               // 'union' 'declare'
       || lk == 27608               // 'union' 'default'
       || lk == 28120               // 'union' 'descendant'
       || lk == 28376               // 'union' 'descendant-or-self'
       || lk == 28632               // 'union' 'descending'
       || lk == 29144               // 'union' 'div'
       || lk == 29400               // 'union' 'document'
       || lk == 29656               // 'union' 'document-node'
       || lk == 29912               // 'union' 'element'
       || lk == 30168               // 'union' 'else'
       || lk == 30424               // 'union' 'empty'
       || lk == 30680               // 'union' 'empty-sequence'
       || lk == 31192               // 'union' 'end'
       || lk == 31448               // 'union' 'eq'
       || lk == 31704               // 'union' 'every'
       || lk == 31960               // 'union' 'except'
       || lk == 33240               // 'union' 'following'
       || lk == 33496               // 'union' 'following-sibling'
       || lk == 33752               // 'union' 'for'
       || lk == 34008               // 'union' 'function'
       || lk == 34264               // 'union' 'ge'
       || lk == 34776               // 'union' 'group'
       || lk == 35288               // 'union' 'gt'
       || lk == 35544               // 'union' 'idiv'
       || lk == 35800               // 'union' 'if'
       || lk == 36056               // 'union' 'import'
       || lk == 37336               // 'union' 'instance'
       || lk == 37592               // 'union' 'intersect'
       || lk == 38360               // 'union' 'is'
       || lk == 38616               // 'union' 'item'
       || lk == 39640               // 'union' 'le'
       || lk == 40152               // 'union' 'let'
       || lk == 40664               // 'union' 'lt'
       || lk == 40920               // 'union' 'map'
       || lk == 41432               // 'union' 'mod'
       || lk == 41944               // 'union' 'module'
       || lk == 42200               // 'union' 'namespace'
       || lk == 42456               // 'union' 'namespace-node'
       || lk == 42712               // 'union' 'ne'
       || lk == 43736               // 'union' 'node'
       || lk == 44504               // 'union' 'only'
       || lk == 45016               // 'union' 'or'
       || lk == 45272               // 'union' 'order'
       || lk == 45528               // 'union' 'ordered'
       || lk == 46040               // 'union' 'parent'
       || lk == 47320               // 'union' 'preceding'
       || lk == 47576               // 'union' 'preceding-sibling'
       || lk == 48344               // 'union' 'processing-instruction'
       || lk == 49112               // 'union' 'return'
       || lk == 49880               // 'union' 'satisfies'
       || lk == 50392               // 'union' 'schema-attribute'
       || lk == 50648               // 'union' 'schema-element'
       || lk == 50904               // 'union' 'self'
       || lk == 51672               // 'union' 'some'
       || lk == 51928               // 'union' 'stable'
       || lk == 52184               // 'union' 'start'
       || lk == 52952               // 'union' 'switch'
       || lk == 53208               // 'union' 'text'
       || lk == 53720               // 'union' 'to'
       || lk == 54232               // 'union' 'treat'
       || lk == 54488               // 'union' 'try'
       || lk == 55256               // 'union' 'typeswitch'
       || lk == 55512               // 'union' 'union'
       || lk == 55768               // 'union' 'unordered'
       || lk == 56280               // 'union' 'validate'
       || lk == 57560               // 'union' 'where'
       || lk == 58584)              // 'union' 'xquery'
      {
        lk = memoized(17, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 216:               // 'union'
              consumeT(216);        // 'union'
              break;
            default:
              consumeT(232);        // '|'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_IntersectExceptExpr();
            memoize(17, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(17, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 232)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 216:                     // 'union'
        consumeT(216);              // 'union'
        break;
      default:
        consumeT(232);              // '|'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(209);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 124:                     // 'except'
      case 146:                     // 'intersect'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 232                 // '|'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 6524                // 'except' EOF
       && lk != 6546                // 'intersect' EOF
       && lk != 6780                // 'except' '!'
       && lk != 6802                // 'intersect' '!'
       && lk != 7036                // 'except' '!='
       && lk != 7058                // 'intersect' '!='
       && lk != 7548                // 'except' '#'
       && lk != 7570                // 'intersect' '#'
       && lk != 9852                // 'except' '*'
       && lk != 9874                // 'intersect' '*'
       && lk != 10364               // 'except' ','
       && lk != 10386               // 'intersect' ','
       && lk != 13436               // 'except' ';'
       && lk != 13458               // 'intersect' ';'
       && lk != 14716               // 'except' '<<'
       && lk != 14738               // 'intersect' '<<'
       && lk != 14972               // 'except' '<='
       && lk != 14994               // 'intersect' '<='
       && lk != 15484               // 'except' '='
       && lk != 15506               // 'intersect' '='
       && lk != 15740               // 'except' '=>'
       && lk != 15762               // 'intersect' '=>'
       && lk != 15996               // 'except' '>'
       && lk != 16018               // 'intersect' '>'
       && lk != 16252               // 'except' '>='
       && lk != 16274               // 'intersect' '>='
       && lk != 16508               // 'except' '>>'
       && lk != 16530               // 'intersect' '>>'
       && lk != 20604               // 'except' 'append'
       && lk != 20626               // 'intersect' 'append'
       && lk != 22908               // 'except' 'break'
       && lk != 22930               // 'intersect' 'break'
       && lk != 25724               // 'except' 'continue'
       && lk != 25746               // 'intersect' 'continue'
       && lk != 25980               // 'except' 'copy'
       && lk != 26002               // 'intersect' 'copy'
       && lk != 27772               // 'except' 'delete'
       && lk != 27794               // 'intersect' 'delete'
       && lk != 32124               // 'except' 'exit'
       && lk != 32146               // 'intersect' 'exit'
       && lk != 36988               // 'except' 'insert'
       && lk != 37010               // 'intersect' 'insert'
       && lk != 38012               // 'except' 'invoke'
       && lk != 38034               // 'intersect' 'invoke'
       && lk != 48508               // 'except' 'rename'
       && lk != 48530               // 'intersect' 'rename'
       && lk != 48764               // 'except' 'replace'
       && lk != 48786               // 'intersect' 'replace'
       && lk != 53884               // 'except' 'transform'
       && lk != 53906               // 'intersect' 'transform'
       && lk != 56700               // 'except' 'variable'
       && lk != 56722               // 'intersect' 'variable'
       && lk != 57724               // 'except' 'while'
       && lk != 57746               // 'intersect' 'while'
       && lk != 59004               // 'except' '{'
       && lk != 59026               // 'intersect' '{'
       && lk != 59516               // 'except' '|'
       && lk != 59538               // 'intersect' '|'
       && lk != 59772               // 'except' '||'
       && lk != 59794               // 'intersect' '||'
       && lk != 60028               // 'except' '}'
       && lk != 60050)              // 'intersect' '}'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 146:               // 'intersect'
              consumeT(146);        // 'intersect'
              break;
            default:
              consumeT(124);        // 'except'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_InstanceofExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 146:                     // 'intersect'
        consume(146);               // 'intersect'
        break;
      default:
        consume(124);               // 'except'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(209);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 124:                     // 'except'
      case 146:                     // 'intersect'
        lookahead2W(198);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 232                 // '|'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 6524                // 'except' EOF
       && lk != 6546                // 'intersect' EOF
       && lk != 6780                // 'except' '!'
       && lk != 6802                // 'intersect' '!'
       && lk != 7036                // 'except' '!='
       && lk != 7058                // 'intersect' '!='
       && lk != 7548                // 'except' '#'
       && lk != 7570                // 'intersect' '#'
       && lk != 9852                // 'except' '*'
       && lk != 9874                // 'intersect' '*'
       && lk != 10364               // 'except' ','
       && lk != 10386               // 'intersect' ','
       && lk != 13436               // 'except' ';'
       && lk != 13458               // 'intersect' ';'
       && lk != 14716               // 'except' '<<'
       && lk != 14738               // 'intersect' '<<'
       && lk != 14972               // 'except' '<='
       && lk != 14994               // 'intersect' '<='
       && lk != 15484               // 'except' '='
       && lk != 15506               // 'intersect' '='
       && lk != 15740               // 'except' '=>'
       && lk != 15762               // 'intersect' '=>'
       && lk != 15996               // 'except' '>'
       && lk != 16018               // 'intersect' '>'
       && lk != 16252               // 'except' '>='
       && lk != 16274               // 'intersect' '>='
       && lk != 16508               // 'except' '>>'
       && lk != 16530               // 'intersect' '>>'
       && lk != 20604               // 'except' 'append'
       && lk != 20626               // 'intersect' 'append'
       && lk != 22908               // 'except' 'break'
       && lk != 22930               // 'intersect' 'break'
       && lk != 25724               // 'except' 'continue'
       && lk != 25746               // 'intersect' 'continue'
       && lk != 25980               // 'except' 'copy'
       && lk != 26002               // 'intersect' 'copy'
       && lk != 27772               // 'except' 'delete'
       && lk != 27794               // 'intersect' 'delete'
       && lk != 32124               // 'except' 'exit'
       && lk != 32146               // 'intersect' 'exit'
       && lk != 36988               // 'except' 'insert'
       && lk != 37010               // 'intersect' 'insert'
       && lk != 38012               // 'except' 'invoke'
       && lk != 38034               // 'intersect' 'invoke'
       && lk != 48508               // 'except' 'rename'
       && lk != 48530               // 'intersect' 'rename'
       && lk != 48764               // 'except' 'replace'
       && lk != 48786               // 'intersect' 'replace'
       && lk != 53884               // 'except' 'transform'
       && lk != 53906               // 'intersect' 'transform'
       && lk != 56700               // 'except' 'variable'
       && lk != 56722               // 'intersect' 'variable'
       && lk != 57724               // 'except' 'while'
       && lk != 57746               // 'intersect' 'while'
       && lk != 59004               // 'except' '{'
       && lk != 59026               // 'intersect' '{'
       && lk != 59516               // 'except' '|'
       && lk != 59538               // 'intersect' '|'
       && lk != 59772               // 'except' '||'
       && lk != 59794               // 'intersect' '||'
       && lk != 60028               // 'except' '}'
       && lk != 60050)              // 'intersect' '}'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 146:               // 'intersect'
              consumeT(146);        // 'intersect'
              break;
            default:
              consumeT(124);        // 'except'
            }
            lookahead1W(180);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
            try_InstanceofExpr();
            memoize(18, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 146:                     // 'intersect'
        consumeT(146);              // 'intersect'
        break;
      default:
        consumeT(124);              // 'except'
      }
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 145:                       // 'instance'
      lookahead2W(204);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'of' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 44177)                // 'instance' 'of'
    {
      consume(145);                 // 'instance'
      lookahead1W(57);              // S^WS | '(:' | 'of'
      consume(172);                 // 'of'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 145:                       // 'instance'
      lookahead2W(204);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'of' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 44177)                // 'instance' 'of'
    {
      consumeT(145);                // 'instance'
      lookahead1W(57);              // S^WS | '(:' | 'of'
      consumeT(172);                // 'of'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 211:                       // 'treat'
      lookahead2W(202);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 21203)                // 'treat' 'as'
    {
      consume(211);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 211:                       // 'treat'
      lookahead2W(202);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 21203)                // 'treat' 'as'
    {
      consumeT(211);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    switch (l1)
    {
    case 34:                        // '('
      lookahead2W(182);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 35:                        // '(#'
      lookahead2(166);              // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 46:                        // '//'
      lookahead2W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 53:                        // '<'
      lookahead2(164);              // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 54:                        // '<!--'
      lookahead2(3);                // DirCommentContents
      break;
    case 59:                        // '<?'
      lookahead2(0);                // PITarget
      break;
    case 65:                        // '?'
      lookahead2W(161);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
      break;
    case 67:                        // '@'
      lookahead2W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 69:                        // '['
      lookahead2W(183);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 73:                        // '``['
      lookahead2(1);                // StringConstructorChars
      break;
    case 219:                       // 'validate'
      lookahead2W(221);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'lax' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 39:                        // '+'
    case 41:                        // '-'
      lookahead2W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 164:                       // 'namespace'
    case 188:                       // 'processing-instruction'
      lookahead2W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!' |
                                    // '!=' | '#' | '$' | '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '..' | '/' | '//' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 21:                        // Wildcard
    case 43:                        // '.'
    case 44:                        // '..'
    case 45:                        // '/'
      lookahead2W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 198:                       // 'self'
      lookahead2W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'and'
    case 81:                        // 'array'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 97:                        // 'comment'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 114:                       // 'document'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 119:                       // 'empty-sequence'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 131:                       // 'for'
    case 132:                       // 'function'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 139:                       // 'if'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 150:                       // 'item'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 159:                       // 'map'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 165:                       // 'namespace-node'
    case 166:                       // 'ne'
    case 170:                       // 'node'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 177:                       // 'ordered'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 206:                       // 'switch'
    case 207:                       // 'text'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
    case 216:                       // 'union'
    case 217:                       // 'unordered'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(215);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk != 15617                 // IntegerLiteral '=>'
     && lk != 15618                 // DecimalLiteral '=>'
     && lk != 15619                 // DoubleLiteral '=>'
     && lk != 15620                 // StringLiteral '=>'
     && lk != 15621                 // URIQualifiedName '=>'
     && lk != 15631                 // QName^Token '=>'
     && lk != 15637                 // Wildcard '=>'
     && lk != 15659                 // '.' '=>'
     && lk != 15660                 // '..' '=>'
     && lk != 15661                 // '/' '=>'
     && lk != 15693                 // 'ancestor' '=>'
     && lk != 15694                 // 'ancestor-or-self' '=>'
     && lk != 15695                 // 'and' '=>'
     && lk != 15697                 // 'array' '=>'
     && lk != 15699                 // 'ascending' '=>'
     && lk != 15701                 // 'attribute' '=>'
     && lk != 15707                 // 'case' '=>'
     && lk != 15708                 // 'cast' '=>'
     && lk != 15709                 // 'castable' '=>'
     && lk != 15711                 // 'child' '=>'
     && lk != 15712                 // 'collation' '=>'
     && lk != 15713                 // 'comment' '=>'
     && lk != 15719                 // 'count' '=>'
     && lk != 15722                 // 'declare' '=>'
     && lk != 15723                 // 'default' '=>'
     && lk != 15725                 // 'descendant' '=>'
     && lk != 15726                 // 'descendant-or-self' '=>'
     && lk != 15727                 // 'descending' '=>'
     && lk != 15729                 // 'div' '=>'
     && lk != 15730                 // 'document' '=>'
     && lk != 15731                 // 'document-node' '=>'
     && lk != 15732                 // 'element' '=>'
     && lk != 15733                 // 'else' '=>'
     && lk != 15734                 // 'empty' '=>'
     && lk != 15735                 // 'empty-sequence' '=>'
     && lk != 15737                 // 'end' '=>'
     && lk != 15738                 // 'eq' '=>'
     && lk != 15739                 // 'every' '=>'
     && lk != 15740                 // 'except' '=>'
     && lk != 15745                 // 'following' '=>'
     && lk != 15746                 // 'following-sibling' '=>'
     && lk != 15747                 // 'for' '=>'
     && lk != 15748                 // 'function' '=>'
     && lk != 15749                 // 'ge' '=>'
     && lk != 15751                 // 'group' '=>'
     && lk != 15753                 // 'gt' '=>'
     && lk != 15754                 // 'idiv' '=>'
     && lk != 15755                 // 'if' '=>'
     && lk != 15756                 // 'import' '=>'
     && lk != 15761                 // 'instance' '=>'
     && lk != 15762                 // 'intersect' '=>'
     && lk != 15765                 // 'is' '=>'
     && lk != 15766                 // 'item' '=>'
     && lk != 15770                 // 'le' '=>'
     && lk != 15772                 // 'let' '=>'
     && lk != 15774                 // 'lt' '=>'
     && lk != 15775                 // 'map' '=>'
     && lk != 15777                 // 'mod' '=>'
     && lk != 15779                 // 'module' '=>'
     && lk != 15780                 // 'namespace' '=>'
     && lk != 15781                 // 'namespace-node' '=>'
     && lk != 15782                 // 'ne' '=>'
     && lk != 15786                 // 'node' '=>'
     && lk != 15789                 // 'only' '=>'
     && lk != 15791                 // 'or' '=>'
     && lk != 15792                 // 'order' '=>'
     && lk != 15793                 // 'ordered' '=>'
     && lk != 15795                 // 'parent' '=>'
     && lk != 15800                 // 'preceding' '=>'
     && lk != 15801                 // 'preceding-sibling' '=>'
     && lk != 15804                 // 'processing-instruction' '=>'
     && lk != 15807                 // 'return' '=>'
     && lk != 15810                 // 'satisfies' '=>'
     && lk != 15812                 // 'schema-attribute' '=>'
     && lk != 15813                 // 'schema-element' '=>'
     && lk != 15814                 // 'self' '=>'
     && lk != 15817                 // 'some' '=>'
     && lk != 15818                 // 'stable' '=>'
     && lk != 15819                 // 'start' '=>'
     && lk != 15822                 // 'switch' '=>'
     && lk != 15823                 // 'text' '=>'
     && lk != 15825                 // 'to' '=>'
     && lk != 15827                 // 'treat' '=>'
     && lk != 15828                 // 'try' '=>'
     && lk != 15831                 // 'typeswitch' '=>'
     && lk != 15832                 // 'union' '=>'
     && lk != 15833                 // 'unordered' '=>'
     && lk != 15835                 // 'validate' '=>'
     && lk != 15840                 // 'where' '=>'
     && lk != 15844                 // 'xquery' '=>'
     && lk != 53761                 // IntegerLiteral 'transform'
     && lk != 53762                 // DecimalLiteral 'transform'
     && lk != 53763                 // DoubleLiteral 'transform'
     && lk != 53764                 // StringLiteral 'transform'
     && lk != 53765                 // URIQualifiedName 'transform'
     && lk != 53775                 // QName^Token 'transform'
     && lk != 53781                 // Wildcard 'transform'
     && lk != 53803                 // '.' 'transform'
     && lk != 53804                 // '..' 'transform'
     && lk != 53805                 // '/' 'transform'
     && lk != 53837                 // 'ancestor' 'transform'
     && lk != 53838                 // 'ancestor-or-self' 'transform'
     && lk != 53839                 // 'and' 'transform'
     && lk != 53841                 // 'array' 'transform'
     && lk != 53843                 // 'ascending' 'transform'
     && lk != 53845                 // 'attribute' 'transform'
     && lk != 53851                 // 'case' 'transform'
     && lk != 53852                 // 'cast' 'transform'
     && lk != 53853                 // 'castable' 'transform'
     && lk != 53855                 // 'child' 'transform'
     && lk != 53856                 // 'collation' 'transform'
     && lk != 53857                 // 'comment' 'transform'
     && lk != 53863                 // 'count' 'transform'
     && lk != 53866                 // 'declare' 'transform'
     && lk != 53867                 // 'default' 'transform'
     && lk != 53869                 // 'descendant' 'transform'
     && lk != 53870                 // 'descendant-or-self' 'transform'
     && lk != 53871                 // 'descending' 'transform'
     && lk != 53873                 // 'div' 'transform'
     && lk != 53874                 // 'document' 'transform'
     && lk != 53875                 // 'document-node' 'transform'
     && lk != 53876                 // 'element' 'transform'
     && lk != 53877                 // 'else' 'transform'
     && lk != 53878                 // 'empty' 'transform'
     && lk != 53879                 // 'empty-sequence' 'transform'
     && lk != 53881                 // 'end' 'transform'
     && lk != 53882                 // 'eq' 'transform'
     && lk != 53883                 // 'every' 'transform'
     && lk != 53884                 // 'except' 'transform'
     && lk != 53889                 // 'following' 'transform'
     && lk != 53890                 // 'following-sibling' 'transform'
     && lk != 53891                 // 'for' 'transform'
     && lk != 53892                 // 'function' 'transform'
     && lk != 53893                 // 'ge' 'transform'
     && lk != 53895                 // 'group' 'transform'
     && lk != 53897                 // 'gt' 'transform'
     && lk != 53898                 // 'idiv' 'transform'
     && lk != 53899                 // 'if' 'transform'
     && lk != 53900                 // 'import' 'transform'
     && lk != 53905                 // 'instance' 'transform'
     && lk != 53906                 // 'intersect' 'transform'
     && lk != 53909                 // 'is' 'transform'
     && lk != 53910                 // 'item' 'transform'
     && lk != 53914                 // 'le' 'transform'
     && lk != 53916                 // 'let' 'transform'
     && lk != 53918                 // 'lt' 'transform'
     && lk != 53919                 // 'map' 'transform'
     && lk != 53921                 // 'mod' 'transform'
     && lk != 53923                 // 'module' 'transform'
     && lk != 53924                 // 'namespace' 'transform'
     && lk != 53925                 // 'namespace-node' 'transform'
     && lk != 53926                 // 'ne' 'transform'
     && lk != 53930                 // 'node' 'transform'
     && lk != 53933                 // 'only' 'transform'
     && lk != 53935                 // 'or' 'transform'
     && lk != 53936                 // 'order' 'transform'
     && lk != 53937                 // 'ordered' 'transform'
     && lk != 53939                 // 'parent' 'transform'
     && lk != 53944                 // 'preceding' 'transform'
     && lk != 53945                 // 'preceding-sibling' 'transform'
     && lk != 53948                 // 'processing-instruction' 'transform'
     && lk != 53951                 // 'return' 'transform'
     && lk != 53954                 // 'satisfies' 'transform'
     && lk != 53956                 // 'schema-attribute' 'transform'
     && lk != 53957                 // 'schema-element' 'transform'
     && lk != 53958                 // 'self' 'transform'
     && lk != 53961                 // 'some' 'transform'
     && lk != 53962                 // 'stable' 'transform'
     && lk != 53963                 // 'start' 'transform'
     && lk != 53966                 // 'switch' 'transform'
     && lk != 53967                 // 'text' 'transform'
     && lk != 53969                 // 'to' 'transform'
     && lk != 53971                 // 'treat' 'transform'
     && lk != 53972                 // 'try' 'transform'
     && lk != 53975                 // 'typeswitch' 'transform'
     && lk != 53976                 // 'union' 'transform'
     && lk != 53977                 // 'unordered' 'transform'
     && lk != 53979                 // 'validate' 'transform'
     && lk != 53984                 // 'where' 'transform'
     && lk != 53988)                // 'xquery' 'transform'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_CastExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 15617:                     // IntegerLiteral '=>'
    case 15618:                     // DecimalLiteral '=>'
    case 15619:                     // DoubleLiteral '=>'
    case 15620:                     // StringLiteral '=>'
    case 15621:                     // URIQualifiedName '=>'
    case 15631:                     // QName^Token '=>'
    case 15637:                     // Wildcard '=>'
    case 15659:                     // '.' '=>'
    case 15660:                     // '..' '=>'
    case 15661:                     // '/' '=>'
    case 15693:                     // 'ancestor' '=>'
    case 15694:                     // 'ancestor-or-self' '=>'
    case 15695:                     // 'and' '=>'
    case 15697:                     // 'array' '=>'
    case 15699:                     // 'ascending' '=>'
    case 15701:                     // 'attribute' '=>'
    case 15707:                     // 'case' '=>'
    case 15708:                     // 'cast' '=>'
    case 15709:                     // 'castable' '=>'
    case 15711:                     // 'child' '=>'
    case 15712:                     // 'collation' '=>'
    case 15713:                     // 'comment' '=>'
    case 15719:                     // 'count' '=>'
    case 15722:                     // 'declare' '=>'
    case 15723:                     // 'default' '=>'
    case 15725:                     // 'descendant' '=>'
    case 15726:                     // 'descendant-or-self' '=>'
    case 15727:                     // 'descending' '=>'
    case 15729:                     // 'div' '=>'
    case 15730:                     // 'document' '=>'
    case 15731:                     // 'document-node' '=>'
    case 15732:                     // 'element' '=>'
    case 15733:                     // 'else' '=>'
    case 15734:                     // 'empty' '=>'
    case 15735:                     // 'empty-sequence' '=>'
    case 15737:                     // 'end' '=>'
    case 15738:                     // 'eq' '=>'
    case 15739:                     // 'every' '=>'
    case 15740:                     // 'except' '=>'
    case 15745:                     // 'following' '=>'
    case 15746:                     // 'following-sibling' '=>'
    case 15747:                     // 'for' '=>'
    case 15748:                     // 'function' '=>'
    case 15749:                     // 'ge' '=>'
    case 15751:                     // 'group' '=>'
    case 15753:                     // 'gt' '=>'
    case 15754:                     // 'idiv' '=>'
    case 15755:                     // 'if' '=>'
    case 15756:                     // 'import' '=>'
    case 15761:                     // 'instance' '=>'
    case 15762:                     // 'intersect' '=>'
    case 15765:                     // 'is' '=>'
    case 15766:                     // 'item' '=>'
    case 15770:                     // 'le' '=>'
    case 15772:                     // 'let' '=>'
    case 15774:                     // 'lt' '=>'
    case 15775:                     // 'map' '=>'
    case 15777:                     // 'mod' '=>'
    case 15779:                     // 'module' '=>'
    case 15780:                     // 'namespace' '=>'
    case 15781:                     // 'namespace-node' '=>'
    case 15782:                     // 'ne' '=>'
    case 15786:                     // 'node' '=>'
    case 15789:                     // 'only' '=>'
    case 15791:                     // 'or' '=>'
    case 15792:                     // 'order' '=>'
    case 15793:                     // 'ordered' '=>'
    case 15795:                     // 'parent' '=>'
    case 15800:                     // 'preceding' '=>'
    case 15801:                     // 'preceding-sibling' '=>'
    case 15804:                     // 'processing-instruction' '=>'
    case 15807:                     // 'return' '=>'
    case 15810:                     // 'satisfies' '=>'
    case 15812:                     // 'schema-attribute' '=>'
    case 15813:                     // 'schema-element' '=>'
    case 15814:                     // 'self' '=>'
    case 15817:                     // 'some' '=>'
    case 15818:                     // 'stable' '=>'
    case 15819:                     // 'start' '=>'
    case 15822:                     // 'switch' '=>'
    case 15823:                     // 'text' '=>'
    case 15825:                     // 'to' '=>'
    case 15827:                     // 'treat' '=>'
    case 15828:                     // 'try' '=>'
    case 15831:                     // 'typeswitch' '=>'
    case 15832:                     // 'union' '=>'
    case 15833:                     // 'unordered' '=>'
    case 15835:                     // 'validate' '=>'
    case 15840:                     // 'where' '=>'
    case 15844:                     // 'xquery' '=>'
      parse_CastExpr();
      break;
    default:
      parse_TransformWithExpr();
    }
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(202);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 21085)                // 'castable' 'as'
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    switch (l1)
    {
    case 34:                        // '('
      lookahead2W(182);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 35:                        // '(#'
      lookahead2(166);              // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 46:                        // '//'
      lookahead2W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 53:                        // '<'
      lookahead2(164);              // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 54:                        // '<!--'
      lookahead2(3);                // DirCommentContents
      break;
    case 59:                        // '<?'
      lookahead2(0);                // PITarget
      break;
    case 65:                        // '?'
      lookahead2W(161);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
      break;
    case 67:                        // '@'
      lookahead2W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 69:                        // '['
      lookahead2W(183);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 73:                        // '``['
      lookahead2(1);                // StringConstructorChars
      break;
    case 219:                       // 'validate'
      lookahead2W(221);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'lax' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      break;
    case 39:                        // '+'
    case 41:                        // '-'
      lookahead2W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      break;
    case 164:                       // 'namespace'
    case 188:                       // 'processing-instruction'
      lookahead2W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!' |
                                    // '!=' | '#' | '$' | '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '..' | '/' | '//' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 21:                        // Wildcard
    case 43:                        // '.'
    case 44:                        // '..'
    case 45:                        // '/'
      lookahead2W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 198:                       // 'self'
      lookahead2W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'and'
    case 81:                        // 'array'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 97:                        // 'comment'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 114:                       // 'document'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 119:                       // 'empty-sequence'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 131:                       // 'for'
    case 132:                       // 'function'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 139:                       // 'if'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 150:                       // 'item'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 159:                       // 'map'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 165:                       // 'namespace-node'
    case 166:                       // 'ne'
    case 170:                       // 'node'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 177:                       // 'ordered'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 206:                       // 'switch'
    case 207:                       // 'text'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
    case 216:                       // 'union'
    case 217:                       // 'unordered'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(215);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk != 15617                 // IntegerLiteral '=>'
     && lk != 15618                 // DecimalLiteral '=>'
     && lk != 15619                 // DoubleLiteral '=>'
     && lk != 15620                 // StringLiteral '=>'
     && lk != 15621                 // URIQualifiedName '=>'
     && lk != 15631                 // QName^Token '=>'
     && lk != 15637                 // Wildcard '=>'
     && lk != 15659                 // '.' '=>'
     && lk != 15660                 // '..' '=>'
     && lk != 15661                 // '/' '=>'
     && lk != 15693                 // 'ancestor' '=>'
     && lk != 15694                 // 'ancestor-or-self' '=>'
     && lk != 15695                 // 'and' '=>'
     && lk != 15697                 // 'array' '=>'
     && lk != 15699                 // 'ascending' '=>'
     && lk != 15701                 // 'attribute' '=>'
     && lk != 15707                 // 'case' '=>'
     && lk != 15708                 // 'cast' '=>'
     && lk != 15709                 // 'castable' '=>'
     && lk != 15711                 // 'child' '=>'
     && lk != 15712                 // 'collation' '=>'
     && lk != 15713                 // 'comment' '=>'
     && lk != 15719                 // 'count' '=>'
     && lk != 15722                 // 'declare' '=>'
     && lk != 15723                 // 'default' '=>'
     && lk != 15725                 // 'descendant' '=>'
     && lk != 15726                 // 'descendant-or-self' '=>'
     && lk != 15727                 // 'descending' '=>'
     && lk != 15729                 // 'div' '=>'
     && lk != 15730                 // 'document' '=>'
     && lk != 15731                 // 'document-node' '=>'
     && lk != 15732                 // 'element' '=>'
     && lk != 15733                 // 'else' '=>'
     && lk != 15734                 // 'empty' '=>'
     && lk != 15735                 // 'empty-sequence' '=>'
     && lk != 15737                 // 'end' '=>'
     && lk != 15738                 // 'eq' '=>'
     && lk != 15739                 // 'every' '=>'
     && lk != 15740                 // 'except' '=>'
     && lk != 15745                 // 'following' '=>'
     && lk != 15746                 // 'following-sibling' '=>'
     && lk != 15747                 // 'for' '=>'
     && lk != 15748                 // 'function' '=>'
     && lk != 15749                 // 'ge' '=>'
     && lk != 15751                 // 'group' '=>'
     && lk != 15753                 // 'gt' '=>'
     && lk != 15754                 // 'idiv' '=>'
     && lk != 15755                 // 'if' '=>'
     && lk != 15756                 // 'import' '=>'
     && lk != 15761                 // 'instance' '=>'
     && lk != 15762                 // 'intersect' '=>'
     && lk != 15765                 // 'is' '=>'
     && lk != 15766                 // 'item' '=>'
     && lk != 15770                 // 'le' '=>'
     && lk != 15772                 // 'let' '=>'
     && lk != 15774                 // 'lt' '=>'
     && lk != 15775                 // 'map' '=>'
     && lk != 15777                 // 'mod' '=>'
     && lk != 15779                 // 'module' '=>'
     && lk != 15780                 // 'namespace' '=>'
     && lk != 15781                 // 'namespace-node' '=>'
     && lk != 15782                 // 'ne' '=>'
     && lk != 15786                 // 'node' '=>'
     && lk != 15789                 // 'only' '=>'
     && lk != 15791                 // 'or' '=>'
     && lk != 15792                 // 'order' '=>'
     && lk != 15793                 // 'ordered' '=>'
     && lk != 15795                 // 'parent' '=>'
     && lk != 15800                 // 'preceding' '=>'
     && lk != 15801                 // 'preceding-sibling' '=>'
     && lk != 15804                 // 'processing-instruction' '=>'
     && lk != 15807                 // 'return' '=>'
     && lk != 15810                 // 'satisfies' '=>'
     && lk != 15812                 // 'schema-attribute' '=>'
     && lk != 15813                 // 'schema-element' '=>'
     && lk != 15814                 // 'self' '=>'
     && lk != 15817                 // 'some' '=>'
     && lk != 15818                 // 'stable' '=>'
     && lk != 15819                 // 'start' '=>'
     && lk != 15822                 // 'switch' '=>'
     && lk != 15823                 // 'text' '=>'
     && lk != 15825                 // 'to' '=>'
     && lk != 15827                 // 'treat' '=>'
     && lk != 15828                 // 'try' '=>'
     && lk != 15831                 // 'typeswitch' '=>'
     && lk != 15832                 // 'union' '=>'
     && lk != 15833                 // 'unordered' '=>'
     && lk != 15835                 // 'validate' '=>'
     && lk != 15840                 // 'where' '=>'
     && lk != 15844                 // 'xquery' '=>'
     && lk != 53761                 // IntegerLiteral 'transform'
     && lk != 53762                 // DecimalLiteral 'transform'
     && lk != 53763                 // DoubleLiteral 'transform'
     && lk != 53764                 // StringLiteral 'transform'
     && lk != 53765                 // URIQualifiedName 'transform'
     && lk != 53775                 // QName^Token 'transform'
     && lk != 53781                 // Wildcard 'transform'
     && lk != 53803                 // '.' 'transform'
     && lk != 53804                 // '..' 'transform'
     && lk != 53805                 // '/' 'transform'
     && lk != 53837                 // 'ancestor' 'transform'
     && lk != 53838                 // 'ancestor-or-self' 'transform'
     && lk != 53839                 // 'and' 'transform'
     && lk != 53841                 // 'array' 'transform'
     && lk != 53843                 // 'ascending' 'transform'
     && lk != 53845                 // 'attribute' 'transform'
     && lk != 53851                 // 'case' 'transform'
     && lk != 53852                 // 'cast' 'transform'
     && lk != 53853                 // 'castable' 'transform'
     && lk != 53855                 // 'child' 'transform'
     && lk != 53856                 // 'collation' 'transform'
     && lk != 53857                 // 'comment' 'transform'
     && lk != 53863                 // 'count' 'transform'
     && lk != 53866                 // 'declare' 'transform'
     && lk != 53867                 // 'default' 'transform'
     && lk != 53869                 // 'descendant' 'transform'
     && lk != 53870                 // 'descendant-or-self' 'transform'
     && lk != 53871                 // 'descending' 'transform'
     && lk != 53873                 // 'div' 'transform'
     && lk != 53874                 // 'document' 'transform'
     && lk != 53875                 // 'document-node' 'transform'
     && lk != 53876                 // 'element' 'transform'
     && lk != 53877                 // 'else' 'transform'
     && lk != 53878                 // 'empty' 'transform'
     && lk != 53879                 // 'empty-sequence' 'transform'
     && lk != 53881                 // 'end' 'transform'
     && lk != 53882                 // 'eq' 'transform'
     && lk != 53883                 // 'every' 'transform'
     && lk != 53884                 // 'except' 'transform'
     && lk != 53889                 // 'following' 'transform'
     && lk != 53890                 // 'following-sibling' 'transform'
     && lk != 53891                 // 'for' 'transform'
     && lk != 53892                 // 'function' 'transform'
     && lk != 53893                 // 'ge' 'transform'
     && lk != 53895                 // 'group' 'transform'
     && lk != 53897                 // 'gt' 'transform'
     && lk != 53898                 // 'idiv' 'transform'
     && lk != 53899                 // 'if' 'transform'
     && lk != 53900                 // 'import' 'transform'
     && lk != 53905                 // 'instance' 'transform'
     && lk != 53906                 // 'intersect' 'transform'
     && lk != 53909                 // 'is' 'transform'
     && lk != 53910                 // 'item' 'transform'
     && lk != 53914                 // 'le' 'transform'
     && lk != 53916                 // 'let' 'transform'
     && lk != 53918                 // 'lt' 'transform'
     && lk != 53919                 // 'map' 'transform'
     && lk != 53921                 // 'mod' 'transform'
     && lk != 53923                 // 'module' 'transform'
     && lk != 53924                 // 'namespace' 'transform'
     && lk != 53925                 // 'namespace-node' 'transform'
     && lk != 53926                 // 'ne' 'transform'
     && lk != 53930                 // 'node' 'transform'
     && lk != 53933                 // 'only' 'transform'
     && lk != 53935                 // 'or' 'transform'
     && lk != 53936                 // 'order' 'transform'
     && lk != 53937                 // 'ordered' 'transform'
     && lk != 53939                 // 'parent' 'transform'
     && lk != 53944                 // 'preceding' 'transform'
     && lk != 53945                 // 'preceding-sibling' 'transform'
     && lk != 53948                 // 'processing-instruction' 'transform'
     && lk != 53951                 // 'return' 'transform'
     && lk != 53954                 // 'satisfies' 'transform'
     && lk != 53956                 // 'schema-attribute' 'transform'
     && lk != 53957                 // 'schema-element' 'transform'
     && lk != 53958                 // 'self' 'transform'
     && lk != 53961                 // 'some' 'transform'
     && lk != 53962                 // 'stable' 'transform'
     && lk != 53963                 // 'start' 'transform'
     && lk != 53966                 // 'switch' 'transform'
     && lk != 53967                 // 'text' 'transform'
     && lk != 53969                 // 'to' 'transform'
     && lk != 53971                 // 'treat' 'transform'
     && lk != 53972                 // 'try' 'transform'
     && lk != 53975                 // 'typeswitch' 'transform'
     && lk != 53976                 // 'union' 'transform'
     && lk != 53977                 // 'unordered' 'transform'
     && lk != 53979                 // 'validate' 'transform'
     && lk != 53984                 // 'where' 'transform'
     && lk != 53988)                // 'xquery' 'transform'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_CastExpr();
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 15617:                     // IntegerLiteral '=>'
    case 15618:                     // DecimalLiteral '=>'
    case 15619:                     // DoubleLiteral '=>'
    case 15620:                     // StringLiteral '=>'
    case 15621:                     // URIQualifiedName '=>'
    case 15631:                     // QName^Token '=>'
    case 15637:                     // Wildcard '=>'
    case 15659:                     // '.' '=>'
    case 15660:                     // '..' '=>'
    case 15661:                     // '/' '=>'
    case 15693:                     // 'ancestor' '=>'
    case 15694:                     // 'ancestor-or-self' '=>'
    case 15695:                     // 'and' '=>'
    case 15697:                     // 'array' '=>'
    case 15699:                     // 'ascending' '=>'
    case 15701:                     // 'attribute' '=>'
    case 15707:                     // 'case' '=>'
    case 15708:                     // 'cast' '=>'
    case 15709:                     // 'castable' '=>'
    case 15711:                     // 'child' '=>'
    case 15712:                     // 'collation' '=>'
    case 15713:                     // 'comment' '=>'
    case 15719:                     // 'count' '=>'
    case 15722:                     // 'declare' '=>'
    case 15723:                     // 'default' '=>'
    case 15725:                     // 'descendant' '=>'
    case 15726:                     // 'descendant-or-self' '=>'
    case 15727:                     // 'descending' '=>'
    case 15729:                     // 'div' '=>'
    case 15730:                     // 'document' '=>'
    case 15731:                     // 'document-node' '=>'
    case 15732:                     // 'element' '=>'
    case 15733:                     // 'else' '=>'
    case 15734:                     // 'empty' '=>'
    case 15735:                     // 'empty-sequence' '=>'
    case 15737:                     // 'end' '=>'
    case 15738:                     // 'eq' '=>'
    case 15739:                     // 'every' '=>'
    case 15740:                     // 'except' '=>'
    case 15745:                     // 'following' '=>'
    case 15746:                     // 'following-sibling' '=>'
    case 15747:                     // 'for' '=>'
    case 15748:                     // 'function' '=>'
    case 15749:                     // 'ge' '=>'
    case 15751:                     // 'group' '=>'
    case 15753:                     // 'gt' '=>'
    case 15754:                     // 'idiv' '=>'
    case 15755:                     // 'if' '=>'
    case 15756:                     // 'import' '=>'
    case 15761:                     // 'instance' '=>'
    case 15762:                     // 'intersect' '=>'
    case 15765:                     // 'is' '=>'
    case 15766:                     // 'item' '=>'
    case 15770:                     // 'le' '=>'
    case 15772:                     // 'let' '=>'
    case 15774:                     // 'lt' '=>'
    case 15775:                     // 'map' '=>'
    case 15777:                     // 'mod' '=>'
    case 15779:                     // 'module' '=>'
    case 15780:                     // 'namespace' '=>'
    case 15781:                     // 'namespace-node' '=>'
    case 15782:                     // 'ne' '=>'
    case 15786:                     // 'node' '=>'
    case 15789:                     // 'only' '=>'
    case 15791:                     // 'or' '=>'
    case 15792:                     // 'order' '=>'
    case 15793:                     // 'ordered' '=>'
    case 15795:                     // 'parent' '=>'
    case 15800:                     // 'preceding' '=>'
    case 15801:                     // 'preceding-sibling' '=>'
    case 15804:                     // 'processing-instruction' '=>'
    case 15807:                     // 'return' '=>'
    case 15810:                     // 'satisfies' '=>'
    case 15812:                     // 'schema-attribute' '=>'
    case 15813:                     // 'schema-element' '=>'
    case 15814:                     // 'self' '=>'
    case 15817:                     // 'some' '=>'
    case 15818:                     // 'stable' '=>'
    case 15819:                     // 'start' '=>'
    case 15822:                     // 'switch' '=>'
    case 15823:                     // 'text' '=>'
    case 15825:                     // 'to' '=>'
    case 15827:                     // 'treat' '=>'
    case 15828:                     // 'try' '=>'
    case 15831:                     // 'typeswitch' '=>'
    case 15832:                     // 'union' '=>'
    case 15833:                     // 'unordered' '=>'
    case 15835:                     // 'validate' '=>'
    case 15840:                     // 'where' '=>'
    case 15844:                     // 'xquery' '=>'
      try_CastExpr();
      break;
    case -3:
      break;
    default:
      try_TransformWithExpr();
    }
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(202);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 21085)                // 'castable' 'as'
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_ArrowExpr();
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(202);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 21084)                // 'cast' 'as'
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(82);                  // 'as'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_ArrowExpr();
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(202);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 21084)                // 'cast' 'as'
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(82);                 // 'as'
      lookahead1W(167);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SingleType();
    }
  }

  function parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_UnaryExpr();
    lookahead1W(212);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    if (l1 == 210)                  // 'transform'
    {
      consume(210);                 // 'transform'
      lookahead1W(72);              // S^WS | '(:' | 'with'
      consume(227);                 // 'with'
      lookahead1W(73);              // S^WS | '(:' | '{'
      consume(230);                 // '{'
      lookahead1W(184);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
      if (l1 != 234)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(234);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  function try_TransformWithExpr()
  {
    try_UnaryExpr();
    lookahead1W(212);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    if (l1 == 210)                  // 'transform'
    {
      consumeT(210);                // 'transform'
      lookahead1W(72);              // S^WS | '(:' | 'with'
      consumeT(227);                // 'with'
      lookahead1W(73);              // S^WS | '(:' | '{'
      consumeT(230);                // '{'
      lookahead1W(184);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
      if (l1 != 234)                // '}'
      {
        try_Expr();
      }
      consumeT(234);                // '}'
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(211);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(172);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(211);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(172);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(180);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 219:                       // 'validate'
      lookahead2W(221);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'lax' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 59099)                // 'validate' '{'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ValidateExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -3;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 39387:                     // 'validate' 'lax'
    case 52443:                     // 'validate' 'strict'
    case 55003:                     // 'validate' 'type'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 219:                       // 'validate'
      lookahead2W(221);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'lax' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'transform' |
                                    // 'treat' | 'try' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 59099)                // 'validate' '{'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ValidateExpr();
          memoize(20, e0A, -1);
          lk = -4;
        }
        catch (p1A)
        {
          lk = -3;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(20, e0A, -3);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 39387:                     // 'validate' 'lax'
    case 52443:                     // 'validate' 'strict'
    case 55003:                     // 'validate' 'type'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    case -4:
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 122:                       // 'eq'
      consume(122);                 // 'eq'
      break;
    case 166:                       // 'ne'
      consume(166);                 // 'ne'
      break;
    case 158:                       // 'lt'
      consume(158);                 // 'lt'
      break;
    case 154:                       // 'le'
      consume(154);                 // 'le'
      break;
    case 137:                       // 'gt'
      consume(137);                 // 'gt'
      break;
    default:
      consume(133);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 122:                       // 'eq'
      consumeT(122);                // 'eq'
      break;
    case 166:                       // 'ne'
      consumeT(166);                // 'ne'
      break;
    case 158:                       // 'lt'
      consumeT(158);                // 'lt'
      break;
    case 154:                       // 'le'
      consumeT(154);                // 'le'
      break;
    case 137:                       // 'gt'
      consumeT(137);                // 'gt'
      break;
    default:
      consumeT(133);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 149:                       // 'is'
      consume(149);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 149:                       // 'is'
      consumeT(149);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(219);                   // 'validate'
    lookahead1W(139);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 230)                  // '{'
    {
      switch (l1)
      {
      case 214:                     // 'type'
        consume(214);               // 'type'
        lookahead1W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    consume(230);                   // '{'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(234);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(219);                  // 'validate'
    lookahead1W(139);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 230)                  // '{'
    {
      switch (l1)
      {
      case 214:                     // 'type'
        consumeT(214);              // 'type'
        lookahead1W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    consumeT(230);                  // '{'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(234);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 153:                       // 'lax'
      consume(153);                 // 'lax'
      break;
    default:
      consume(204);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 153:                       // 'lax'
      consumeT(153);                // 'lax'
      break;
    default:
      consumeT(204);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(82);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(230);                   // '{'
    lookahead1W(184);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 234)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(234);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(82);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(230);                  // '{'
    lookahead1W(184);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 234)                  // '}'
    {
      try_Expr();
    }
    consumeT(234);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(166);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(166);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(179);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(179);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_PathExpr();
    }
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 35:                      // '(#'
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 45:                      // '/'
      case 46:                      // '//'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 80:                      // 'append'
      case 82:                      // 'as'
      case 84:                      // 'at'
      case 87:                      // 'before'
      case 89:                      // 'break'
      case 100:                     // 'continue'
      case 101:                     // 'copy'
      case 108:                     // 'delete'
      case 125:                     // 'exit'
      case 144:                     // 'insert'
      case 147:                     // 'into'
      case 148:                     // 'invoke'
      case 162:                     // 'modify'
      case 189:                     // 'rename'
      case 190:                     // 'replace'
      case 210:                     // 'transform'
      case 221:                     // 'variable'
      case 225:                     // 'while'
      case 227:                     // 'with'
      case 230:                     // '{'
      case 232:                     // '|'
      case 233:                     // '||'
      case 234:                     // '}'
      case 235:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 35:                      // '(#'
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 45:                      // '/'
      case 46:                      // '//'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 80:                      // 'append'
      case 82:                      // 'as'
      case 84:                      // 'at'
      case 87:                      // 'before'
      case 89:                      // 'break'
      case 100:                     // 'continue'
      case 101:                     // 'copy'
      case 108:                     // 'delete'
      case 125:                     // 'exit'
      case 144:                     // 'insert'
      case 147:                     // 'into'
      case 148:                     // 'invoke'
      case 162:                     // 'modify'
      case 189:                     // 'rename'
      case 190:                     // 'replace'
      case 210:                     // 'transform'
      case 221:                     // 'variable'
      case 225:                     // 'while'
      case 227:                     // 'with'
      case 230:                     // '{'
      case 232:                     // '|'
      case 233:                     // '||'
      case 234:                     // '}'
      case 235:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 45:                      // '/'
        lookahead2W(195);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 46:                      // '//'
        lookahead2W(178);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 26                  // '!'
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 210                 // 'transform'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 232                 // '|'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 6445                // '/' EOF
       && lk != 6701                // '/' '!'
       && lk != 6957                // '/' '!='
       && lk != 9005                // '/' '(#'
       && lk != 9773                // '/' '*'
       && lk != 10029               // '/' '+'
       && lk != 10285               // '/' ','
       && lk != 10541               // '/' '-'
       && lk != 11565               // '/' '/'
       && lk != 11821               // '/' '//'
       && lk != 13357               // '/' ';'
       && lk != 14637               // '/' '<<'
       && lk != 14893               // '/' '<='
       && lk != 15405               // '/' '='
       && lk != 15661               // '/' '=>'
       && lk != 15917               // '/' '>'
       && lk != 16173               // '/' '>='
       && lk != 16429               // '/' '>>'
       && lk != 20525               // '/' 'append'
       && lk != 22829               // '/' 'break'
       && lk != 25645               // '/' 'continue'
       && lk != 25901               // '/' 'copy'
       && lk != 27693               // '/' 'delete'
       && lk != 32045               // '/' 'exit'
       && lk != 36909               // '/' 'insert'
       && lk != 37933               // '/' 'invoke'
       && lk != 48429               // '/' 'rename'
       && lk != 48685               // '/' 'replace'
       && lk != 53805               // '/' 'transform'
       && lk != 56621               // '/' 'variable'
       && lk != 57645               // '/' 'while'
       && lk != 58925               // '/' '{'
       && lk != 59437               // '/' '|'
       && lk != 59693               // '/' '||'
       && lk != 59949)              // '/' '}'
      {
        lk = memoized(21, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            default:
              consumeT(46);         // '//'
            }
            lookahead1W(178);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(21, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      default:
        consume(46);                // '//'
      }
      lookahead1W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 45:                      // '/'
        lookahead2W(195);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'ascending' | 'attribute' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 46:                      // '//'
        lookahead2W(178);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 26                  // '!'
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 34                  // '('
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 65                  // '?'
       && lk != 67                  // '@'
       && lk != 69                  // '['
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 210                 // 'transform'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 232                 // '|'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 6445                // '/' EOF
       && lk != 6701                // '/' '!'
       && lk != 6957                // '/' '!='
       && lk != 9005                // '/' '(#'
       && lk != 9773                // '/' '*'
       && lk != 10029               // '/' '+'
       && lk != 10285               // '/' ','
       && lk != 10541               // '/' '-'
       && lk != 11565               // '/' '/'
       && lk != 11821               // '/' '//'
       && lk != 13357               // '/' ';'
       && lk != 14637               // '/' '<<'
       && lk != 14893               // '/' '<='
       && lk != 15405               // '/' '='
       && lk != 15661               // '/' '=>'
       && lk != 15917               // '/' '>'
       && lk != 16173               // '/' '>='
       && lk != 16429               // '/' '>>'
       && lk != 20525               // '/' 'append'
       && lk != 22829               // '/' 'break'
       && lk != 25645               // '/' 'continue'
       && lk != 25901               // '/' 'copy'
       && lk != 27693               // '/' 'delete'
       && lk != 32045               // '/' 'exit'
       && lk != 36909               // '/' 'insert'
       && lk != 37933               // '/' 'invoke'
       && lk != 48429               // '/' 'rename'
       && lk != 48685               // '/' 'replace'
       && lk != 53805               // '/' 'transform'
       && lk != 56621               // '/' 'variable'
       && lk != 57645               // '/' 'while'
       && lk != 58925               // '/' '{'
       && lk != 59437               // '/' '|'
       && lk != 59693               // '/' '||'
       && lk != 59949)              // '/' '}'
      {
        lk = memoized(21, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            default:
              consumeT(46);         // '//'
            }
            lookahead1W(178);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
            try_StepExpr();
            memoize(21, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(21, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      default:
        consumeT(46);               // '//'
      }
      lookahead1W(178);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 164:                       // 'namespace'
    case 188:                       // 'processing-instruction'
      lookahead2W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!' |
                                    // '!=' | '#' | '$' | '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '..' | '/' | '//' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 198:                       // 'self'
      lookahead2W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'and'
    case 81:                        // 'array'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 97:                        // 'comment'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 114:                       // 'document'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 119:                       // 'empty-sequence'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 131:                       // 'for'
    case 132:                       // 'function'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 139:                       // 'if'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 150:                       // 'item'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 159:                       // 'map'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 165:                       // 'namespace-node'
    case 166:                       // 'ne'
    case 170:                       // 'node'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 177:                       // 'ordered'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 206:                       // 'switch'
    case 207:                       // 'text'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
    case 216:                       // 'union'
    case 217:                       // 'unordered'
    case 219:                       // 'validate'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(215);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 1365                  // 'attribute' URIQualifiedName
     || lk == 1396                  // 'element' URIQualifiedName
     || lk == 3925                  // 'attribute' QName^Token
     || lk == 3956                  // 'element' QName^Token
     || lk == 8709                  // URIQualifiedName '('
     || lk == 8719                  // QName^Token '('
     || lk == 8781                  // 'ancestor' '('
     || lk == 8782                  // 'ancestor-or-self' '('
     || lk == 8783                  // 'and' '('
     || lk == 8787                  // 'ascending' '('
     || lk == 8795                  // 'case' '('
     || lk == 8796                  // 'cast' '('
     || lk == 8797                  // 'castable' '('
     || lk == 8799                  // 'child' '('
     || lk == 8800                  // 'collation' '('
     || lk == 8807                  // 'count' '('
     || lk == 8810                  // 'declare' '('
     || lk == 8811                  // 'default' '('
     || lk == 8813                  // 'descendant' '('
     || lk == 8814                  // 'descendant-or-self' '('
     || lk == 8815                  // 'descending' '('
     || lk == 8817                  // 'div' '('
     || lk == 8818                  // 'document' '('
     || lk == 8821                  // 'else' '('
     || lk == 8822                  // 'empty' '('
     || lk == 8825                  // 'end' '('
     || lk == 8826                  // 'eq' '('
     || lk == 8827                  // 'every' '('
     || lk == 8828                  // 'except' '('
     || lk == 8833                  // 'following' '('
     || lk == 8834                  // 'following-sibling' '('
     || lk == 8835                  // 'for' '('
     || lk == 8836                  // 'function' '('
     || lk == 8837                  // 'ge' '('
     || lk == 8839                  // 'group' '('
     || lk == 8841                  // 'gt' '('
     || lk == 8842                  // 'idiv' '('
     || lk == 8844                  // 'import' '('
     || lk == 8849                  // 'instance' '('
     || lk == 8850                  // 'intersect' '('
     || lk == 8853                  // 'is' '('
     || lk == 8858                  // 'le' '('
     || lk == 8860                  // 'let' '('
     || lk == 8862                  // 'lt' '('
     || lk == 8865                  // 'mod' '('
     || lk == 8867                  // 'module' '('
     || lk == 8868                  // 'namespace' '('
     || lk == 8870                  // 'ne' '('
     || lk == 8877                  // 'only' '('
     || lk == 8879                  // 'or' '('
     || lk == 8880                  // 'order' '('
     || lk == 8881                  // 'ordered' '('
     || lk == 8883                  // 'parent' '('
     || lk == 8888                  // 'preceding' '('
     || lk == 8889                  // 'preceding-sibling' '('
     || lk == 8895                  // 'return' '('
     || lk == 8898                  // 'satisfies' '('
     || lk == 8902                  // 'self' '('
     || lk == 8905                  // 'some' '('
     || lk == 8906                  // 'stable' '('
     || lk == 8907                  // 'start' '('
     || lk == 8913                  // 'to' '('
     || lk == 8915                  // 'treat' '('
     || lk == 8916                  // 'try' '('
     || lk == 8920                  // 'union' '('
     || lk == 8921                  // 'unordered' '('
     || lk == 8923                  // 'validate' '('
     || lk == 8928                  // 'where' '('
     || lk == 8932                  // 'xquery' '('
     || lk == 19797                 // 'attribute' 'ancestor'
     || lk == 19828                 // 'element' 'ancestor'
     || lk == 20053                 // 'attribute' 'ancestor-or-self'
     || lk == 20084                 // 'element' 'ancestor-or-self'
     || lk == 20309                 // 'attribute' 'and'
     || lk == 20340                 // 'element' 'and'
     || lk == 20388                 // 'namespace' 'and'
     || lk == 20412                 // 'processing-instruction' 'and'
     || lk == 20821                 // 'attribute' 'array'
     || lk == 20852                 // 'element' 'array'
     || lk == 21333                 // 'attribute' 'ascending'
     || lk == 21364                 // 'element' 'ascending'
     || lk == 21412                 // 'namespace' 'ascending'
     || lk == 21436                 // 'processing-instruction' 'ascending'
     || lk == 21845                 // 'attribute' 'attribute'
     || lk == 21876                 // 'element' 'attribute'
     || lk == 23381                 // 'attribute' 'case'
     || lk == 23412                 // 'element' 'case'
     || lk == 23460                 // 'namespace' 'case'
     || lk == 23484                 // 'processing-instruction' 'case'
     || lk == 23637                 // 'attribute' 'cast'
     || lk == 23668                 // 'element' 'cast'
     || lk == 23716                 // 'namespace' 'cast'
     || lk == 23740                 // 'processing-instruction' 'cast'
     || lk == 23893                 // 'attribute' 'castable'
     || lk == 23924                 // 'element' 'castable'
     || lk == 23972                 // 'namespace' 'castable'
     || lk == 23996                 // 'processing-instruction' 'castable'
     || lk == 24405                 // 'attribute' 'child'
     || lk == 24436                 // 'element' 'child'
     || lk == 24661                 // 'attribute' 'collation'
     || lk == 24692                 // 'element' 'collation'
     || lk == 24740                 // 'namespace' 'collation'
     || lk == 24764                 // 'processing-instruction' 'collation'
     || lk == 24917                 // 'attribute' 'comment'
     || lk == 24948                 // 'element' 'comment'
     || lk == 26453                 // 'attribute' 'count'
     || lk == 26484                 // 'element' 'count'
     || lk == 26532                 // 'namespace' 'count'
     || lk == 26556                 // 'processing-instruction' 'count'
     || lk == 27221                 // 'attribute' 'declare'
     || lk == 27252                 // 'element' 'declare'
     || lk == 27477                 // 'attribute' 'default'
     || lk == 27508                 // 'element' 'default'
     || lk == 27556                 // 'namespace' 'default'
     || lk == 27580                 // 'processing-instruction' 'default'
     || lk == 27989                 // 'attribute' 'descendant'
     || lk == 28020                 // 'element' 'descendant'
     || lk == 28245                 // 'attribute' 'descendant-or-self'
     || lk == 28276                 // 'element' 'descendant-or-self'
     || lk == 28501                 // 'attribute' 'descending'
     || lk == 28532                 // 'element' 'descending'
     || lk == 28580                 // 'namespace' 'descending'
     || lk == 28604                 // 'processing-instruction' 'descending'
     || lk == 29013                 // 'attribute' 'div'
     || lk == 29044                 // 'element' 'div'
     || lk == 29092                 // 'namespace' 'div'
     || lk == 29116                 // 'processing-instruction' 'div'
     || lk == 29269                 // 'attribute' 'document'
     || lk == 29300                 // 'element' 'document'
     || lk == 29525                 // 'attribute' 'document-node'
     || lk == 29556                 // 'element' 'document-node'
     || lk == 29781                 // 'attribute' 'element'
     || lk == 29812                 // 'element' 'element'
     || lk == 30037                 // 'attribute' 'else'
     || lk == 30068                 // 'element' 'else'
     || lk == 30116                 // 'namespace' 'else'
     || lk == 30140                 // 'processing-instruction' 'else'
     || lk == 30293                 // 'attribute' 'empty'
     || lk == 30324                 // 'element' 'empty'
     || lk == 30372                 // 'namespace' 'empty'
     || lk == 30396                 // 'processing-instruction' 'empty'
     || lk == 30549                 // 'attribute' 'empty-sequence'
     || lk == 30580                 // 'element' 'empty-sequence'
     || lk == 31061                 // 'attribute' 'end'
     || lk == 31092                 // 'element' 'end'
     || lk == 31140                 // 'namespace' 'end'
     || lk == 31164                 // 'processing-instruction' 'end'
     || lk == 31317                 // 'attribute' 'eq'
     || lk == 31348                 // 'element' 'eq'
     || lk == 31396                 // 'namespace' 'eq'
     || lk == 31420                 // 'processing-instruction' 'eq'
     || lk == 31573                 // 'attribute' 'every'
     || lk == 31604                 // 'element' 'every'
     || lk == 31829                 // 'attribute' 'except'
     || lk == 31860                 // 'element' 'except'
     || lk == 31908                 // 'namespace' 'except'
     || lk == 31932                 // 'processing-instruction' 'except'
     || lk == 33109                 // 'attribute' 'following'
     || lk == 33140                 // 'element' 'following'
     || lk == 33365                 // 'attribute' 'following-sibling'
     || lk == 33396                 // 'element' 'following-sibling'
     || lk == 33621                 // 'attribute' 'for'
     || lk == 33652                 // 'element' 'for'
     || lk == 33700                 // 'namespace' 'for'
     || lk == 33724                 // 'processing-instruction' 'for'
     || lk == 33877                 // 'attribute' 'function'
     || lk == 33908                 // 'element' 'function'
     || lk == 34133                 // 'attribute' 'ge'
     || lk == 34164                 // 'element' 'ge'
     || lk == 34212                 // 'namespace' 'ge'
     || lk == 34236                 // 'processing-instruction' 'ge'
     || lk == 34645                 // 'attribute' 'group'
     || lk == 34676                 // 'element' 'group'
     || lk == 34724                 // 'namespace' 'group'
     || lk == 34748                 // 'processing-instruction' 'group'
     || lk == 35157                 // 'attribute' 'gt'
     || lk == 35188                 // 'element' 'gt'
     || lk == 35236                 // 'namespace' 'gt'
     || lk == 35260                 // 'processing-instruction' 'gt'
     || lk == 35413                 // 'attribute' 'idiv'
     || lk == 35444                 // 'element' 'idiv'
     || lk == 35492                 // 'namespace' 'idiv'
     || lk == 35516                 // 'processing-instruction' 'idiv'
     || lk == 35669                 // 'attribute' 'if'
     || lk == 35700                 // 'element' 'if'
     || lk == 35925                 // 'attribute' 'import'
     || lk == 35956                 // 'element' 'import'
     || lk == 37205                 // 'attribute' 'instance'
     || lk == 37236                 // 'element' 'instance'
     || lk == 37284                 // 'namespace' 'instance'
     || lk == 37308                 // 'processing-instruction' 'instance'
     || lk == 37461                 // 'attribute' 'intersect'
     || lk == 37492                 // 'element' 'intersect'
     || lk == 37540                 // 'namespace' 'intersect'
     || lk == 37564                 // 'processing-instruction' 'intersect'
     || lk == 38229                 // 'attribute' 'is'
     || lk == 38260                 // 'element' 'is'
     || lk == 38308                 // 'namespace' 'is'
     || lk == 38332                 // 'processing-instruction' 'is'
     || lk == 38485                 // 'attribute' 'item'
     || lk == 38516                 // 'element' 'item'
     || lk == 39509                 // 'attribute' 'le'
     || lk == 39540                 // 'element' 'le'
     || lk == 39588                 // 'namespace' 'le'
     || lk == 39612                 // 'processing-instruction' 'le'
     || lk == 40021                 // 'attribute' 'let'
     || lk == 40052                 // 'element' 'let'
     || lk == 40100                 // 'namespace' 'let'
     || lk == 40124                 // 'processing-instruction' 'let'
     || lk == 40533                 // 'attribute' 'lt'
     || lk == 40564                 // 'element' 'lt'
     || lk == 40612                 // 'namespace' 'lt'
     || lk == 40636                 // 'processing-instruction' 'lt'
     || lk == 40789                 // 'attribute' 'map'
     || lk == 40820                 // 'element' 'map'
     || lk == 41301                 // 'attribute' 'mod'
     || lk == 41332                 // 'element' 'mod'
     || lk == 41380                 // 'namespace' 'mod'
     || lk == 41404                 // 'processing-instruction' 'mod'
     || lk == 41813                 // 'attribute' 'module'
     || lk == 41844                 // 'element' 'module'
     || lk == 42069                 // 'attribute' 'namespace'
     || lk == 42100                 // 'element' 'namespace'
     || lk == 42325                 // 'attribute' 'namespace-node'
     || lk == 42356                 // 'element' 'namespace-node'
     || lk == 42581                 // 'attribute' 'ne'
     || lk == 42612                 // 'element' 'ne'
     || lk == 42660                 // 'namespace' 'ne'
     || lk == 42684                 // 'processing-instruction' 'ne'
     || lk == 43605                 // 'attribute' 'node'
     || lk == 43636                 // 'element' 'node'
     || lk == 44373                 // 'attribute' 'only'
     || lk == 44404                 // 'element' 'only'
     || lk == 44452                 // 'namespace' 'only'
     || lk == 44476                 // 'processing-instruction' 'only'
     || lk == 44885                 // 'attribute' 'or'
     || lk == 44916                 // 'element' 'or'
     || lk == 44964                 // 'namespace' 'or'
     || lk == 44988                 // 'processing-instruction' 'or'
     || lk == 45141                 // 'attribute' 'order'
     || lk == 45172                 // 'element' 'order'
     || lk == 45220                 // 'namespace' 'order'
     || lk == 45244                 // 'processing-instruction' 'order'
     || lk == 45397                 // 'attribute' 'ordered'
     || lk == 45428                 // 'element' 'ordered'
     || lk == 45909                 // 'attribute' 'parent'
     || lk == 45940                 // 'element' 'parent'
     || lk == 47189                 // 'attribute' 'preceding'
     || lk == 47220                 // 'element' 'preceding'
     || lk == 47445                 // 'attribute' 'preceding-sibling'
     || lk == 47476                 // 'element' 'preceding-sibling'
     || lk == 48213                 // 'attribute' 'processing-instruction'
     || lk == 48244                 // 'element' 'processing-instruction'
     || lk == 48981                 // 'attribute' 'return'
     || lk == 49012                 // 'element' 'return'
     || lk == 49060                 // 'namespace' 'return'
     || lk == 49084                 // 'processing-instruction' 'return'
     || lk == 49749                 // 'attribute' 'satisfies'
     || lk == 49780                 // 'element' 'satisfies'
     || lk == 49828                 // 'namespace' 'satisfies'
     || lk == 49852                 // 'processing-instruction' 'satisfies'
     || lk == 50261                 // 'attribute' 'schema-attribute'
     || lk == 50292                 // 'element' 'schema-attribute'
     || lk == 50517                 // 'attribute' 'schema-element'
     || lk == 50548                 // 'element' 'schema-element'
     || lk == 50773                 // 'attribute' 'self'
     || lk == 50804                 // 'element' 'self'
     || lk == 51541                 // 'attribute' 'some'
     || lk == 51572                 // 'element' 'some'
     || lk == 51797                 // 'attribute' 'stable'
     || lk == 51828                 // 'element' 'stable'
     || lk == 51876                 // 'namespace' 'stable'
     || lk == 51900                 // 'processing-instruction' 'stable'
     || lk == 52053                 // 'attribute' 'start'
     || lk == 52084                 // 'element' 'start'
     || lk == 52132                 // 'namespace' 'start'
     || lk == 52156                 // 'processing-instruction' 'start'
     || lk == 52821                 // 'attribute' 'switch'
     || lk == 52852                 // 'element' 'switch'
     || lk == 53077                 // 'attribute' 'text'
     || lk == 53108                 // 'element' 'text'
     || lk == 53589                 // 'attribute' 'to'
     || lk == 53620                 // 'element' 'to'
     || lk == 53668                 // 'namespace' 'to'
     || lk == 53692                 // 'processing-instruction' 'to'
     || lk == 54101                 // 'attribute' 'treat'
     || lk == 54132                 // 'element' 'treat'
     || lk == 54180                 // 'namespace' 'treat'
     || lk == 54204                 // 'processing-instruction' 'treat'
     || lk == 54357                 // 'attribute' 'try'
     || lk == 54388                 // 'element' 'try'
     || lk == 55125                 // 'attribute' 'typeswitch'
     || lk == 55156                 // 'element' 'typeswitch'
     || lk == 55381                 // 'attribute' 'union'
     || lk == 55412                 // 'element' 'union'
     || lk == 55460                 // 'namespace' 'union'
     || lk == 55484                 // 'processing-instruction' 'union'
     || lk == 55637                 // 'attribute' 'unordered'
     || lk == 55668                 // 'element' 'unordered'
     || lk == 56149                 // 'attribute' 'validate'
     || lk == 56180                 // 'element' 'validate'
     || lk == 57429                 // 'attribute' 'where'
     || lk == 57460                 // 'element' 'where'
     || lk == 57508                 // 'namespace' 'where'
     || lk == 57532                 // 'processing-instruction' 'where'
     || lk == 58453                 // 'attribute' 'xquery'
     || lk == 58484                 // 'element' 'xquery'
     || lk == 58961                 // 'array' '{'
     || lk == 58965                 // 'attribute' '{'
     || lk == 58977                 // 'comment' '{'
     || lk == 58994                 // 'document' '{'
     || lk == 58996                 // 'element' '{'
     || lk == 59039                 // 'map' '{'
     || lk == 59044                 // 'namespace' '{'
     || lk == 59057                 // 'ordered' '{'
     || lk == 59068                 // 'processing-instruction' '{'
     || lk == 59087                 // 'text' '{'
     || lk == 59097)                // 'unordered' '{'
    {
      lk = memoized(22, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(22, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 3748:                      // 'namespace' NCName^Token
    case 3772:                      // 'processing-instruction' NCName^Token
    case 7429:                      // URIQualifiedName '#'
    case 7439:                      // QName^Token '#'
    case 7501:                      // 'ancestor' '#'
    case 7502:                      // 'ancestor-or-self' '#'
    case 7503:                      // 'and' '#'
    case 7505:                      // 'array' '#'
    case 7507:                      // 'ascending' '#'
    case 7509:                      // 'attribute' '#'
    case 7515:                      // 'case' '#'
    case 7516:                      // 'cast' '#'
    case 7517:                      // 'castable' '#'
    case 7519:                      // 'child' '#'
    case 7520:                      // 'collation' '#'
    case 7521:                      // 'comment' '#'
    case 7527:                      // 'count' '#'
    case 7530:                      // 'declare' '#'
    case 7531:                      // 'default' '#'
    case 7533:                      // 'descendant' '#'
    case 7534:                      // 'descendant-or-self' '#'
    case 7535:                      // 'descending' '#'
    case 7537:                      // 'div' '#'
    case 7538:                      // 'document' '#'
    case 7539:                      // 'document-node' '#'
    case 7540:                      // 'element' '#'
    case 7541:                      // 'else' '#'
    case 7542:                      // 'empty' '#'
    case 7543:                      // 'empty-sequence' '#'
    case 7545:                      // 'end' '#'
    case 7546:                      // 'eq' '#'
    case 7547:                      // 'every' '#'
    case 7548:                      // 'except' '#'
    case 7553:                      // 'following' '#'
    case 7554:                      // 'following-sibling' '#'
    case 7555:                      // 'for' '#'
    case 7556:                      // 'function' '#'
    case 7557:                      // 'ge' '#'
    case 7559:                      // 'group' '#'
    case 7561:                      // 'gt' '#'
    case 7562:                      // 'idiv' '#'
    case 7563:                      // 'if' '#'
    case 7564:                      // 'import' '#'
    case 7569:                      // 'instance' '#'
    case 7570:                      // 'intersect' '#'
    case 7573:                      // 'is' '#'
    case 7574:                      // 'item' '#'
    case 7578:                      // 'le' '#'
    case 7580:                      // 'let' '#'
    case 7582:                      // 'lt' '#'
    case 7583:                      // 'map' '#'
    case 7585:                      // 'mod' '#'
    case 7587:                      // 'module' '#'
    case 7588:                      // 'namespace' '#'
    case 7589:                      // 'namespace-node' '#'
    case 7590:                      // 'ne' '#'
    case 7594:                      // 'node' '#'
    case 7597:                      // 'only' '#'
    case 7599:                      // 'or' '#'
    case 7600:                      // 'order' '#'
    case 7601:                      // 'ordered' '#'
    case 7603:                      // 'parent' '#'
    case 7608:                      // 'preceding' '#'
    case 7609:                      // 'preceding-sibling' '#'
    case 7612:                      // 'processing-instruction' '#'
    case 7615:                      // 'return' '#'
    case 7618:                      // 'satisfies' '#'
    case 7620:                      // 'schema-attribute' '#'
    case 7621:                      // 'schema-element' '#'
    case 7622:                      // 'self' '#'
    case 7625:                      // 'some' '#'
    case 7626:                      // 'stable' '#'
    case 7627:                      // 'start' '#'
    case 7630:                      // 'switch' '#'
    case 7631:                      // 'text' '#'
    case 7633:                      // 'to' '#'
    case 7635:                      // 'treat' '#'
    case 7636:                      // 'try' '#'
    case 7639:                      // 'typeswitch' '#'
    case 7640:                      // 'union' '#'
    case 7641:                      // 'unordered' '#'
    case 7643:                      // 'validate' '#'
    case 7648:                      // 'where' '#'
    case 7652:                      // 'xquery' '#'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 164:                       // 'namespace'
    case 188:                       // 'processing-instruction'
      lookahead2W(218);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!' |
                                    // '!=' | '#' | '$' | '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '..' | '/' | '//' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 198:                       // 'self'
      lookahead2W(219);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'following' | 'following-sibling' |
                                    // 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' |
                                    // 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 79:                        // 'and'
    case 81:                        // 'array'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 97:                        // 'comment'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 114:                       // 'document'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 119:                       // 'empty-sequence'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 131:                       // 'for'
    case 132:                       // 'function'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 139:                       // 'if'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 150:                       // 'item'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 159:                       // 'map'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 165:                       // 'namespace-node'
    case 166:                       // 'ne'
    case 170:                       // 'node'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 177:                       // 'ordered'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 206:                       // 'switch'
    case 207:                       // 'text'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 215:                       // 'typeswitch'
    case 216:                       // 'union'
    case 217:                       // 'unordered'
    case 219:                       // 'validate'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(215);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '#' | '$' |
                                    // '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' |
                                    // ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 1365                  // 'attribute' URIQualifiedName
     || lk == 1396                  // 'element' URIQualifiedName
     || lk == 3925                  // 'attribute' QName^Token
     || lk == 3956                  // 'element' QName^Token
     || lk == 8709                  // URIQualifiedName '('
     || lk == 8719                  // QName^Token '('
     || lk == 8781                  // 'ancestor' '('
     || lk == 8782                  // 'ancestor-or-self' '('
     || lk == 8783                  // 'and' '('
     || lk == 8787                  // 'ascending' '('
     || lk == 8795                  // 'case' '('
     || lk == 8796                  // 'cast' '('
     || lk == 8797                  // 'castable' '('
     || lk == 8799                  // 'child' '('
     || lk == 8800                  // 'collation' '('
     || lk == 8807                  // 'count' '('
     || lk == 8810                  // 'declare' '('
     || lk == 8811                  // 'default' '('
     || lk == 8813                  // 'descendant' '('
     || lk == 8814                  // 'descendant-or-self' '('
     || lk == 8815                  // 'descending' '('
     || lk == 8817                  // 'div' '('
     || lk == 8818                  // 'document' '('
     || lk == 8821                  // 'else' '('
     || lk == 8822                  // 'empty' '('
     || lk == 8825                  // 'end' '('
     || lk == 8826                  // 'eq' '('
     || lk == 8827                  // 'every' '('
     || lk == 8828                  // 'except' '('
     || lk == 8833                  // 'following' '('
     || lk == 8834                  // 'following-sibling' '('
     || lk == 8835                  // 'for' '('
     || lk == 8836                  // 'function' '('
     || lk == 8837                  // 'ge' '('
     || lk == 8839                  // 'group' '('
     || lk == 8841                  // 'gt' '('
     || lk == 8842                  // 'idiv' '('
     || lk == 8844                  // 'import' '('
     || lk == 8849                  // 'instance' '('
     || lk == 8850                  // 'intersect' '('
     || lk == 8853                  // 'is' '('
     || lk == 8858                  // 'le' '('
     || lk == 8860                  // 'let' '('
     || lk == 8862                  // 'lt' '('
     || lk == 8865                  // 'mod' '('
     || lk == 8867                  // 'module' '('
     || lk == 8868                  // 'namespace' '('
     || lk == 8870                  // 'ne' '('
     || lk == 8877                  // 'only' '('
     || lk == 8879                  // 'or' '('
     || lk == 8880                  // 'order' '('
     || lk == 8881                  // 'ordered' '('
     || lk == 8883                  // 'parent' '('
     || lk == 8888                  // 'preceding' '('
     || lk == 8889                  // 'preceding-sibling' '('
     || lk == 8895                  // 'return' '('
     || lk == 8898                  // 'satisfies' '('
     || lk == 8902                  // 'self' '('
     || lk == 8905                  // 'some' '('
     || lk == 8906                  // 'stable' '('
     || lk == 8907                  // 'start' '('
     || lk == 8913                  // 'to' '('
     || lk == 8915                  // 'treat' '('
     || lk == 8916                  // 'try' '('
     || lk == 8920                  // 'union' '('
     || lk == 8921                  // 'unordered' '('
     || lk == 8923                  // 'validate' '('
     || lk == 8928                  // 'where' '('
     || lk == 8932                  // 'xquery' '('
     || lk == 19797                 // 'attribute' 'ancestor'
     || lk == 19828                 // 'element' 'ancestor'
     || lk == 20053                 // 'attribute' 'ancestor-or-self'
     || lk == 20084                 // 'element' 'ancestor-or-self'
     || lk == 20309                 // 'attribute' 'and'
     || lk == 20340                 // 'element' 'and'
     || lk == 20388                 // 'namespace' 'and'
     || lk == 20412                 // 'processing-instruction' 'and'
     || lk == 20821                 // 'attribute' 'array'
     || lk == 20852                 // 'element' 'array'
     || lk == 21333                 // 'attribute' 'ascending'
     || lk == 21364                 // 'element' 'ascending'
     || lk == 21412                 // 'namespace' 'ascending'
     || lk == 21436                 // 'processing-instruction' 'ascending'
     || lk == 21845                 // 'attribute' 'attribute'
     || lk == 21876                 // 'element' 'attribute'
     || lk == 23381                 // 'attribute' 'case'
     || lk == 23412                 // 'element' 'case'
     || lk == 23460                 // 'namespace' 'case'
     || lk == 23484                 // 'processing-instruction' 'case'
     || lk == 23637                 // 'attribute' 'cast'
     || lk == 23668                 // 'element' 'cast'
     || lk == 23716                 // 'namespace' 'cast'
     || lk == 23740                 // 'processing-instruction' 'cast'
     || lk == 23893                 // 'attribute' 'castable'
     || lk == 23924                 // 'element' 'castable'
     || lk == 23972                 // 'namespace' 'castable'
     || lk == 23996                 // 'processing-instruction' 'castable'
     || lk == 24405                 // 'attribute' 'child'
     || lk == 24436                 // 'element' 'child'
     || lk == 24661                 // 'attribute' 'collation'
     || lk == 24692                 // 'element' 'collation'
     || lk == 24740                 // 'namespace' 'collation'
     || lk == 24764                 // 'processing-instruction' 'collation'
     || lk == 24917                 // 'attribute' 'comment'
     || lk == 24948                 // 'element' 'comment'
     || lk == 26453                 // 'attribute' 'count'
     || lk == 26484                 // 'element' 'count'
     || lk == 26532                 // 'namespace' 'count'
     || lk == 26556                 // 'processing-instruction' 'count'
     || lk == 27221                 // 'attribute' 'declare'
     || lk == 27252                 // 'element' 'declare'
     || lk == 27477                 // 'attribute' 'default'
     || lk == 27508                 // 'element' 'default'
     || lk == 27556                 // 'namespace' 'default'
     || lk == 27580                 // 'processing-instruction' 'default'
     || lk == 27989                 // 'attribute' 'descendant'
     || lk == 28020                 // 'element' 'descendant'
     || lk == 28245                 // 'attribute' 'descendant-or-self'
     || lk == 28276                 // 'element' 'descendant-or-self'
     || lk == 28501                 // 'attribute' 'descending'
     || lk == 28532                 // 'element' 'descending'
     || lk == 28580                 // 'namespace' 'descending'
     || lk == 28604                 // 'processing-instruction' 'descending'
     || lk == 29013                 // 'attribute' 'div'
     || lk == 29044                 // 'element' 'div'
     || lk == 29092                 // 'namespace' 'div'
     || lk == 29116                 // 'processing-instruction' 'div'
     || lk == 29269                 // 'attribute' 'document'
     || lk == 29300                 // 'element' 'document'
     || lk == 29525                 // 'attribute' 'document-node'
     || lk == 29556                 // 'element' 'document-node'
     || lk == 29781                 // 'attribute' 'element'
     || lk == 29812                 // 'element' 'element'
     || lk == 30037                 // 'attribute' 'else'
     || lk == 30068                 // 'element' 'else'
     || lk == 30116                 // 'namespace' 'else'
     || lk == 30140                 // 'processing-instruction' 'else'
     || lk == 30293                 // 'attribute' 'empty'
     || lk == 30324                 // 'element' 'empty'
     || lk == 30372                 // 'namespace' 'empty'
     || lk == 30396                 // 'processing-instruction' 'empty'
     || lk == 30549                 // 'attribute' 'empty-sequence'
     || lk == 30580                 // 'element' 'empty-sequence'
     || lk == 31061                 // 'attribute' 'end'
     || lk == 31092                 // 'element' 'end'
     || lk == 31140                 // 'namespace' 'end'
     || lk == 31164                 // 'processing-instruction' 'end'
     || lk == 31317                 // 'attribute' 'eq'
     || lk == 31348                 // 'element' 'eq'
     || lk == 31396                 // 'namespace' 'eq'
     || lk == 31420                 // 'processing-instruction' 'eq'
     || lk == 31573                 // 'attribute' 'every'
     || lk == 31604                 // 'element' 'every'
     || lk == 31829                 // 'attribute' 'except'
     || lk == 31860                 // 'element' 'except'
     || lk == 31908                 // 'namespace' 'except'
     || lk == 31932                 // 'processing-instruction' 'except'
     || lk == 33109                 // 'attribute' 'following'
     || lk == 33140                 // 'element' 'following'
     || lk == 33365                 // 'attribute' 'following-sibling'
     || lk == 33396                 // 'element' 'following-sibling'
     || lk == 33621                 // 'attribute' 'for'
     || lk == 33652                 // 'element' 'for'
     || lk == 33700                 // 'namespace' 'for'
     || lk == 33724                 // 'processing-instruction' 'for'
     || lk == 33877                 // 'attribute' 'function'
     || lk == 33908                 // 'element' 'function'
     || lk == 34133                 // 'attribute' 'ge'
     || lk == 34164                 // 'element' 'ge'
     || lk == 34212                 // 'namespace' 'ge'
     || lk == 34236                 // 'processing-instruction' 'ge'
     || lk == 34645                 // 'attribute' 'group'
     || lk == 34676                 // 'element' 'group'
     || lk == 34724                 // 'namespace' 'group'
     || lk == 34748                 // 'processing-instruction' 'group'
     || lk == 35157                 // 'attribute' 'gt'
     || lk == 35188                 // 'element' 'gt'
     || lk == 35236                 // 'namespace' 'gt'
     || lk == 35260                 // 'processing-instruction' 'gt'
     || lk == 35413                 // 'attribute' 'idiv'
     || lk == 35444                 // 'element' 'idiv'
     || lk == 35492                 // 'namespace' 'idiv'
     || lk == 35516                 // 'processing-instruction' 'idiv'
     || lk == 35669                 // 'attribute' 'if'
     || lk == 35700                 // 'element' 'if'
     || lk == 35925                 // 'attribute' 'import'
     || lk == 35956                 // 'element' 'import'
     || lk == 37205                 // 'attribute' 'instance'
     || lk == 37236                 // 'element' 'instance'
     || lk == 37284                 // 'namespace' 'instance'
     || lk == 37308                 // 'processing-instruction' 'instance'
     || lk == 37461                 // 'attribute' 'intersect'
     || lk == 37492                 // 'element' 'intersect'
     || lk == 37540                 // 'namespace' 'intersect'
     || lk == 37564                 // 'processing-instruction' 'intersect'
     || lk == 38229                 // 'attribute' 'is'
     || lk == 38260                 // 'element' 'is'
     || lk == 38308                 // 'namespace' 'is'
     || lk == 38332                 // 'processing-instruction' 'is'
     || lk == 38485                 // 'attribute' 'item'
     || lk == 38516                 // 'element' 'item'
     || lk == 39509                 // 'attribute' 'le'
     || lk == 39540                 // 'element' 'le'
     || lk == 39588                 // 'namespace' 'le'
     || lk == 39612                 // 'processing-instruction' 'le'
     || lk == 40021                 // 'attribute' 'let'
     || lk == 40052                 // 'element' 'let'
     || lk == 40100                 // 'namespace' 'let'
     || lk == 40124                 // 'processing-instruction' 'let'
     || lk == 40533                 // 'attribute' 'lt'
     || lk == 40564                 // 'element' 'lt'
     || lk == 40612                 // 'namespace' 'lt'
     || lk == 40636                 // 'processing-instruction' 'lt'
     || lk == 40789                 // 'attribute' 'map'
     || lk == 40820                 // 'element' 'map'
     || lk == 41301                 // 'attribute' 'mod'
     || lk == 41332                 // 'element' 'mod'
     || lk == 41380                 // 'namespace' 'mod'
     || lk == 41404                 // 'processing-instruction' 'mod'
     || lk == 41813                 // 'attribute' 'module'
     || lk == 41844                 // 'element' 'module'
     || lk == 42069                 // 'attribute' 'namespace'
     || lk == 42100                 // 'element' 'namespace'
     || lk == 42325                 // 'attribute' 'namespace-node'
     || lk == 42356                 // 'element' 'namespace-node'
     || lk == 42581                 // 'attribute' 'ne'
     || lk == 42612                 // 'element' 'ne'
     || lk == 42660                 // 'namespace' 'ne'
     || lk == 42684                 // 'processing-instruction' 'ne'
     || lk == 43605                 // 'attribute' 'node'
     || lk == 43636                 // 'element' 'node'
     || lk == 44373                 // 'attribute' 'only'
     || lk == 44404                 // 'element' 'only'
     || lk == 44452                 // 'namespace' 'only'
     || lk == 44476                 // 'processing-instruction' 'only'
     || lk == 44885                 // 'attribute' 'or'
     || lk == 44916                 // 'element' 'or'
     || lk == 44964                 // 'namespace' 'or'
     || lk == 44988                 // 'processing-instruction' 'or'
     || lk == 45141                 // 'attribute' 'order'
     || lk == 45172                 // 'element' 'order'
     || lk == 45220                 // 'namespace' 'order'
     || lk == 45244                 // 'processing-instruction' 'order'
     || lk == 45397                 // 'attribute' 'ordered'
     || lk == 45428                 // 'element' 'ordered'
     || lk == 45909                 // 'attribute' 'parent'
     || lk == 45940                 // 'element' 'parent'
     || lk == 47189                 // 'attribute' 'preceding'
     || lk == 47220                 // 'element' 'preceding'
     || lk == 47445                 // 'attribute' 'preceding-sibling'
     || lk == 47476                 // 'element' 'preceding-sibling'
     || lk == 48213                 // 'attribute' 'processing-instruction'
     || lk == 48244                 // 'element' 'processing-instruction'
     || lk == 48981                 // 'attribute' 'return'
     || lk == 49012                 // 'element' 'return'
     || lk == 49060                 // 'namespace' 'return'
     || lk == 49084                 // 'processing-instruction' 'return'
     || lk == 49749                 // 'attribute' 'satisfies'
     || lk == 49780                 // 'element' 'satisfies'
     || lk == 49828                 // 'namespace' 'satisfies'
     || lk == 49852                 // 'processing-instruction' 'satisfies'
     || lk == 50261                 // 'attribute' 'schema-attribute'
     || lk == 50292                 // 'element' 'schema-attribute'
     || lk == 50517                 // 'attribute' 'schema-element'
     || lk == 50548                 // 'element' 'schema-element'
     || lk == 50773                 // 'attribute' 'self'
     || lk == 50804                 // 'element' 'self'
     || lk == 51541                 // 'attribute' 'some'
     || lk == 51572                 // 'element' 'some'
     || lk == 51797                 // 'attribute' 'stable'
     || lk == 51828                 // 'element' 'stable'
     || lk == 51876                 // 'namespace' 'stable'
     || lk == 51900                 // 'processing-instruction' 'stable'
     || lk == 52053                 // 'attribute' 'start'
     || lk == 52084                 // 'element' 'start'
     || lk == 52132                 // 'namespace' 'start'
     || lk == 52156                 // 'processing-instruction' 'start'
     || lk == 52821                 // 'attribute' 'switch'
     || lk == 52852                 // 'element' 'switch'
     || lk == 53077                 // 'attribute' 'text'
     || lk == 53108                 // 'element' 'text'
     || lk == 53589                 // 'attribute' 'to'
     || lk == 53620                 // 'element' 'to'
     || lk == 53668                 // 'namespace' 'to'
     || lk == 53692                 // 'processing-instruction' 'to'
     || lk == 54101                 // 'attribute' 'treat'
     || lk == 54132                 // 'element' 'treat'
     || lk == 54180                 // 'namespace' 'treat'
     || lk == 54204                 // 'processing-instruction' 'treat'
     || lk == 54357                 // 'attribute' 'try'
     || lk == 54388                 // 'element' 'try'
     || lk == 55125                 // 'attribute' 'typeswitch'
     || lk == 55156                 // 'element' 'typeswitch'
     || lk == 55381                 // 'attribute' 'union'
     || lk == 55412                 // 'element' 'union'
     || lk == 55460                 // 'namespace' 'union'
     || lk == 55484                 // 'processing-instruction' 'union'
     || lk == 55637                 // 'attribute' 'unordered'
     || lk == 55668                 // 'element' 'unordered'
     || lk == 56149                 // 'attribute' 'validate'
     || lk == 56180                 // 'element' 'validate'
     || lk == 57429                 // 'attribute' 'where'
     || lk == 57460                 // 'element' 'where'
     || lk == 57508                 // 'namespace' 'where'
     || lk == 57532                 // 'processing-instruction' 'where'
     || lk == 58453                 // 'attribute' 'xquery'
     || lk == 58484                 // 'element' 'xquery'
     || lk == 58961                 // 'array' '{'
     || lk == 58965                 // 'attribute' '{'
     || lk == 58977                 // 'comment' '{'
     || lk == 58994                 // 'document' '{'
     || lk == 58996                 // 'element' '{'
     || lk == 59039                 // 'map' '{'
     || lk == 59044                 // 'namespace' '{'
     || lk == 59057                 // 'ordered' '{'
     || lk == 59068                 // 'processing-instruction' '{'
     || lk == 59087                 // 'text' '{'
     || lk == 59097)                // 'unordered' '{'
    {
      lk = memoized(22, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(22, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(22, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 3748:                      // 'namespace' NCName^Token
    case 3772:                      // 'processing-instruction' NCName^Token
    case 7429:                      // URIQualifiedName '#'
    case 7439:                      // QName^Token '#'
    case 7501:                      // 'ancestor' '#'
    case 7502:                      // 'ancestor-or-self' '#'
    case 7503:                      // 'and' '#'
    case 7505:                      // 'array' '#'
    case 7507:                      // 'ascending' '#'
    case 7509:                      // 'attribute' '#'
    case 7515:                      // 'case' '#'
    case 7516:                      // 'cast' '#'
    case 7517:                      // 'castable' '#'
    case 7519:                      // 'child' '#'
    case 7520:                      // 'collation' '#'
    case 7521:                      // 'comment' '#'
    case 7527:                      // 'count' '#'
    case 7530:                      // 'declare' '#'
    case 7531:                      // 'default' '#'
    case 7533:                      // 'descendant' '#'
    case 7534:                      // 'descendant-or-self' '#'
    case 7535:                      // 'descending' '#'
    case 7537:                      // 'div' '#'
    case 7538:                      // 'document' '#'
    case 7539:                      // 'document-node' '#'
    case 7540:                      // 'element' '#'
    case 7541:                      // 'else' '#'
    case 7542:                      // 'empty' '#'
    case 7543:                      // 'empty-sequence' '#'
    case 7545:                      // 'end' '#'
    case 7546:                      // 'eq' '#'
    case 7547:                      // 'every' '#'
    case 7548:                      // 'except' '#'
    case 7553:                      // 'following' '#'
    case 7554:                      // 'following-sibling' '#'
    case 7555:                      // 'for' '#'
    case 7556:                      // 'function' '#'
    case 7557:                      // 'ge' '#'
    case 7559:                      // 'group' '#'
    case 7561:                      // 'gt' '#'
    case 7562:                      // 'idiv' '#'
    case 7563:                      // 'if' '#'
    case 7564:                      // 'import' '#'
    case 7569:                      // 'instance' '#'
    case 7570:                      // 'intersect' '#'
    case 7573:                      // 'is' '#'
    case 7574:                      // 'item' '#'
    case 7578:                      // 'le' '#'
    case 7580:                      // 'let' '#'
    case 7582:                      // 'lt' '#'
    case 7583:                      // 'map' '#'
    case 7585:                      // 'mod' '#'
    case 7587:                      // 'module' '#'
    case 7588:                      // 'namespace' '#'
    case 7589:                      // 'namespace-node' '#'
    case 7590:                      // 'ne' '#'
    case 7594:                      // 'node' '#'
    case 7597:                      // 'only' '#'
    case 7599:                      // 'or' '#'
    case 7600:                      // 'order' '#'
    case 7601:                      // 'ordered' '#'
    case 7603:                      // 'parent' '#'
    case 7608:                      // 'preceding' '#'
    case 7609:                      // 'preceding-sibling' '#'
    case 7612:                      // 'processing-instruction' '#'
    case 7615:                      // 'return' '#'
    case 7618:                      // 'satisfies' '#'
    case 7620:                      // 'schema-attribute' '#'
    case 7621:                      // 'schema-element' '#'
    case 7622:                      // 'self' '#'
    case 7625:                      // 'some' '#'
    case 7626:                      // 'stable' '#'
    case 7627:                      // 'start' '#'
    case 7630:                      // 'switch' '#'
    case 7631:                      // 'text' '#'
    case 7633:                      // 'to' '#'
    case 7635:                      // 'treat' '#'
    case 7636:                      // 'try' '#'
    case 7639:                      // 'typeswitch' '#'
    case 7640:                      // 'union' '#'
    case 7641:                      // 'unordered' '#'
    case 7643:                      // 'validate' '#'
    case 7648:                      // 'where' '#'
    case 7652:                      // 'xquery' '#'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
      lookahead2W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 12877:                     // 'ancestor' '::'
    case 12878:                     // 'ancestor-or-self' '::'
    case 12979:                     // 'parent' '::'
    case 12984:                     // 'preceding' '::'
    case 12985:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(214);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
      lookahead2W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 12877:                     // 'ancestor' '::'
    case 12878:                     // 'ancestor-or-self' '::'
    case 12979:                     // 'parent' '::'
    case 12984:                     // 'preceding' '::'
    case 12985:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(214);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 198:                       // 'self'
      lookahead2W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 12885:                     // 'attribute' '::'
    case 12895:                     // 'child' '::'
    case 12909:                     // 'descendant' '::'
    case 12910:                     // 'descendant-or-self' '::'
    case 12929:                     // 'following' '::'
    case 12930:                     // 'following-sibling' '::'
    case 12998:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 95:                        // 'child'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 198:                       // 'self'
      lookahead2W(216);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 12885:                     // 'attribute' '::'
    case 12895:                     // 'child' '::'
    case 12909:                     // 'descendant' '::'
    case 12910:                     // 'descendant-or-self' '::'
    case 12929:                     // 'following' '::'
    case 12930:                     // 'following-sibling' '::'
    case 12998:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 109:                       // 'descendant'
      consume(109);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 85:                        // 'attribute'
      consume(85);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 198:                       // 'self'
      consume(198);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant-or-self'
      consume(110);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 130:                       // 'following-sibling'
      consume(130);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(129);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 109:                       // 'descendant'
      consumeT(109);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 85:                        // 'attribute'
      consumeT(85);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 198:                       // 'self'
      consumeT(198);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant-or-self'
      consumeT(110);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 130:                       // 'following-sibling'
      consumeT(130);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(129);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(169);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(169);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(169);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 179:                       // 'parent'
      consume(179);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 77:                        // 'ancestor'
      consume(77);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 185:                       // 'preceding-sibling'
      consume(185);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 184:                       // 'preceding'
      consume(184);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(78);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 179:                       // 'parent'
      consumeT(179);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 77:                        // 'ancestor'
      consumeT(77);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 185:                       // 'preceding-sibling'
      consumeT(185);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 184:                       // 'preceding'
      consumeT(184);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(78);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 97:                        // 'comment'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 165:                       // 'namespace-node'
    case 170:                       // 'node'
    case 188:                       // 'processing-instruction'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 207:                       // 'text'
      lookahead2W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8789                  // 'attribute' '('
     || lk == 8801                  // 'comment' '('
     || lk == 8819                  // 'document-node' '('
     || lk == 8820                  // 'element' '('
     || lk == 8869                  // 'namespace-node' '('
     || lk == 8874                  // 'node' '('
     || lk == 8892                  // 'processing-instruction' '('
     || lk == 8900                  // 'schema-attribute' '('
     || lk == 8901                  // 'schema-element' '('
     || lk == 8911)                 // 'text' '('
    {
      lk = memoized(23, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(23, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 85:                        // 'attribute'
    case 97:                        // 'comment'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 165:                       // 'namespace-node'
    case 170:                       // 'node'
    case 188:                       // 'processing-instruction'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 207:                       // 'text'
      lookahead2W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8789                  // 'attribute' '('
     || lk == 8801                  // 'comment' '('
     || lk == 8819                  // 'document-node' '('
     || lk == 8820                  // 'element' '('
     || lk == 8869                  // 'namespace-node' '('
     || lk == 8874                  // 'node' '('
     || lk == 8892                  // 'processing-instruction' '('
     || lk == 8900                  // 'schema-attribute' '('
     || lk == 8901                  // 'schema-element' '('
     || lk == 8911)                 // 'text' '('
    {
      lk = memoized(23, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(23, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(23, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_KindTest();
      break;
    case -3:
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(182);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 65:                      // '?'
        lookahead2W(161);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
        break;
      case 69:                      // '['
        lookahead2W(183);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 26                  // '!'
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 67                  // '@'
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 210                 // 'transform'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 232                 // '|'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 17989)              // '[' ']'
      {
        lk = memoized(24, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 69:                // '['
              try_Predicate();
              break;
            case 34:                // '('
              try_ArgumentList();
              break;
            default:
              try_Lookup();
            }
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(24, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(182);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      case 65:                      // '?'
        lookahead2W(161);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
        break;
      case 69:                      // '['
        lookahead2W(183);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 1                   // IntegerLiteral
       && lk != 2                   // DecimalLiteral
       && lk != 3                   // DoubleLiteral
       && lk != 4                   // StringLiteral
       && lk != 5                   // URIQualifiedName
       && lk != 15                  // QName^Token
       && lk != 21                  // Wildcard
       && lk != 25                  // EOF
       && lk != 26                  // '!'
       && lk != 27                  // '!='
       && lk != 31                  // '$'
       && lk != 32                  // '%'
       && lk != 35                  // '(#'
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 43                  // '.'
       && lk != 44                  // '..'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 54                  // '<!--'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 59                  // '<?'
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 67                  // '@'
       && lk != 70                  // ']'
       && lk != 73                  // '``['
       && lk != 75                  // 'after'
       && lk != 77                  // 'ancestor'
       && lk != 78                  // 'ancestor-or-self'
       && lk != 79                  // 'and'
       && lk != 80                  // 'append'
       && lk != 81                  // 'array'
       && lk != 82                  // 'as'
       && lk != 83                  // 'ascending'
       && lk != 84                  // 'at'
       && lk != 85                  // 'attribute'
       && lk != 87                  // 'before'
       && lk != 89                  // 'break'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 95                  // 'child'
       && lk != 96                  // 'collation'
       && lk != 97                  // 'comment'
       && lk != 100                 // 'continue'
       && lk != 101                 // 'copy'
       && lk != 103                 // 'count'
       && lk != 106                 // 'declare'
       && lk != 107                 // 'default'
       && lk != 108                 // 'delete'
       && lk != 109                 // 'descendant'
       && lk != 110                 // 'descendant-or-self'
       && lk != 111                 // 'descending'
       && lk != 113                 // 'div'
       && lk != 114                 // 'document'
       && lk != 115                 // 'document-node'
       && lk != 116                 // 'element'
       && lk != 117                 // 'else'
       && lk != 118                 // 'empty'
       && lk != 119                 // 'empty-sequence'
       && lk != 121                 // 'end'
       && lk != 122                 // 'eq'
       && lk != 123                 // 'every'
       && lk != 124                 // 'except'
       && lk != 125                 // 'exit'
       && lk != 129                 // 'following'
       && lk != 130                 // 'following-sibling'
       && lk != 131                 // 'for'
       && lk != 132                 // 'function'
       && lk != 133                 // 'ge'
       && lk != 135                 // 'group'
       && lk != 137                 // 'gt'
       && lk != 138                 // 'idiv'
       && lk != 139                 // 'if'
       && lk != 140                 // 'import'
       && lk != 144                 // 'insert'
       && lk != 145                 // 'instance'
       && lk != 146                 // 'intersect'
       && lk != 147                 // 'into'
       && lk != 148                 // 'invoke'
       && lk != 149                 // 'is'
       && lk != 150                 // 'item'
       && lk != 154                 // 'le'
       && lk != 156                 // 'let'
       && lk != 158                 // 'lt'
       && lk != 159                 // 'map'
       && lk != 161                 // 'mod'
       && lk != 162                 // 'modify'
       && lk != 163                 // 'module'
       && lk != 164                 // 'namespace'
       && lk != 165                 // 'namespace-node'
       && lk != 166                 // 'ne'
       && lk != 170                 // 'node'
       && lk != 173                 // 'only'
       && lk != 175                 // 'or'
       && lk != 176                 // 'order'
       && lk != 177                 // 'ordered'
       && lk != 179                 // 'parent'
       && lk != 184                 // 'preceding'
       && lk != 185                 // 'preceding-sibling'
       && lk != 188                 // 'processing-instruction'
       && lk != 189                 // 'rename'
       && lk != 190                 // 'replace'
       && lk != 191                 // 'return'
       && lk != 194                 // 'satisfies'
       && lk != 196                 // 'schema-attribute'
       && lk != 197                 // 'schema-element'
       && lk != 198                 // 'self'
       && lk != 201                 // 'some'
       && lk != 202                 // 'stable'
       && lk != 203                 // 'start'
       && lk != 206                 // 'switch'
       && lk != 207                 // 'text'
       && lk != 209                 // 'to'
       && lk != 210                 // 'transform'
       && lk != 211                 // 'treat'
       && lk != 212                 // 'try'
       && lk != 215                 // 'typeswitch'
       && lk != 216                 // 'union'
       && lk != 217                 // 'unordered'
       && lk != 219                 // 'validate'
       && lk != 221                 // 'variable'
       && lk != 224                 // 'where'
       && lk != 225                 // 'while'
       && lk != 227                 // 'with'
       && lk != 228                 // 'xquery'
       && lk != 230                 // '{'
       && lk != 232                 // '|'
       && lk != 233                 // '||'
       && lk != 234                 // '}'
       && lk != 235                 // '}`'
       && lk != 17989)              // '[' ']'
      {
        lk = memoized(24, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 69:                // '['
              try_Predicate();
              break;
            case 34:                // '('
              try_ArgumentList();
              break;
            default:
              try_Lookup();
            }
            memoize(24, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(24, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(182);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(182);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(183);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk == 325                 // '[' IntegerLiteral
       || lk == 581                 // '[' DecimalLiteral
       || lk == 837                 // '[' DoubleLiteral
       || lk == 1093                // '[' StringLiteral
       || lk == 1349                // '[' URIQualifiedName
       || lk == 3909                // '[' QName^Token
       || lk == 5445                // '[' Wildcard
       || lk == 8005                // '[' '$'
       || lk == 8261                // '[' '%'
       || lk == 8773                // '[' '('
       || lk == 9029                // '[' '(#'
       || lk == 10053               // '[' '+'
       || lk == 10565               // '[' '-'
       || lk == 11077               // '[' '.'
       || lk == 11333               // '[' '..'
       || lk == 11589               // '[' '/'
       || lk == 11845               // '[' '//'
       || lk == 13637               // '[' '<'
       || lk == 13893               // '[' '<!--'
       || lk == 15173               // '[' '<?'
       || lk == 16709               // '[' '?'
       || lk == 17221               // '[' '@'
       || lk == 17733               // '[' '['
       || lk == 18757               // '[' '``['
       || lk == 19781               // '[' 'ancestor'
       || lk == 20037               // '[' 'ancestor-or-self'
       || lk == 20293               // '[' 'and'
       || lk == 20805               // '[' 'array'
       || lk == 21317               // '[' 'ascending'
       || lk == 21829               // '[' 'attribute'
       || lk == 23365               // '[' 'case'
       || lk == 23621               // '[' 'cast'
       || lk == 23877               // '[' 'castable'
       || lk == 24389               // '[' 'child'
       || lk == 24645               // '[' 'collation'
       || lk == 24901               // '[' 'comment'
       || lk == 25925               // '[' 'copy'
       || lk == 26437               // '[' 'count'
       || lk == 27205               // '[' 'declare'
       || lk == 27461               // '[' 'default'
       || lk == 27717               // '[' 'delete'
       || lk == 27973               // '[' 'descendant'
       || lk == 28229               // '[' 'descendant-or-self'
       || lk == 28485               // '[' 'descending'
       || lk == 28997               // '[' 'div'
       || lk == 29253               // '[' 'document'
       || lk == 29509               // '[' 'document-node'
       || lk == 29765               // '[' 'element'
       || lk == 30021               // '[' 'else'
       || lk == 30277               // '[' 'empty'
       || lk == 30533               // '[' 'empty-sequence'
       || lk == 31045               // '[' 'end'
       || lk == 31301               // '[' 'eq'
       || lk == 31557               // '[' 'every'
       || lk == 31813               // '[' 'except'
       || lk == 33093               // '[' 'following'
       || lk == 33349               // '[' 'following-sibling'
       || lk == 33605               // '[' 'for'
       || lk == 33861               // '[' 'function'
       || lk == 34117               // '[' 'ge'
       || lk == 34629               // '[' 'group'
       || lk == 35141               // '[' 'gt'
       || lk == 35397               // '[' 'idiv'
       || lk == 35653               // '[' 'if'
       || lk == 35909               // '[' 'import'
       || lk == 36933               // '[' 'insert'
       || lk == 37189               // '[' 'instance'
       || lk == 37445               // '[' 'intersect'
       || lk == 37957               // '[' 'invoke'
       || lk == 38213               // '[' 'is'
       || lk == 38469               // '[' 'item'
       || lk == 39493               // '[' 'le'
       || lk == 40005               // '[' 'let'
       || lk == 40517               // '[' 'lt'
       || lk == 40773               // '[' 'map'
       || lk == 41285               // '[' 'mod'
       || lk == 41797               // '[' 'module'
       || lk == 42053               // '[' 'namespace'
       || lk == 42309               // '[' 'namespace-node'
       || lk == 42565               // '[' 'ne'
       || lk == 43589               // '[' 'node'
       || lk == 44357               // '[' 'only'
       || lk == 44869               // '[' 'or'
       || lk == 45125               // '[' 'order'
       || lk == 45381               // '[' 'ordered'
       || lk == 45893               // '[' 'parent'
       || lk == 47173               // '[' 'preceding'
       || lk == 47429               // '[' 'preceding-sibling'
       || lk == 48197               // '[' 'processing-instruction'
       || lk == 48453               // '[' 'rename'
       || lk == 48709               // '[' 'replace'
       || lk == 48965               // '[' 'return'
       || lk == 49733               // '[' 'satisfies'
       || lk == 50245               // '[' 'schema-attribute'
       || lk == 50501               // '[' 'schema-element'
       || lk == 50757               // '[' 'self'
       || lk == 51525               // '[' 'some'
       || lk == 51781               // '[' 'stable'
       || lk == 52037               // '[' 'start'
       || lk == 52805               // '[' 'switch'
       || lk == 53061               // '[' 'text'
       || lk == 53573               // '[' 'to'
       || lk == 54085               // '[' 'treat'
       || lk == 54341               // '[' 'try'
       || lk == 55109               // '[' 'typeswitch'
       || lk == 55365               // '[' 'union'
       || lk == 55621               // '[' 'unordered'
       || lk == 56133               // '[' 'validate'
       || lk == 57413               // '[' 'where'
       || lk == 58437)              // '[' 'xquery'
      {
        lk = memoized(25, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(25, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(214);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(183);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk == 325                 // '[' IntegerLiteral
       || lk == 581                 // '[' DecimalLiteral
       || lk == 837                 // '[' DoubleLiteral
       || lk == 1093                // '[' StringLiteral
       || lk == 1349                // '[' URIQualifiedName
       || lk == 3909                // '[' QName^Token
       || lk == 5445                // '[' Wildcard
       || lk == 8005                // '[' '$'
       || lk == 8261                // '[' '%'
       || lk == 8773                // '[' '('
       || lk == 9029                // '[' '(#'
       || lk == 10053               // '[' '+'
       || lk == 10565               // '[' '-'
       || lk == 11077               // '[' '.'
       || lk == 11333               // '[' '..'
       || lk == 11589               // '[' '/'
       || lk == 11845               // '[' '//'
       || lk == 13637               // '[' '<'
       || lk == 13893               // '[' '<!--'
       || lk == 15173               // '[' '<?'
       || lk == 16709               // '[' '?'
       || lk == 17221               // '[' '@'
       || lk == 17733               // '[' '['
       || lk == 18757               // '[' '``['
       || lk == 19781               // '[' 'ancestor'
       || lk == 20037               // '[' 'ancestor-or-self'
       || lk == 20293               // '[' 'and'
       || lk == 20805               // '[' 'array'
       || lk == 21317               // '[' 'ascending'
       || lk == 21829               // '[' 'attribute'
       || lk == 23365               // '[' 'case'
       || lk == 23621               // '[' 'cast'
       || lk == 23877               // '[' 'castable'
       || lk == 24389               // '[' 'child'
       || lk == 24645               // '[' 'collation'
       || lk == 24901               // '[' 'comment'
       || lk == 25925               // '[' 'copy'
       || lk == 26437               // '[' 'count'
       || lk == 27205               // '[' 'declare'
       || lk == 27461               // '[' 'default'
       || lk == 27717               // '[' 'delete'
       || lk == 27973               // '[' 'descendant'
       || lk == 28229               // '[' 'descendant-or-self'
       || lk == 28485               // '[' 'descending'
       || lk == 28997               // '[' 'div'
       || lk == 29253               // '[' 'document'
       || lk == 29509               // '[' 'document-node'
       || lk == 29765               // '[' 'element'
       || lk == 30021               // '[' 'else'
       || lk == 30277               // '[' 'empty'
       || lk == 30533               // '[' 'empty-sequence'
       || lk == 31045               // '[' 'end'
       || lk == 31301               // '[' 'eq'
       || lk == 31557               // '[' 'every'
       || lk == 31813               // '[' 'except'
       || lk == 33093               // '[' 'following'
       || lk == 33349               // '[' 'following-sibling'
       || lk == 33605               // '[' 'for'
       || lk == 33861               // '[' 'function'
       || lk == 34117               // '[' 'ge'
       || lk == 34629               // '[' 'group'
       || lk == 35141               // '[' 'gt'
       || lk == 35397               // '[' 'idiv'
       || lk == 35653               // '[' 'if'
       || lk == 35909               // '[' 'import'
       || lk == 36933               // '[' 'insert'
       || lk == 37189               // '[' 'instance'
       || lk == 37445               // '[' 'intersect'
       || lk == 37957               // '[' 'invoke'
       || lk == 38213               // '[' 'is'
       || lk == 38469               // '[' 'item'
       || lk == 39493               // '[' 'le'
       || lk == 40005               // '[' 'let'
       || lk == 40517               // '[' 'lt'
       || lk == 40773               // '[' 'map'
       || lk == 41285               // '[' 'mod'
       || lk == 41797               // '[' 'module'
       || lk == 42053               // '[' 'namespace'
       || lk == 42309               // '[' 'namespace-node'
       || lk == 42565               // '[' 'ne'
       || lk == 43589               // '[' 'node'
       || lk == 44357               // '[' 'only'
       || lk == 44869               // '[' 'or'
       || lk == 45125               // '[' 'order'
       || lk == 45381               // '[' 'ordered'
       || lk == 45893               // '[' 'parent'
       || lk == 47173               // '[' 'preceding'
       || lk == 47429               // '[' 'preceding-sibling'
       || lk == 48197               // '[' 'processing-instruction'
       || lk == 48453               // '[' 'rename'
       || lk == 48709               // '[' 'replace'
       || lk == 48965               // '[' 'return'
       || lk == 49733               // '[' 'satisfies'
       || lk == 50245               // '[' 'schema-attribute'
       || lk == 50501               // '[' 'schema-element'
       || lk == 50757               // '[' 'self'
       || lk == 51525               // '[' 'some'
       || lk == 51781               // '[' 'stable'
       || lk == 52037               // '[' 'start'
       || lk == 52805               // '[' 'switch'
       || lk == 53061               // '[' 'text'
       || lk == 53573               // '[' 'to'
       || lk == 54085               // '[' 'treat'
       || lk == 54341               // '[' 'try'
       || lk == 55109               // '[' 'typeswitch'
       || lk == 55365               // '[' 'union'
       || lk == 55621               // '[' 'unordered'
       || lk == 56133               // '[' 'validate'
       || lk == 57413               // '[' 'where'
       || lk == 58437)              // '[' 'xquery'
      {
        lk = memoized(25, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            memoize(25, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(25, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(161);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(161);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 164:                       // 'namespace'
      lookahead2W(162);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 188:                       // 'processing-instruction'
      lookahead2W(160);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 85:                        // 'attribute'
    case 116:                       // 'element'
      lookahead2W(171);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
      break;
    case 114:                       // 'document'
    case 177:                       // 'ordered'
    case 217:                       // 'unordered'
      lookahead2W(122);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 81:                        // 'array'
    case 97:                        // 'comment'
    case 159:                       // 'map'
    case 207:                       // 'text'
      lookahead2W(77);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 79:                        // 'and'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 131:                       // 'for'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 166:                       // 'ne'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 198:                       // 'self'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 216:                       // 'union'
    case 219:                       // 'validate'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(76);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 8709:                      // URIQualifiedName '('
    case 8719:                      // QName^Token '('
    case 8781:                      // 'ancestor' '('
    case 8782:                      // 'ancestor-or-self' '('
    case 8783:                      // 'and' '('
    case 8787:                      // 'ascending' '('
    case 8795:                      // 'case' '('
    case 8796:                      // 'cast' '('
    case 8797:                      // 'castable' '('
    case 8799:                      // 'child' '('
    case 8800:                      // 'collation' '('
    case 8807:                      // 'count' '('
    case 8810:                      // 'declare' '('
    case 8811:                      // 'default' '('
    case 8813:                      // 'descendant' '('
    case 8814:                      // 'descendant-or-self' '('
    case 8815:                      // 'descending' '('
    case 8817:                      // 'div' '('
    case 8818:                      // 'document' '('
    case 8821:                      // 'else' '('
    case 8822:                      // 'empty' '('
    case 8825:                      // 'end' '('
    case 8826:                      // 'eq' '('
    case 8827:                      // 'every' '('
    case 8828:                      // 'except' '('
    case 8833:                      // 'following' '('
    case 8834:                      // 'following-sibling' '('
    case 8835:                      // 'for' '('
    case 8837:                      // 'ge' '('
    case 8839:                      // 'group' '('
    case 8841:                      // 'gt' '('
    case 8842:                      // 'idiv' '('
    case 8844:                      // 'import' '('
    case 8849:                      // 'instance' '('
    case 8850:                      // 'intersect' '('
    case 8853:                      // 'is' '('
    case 8858:                      // 'le' '('
    case 8860:                      // 'let' '('
    case 8862:                      // 'lt' '('
    case 8865:                      // 'mod' '('
    case 8867:                      // 'module' '('
    case 8868:                      // 'namespace' '('
    case 8870:                      // 'ne' '('
    case 8877:                      // 'only' '('
    case 8879:                      // 'or' '('
    case 8880:                      // 'order' '('
    case 8881:                      // 'ordered' '('
    case 8883:                      // 'parent' '('
    case 8888:                      // 'preceding' '('
    case 8889:                      // 'preceding-sibling' '('
    case 8895:                      // 'return' '('
    case 8898:                      // 'satisfies' '('
    case 8902:                      // 'self' '('
    case 8905:                      // 'some' '('
    case 8906:                      // 'stable' '('
    case 8907:                      // 'start' '('
    case 8913:                      // 'to' '('
    case 8915:                      // 'treat' '('
    case 8916:                      // 'try' '('
    case 8920:                      // 'union' '('
    case 8921:                      // 'unordered' '('
    case 8923:                      // 'validate' '('
    case 8928:                      // 'where' '('
    case 8932:                      // 'xquery' '('
      parse_FunctionCall();
      break;
    case 59057:                     // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 59097:                     // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 115:                       // 'document-node'
    case 119:                       // 'empty-sequence'
    case 132:                       // 'function'
    case 139:                       // 'if'
    case 150:                       // 'item'
    case 165:                       // 'namespace-node'
    case 170:                       // 'node'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 206:                       // 'switch'
    case 215:                       // 'typeswitch'
    case 7429:                      // URIQualifiedName '#'
    case 7439:                      // QName^Token '#'
    case 7501:                      // 'ancestor' '#'
    case 7502:                      // 'ancestor-or-self' '#'
    case 7503:                      // 'and' '#'
    case 7505:                      // 'array' '#'
    case 7507:                      // 'ascending' '#'
    case 7509:                      // 'attribute' '#'
    case 7515:                      // 'case' '#'
    case 7516:                      // 'cast' '#'
    case 7517:                      // 'castable' '#'
    case 7519:                      // 'child' '#'
    case 7520:                      // 'collation' '#'
    case 7521:                      // 'comment' '#'
    case 7527:                      // 'count' '#'
    case 7530:                      // 'declare' '#'
    case 7531:                      // 'default' '#'
    case 7533:                      // 'descendant' '#'
    case 7534:                      // 'descendant-or-self' '#'
    case 7535:                      // 'descending' '#'
    case 7537:                      // 'div' '#'
    case 7538:                      // 'document' '#'
    case 7540:                      // 'element' '#'
    case 7541:                      // 'else' '#'
    case 7542:                      // 'empty' '#'
    case 7545:                      // 'end' '#'
    case 7546:                      // 'eq' '#'
    case 7547:                      // 'every' '#'
    case 7548:                      // 'except' '#'
    case 7553:                      // 'following' '#'
    case 7554:                      // 'following-sibling' '#'
    case 7555:                      // 'for' '#'
    case 7557:                      // 'ge' '#'
    case 7559:                      // 'group' '#'
    case 7561:                      // 'gt' '#'
    case 7562:                      // 'idiv' '#'
    case 7564:                      // 'import' '#'
    case 7569:                      // 'instance' '#'
    case 7570:                      // 'intersect' '#'
    case 7573:                      // 'is' '#'
    case 7578:                      // 'le' '#'
    case 7580:                      // 'let' '#'
    case 7582:                      // 'lt' '#'
    case 7583:                      // 'map' '#'
    case 7585:                      // 'mod' '#'
    case 7587:                      // 'module' '#'
    case 7588:                      // 'namespace' '#'
    case 7590:                      // 'ne' '#'
    case 7597:                      // 'only' '#'
    case 7599:                      // 'or' '#'
    case 7600:                      // 'order' '#'
    case 7601:                      // 'ordered' '#'
    case 7603:                      // 'parent' '#'
    case 7608:                      // 'preceding' '#'
    case 7609:                      // 'preceding-sibling' '#'
    case 7612:                      // 'processing-instruction' '#'
    case 7615:                      // 'return' '#'
    case 7618:                      // 'satisfies' '#'
    case 7622:                      // 'self' '#'
    case 7625:                      // 'some' '#'
    case 7626:                      // 'stable' '#'
    case 7627:                      // 'start' '#'
    case 7631:                      // 'text' '#'
    case 7633:                      // 'to' '#'
    case 7635:                      // 'treat' '#'
    case 7636:                      // 'try' '#'
    case 7640:                      // 'union' '#'
    case 7641:                      // 'unordered' '#'
    case 7643:                      // 'validate' '#'
    case 7648:                      // 'where' '#'
    case 7652:                      // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 59039:                     // 'map' '{'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 58961:                     // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_NodeConstructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 164:                       // 'namespace'
      lookahead2W(162);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 188:                       // 'processing-instruction'
      lookahead2W(160);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 85:                        // 'attribute'
    case 116:                       // 'element'
      lookahead2W(171);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
      break;
    case 114:                       // 'document'
    case 177:                       // 'ordered'
    case 217:                       // 'unordered'
      lookahead2W(122);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 81:                        // 'array'
    case 97:                        // 'comment'
    case 159:                       // 'map'
    case 207:                       // 'text'
      lookahead2W(77);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 77:                        // 'ancestor'
    case 78:                        // 'ancestor-or-self'
    case 79:                        // 'and'
    case 83:                        // 'ascending'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 103:                       // 'count'
    case 106:                       // 'declare'
    case 107:                       // 'default'
    case 109:                       // 'descendant'
    case 110:                       // 'descendant-or-self'
    case 111:                       // 'descending'
    case 113:                       // 'div'
    case 117:                       // 'else'
    case 118:                       // 'empty'
    case 121:                       // 'end'
    case 122:                       // 'eq'
    case 123:                       // 'every'
    case 124:                       // 'except'
    case 129:                       // 'following'
    case 130:                       // 'following-sibling'
    case 131:                       // 'for'
    case 133:                       // 'ge'
    case 135:                       // 'group'
    case 137:                       // 'gt'
    case 138:                       // 'idiv'
    case 140:                       // 'import'
    case 145:                       // 'instance'
    case 146:                       // 'intersect'
    case 149:                       // 'is'
    case 154:                       // 'le'
    case 156:                       // 'let'
    case 158:                       // 'lt'
    case 161:                       // 'mod'
    case 163:                       // 'module'
    case 166:                       // 'ne'
    case 173:                       // 'only'
    case 175:                       // 'or'
    case 176:                       // 'order'
    case 179:                       // 'parent'
    case 184:                       // 'preceding'
    case 185:                       // 'preceding-sibling'
    case 191:                       // 'return'
    case 194:                       // 'satisfies'
    case 198:                       // 'self'
    case 201:                       // 'some'
    case 202:                       // 'stable'
    case 203:                       // 'start'
    case 209:                       // 'to'
    case 211:                       // 'treat'
    case 212:                       // 'try'
    case 216:                       // 'union'
    case 219:                       // 'validate'
    case 224:                       // 'where'
    case 228:                       // 'xquery'
      lookahead2W(76);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 8709:                      // URIQualifiedName '('
    case 8719:                      // QName^Token '('
    case 8781:                      // 'ancestor' '('
    case 8782:                      // 'ancestor-or-self' '('
    case 8783:                      // 'and' '('
    case 8787:                      // 'ascending' '('
    case 8795:                      // 'case' '('
    case 8796:                      // 'cast' '('
    case 8797:                      // 'castable' '('
    case 8799:                      // 'child' '('
    case 8800:                      // 'collation' '('
    case 8807:                      // 'count' '('
    case 8810:                      // 'declare' '('
    case 8811:                      // 'default' '('
    case 8813:                      // 'descendant' '('
    case 8814:                      // 'descendant-or-self' '('
    case 8815:                      // 'descending' '('
    case 8817:                      // 'div' '('
    case 8818:                      // 'document' '('
    case 8821:                      // 'else' '('
    case 8822:                      // 'empty' '('
    case 8825:                      // 'end' '('
    case 8826:                      // 'eq' '('
    case 8827:                      // 'every' '('
    case 8828:                      // 'except' '('
    case 8833:                      // 'following' '('
    case 8834:                      // 'following-sibling' '('
    case 8835:                      // 'for' '('
    case 8837:                      // 'ge' '('
    case 8839:                      // 'group' '('
    case 8841:                      // 'gt' '('
    case 8842:                      // 'idiv' '('
    case 8844:                      // 'import' '('
    case 8849:                      // 'instance' '('
    case 8850:                      // 'intersect' '('
    case 8853:                      // 'is' '('
    case 8858:                      // 'le' '('
    case 8860:                      // 'let' '('
    case 8862:                      // 'lt' '('
    case 8865:                      // 'mod' '('
    case 8867:                      // 'module' '('
    case 8868:                      // 'namespace' '('
    case 8870:                      // 'ne' '('
    case 8877:                      // 'only' '('
    case 8879:                      // 'or' '('
    case 8880:                      // 'order' '('
    case 8881:                      // 'ordered' '('
    case 8883:                      // 'parent' '('
    case 8888:                      // 'preceding' '('
    case 8889:                      // 'preceding-sibling' '('
    case 8895:                      // 'return' '('
    case 8898:                      // 'satisfies' '('
    case 8902:                      // 'self' '('
    case 8905:                      // 'some' '('
    case 8906:                      // 'stable' '('
    case 8907:                      // 'start' '('
    case 8913:                      // 'to' '('
    case 8915:                      // 'treat' '('
    case 8916:                      // 'try' '('
    case 8920:                      // 'union' '('
    case 8921:                      // 'unordered' '('
    case 8923:                      // 'validate' '('
    case 8928:                      // 'where' '('
    case 8932:                      // 'xquery' '('
      try_FunctionCall();
      break;
    case 59057:                     // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 59097:                     // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 115:                       // 'document-node'
    case 119:                       // 'empty-sequence'
    case 132:                       // 'function'
    case 139:                       // 'if'
    case 150:                       // 'item'
    case 165:                       // 'namespace-node'
    case 170:                       // 'node'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 206:                       // 'switch'
    case 215:                       // 'typeswitch'
    case 7429:                      // URIQualifiedName '#'
    case 7439:                      // QName^Token '#'
    case 7501:                      // 'ancestor' '#'
    case 7502:                      // 'ancestor-or-self' '#'
    case 7503:                      // 'and' '#'
    case 7505:                      // 'array' '#'
    case 7507:                      // 'ascending' '#'
    case 7509:                      // 'attribute' '#'
    case 7515:                      // 'case' '#'
    case 7516:                      // 'cast' '#'
    case 7517:                      // 'castable' '#'
    case 7519:                      // 'child' '#'
    case 7520:                      // 'collation' '#'
    case 7521:                      // 'comment' '#'
    case 7527:                      // 'count' '#'
    case 7530:                      // 'declare' '#'
    case 7531:                      // 'default' '#'
    case 7533:                      // 'descendant' '#'
    case 7534:                      // 'descendant-or-self' '#'
    case 7535:                      // 'descending' '#'
    case 7537:                      // 'div' '#'
    case 7538:                      // 'document' '#'
    case 7540:                      // 'element' '#'
    case 7541:                      // 'else' '#'
    case 7542:                      // 'empty' '#'
    case 7545:                      // 'end' '#'
    case 7546:                      // 'eq' '#'
    case 7547:                      // 'every' '#'
    case 7548:                      // 'except' '#'
    case 7553:                      // 'following' '#'
    case 7554:                      // 'following-sibling' '#'
    case 7555:                      // 'for' '#'
    case 7557:                      // 'ge' '#'
    case 7559:                      // 'group' '#'
    case 7561:                      // 'gt' '#'
    case 7562:                      // 'idiv' '#'
    case 7564:                      // 'import' '#'
    case 7569:                      // 'instance' '#'
    case 7570:                      // 'intersect' '#'
    case 7573:                      // 'is' '#'
    case 7578:                      // 'le' '#'
    case 7580:                      // 'let' '#'
    case 7582:                      // 'lt' '#'
    case 7583:                      // 'map' '#'
    case 7585:                      // 'mod' '#'
    case 7587:                      // 'module' '#'
    case 7588:                      // 'namespace' '#'
    case 7590:                      // 'ne' '#'
    case 7597:                      // 'only' '#'
    case 7599:                      // 'or' '#'
    case 7600:                      // 'order' '#'
    case 7601:                      // 'ordered' '#'
    case 7603:                      // 'parent' '#'
    case 7608:                      // 'preceding' '#'
    case 7609:                      // 'preceding-sibling' '#'
    case 7612:                      // 'processing-instruction' '#'
    case 7615:                      // 'return' '#'
    case 7618:                      // 'satisfies' '#'
    case 7622:                      // 'self' '#'
    case 7625:                      // 'some' '#'
    case 7626:                      // 'stable' '#'
    case 7627:                      // 'start' '#'
    case 7631:                      // 'text' '#'
    case 7633:                      // 'to' '#'
    case 7635:                      // 'treat' '#'
    case 7636:                      // 'try' '#'
    case 7640:                      // 'union' '#'
    case 7641:                      // 'unordered' '#'
    case 7643:                      // 'validate' '#'
    case 7648:                      // 'where' '#'
    case 7652:                      // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 59039:                     // 'map' '{'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 58961:                     // 'array' '{'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_NodeConstructor();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(182);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(182);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(177);                   // 'ordered'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(177);                  // 'ordered'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(217);                   // 'unordered'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(217);                  // 'unordered'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(163);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9537:                      // '?' ')'
    case 10305:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(163);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 9537:                      // '?' ')'
    case 10305:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  function parse_NodeConstructor()
  {
    eventHandler.startNonterminal("NodeConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("NodeConstructor", e0);
  }

  function try_NodeConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(148);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(148);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(168);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(168);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(142);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(143);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(142);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(143);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 231:                       // '{{'
      consume(231);                 // '{{'
      break;
    case 236:                       // '}}'
      consume(236);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 231:                       // '{{'
      consumeT(231);                // '{{'
      break;
    case 236:                       // '}}'
      consumeT(236);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  function parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  function try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 114:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 116:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 85:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 164:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 207:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 114:                       // 'document'
      try_CompDocConstructor();
      break;
    case 116:                       // 'element'
      try_CompElemConstructor();
      break;
    case 85:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 164:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 207:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(114);                   // 'document'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(114);                  // 'document'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(116);                   // 'element'
    lookahead1W(170);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      consume(230);                 // '{'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_Expr();
      consume(234);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(116);                  // 'element'
    lookahead1W(170);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      consumeT(230);                // '{'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_Expr();
      consumeT(234);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  function parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  function try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(85);                    // 'attribute'
    lookahead1W(170);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      consume(230);                 // '{'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_Expr();
      consume(234);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(85);                   // 'attribute'
    lookahead1W(170);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      consumeT(230);                // '{'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_Expr();
      consumeT(234);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(164);                   // 'namespace'
    lookahead1W(158);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      whitespace();
      parse_EnclosedPrefixExpr();
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedURIExpr();
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(164);                  // 'namespace'
    lookahead1W(158);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      try_EnclosedPrefixExpr();
      break;
    default:
      try_Prefix();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedURIExpr();
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_EnclosedPrefixExpr()
  {
    eventHandler.startNonterminal("EnclosedPrefixExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedPrefixExpr", e0);
  }

  function try_EnclosedPrefixExpr()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedURIExpr()
  {
    eventHandler.startNonterminal("EnclosedURIExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedURIExpr", e0);
  }

  function try_EnclosedURIExpr()
  {
    try_EnclosedExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(207);                   // 'text'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(207);                  // 'text'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(188);                   // 'processing-instruction'
    lookahead1W(158);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      consume(230);                 // '{'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      whitespace();
      parse_Expr();
      consume(234);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(188);                  // 'processing-instruction'
    lookahead1W(158);               // NCName^Token | S^WS | '(:' | 'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 230:                       // '{'
      consumeT(230);                // '{'
      lookahead1W(181);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
      try_Expr();
      consumeT(234);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 132:                       // 'function'
      lookahead2W(76);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 8836:                      // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 132:                       // 'function'
      lookahead2W(76);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 8836:                      // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(80);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(132);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(78);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(97);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 82)                   // 'as'
    {
      consume(82);                  // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(80);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(132);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(78);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(97);                // S^WS | '(:' | 'as' | '{'
    if (l1 == 82)                   // 'as'
    {
      consumeT(82);                 // 'as'
      lookahead1W(173);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(159);                   // 'map'
    lookahead1W(73);                // S^WS | '(:' | '{'
    consume(230);                   // '{'
    lookahead1W(184);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 234)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(234);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(159);                  // 'map'
    lookahead1W(73);                // S^WS | '(:' | '{'
    consumeT(230);                  // '{'
    lookahead1W(184);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}'
    if (l1 != 234)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(90);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(234);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(181);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(183);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(86);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(183);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(86);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(181);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(81);                    // 'array'
    lookahead1W(73);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(81);                   // 'array'
    lookahead1W(73);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(185);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}`'
    if (l1 != 235)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(235);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(185);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery' | '}`'
    if (l1 != 235)                  // '}`'
    {
      try_Expr();
    }
    consumeT(235);                  // '}`'
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(161);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(161);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(210);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!=' |
                                    // '$' | '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' |
                                    // '//' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 321                   // '?' IntegerLiteral
     || lk == 8769                  // '?' '('
     || lk == 9793                  // '?' '*'
     || lk == 20289                 // '?' 'and'
     || lk == 21313                 // '?' 'ascending'
     || lk == 23361                 // '?' 'case'
     || lk == 23617                 // '?' 'cast'
     || lk == 23873                 // '?' 'castable'
     || lk == 24641                 // '?' 'collation'
     || lk == 26433                 // '?' 'count'
     || lk == 27457                 // '?' 'default'
     || lk == 28481                 // '?' 'descending'
     || lk == 28993                 // '?' 'div'
     || lk == 30017                 // '?' 'else'
     || lk == 30273                 // '?' 'empty'
     || lk == 31041                 // '?' 'end'
     || lk == 31297                 // '?' 'eq'
     || lk == 31809                 // '?' 'except'
     || lk == 33601                 // '?' 'for'
     || lk == 34113                 // '?' 'ge'
     || lk == 34625                 // '?' 'group'
     || lk == 35137                 // '?' 'gt'
     || lk == 35393                 // '?' 'idiv'
     || lk == 37185                 // '?' 'instance'
     || lk == 37441                 // '?' 'intersect'
     || lk == 38209                 // '?' 'is'
     || lk == 39489                 // '?' 'le'
     || lk == 40001                 // '?' 'let'
     || lk == 40513                 // '?' 'lt'
     || lk == 41281                 // '?' 'mod'
     || lk == 42561                 // '?' 'ne'
     || lk == 44353                 // '?' 'only'
     || lk == 44865                 // '?' 'or'
     || lk == 45121                 // '?' 'order'
     || lk == 48961                 // '?' 'return'
     || lk == 49729                 // '?' 'satisfies'
     || lk == 51777                 // '?' 'stable'
     || lk == 52033                 // '?' 'start'
     || lk == 53569                 // '?' 'to'
     || lk == 54081                 // '?' 'treat'
     || lk == 55361                 // '?' 'union'
     || lk == 57409)                // '?' 'where'
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(65);             // '?'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(26, e0, lk);
      }
    }
    if (lk == -1
     || lk == 577                   // '?' DecimalLiteral
     || lk == 833                   // '?' DoubleLiteral
     || lk == 1089                  // '?' StringLiteral
     || lk == 1345                  // '?' URIQualifiedName
     || lk == 3905                  // '?' QName^Token
     || lk == 5441                  // '?' Wildcard
     || lk == 6465                  // '?' EOF
     || lk == 6977                  // '?' '!='
     || lk == 8001                  // '?' '$'
     || lk == 8257                  // '?' '%'
     || lk == 9025                  // '?' '(#'
     || lk == 9537                  // '?' ')'
     || lk == 10049                 // '?' '+'
     || lk == 10305                 // '?' ','
     || lk == 10561                 // '?' '-'
     || lk == 11073                 // '?' '.'
     || lk == 11329                 // '?' '..'
     || lk == 11585                 // '?' '/'
     || lk == 11841                 // '?' '//'
     || lk == 12353                 // '?' ':'
     || lk == 13377                 // '?' ';'
     || lk == 13633                 // '?' '<'
     || lk == 13889                 // '?' '<!--'
     || lk == 14657                 // '?' '<<'
     || lk == 14913                 // '?' '<='
     || lk == 15169                 // '?' '<?'
     || lk == 15425                 // '?' '='
     || lk == 15937                 // '?' '>'
     || lk == 16193                 // '?' '>='
     || lk == 16449                 // '?' '>>'
     || lk == 16705                 // '?' '?'
     || lk == 17217                 // '?' '@'
     || lk == 17729                 // '?' '['
     || lk == 17985                 // '?' ']'
     || lk == 18753                 // '?' '``['
     || lk == 19265                 // '?' 'after'
     || lk == 19777                 // '?' 'ancestor'
     || lk == 20033                 // '?' 'ancestor-or-self'
     || lk == 20545                 // '?' 'append'
     || lk == 20801                 // '?' 'array'
     || lk == 21057                 // '?' 'as'
     || lk == 21569                 // '?' 'at'
     || lk == 21825                 // '?' 'attribute'
     || lk == 22337                 // '?' 'before'
     || lk == 22849                 // '?' 'break'
     || lk == 24385                 // '?' 'child'
     || lk == 24897                 // '?' 'comment'
     || lk == 25665                 // '?' 'continue'
     || lk == 25921                 // '?' 'copy'
     || lk == 27201                 // '?' 'declare'
     || lk == 27713                 // '?' 'delete'
     || lk == 27969                 // '?' 'descendant'
     || lk == 28225                 // '?' 'descendant-or-self'
     || lk == 29249                 // '?' 'document'
     || lk == 29505                 // '?' 'document-node'
     || lk == 29761                 // '?' 'element'
     || lk == 30529                 // '?' 'empty-sequence'
     || lk == 31553                 // '?' 'every'
     || lk == 32065                 // '?' 'exit'
     || lk == 33089                 // '?' 'following'
     || lk == 33345                 // '?' 'following-sibling'
     || lk == 33857                 // '?' 'function'
     || lk == 35649                 // '?' 'if'
     || lk == 35905                 // '?' 'import'
     || lk == 36929                 // '?' 'insert'
     || lk == 37697                 // '?' 'into'
     || lk == 37953                 // '?' 'invoke'
     || lk == 38465                 // '?' 'item'
     || lk == 40769                 // '?' 'map'
     || lk == 41537                 // '?' 'modify'
     || lk == 41793                 // '?' 'module'
     || lk == 42049                 // '?' 'namespace'
     || lk == 42305                 // '?' 'namespace-node'
     || lk == 43585                 // '?' 'node'
     || lk == 45377                 // '?' 'ordered'
     || lk == 45889                 // '?' 'parent'
     || lk == 47169                 // '?' 'preceding'
     || lk == 47425                 // '?' 'preceding-sibling'
     || lk == 48193                 // '?' 'processing-instruction'
     || lk == 48449                 // '?' 'rename'
     || lk == 48705                 // '?' 'replace'
     || lk == 50241                 // '?' 'schema-attribute'
     || lk == 50497                 // '?' 'schema-element'
     || lk == 50753                 // '?' 'self'
     || lk == 51521                 // '?' 'some'
     || lk == 52801                 // '?' 'switch'
     || lk == 53057                 // '?' 'text'
     || lk == 54337                 // '?' 'try'
     || lk == 55105                 // '?' 'typeswitch'
     || lk == 55617                 // '?' 'unordered'
     || lk == 56129                 // '?' 'validate'
     || lk == 56641                 // '?' 'variable'
     || lk == 57665                 // '?' 'while'
     || lk == 58177                 // '?' 'with'
     || lk == 58433                 // '?' 'xquery'
     || lk == 58945                 // '?' '{'
     || lk == 59457                 // '?' '|'
     || lk == 59713                 // '?' '||'
     || lk == 59969                 // '?' '}'
     || lk == 60225)                // '?' '}`'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(209);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' | ';' |
                                    // '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'continue' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(210);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | NCName^Token | QName^Token | S^WS | Wildcard | EOF | '!=' |
                                    // '$' | '%' | '(' | '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' |
                                    // '//' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '?' | '@' | '[' | ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'continue' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'following' | 'following-sibling' | 'for' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' |
                                    // 'intersect' | 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'variable' | 'where' |
                                    // 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 321                   // '?' IntegerLiteral
     || lk == 8769                  // '?' '('
     || lk == 9793                  // '?' '*'
     || lk == 20289                 // '?' 'and'
     || lk == 21313                 // '?' 'ascending'
     || lk == 23361                 // '?' 'case'
     || lk == 23617                 // '?' 'cast'
     || lk == 23873                 // '?' 'castable'
     || lk == 24641                 // '?' 'collation'
     || lk == 26433                 // '?' 'count'
     || lk == 27457                 // '?' 'default'
     || lk == 28481                 // '?' 'descending'
     || lk == 28993                 // '?' 'div'
     || lk == 30017                 // '?' 'else'
     || lk == 30273                 // '?' 'empty'
     || lk == 31041                 // '?' 'end'
     || lk == 31297                 // '?' 'eq'
     || lk == 31809                 // '?' 'except'
     || lk == 33601                 // '?' 'for'
     || lk == 34113                 // '?' 'ge'
     || lk == 34625                 // '?' 'group'
     || lk == 35137                 // '?' 'gt'
     || lk == 35393                 // '?' 'idiv'
     || lk == 37185                 // '?' 'instance'
     || lk == 37441                 // '?' 'intersect'
     || lk == 38209                 // '?' 'is'
     || lk == 39489                 // '?' 'le'
     || lk == 40001                 // '?' 'let'
     || lk == 40513                 // '?' 'lt'
     || lk == 41281                 // '?' 'mod'
     || lk == 42561                 // '?' 'ne'
     || lk == 44353                 // '?' 'only'
     || lk == 44865                 // '?' 'or'
     || lk == 45121                 // '?' 'order'
     || lk == 48961                 // '?' 'return'
     || lk == 49729                 // '?' 'satisfies'
     || lk == 51777                 // '?' 'stable'
     || lk == 52033                 // '?' 'start'
     || lk == 53569                 // '?' 'to'
     || lk == 54081                 // '?' 'treat'
     || lk == 55361                 // '?' 'union'
     || lk == 57409)                // '?' 'where'
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(65);             // '?'
          memoize(26, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(26, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 577                   // '?' DecimalLiteral
     || lk == 833                   // '?' DoubleLiteral
     || lk == 1089                  // '?' StringLiteral
     || lk == 1345                  // '?' URIQualifiedName
     || lk == 3905                  // '?' QName^Token
     || lk == 5441                  // '?' Wildcard
     || lk == 6465                  // '?' EOF
     || lk == 6977                  // '?' '!='
     || lk == 8001                  // '?' '$'
     || lk == 8257                  // '?' '%'
     || lk == 9025                  // '?' '(#'
     || lk == 9537                  // '?' ')'
     || lk == 10049                 // '?' '+'
     || lk == 10305                 // '?' ','
     || lk == 10561                 // '?' '-'
     || lk == 11073                 // '?' '.'
     || lk == 11329                 // '?' '..'
     || lk == 11585                 // '?' '/'
     || lk == 11841                 // '?' '//'
     || lk == 12353                 // '?' ':'
     || lk == 13377                 // '?' ';'
     || lk == 13633                 // '?' '<'
     || lk == 13889                 // '?' '<!--'
     || lk == 14657                 // '?' '<<'
     || lk == 14913                 // '?' '<='
     || lk == 15169                 // '?' '<?'
     || lk == 15425                 // '?' '='
     || lk == 15937                 // '?' '>'
     || lk == 16193                 // '?' '>='
     || lk == 16449                 // '?' '>>'
     || lk == 16705                 // '?' '?'
     || lk == 17217                 // '?' '@'
     || lk == 17729                 // '?' '['
     || lk == 17985                 // '?' ']'
     || lk == 18753                 // '?' '``['
     || lk == 19265                 // '?' 'after'
     || lk == 19777                 // '?' 'ancestor'
     || lk == 20033                 // '?' 'ancestor-or-self'
     || lk == 20545                 // '?' 'append'
     || lk == 20801                 // '?' 'array'
     || lk == 21057                 // '?' 'as'
     || lk == 21569                 // '?' 'at'
     || lk == 21825                 // '?' 'attribute'
     || lk == 22337                 // '?' 'before'
     || lk == 22849                 // '?' 'break'
     || lk == 24385                 // '?' 'child'
     || lk == 24897                 // '?' 'comment'
     || lk == 25665                 // '?' 'continue'
     || lk == 25921                 // '?' 'copy'
     || lk == 27201                 // '?' 'declare'
     || lk == 27713                 // '?' 'delete'
     || lk == 27969                 // '?' 'descendant'
     || lk == 28225                 // '?' 'descendant-or-self'
     || lk == 29249                 // '?' 'document'
     || lk == 29505                 // '?' 'document-node'
     || lk == 29761                 // '?' 'element'
     || lk == 30529                 // '?' 'empty-sequence'
     || lk == 31553                 // '?' 'every'
     || lk == 32065                 // '?' 'exit'
     || lk == 33089                 // '?' 'following'
     || lk == 33345                 // '?' 'following-sibling'
     || lk == 33857                 // '?' 'function'
     || lk == 35649                 // '?' 'if'
     || lk == 35905                 // '?' 'import'
     || lk == 36929                 // '?' 'insert'
     || lk == 37697                 // '?' 'into'
     || lk == 37953                 // '?' 'invoke'
     || lk == 38465                 // '?' 'item'
     || lk == 40769                 // '?' 'map'
     || lk == 41537                 // '?' 'modify'
     || lk == 41793                 // '?' 'module'
     || lk == 42049                 // '?' 'namespace'
     || lk == 42305                 // '?' 'namespace-node'
     || lk == 43585                 // '?' 'node'
     || lk == 45377                 // '?' 'ordered'
     || lk == 45889                 // '?' 'parent'
     || lk == 47169                 // '?' 'preceding'
     || lk == 47425                 // '?' 'preceding-sibling'
     || lk == 48193                 // '?' 'processing-instruction'
     || lk == 48449                 // '?' 'rename'
     || lk == 48705                 // '?' 'replace'
     || lk == 50241                 // '?' 'schema-attribute'
     || lk == 50497                 // '?' 'schema-element'
     || lk == 50753                 // '?' 'self'
     || lk == 51521                 // '?' 'some'
     || lk == 52801                 // '?' 'switch'
     || lk == 53057                 // '?' 'text'
     || lk == 54337                 // '?' 'try'
     || lk == 55105                 // '?' 'typeswitch'
     || lk == 55617                 // '?' 'unordered'
     || lk == 56129                 // '?' 'validate'
     || lk == 56641                 // '?' 'variable'
     || lk == 57665                 // '?' 'while'
     || lk == 58177                 // '?' 'with'
     || lk == 58433                 // '?' 'xquery'
     || lk == 58945                 // '?' '{'
     || lk == 59457                 // '?' '|'
     || lk == 59713                 // '?' '||'
     || lk == 59969                 // '?' '}'
     || lk == 60225)                // '?' '}`'
    {
      consumeT(65);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(82);                    // 'as'
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(82);                   // 'as'
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 119:                       // 'empty-sequence'
      lookahead2W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'insert' | 'instance' | 'intersect' | 'into' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8823)                 // 'empty-sequence' '('
    {
      lk = memoized(27, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(119);            // 'empty-sequence'
          lookahead1W(24);          // S^WS | '(' | '(:'
          consumeT(34);             // '('
          lookahead1W(25);          // S^WS | '(:' | ')'
          consumeT(37);             // ')'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(27, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(119);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'insert' | 'instance' | 'intersect' | 'into' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 119:                       // 'empty-sequence'
      lookahead2W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'insert' | 'instance' | 'intersect' | 'into' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8823)                 // 'empty-sequence' '('
    {
      lk = memoized(27, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(119);            // 'empty-sequence'
          lookahead1W(24);          // S^WS | '(' | '(:'
          consumeT(34);             // '('
          lookahead1W(25);          // S^WS | '(:' | ')'
          consumeT(37);             // ')'
          memoize(27, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(27, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(119);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case -3:
      break;
    default:
      try_ItemType();
      lookahead1W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'insert' | 'instance' | 'intersect' | 'into' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 81:                        // 'array'
    case 85:                        // 'attribute'
    case 97:                        // 'comment'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 132:                       // 'function'
    case 150:                       // 'item'
    case 159:                       // 'map'
    case 165:                       // 'namespace-node'
    case 170:                       // 'node'
    case 188:                       // 'processing-instruction'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 207:                       // 'text'
      lookahead2W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'insert' | 'instance' | 'intersect' | 'into' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8785                  // 'array' '('
     || lk == 8789                  // 'attribute' '('
     || lk == 8801                  // 'comment' '('
     || lk == 8819                  // 'document-node' '('
     || lk == 8820                  // 'element' '('
     || lk == 8836                  // 'function' '('
     || lk == 8854                  // 'item' '('
     || lk == 8863                  // 'map' '('
     || lk == 8869                  // 'namespace-node' '('
     || lk == 8874                  // 'node' '('
     || lk == 8892                  // 'processing-instruction' '('
     || lk == 8900                  // 'schema-attribute' '('
     || lk == 8901                  // 'schema-element' '('
     || lk == 8911)                 // 'text' '('
    {
      lk = memoized(28, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            consumeT(150);          // 'item'
            lookahead1W(24);        // S^WS | '(' | '(:'
            consumeT(34);           // '('
            lookahead1W(25);        // S^WS | '(:' | ')'
            consumeT(37);           // ')'
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_FunctionTest();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_MapTest();
                lk = -4;
              }
              catch (p4A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_ArrayTest();
                  lk = -5;
                }
                catch (p5A)
                {
                  lk = -6;
                }
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(28, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_KindTest();
      break;
    case -2:
      consume(150);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case -3:
    case 32:                        // '%'
      parse_FunctionTest();
      break;
    case -4:
      parse_MapTest();
      break;
    case -5:
      parse_ArrayTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 81:                        // 'array'
    case 85:                        // 'attribute'
    case 97:                        // 'comment'
    case 115:                       // 'document-node'
    case 116:                       // 'element'
    case 132:                       // 'function'
    case 150:                       // 'item'
    case 159:                       // 'map'
    case 165:                       // 'namespace-node'
    case 170:                       // 'node'
    case 188:                       // 'processing-instruction'
    case 196:                       // 'schema-attribute'
    case 197:                       // 'schema-element'
    case 207:                       // 'text'
      lookahead2W(217);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!=' | '$' | '%' | '(' |
                                    // '(#' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '?' |
                                    // '@' | '[' | ']' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'before' | 'break' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'continue' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'insert' | 'instance' | 'intersect' | 'into' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'variable' | 'where' | 'while' | 'with' | 'xquery' |
                                    // '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 8785                  // 'array' '('
     || lk == 8789                  // 'attribute' '('
     || lk == 8801                  // 'comment' '('
     || lk == 8819                  // 'document-node' '('
     || lk == 8820                  // 'element' '('
     || lk == 8836                  // 'function' '('
     || lk == 8854                  // 'item' '('
     || lk == 8863                  // 'map' '('
     || lk == 8869                  // 'namespace-node' '('
     || lk == 8874                  // 'node' '('
     || lk == 8892                  // 'processing-instruction' '('
     || lk == 8900                  // 'schema-attribute' '('
     || lk == 8901                  // 'schema-element' '('
     || lk == 8911)                 // 'text' '('
    {
      lk = memoized(28, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(28, e0A, -1);
          lk = -8;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            consumeT(150);          // 'item'
            lookahead1W(24);        // S^WS | '(' | '(:'
            consumeT(34);           // '('
            lookahead1W(25);        // S^WS | '(:' | ')'
            consumeT(37);           // ')'
            memoize(28, e0A, -2);
            lk = -8;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_FunctionTest();
              memoize(28, e0A, -3);
              lk = -8;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_MapTest();
                memoize(28, e0A, -4);
                lk = -8;
              }
              catch (p4A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_ArrayTest();
                  memoize(28, e0A, -5);
                  lk = -8;
                }
                catch (p5A)
                {
                  lk = -6;
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  memoize(28, e0A, -6);
                }
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_KindTest();
      break;
    case -2:
      consumeT(150);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case -3:
    case 32:                        // '%'
      try_FunctionTest();
      break;
    case -4:
      try_MapTest();
      break;
    case -5:
      try_ArrayTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 115:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 116:                       // 'element'
      parse_ElementTest();
      break;
    case 85:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 197:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 196:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 188:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 207:                       // 'text'
      parse_TextTest();
      break;
    case 165:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 115:                       // 'document-node'
      try_DocumentTest();
      break;
    case 116:                       // 'element'
      try_ElementTest();
      break;
    case 85:                        // 'attribute'
      try_AttributeTest();
      break;
    case 197:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 196:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 188:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 207:                       // 'text'
      try_TextTest();
      break;
    case 165:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(170);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(170);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(115);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(125);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 116:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(115);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(125);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 116:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(207);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(207);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(165);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(165);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(188);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(159);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(188);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(159);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(85);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(174);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(83);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(85);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(174);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(83);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(196);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(196);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(116);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(174);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(83);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(84);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(116);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(174);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(83);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(167);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_TypeName();
        lookahead1W(84);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(197);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(197);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(80);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 132:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(29, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(29, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(80);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 132:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(29, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(29, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(29, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(132);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(132);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(132);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(176);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(173);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(82);                    // 'as'
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(132);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(176);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(83);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(173);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(82);                   // 'as'
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
  }

  function parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 159:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(30, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(30, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  function try_MapTest()
  {
    switch (l1)
    {
    case 159:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(30, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(30, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(30, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  function parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    consume(159);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  function try_AnyMapTest()
  {
    consumeT(159);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    consume(159);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  function try_TypedMapTest()
  {
    consumeT(159);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(167);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'count' | 'declare' | 'default' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 81:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(31, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(31, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  function try_ArrayTest()
  {
    switch (l1)
    {
    case 81:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(31, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(31, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(31, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  function parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(81);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  function try_AnyArrayTest()
  {
    consumeT(81);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(81);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  function try_TypedArrayTest()
  {
    consumeT(81);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(173);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'ascending' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'count' | 'declare' |
                                    // 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                    // 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'validate' |
                                    // 'where' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  function try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(165);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(165);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'ascending' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'count' | 'declare' | 'default' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  function parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  function try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(164);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 81:                        // 'array'
      consume(81);                  // 'array'
      break;
    case 85:                        // 'attribute'
      consume(85);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 115:                       // 'document-node'
      consume(115);                 // 'document-node'
      break;
    case 116:                       // 'element'
      consume(116);                 // 'element'
      break;
    case 119:                       // 'empty-sequence'
      consume(119);                 // 'empty-sequence'
      break;
    case 132:                       // 'function'
      consume(132);                 // 'function'
      break;
    case 139:                       // 'if'
      consume(139);                 // 'if'
      break;
    case 150:                       // 'item'
      consume(150);                 // 'item'
      break;
    case 159:                       // 'map'
      consume(159);                 // 'map'
      break;
    case 165:                       // 'namespace-node'
      consume(165);                 // 'namespace-node'
      break;
    case 170:                       // 'node'
      consume(170);                 // 'node'
      break;
    case 188:                       // 'processing-instruction'
      consume(188);                 // 'processing-instruction'
      break;
    case 196:                       // 'schema-attribute'
      consume(196);                 // 'schema-attribute'
      break;
    case 197:                       // 'schema-element'
      consume(197);                 // 'schema-element'
      break;
    case 206:                       // 'switch'
      consume(206);                 // 'switch'
      break;
    case 207:                       // 'text'
      consume(207);                 // 'text'
      break;
    case 215:                       // 'typeswitch'
      consume(215);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  function try_QName()
  {
    lookahead1(164);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'ascending' |
                                    // 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'count' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' |
                                    // 'lt' | 'map' | 'mod' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'validate' | 'where' | 'xquery'
    switch (l1)
    {
    case 81:                        // 'array'
      consumeT(81);                 // 'array'
      break;
    case 85:                        // 'attribute'
      consumeT(85);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 115:                       // 'document-node'
      consumeT(115);                // 'document-node'
      break;
    case 116:                       // 'element'
      consumeT(116);                // 'element'
      break;
    case 119:                       // 'empty-sequence'
      consumeT(119);                // 'empty-sequence'
      break;
    case 132:                       // 'function'
      consumeT(132);                // 'function'
      break;
    case 139:                       // 'if'
      consumeT(139);                // 'if'
      break;
    case 150:                       // 'item'
      consumeT(150);                // 'item'
      break;
    case 159:                       // 'map'
      consumeT(159);                // 'map'
      break;
    case 165:                       // 'namespace-node'
      consumeT(165);                // 'namespace-node'
      break;
    case 170:                       // 'node'
      consumeT(170);                // 'node'
      break;
    case 188:                       // 'processing-instruction'
      consumeT(188);                // 'processing-instruction'
      break;
    case 196:                       // 'schema-attribute'
      consumeT(196);                // 'schema-attribute'
      break;
    case 197:                       // 'schema-element'
      consumeT(197);                // 'schema-element'
      break;
    case 206:                       // 'switch'
      consumeT(206);                // 'switch'
      break;
    case 207:                       // 'text'
      consumeT(207);                // 'text'
      break;
    case 215:                       // 'typeswitch'
      consumeT(215);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 77:                        // 'ancestor'
      consume(77);                  // 'ancestor'
      break;
    case 78:                        // 'ancestor-or-self'
      consume(78);                  // 'ancestor-or-self'
      break;
    case 79:                        // 'and'
      consume(79);                  // 'and'
      break;
    case 83:                        // 'ascending'
      consume(83);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 103:                       // 'count'
      consume(103);                 // 'count'
      break;
    case 106:                       // 'declare'
      consume(106);                 // 'declare'
      break;
    case 107:                       // 'default'
      consume(107);                 // 'default'
      break;
    case 109:                       // 'descendant'
      consume(109);                 // 'descendant'
      break;
    case 110:                       // 'descendant-or-self'
      consume(110);                 // 'descendant-or-self'
      break;
    case 111:                       // 'descending'
      consume(111);                 // 'descending'
      break;
    case 113:                       // 'div'
      consume(113);                 // 'div'
      break;
    case 114:                       // 'document'
      consume(114);                 // 'document'
      break;
    case 117:                       // 'else'
      consume(117);                 // 'else'
      break;
    case 118:                       // 'empty'
      consume(118);                 // 'empty'
      break;
    case 121:                       // 'end'
      consume(121);                 // 'end'
      break;
    case 122:                       // 'eq'
      consume(122);                 // 'eq'
      break;
    case 123:                       // 'every'
      consume(123);                 // 'every'
      break;
    case 124:                       // 'except'
      consume(124);                 // 'except'
      break;
    case 129:                       // 'following'
      consume(129);                 // 'following'
      break;
    case 130:                       // 'following-sibling'
      consume(130);                 // 'following-sibling'
      break;
    case 131:                       // 'for'
      consume(131);                 // 'for'
      break;
    case 133:                       // 'ge'
      consume(133);                 // 'ge'
      break;
    case 135:                       // 'group'
      consume(135);                 // 'group'
      break;
    case 137:                       // 'gt'
      consume(137);                 // 'gt'
      break;
    case 138:                       // 'idiv'
      consume(138);                 // 'idiv'
      break;
    case 140:                       // 'import'
      consume(140);                 // 'import'
      break;
    case 145:                       // 'instance'
      consume(145);                 // 'instance'
      break;
    case 146:                       // 'intersect'
      consume(146);                 // 'intersect'
      break;
    case 149:                       // 'is'
      consume(149);                 // 'is'
      break;
    case 154:                       // 'le'
      consume(154);                 // 'le'
      break;
    case 156:                       // 'let'
      consume(156);                 // 'let'
      break;
    case 158:                       // 'lt'
      consume(158);                 // 'lt'
      break;
    case 161:                       // 'mod'
      consume(161);                 // 'mod'
      break;
    case 163:                       // 'module'
      consume(163);                 // 'module'
      break;
    case 164:                       // 'namespace'
      consume(164);                 // 'namespace'
      break;
    case 166:                       // 'ne'
      consume(166);                 // 'ne'
      break;
    case 173:                       // 'only'
      consume(173);                 // 'only'
      break;
    case 175:                       // 'or'
      consume(175);                 // 'or'
      break;
    case 176:                       // 'order'
      consume(176);                 // 'order'
      break;
    case 177:                       // 'ordered'
      consume(177);                 // 'ordered'
      break;
    case 179:                       // 'parent'
      consume(179);                 // 'parent'
      break;
    case 184:                       // 'preceding'
      consume(184);                 // 'preceding'
      break;
    case 185:                       // 'preceding-sibling'
      consume(185);                 // 'preceding-sibling'
      break;
    case 191:                       // 'return'
      consume(191);                 // 'return'
      break;
    case 194:                       // 'satisfies'
      consume(194);                 // 'satisfies'
      break;
    case 198:                       // 'self'
      consume(198);                 // 'self'
      break;
    case 201:                       // 'some'
      consume(201);                 // 'some'
      break;
    case 202:                       // 'stable'
      consume(202);                 // 'stable'
      break;
    case 203:                       // 'start'
      consume(203);                 // 'start'
      break;
    case 209:                       // 'to'
      consume(209);                 // 'to'
      break;
    case 211:                       // 'treat'
      consume(211);                 // 'treat'
      break;
    case 212:                       // 'try'
      consume(212);                 // 'try'
      break;
    case 216:                       // 'union'
      consume(216);                 // 'union'
      break;
    case 217:                       // 'unordered'
      consume(217);                 // 'unordered'
      break;
    case 219:                       // 'validate'
      consume(219);                 // 'validate'
      break;
    case 224:                       // 'where'
      consume(224);                 // 'where'
      break;
    default:
      consume(228);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 77:                        // 'ancestor'
      consumeT(77);                 // 'ancestor'
      break;
    case 78:                        // 'ancestor-or-self'
      consumeT(78);                 // 'ancestor-or-self'
      break;
    case 79:                        // 'and'
      consumeT(79);                 // 'and'
      break;
    case 83:                        // 'ascending'
      consumeT(83);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 103:                       // 'count'
      consumeT(103);                // 'count'
      break;
    case 106:                       // 'declare'
      consumeT(106);                // 'declare'
      break;
    case 107:                       // 'default'
      consumeT(107);                // 'default'
      break;
    case 109:                       // 'descendant'
      consumeT(109);                // 'descendant'
      break;
    case 110:                       // 'descendant-or-self'
      consumeT(110);                // 'descendant-or-self'
      break;
    case 111:                       // 'descending'
      consumeT(111);                // 'descending'
      break;
    case 113:                       // 'div'
      consumeT(113);                // 'div'
      break;
    case 114:                       // 'document'
      consumeT(114);                // 'document'
      break;
    case 117:                       // 'else'
      consumeT(117);                // 'else'
      break;
    case 118:                       // 'empty'
      consumeT(118);                // 'empty'
      break;
    case 121:                       // 'end'
      consumeT(121);                // 'end'
      break;
    case 122:                       // 'eq'
      consumeT(122);                // 'eq'
      break;
    case 123:                       // 'every'
      consumeT(123);                // 'every'
      break;
    case 124:                       // 'except'
      consumeT(124);                // 'except'
      break;
    case 129:                       // 'following'
      consumeT(129);                // 'following'
      break;
    case 130:                       // 'following-sibling'
      consumeT(130);                // 'following-sibling'
      break;
    case 131:                       // 'for'
      consumeT(131);                // 'for'
      break;
    case 133:                       // 'ge'
      consumeT(133);                // 'ge'
      break;
    case 135:                       // 'group'
      consumeT(135);                // 'group'
      break;
    case 137:                       // 'gt'
      consumeT(137);                // 'gt'
      break;
    case 138:                       // 'idiv'
      consumeT(138);                // 'idiv'
      break;
    case 140:                       // 'import'
      consumeT(140);                // 'import'
      break;
    case 145:                       // 'instance'
      consumeT(145);                // 'instance'
      break;
    case 146:                       // 'intersect'
      consumeT(146);                // 'intersect'
      break;
    case 149:                       // 'is'
      consumeT(149);                // 'is'
      break;
    case 154:                       // 'le'
      consumeT(154);                // 'le'
      break;
    case 156:                       // 'let'
      consumeT(156);                // 'let'
      break;
    case 158:                       // 'lt'
      consumeT(158);                // 'lt'
      break;
    case 161:                       // 'mod'
      consumeT(161);                // 'mod'
      break;
    case 163:                       // 'module'
      consumeT(163);                // 'module'
      break;
    case 164:                       // 'namespace'
      consumeT(164);                // 'namespace'
      break;
    case 166:                       // 'ne'
      consumeT(166);                // 'ne'
      break;
    case 173:                       // 'only'
      consumeT(173);                // 'only'
      break;
    case 175:                       // 'or'
      consumeT(175);                // 'or'
      break;
    case 176:                       // 'order'
      consumeT(176);                // 'order'
      break;
    case 177:                       // 'ordered'
      consumeT(177);                // 'ordered'
      break;
    case 179:                       // 'parent'
      consumeT(179);                // 'parent'
      break;
    case 184:                       // 'preceding'
      consumeT(184);                // 'preceding'
      break;
    case 185:                       // 'preceding-sibling'
      consumeT(185);                // 'preceding-sibling'
      break;
    case 191:                       // 'return'
      consumeT(191);                // 'return'
      break;
    case 194:                       // 'satisfies'
      consumeT(194);                // 'satisfies'
      break;
    case 198:                       // 'self'
      consumeT(198);                // 'self'
      break;
    case 201:                       // 'some'
      consumeT(201);                // 'some'
      break;
    case 202:                       // 'stable'
      consumeT(202);                // 'stable'
      break;
    case 203:                       // 'start'
      consumeT(203);                // 'start'
      break;
    case 209:                       // 'to'
      consumeT(209);                // 'to'
      break;
    case 211:                       // 'treat'
      consumeT(211);                // 'treat'
      break;
    case 212:                       // 'try'
      consumeT(212);                // 'try'
      break;
    case 216:                       // 'union'
      consumeT(216);                // 'union'
      break;
    case 217:                       // 'unordered'
      consumeT(217);                // 'unordered'
      break;
    case 219:                       // 'validate'
      consumeT(219);                // 'validate'
      break;
    case 224:                       // 'where'
      consumeT(224);                // 'where'
      break;
    default:
      consumeT(228);                // 'xquery'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 79:                        // 'and'
      consume(79);                  // 'and'
      break;
    case 83:                        // 'ascending'
      consume(83);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 103:                       // 'count'
      consume(103);                 // 'count'
      break;
    case 107:                       // 'default'
      consume(107);                 // 'default'
      break;
    case 111:                       // 'descending'
      consume(111);                 // 'descending'
      break;
    case 113:                       // 'div'
      consume(113);                 // 'div'
      break;
    case 117:                       // 'else'
      consume(117);                 // 'else'
      break;
    case 118:                       // 'empty'
      consume(118);                 // 'empty'
      break;
    case 121:                       // 'end'
      consume(121);                 // 'end'
      break;
    case 122:                       // 'eq'
      consume(122);                 // 'eq'
      break;
    case 124:                       // 'except'
      consume(124);                 // 'except'
      break;
    case 131:                       // 'for'
      consume(131);                 // 'for'
      break;
    case 133:                       // 'ge'
      consume(133);                 // 'ge'
      break;
    case 135:                       // 'group'
      consume(135);                 // 'group'
      break;
    case 137:                       // 'gt'
      consume(137);                 // 'gt'
      break;
    case 138:                       // 'idiv'
      consume(138);                 // 'idiv'
      break;
    case 145:                       // 'instance'
      consume(145);                 // 'instance'
      break;
    case 146:                       // 'intersect'
      consume(146);                 // 'intersect'
      break;
    case 149:                       // 'is'
      consume(149);                 // 'is'
      break;
    case 154:                       // 'le'
      consume(154);                 // 'le'
      break;
    case 156:                       // 'let'
      consume(156);                 // 'let'
      break;
    case 158:                       // 'lt'
      consume(158);                 // 'lt'
      break;
    case 161:                       // 'mod'
      consume(161);                 // 'mod'
      break;
    case 166:                       // 'ne'
      consume(166);                 // 'ne'
      break;
    case 173:                       // 'only'
      consume(173);                 // 'only'
      break;
    case 175:                       // 'or'
      consume(175);                 // 'or'
      break;
    case 176:                       // 'order'
      consume(176);                 // 'order'
      break;
    case 191:                       // 'return'
      consume(191);                 // 'return'
      break;
    case 194:                       // 'satisfies'
      consume(194);                 // 'satisfies'
      break;
    case 202:                       // 'stable'
      consume(202);                 // 'stable'
      break;
    case 203:                       // 'start'
      consume(203);                 // 'start'
      break;
    case 209:                       // 'to'
      consume(209);                 // 'to'
      break;
    case 211:                       // 'treat'
      consume(211);                 // 'treat'
      break;
    case 216:                       // 'union'
      consume(216);                 // 'union'
      break;
    default:
      consume(224);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 79:                        // 'and'
      consumeT(79);                 // 'and'
      break;
    case 83:                        // 'ascending'
      consumeT(83);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 103:                       // 'count'
      consumeT(103);                // 'count'
      break;
    case 107:                       // 'default'
      consumeT(107);                // 'default'
      break;
    case 111:                       // 'descending'
      consumeT(111);                // 'descending'
      break;
    case 113:                       // 'div'
      consumeT(113);                // 'div'
      break;
    case 117:                       // 'else'
      consumeT(117);                // 'else'
      break;
    case 118:                       // 'empty'
      consumeT(118);                // 'empty'
      break;
    case 121:                       // 'end'
      consumeT(121);                // 'end'
      break;
    case 122:                       // 'eq'
      consumeT(122);                // 'eq'
      break;
    case 124:                       // 'except'
      consumeT(124);                // 'except'
      break;
    case 131:                       // 'for'
      consumeT(131);                // 'for'
      break;
    case 133:                       // 'ge'
      consumeT(133);                // 'ge'
      break;
    case 135:                       // 'group'
      consumeT(135);                // 'group'
      break;
    case 137:                       // 'gt'
      consumeT(137);                // 'gt'
      break;
    case 138:                       // 'idiv'
      consumeT(138);                // 'idiv'
      break;
    case 145:                       // 'instance'
      consumeT(145);                // 'instance'
      break;
    case 146:                       // 'intersect'
      consumeT(146);                // 'intersect'
      break;
    case 149:                       // 'is'
      consumeT(149);                // 'is'
      break;
    case 154:                       // 'le'
      consumeT(154);                // 'le'
      break;
    case 156:                       // 'let'
      consumeT(156);                // 'let'
      break;
    case 158:                       // 'lt'
      consumeT(158);                // 'lt'
      break;
    case 161:                       // 'mod'
      consumeT(161);                // 'mod'
      break;
    case 166:                       // 'ne'
      consumeT(166);                // 'ne'
      break;
    case 173:                       // 'only'
      consumeT(173);                // 'only'
      break;
    case 175:                       // 'or'
      consumeT(175);                // 'or'
      break;
    case 176:                       // 'order'
      consumeT(176);                // 'order'
      break;
    case 191:                       // 'return'
      consumeT(191);                // 'return'
      break;
    case 194:                       // 'satisfies'
      consumeT(194);                // 'satisfies'
      break;
    case 202:                       // 'stable'
      consumeT(202);                // 'stable'
      break;
    case 203:                       // 'start'
      consumeT(203);                // 'start'
      break;
    case 209:                       // 'to'
      consumeT(209);                // 'to'
      break;
    case 211:                       // 'treat'
      consumeT(211);                // 'treat'
      break;
    case 216:                       // 'union'
      consumeT(216);                // 'union'
      break;
    default:
      consumeT(224);                // 'where'
    }
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(74);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(tokenSetId)
  {
    var code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 8) | l1;
  }

  function lookahead1(tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = match(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 8) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 8; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 8;
    }

    if (end > size) end = size;
    return (result & 255) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 237; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 2203 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 70, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 193, 194, 195, 196, 197, 198, 199, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 209,
  /* 212 */ 210, 211, 212, 213, 214, 215, 213, 216, 217, 218
];

XQueryParser.TRANSITION =
[
  /*     0 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*    15 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*    30 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*    45 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*    60 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*    75 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*    90 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   105 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   120 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   135 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   150 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   165 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   180 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   195 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   210 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   225 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   240 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   255 */ 21132, 18432, 18448, 18475, 18475, 18502, 18475, 18475, 18475, 18477, 18470, 18493, 18475, 18475, 18454,
  /*   270 */ 18518, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341,
  /*   285 */ 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701,
  /*   300 */ 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180,
  /*   315 */ 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153,
  /*   330 */ 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315,
  /*   345 */ 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506,
  /*   360 */ 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700,
  /*   375 */ 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973,
  /*   390 */ 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   405 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   420 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   435 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   450 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   465 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   480 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   495 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   510 */ 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 20090, 21132, 35727, 20111,
  /*   525 */ 20126, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 20172, 18833, 19177, 19117, 19071, 19529, 19177,
  /*   540 */ 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843,
  /*   555 */ 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891,
  /*   570 */ 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048,
  /*   585 */ 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299,
  /*   600 */ 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485,
  /*   615 */ 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678,
  /*   630 */ 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920,
  /*   645 */ 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   660 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   675 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   690 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   705 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   720 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   735 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   750 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   765 */ 21132, 21132, 21132, 20070, 20193, 21132, 21132, 30579, 21132, 21132, 20221, 20224, 20214, 21132, 20240,
  /*   780 */ 20241, 20257, 20273, 21132, 21132, 35234, 21132, 26022, 20310, 19030, 18833, 19177, 19117, 19201, 19202,
  /*   795 */ 19177, 23341, 20331, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717, 19898,
  /*   810 */ 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000,
  /*   825 */ 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874,
  /*   840 */ 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753,
  /*   855 */ 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459,
  /*   870 */ 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684,
  /*   885 */ 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163,
  /*   900 */ 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   915 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   930 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   945 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   960 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   975 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*   990 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1005 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1020 */ 21132, 21132, 21132, 21132, 20355, 27125, 21132, 21132, 20751, 21132, 21132, 27121, 21893, 20090, 20405,
  /*  1035 */ 21132, 20391, 20441, 20142, 21132, 21132, 33464, 21132, 26022, 24453, 19030, 18833, 19177, 19117, 19201,
  /*  1050 */ 19202, 19177, 23341, 20457, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717,
  /*  1065 */ 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859,
  /*  1080 */ 20000, 18891, 19180, 19060, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028,
  /*  1095 */ 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274,
  /*  1110 */ 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490,
  /*  1125 */ 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668,
  /*  1140 */ 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884,
  /*  1155 */ 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1170 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1185 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1200 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1215 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1230 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1245 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1260 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1275 */ 21132, 21132, 21132, 21132, 21132, 20070, 25479, 21132, 21132, 26639, 21132, 21132, 25475, 23388, 20090,
  /*  1290 */ 22276, 20481, 20482, 20498, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833, 19177, 19117,
  /*  1305 */ 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694,
  /*  1320 */ 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820,
  /*  1335 */ 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008,
  /*  1350 */ 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249,
  /*  1365 */ 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438,
  /*  1380 */ 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652,
  /*  1395 */ 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177,
  /*  1410 */ 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1425 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1440 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1455 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1470 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1485 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1500 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1515 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1530 */ 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 20514, 21132, 21132, 37309,
  /*  1545 */ 20532, 21913, 20553, 20553, 20559, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833, 19177,
  /*  1560 */ 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836,
  /*  1575 */ 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799,
  /*  1590 */ 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973,
  /*  1605 */ 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287,
  /*  1620 */ 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177,
  /*  1635 */ 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636,
  /*  1650 */ 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797,
  /*  1665 */ 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1680 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1695 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1710 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1725 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1740 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1755 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1770 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1785 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132, 21132, 21132,
  /*  1800 */ 25590, 20575, 21132, 21132, 21132, 28912, 20596, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833,
  /*  1815 */ 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655,
  /*  1830 */ 19836, 18694, 18717, 20646, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783,
  /*  1845 */ 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936,
  /*  1860 */ 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218,
  /*  1875 */ 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051,
  /*  1890 */ 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591,
  /*  1905 */ 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177,
  /*  1920 */ 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132,
  /*  1935 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1950 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1965 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1980 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  1995 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2010 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2025 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2040 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 20668, 21132, 21132, 35763, 21132, 21132,
  /*  2055 */ 20696, 20699, 20689, 21132, 23304, 23305, 20715, 20731, 21132, 21132, 35234, 21132, 26022, 19945, 19030,
  /*  2070 */ 18833, 19177, 19117, 19201, 19202, 19177, 23341, 20767, 18579, 32600, 18635, 39840, 21132, 19032, 18843,
  /*  2085 */ 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376,
  /*  2100 */ 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156,
  /*  2115 */ 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199,
  /*  2130 */ 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414,
  /*  2145 */ 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575,
  /*  2160 */ 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859,
  /*  2175 */ 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132,
  /*  2190 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2205 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2220 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2235 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2250 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2265 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2280 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2295 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 20791, 20819, 20819, 20844, 20816,
  /*  2310 */ 20819, 20800, 20822, 20838, 20860, 20875, 20879, 20895, 20142, 21132, 21132, 19258, 21132, 26022, 21132,
  /*  2325 */ 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 26356, 18635, 39840, 21132, 19032,
  /*  2340 */ 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132,
  /*  2355 */ 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125,
  /*  2370 */ 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177,
  /*  2385 */ 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233,
  /*  2400 */ 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552,
  /*  2415 */ 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668,
  /*  2430 */ 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132,
  /*  2445 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2460 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2475 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2490 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2505 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2520 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2535 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2550 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 20928, 21132, 21132, 28802,
  /*  2565 */ 20956, 21132, 23662, 21893, 20911, 20923, 20944, 33719, 20977, 20993, 21132, 21132, 18563, 21132, 26022,
  /*  2580 */ 21132, 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 31075, 18635, 39840, 21132,
  /*  2595 */ 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132,
  /*  2610 */ 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910,
  /*  2625 */ 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173,
  /*  2640 */ 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177,
  /*  2655 */ 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568,
  /*  2670 */ 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383,
  /*  2685 */ 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132,
  /*  2700 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2715 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2730 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2745 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2760 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2775 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2790 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2805 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 20375, 21132, 21132,
  /*  2820 */ 31077, 21132, 21132, 21132, 21893, 20090, 21024, 21061, 21063, 21079, 20142, 21132, 21132, 35234, 21132,
  /*  2835 */ 26022, 21132, 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840,
  /*  2850 */ 21132, 19032, 18843, 18655, 19836, 18694, 18717, 23335, 19843, 18701, 18724, 19744, 18740, 18762, 33947,
  /*  2865 */ 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 19756, 20003, 18894, 19183, 19177,
  /*  2880 */ 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091,
  /*  2895 */ 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353,
  /*  2910 */ 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545,
  /*  2925 */ 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368,
  /*  2940 */ 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132,
  /*  2955 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2970 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  2985 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3000 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3015 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3030 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3045 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3060 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132,
  /*  3075 */ 21132, 31077, 21132, 21132, 21132, 21893, 20090, 21132, 21095, 21099, 21115, 20142, 21132, 21132, 35234,
  /*  3090 */ 21132, 26022, 21132, 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635,
  /*  3105 */ 39840, 21131, 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762,
  /*  3120 */ 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183,
  /*  3135 */ 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157,
  /*  3150 */ 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331,
  /*  3165 */ 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045,
  /*  3180 */ 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824,
  /*  3195 */ 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035,
  /*  3210 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3225 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3240 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3255 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3270 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3285 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3300 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3315 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 25849,
  /*  3330 */ 21132, 21132, 31077, 21149, 21132, 24270, 25853, 21176, 21213, 37462, 21233, 21245, 20142, 21132, 21132,
  /*  3345 */ 35234, 21132, 26022, 21132, 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600,
  /*  3360 */ 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740,
  /*  3375 */ 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894,
  /*  3390 */ 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141,
  /*  3405 */ 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309,
  /*  3420 */ 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148,
  /*  3435 */ 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783,
  /*  3450 */ 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019,
  /*  3465 */ 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3480 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3495 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3510 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3525 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3540 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3555 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3570 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21261,
  /*  3585 */ 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 20090, 21132, 21285, 21289, 21305, 21342, 21132,
  /*  3600 */ 21132, 35234, 21132, 26022, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132,
  /*  3615 */ 32600, 36261, 39840, 21391, 27788, 30655, 26280, 26091, 26091, 26091, 21407, 24961, 24961, 37417, 24961,
  /*  3630 */ 24961, 30314, 21132, 21132, 21132, 21132, 21429, 21448, 30655, 38878, 26091, 26091, 26091, 26695, 24961,
  /*  3645 */ 24961, 24961, 24961, 24961, 30311, 21484, 21132, 21132, 21132, 21132, 21520, 30599, 26091, 26091, 26092,
  /*  3660 */ 21541, 24961, 24961, 24961, 24961, 35657, 21132, 21132, 21132, 20580, 32662, 24885, 27303, 26091, 33664,
  /*  3675 */ 31479, 24961, 24961, 24961, 30315, 21132, 33228, 24031, 24886, 35302, 32750, 24961, 21565, 24961, 30414,
  /*  3690 */ 21132, 21581, 24884, 26091, 24961, 24961, 33747, 21132, 33394, 21612, 37347, 21650, 34731, 21132, 30635,
  /*  3705 */ 21669, 21692, 27785, 21714, 26849, 18992, 21749, 37617, 21674, 36282, 33324, 29809, 21676, 25950, 25949,
  /*  3720 */ 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3735 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3750 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3765 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3780 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3795 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3810 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3825 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3840 */ 20070, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21976, 20090, 21132, 21795, 21797, 21813, 20142,
  /*  3855 */ 21132, 21132, 35234, 21132, 27481, 21132, 27786, 30655, 26091, 36348, 32580, 28190, 24961, 31983, 21132,
  /*  3870 */ 21132, 32600, 21132, 39840, 21132, 27788, 30655, 26280, 26091, 26091, 26091, 21407, 24961, 24961, 32097,
  /*  3885 */ 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21429, 21132, 30655, 38878, 26091, 26091, 26091, 26695,
  /*  3900 */ 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599, 26091, 26091,
  /*  3915 */ 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091,
  /*  3930 */ 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961, 24961, 24961,
  /*  3945 */ 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132,
  /*  3960 */ 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950,
  /*  3975 */ 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  3990 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4005 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4020 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4035 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4050 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4065 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4080 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4095 */ 21132, 20070, 19957, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 20090, 19954, 21829, 21832, 21848,
  /*  4110 */ 20142, 21132, 21132, 35234, 21132, 26022, 21132, 21864, 18833, 19177, 19117, 19443, 19202, 19177, 23341,
  /*  4125 */ 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701,
  /*  4140 */ 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180,
  /*  4155 */ 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153,
  /*  4170 */ 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315,
  /*  4185 */ 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506,
  /*  4200 */ 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700,
  /*  4215 */ 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973,
  /*  4230 */ 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4245 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4260 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4275 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4290 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4305 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4320 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4335 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4350 */ 21132, 21132, 20070, 21890, 21132, 21132, 31077, 21132, 21132, 21132, 23725, 20090, 21909, 21929, 21930,
  /*  4365 */ 21946, 21962, 21132, 21132, 35234, 21132, 33875, 21132, 27786, 30655, 26091, 36348, 33856, 28190, 24961,
  /*  4380 */ 31983, 21132, 21132, 32600, 21132, 25247, 21992, 27788, 30655, 26280, 26091, 26091, 26091, 21407, 24961,
  /*  4395 */ 24961, 32097, 24961, 24961, 33911, 21132, 21132, 21132, 21132, 22013, 21132, 30655, 38878, 26091, 26091,
  /*  4410 */ 26091, 26695, 24961, 24961, 24961, 24961, 24961, 29702, 21132, 21132, 21132, 21132, 35724, 32660, 30599,
  /*  4425 */ 26091, 26091, 26298, 22037, 24961, 24961, 24961, 24961, 32277, 21132, 21132, 21132, 21132, 32662, 24885,
  /*  4440 */ 26091, 26091, 22061, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961,
  /*  4455 */ 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961,
  /*  4470 */ 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809,
  /*  4485 */ 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4500 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4515 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4530 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4545 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4560 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4575 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4590 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4605 */ 21132, 21132, 21132, 20070, 24863, 21132, 21132, 26335, 29629, 21132, 20516, 27643, 22089, 21132, 35429,
  /*  4620 */ 22124, 22139, 22155, 21132, 21132, 19283, 21132, 26022, 21132, 19030, 18833, 22630, 23113, 22495, 22496,
  /*  4635 */ 22477, 23119, 18555, 18579, 23958, 18635, 39840, 21132, 19032, 18843, 22171, 22716, 23074, 22207, 22185,
  /*  4650 */ 22974, 22235, 23163, 22191, 22938, 22271, 33947, 21132, 21132, 26376, 18783, 18799, 18820, 22292, 23043,
  /*  4665 */ 23088, 22633, 22916, 22255, 22245, 22944, 22477, 22322, 23010, 20156, 18936, 18973, 19008, 19028, 21874,
  /*  4680 */ 22348, 22385, 23102, 22905, 22413, 22369, 22457, 22473, 22477, 22493, 19218, 20287, 19249, 19274, 23753,
  /*  4695 */ 22512, 22397, 22219, 26190, 22562, 22660, 22578, 22477, 22609, 19414, 27051, 20177, 22625, 22891, 22649,
  /*  4710 */ 22332, 22676, 23002, 22807, 35148, 21045, 22692, 22707, 22927, 22732, 22748, 19636, 19652, 22776, 22792,
  /*  4725 */ 22836, 22860, 19716, 22876, 22960, 22990, 22593, 19398, 22844, 23034, 22441, 22427, 22439, 23059, 22360,
  /*  4740 */ 23135, 22306, 22434, 23151, 23179, 22527, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4755 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4770 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4785 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4800 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4815 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4830 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4845 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  4860 */ 21132, 21132, 21132, 21132, 20070, 37514, 21132, 21132, 31077, 23201, 21132, 37515, 22760, 23195, 21132,
  /*  4875 */ 34065, 23217, 23223, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833, 19177, 19117, 19201,
  /*  4890 */ 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694, 18717,
  /*  4905 */ 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 23239, 18799, 18820, 18859,
  /*  4920 */ 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 24171, 23255, 18936, 18973, 19008, 23271,
  /*  4935 */ 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 23290, 19218, 20287, 19249, 19274,
  /*  4950 */ 23753, 19299, 19315, 19337, 23321, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438, 19490,
  /*  4965 */ 23357, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652, 19668,
  /*  4980 */ 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177, 19884,
  /*  4995 */ 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5010 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5025 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5040 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5055 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5070 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5085 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5100 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5115 */ 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21132, 23383,
  /*  5130 */ 21132, 23404, 23420, 23426, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833, 19177, 19117,
  /*  5145 */ 19201, 19868, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836, 18694,
  /*  5160 */ 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799, 18820,
  /*  5175 */ 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973, 19008,
  /*  5190 */ 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287, 19249,
  /*  5205 */ 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177, 19438,
  /*  5220 */ 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636, 19652,
  /*  5235 */ 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797, 19177,
  /*  5250 */ 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5265 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5280 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5295 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5310 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5325 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5340 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5355 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5370 */ 21132, 21132, 21132, 21132, 21132, 21132, 23442, 21132, 23455, 21132, 31077, 21132, 21132, 21132, 21893,
  /*  5385 */ 20090, 21132, 23274, 23472, 23486, 20142, 23502, 21132, 35234, 21132, 26022, 21132, 19030, 18833, 19177,
  /*  5400 */ 19117, 19201, 23367, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655, 19836,
  /*  5415 */ 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783, 18799,
  /*  5430 */ 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936, 18973,
  /*  5445 */ 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218, 20287,
  /*  5460 */ 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051, 20177,
  /*  5475 */ 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591, 19636,
  /*  5490 */ 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177, 19797,
  /*  5505 */ 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5520 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5535 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5550 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5565 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5580 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5595 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5610 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5625 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23519, 22820, 21132, 21132, 31077, 21132, 21132, 21132,
  /*  5640 */ 21893, 20090, 22817, 24496, 23582, 23588, 23604, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833,
  /*  5655 */ 19177, 19117, 19201, 18746, 19177, 20652, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655,
  /*  5670 */ 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783,
  /*  5685 */ 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936,
  /*  5700 */ 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218,
  /*  5715 */ 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051,
  /*  5730 */ 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591,
  /*  5745 */ 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177,
  /*  5760 */ 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132,
  /*  5775 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5790 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5805 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5820 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5835 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5850 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5865 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  5880 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23641, 21132, 21132, 21132, 31077, 23657, 21132,
  /*  5895 */ 21132, 21893, 20090, 21132, 23678, 23679, 23695, 23711, 21132, 21132, 35234, 21132, 26022, 21132, 23741,
  /*  5910 */ 18833, 19177, 19117, 19767, 18920, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843,
  /*  5925 */ 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376,
  /*  5940 */ 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156,
  /*  5955 */ 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199,
  /*  5970 */ 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414,
  /*  5985 */ 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575,
  /*  6000 */ 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859,
  /*  6015 */ 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132,
  /*  6030 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6045 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6060 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6075 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6090 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6105 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6120 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6135 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132,
  /*  6150 */ 21132, 21132, 21893, 20090, 21132, 23769, 23771, 23787, 20142, 21132, 21132, 35234, 21132, 26022, 21132,
  /*  6165 */ 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032,
  /*  6180 */ 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132,
  /*  6195 */ 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125,
  /*  6210 */ 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177,
  /*  6225 */ 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233,
  /*  6240 */ 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552,
  /*  6255 */ 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668,
  /*  6270 */ 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132,
  /*  6285 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6300 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6315 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6330 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6345 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6360 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6375 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6390 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077,
  /*  6405 */ 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132, 21132,
  /*  6420 */ 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132,
  /*  6435 */ 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132,
  /*  6450 */ 21132, 21132, 35719, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961,
  /*  6465 */ 21549, 21132, 21132, 21132, 21132, 35724, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961,
  /*  6480 */ 24961, 32277, 21132, 21132, 21132, 34349, 32662, 24885, 26091, 26091, 23871, 24961, 24961, 24961, 24961,
  /*  6495 */ 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961, 24961, 27785, 21132, 23906, 24884, 26091,
  /*  6510 */ 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721,
  /*  6525 */ 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132,
  /*  6540 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6555 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6570 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6585 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6600 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6615 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6630 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6645 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132,
  /*  6660 */ 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132,
  /*  6675 */ 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132,
  /*  6690 */ 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132,
  /*  6705 */ 21132, 21132, 21132, 35719, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961,
  /*  6720 */ 24961, 21549, 21132, 21132, 21132, 21132, 35724, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961,
  /*  6735 */ 24961, 24961, 32277, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 23871, 24961, 24961, 24961,
  /*  6750 */ 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961, 24961, 27785, 21132, 27786, 24884,
  /*  6765 */ 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785,
  /*  6780 */ 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132,
  /*  6795 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6810 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6825 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6840 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6855 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6870 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6885 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  6900 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132,
  /*  6915 */ 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234,
  /*  6930 */ 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132,
  /*  6945 */ 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314,
  /*  6960 */ 21132, 21132, 21132, 21132, 35719, 23954, 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961,
  /*  6975 */ 24961, 24961, 21549, 21132, 21132, 21132, 21132, 35724, 32660, 30599, 26091, 26091, 26092, 21541, 24961,
  /*  6990 */ 24961, 24961, 24961, 32277, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 23871, 24961, 24961,
  /*  7005 */ 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961, 24961, 27785, 21132, 27786,
  /*  7020 */ 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961,
  /*  7035 */ 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769,
  /*  7050 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7065 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7080 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7095 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7110 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7125 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7140 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7155 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132,
  /*  7170 */ 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132,
  /*  7185 */ 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600,
  /*  7200 */ 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961,
  /*  7215 */ 30314, 21132, 21132, 21132, 21132, 35719, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961,
  /*  7230 */ 24961, 24961, 24961, 21549, 21132, 21132, 21132, 21132, 23974, 32660, 30599, 26091, 26091, 26092, 21541,
  /*  7245 */ 24961, 24961, 24961, 24961, 32277, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 23871, 24961,
  /*  7260 */ 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961, 24961, 27785, 21132,
  /*  7275 */ 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724,
  /*  7290 */ 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451,
  /*  7305 */ 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7320 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7335 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7350 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7365 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7380 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7395 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7410 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803,
  /*  7425 */ 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074, 21132,
  /*  7440 */ 21132, 35234, 21132, 26003, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132,
  /*  7455 */ 32600, 21132, 26002, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961,
  /*  7470 */ 24961, 30314, 21132, 21132, 21132, 21132, 35719, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961,
  /*  7485 */ 24961, 24961, 24961, 24961, 21549, 21132, 21132, 21132, 21132, 35724, 32660, 30599, 26091, 26091, 26092,
  /*  7500 */ 21541, 24961, 24961, 24961, 24961, 32277, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 23871,
  /*  7515 */ 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961, 24961, 27785,
  /*  7530 */ 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635,
  /*  7545 */ 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949,
  /*  7560 */ 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7575 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7590 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7605 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7620 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7635 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7650 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7665 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7680 */ 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074,
  /*  7695 */ 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132,
  /*  7710 */ 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097,
  /*  7725 */ 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091, 26091, 26091, 27189,
  /*  7740 */ 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599, 26091, 26091,
  /*  7755 */ 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091,
  /*  7770 */ 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961, 24961, 24961,
  /*  7785 */ 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132,
  /*  7800 */ 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950,
  /*  7815 */ 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7830 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7845 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7860 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7875 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7890 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7905 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7920 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  7935 */ 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844,
  /*  7950 */ 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 36354,
  /*  7965 */ 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961,
  /*  7980 */ 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091, 26091, 26091,
  /*  7995 */ 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599, 26091,
  /*  8010 */ 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885, 26091,
  /*  8025 */ 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961, 24961,
  /*  8040 */ 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607,
  /*  8055 */ 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676,
  /*  8070 */ 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8085 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8100 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8115 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8130 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8145 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8160 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8175 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8190 */ 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961,
  /*  8205 */ 37909, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961,
  /*  8220 */ 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961,
  /*  8235 */ 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091, 26091,
  /*  8250 */ 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599,
  /*  8265 */ 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885,
  /*  8280 */ 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961,
  /*  8295 */ 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961,
  /*  8310 */ 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809,
  /*  8325 */ 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8340 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8355 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8370 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8385 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8400 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8415 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8430 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8445 */ 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23999, 27533, 34032,
  /*  8460 */ 24961, 29844, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190,
  /*  8475 */ 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 24028, 30655, 38877, 26091, 26091, 26091, 23849,
  /*  8490 */ 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091,
  /*  8505 */ 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660,
  /*  8520 */ 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662,
  /*  8535 */ 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750,
  /*  8550 */ 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723,
  /*  8565 */ 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674,
  /*  8580 */ 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8595 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8610 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8625 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8640 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8655 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8670 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8685 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8700 */ 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 24047,
  /*  8715 */ 24061, 24063, 24079, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189,
  /*  8730 */ 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091,
  /*  8745 */ 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878,
  /*  8760 */ 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132,
  /*  8775 */ 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132,
  /*  8790 */ 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091,
  /*  8805 */ 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886,
  /*  8820 */ 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808,
  /*  8835 */ 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8850 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8865 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8880 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8895 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8910 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8925 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8940 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  8955 */ 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825,
  /*  8970 */ 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348,
  /*  8985 */ 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091,
  /*  9000 */ 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655,
  /*  9015 */ 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132,
  /*  9030 */ 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132,
  /*  9045 */ 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 39172, 24031, 24886,
  /*  9060 */ 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787,
  /*  9075 */ 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674,
  /*  9090 */ 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9105 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9120 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9135 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9150 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9165 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9180 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9195 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9210 */ 21132, 21132, 21132, 21132, 21132, 21132, 24095, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893,
  /*  9225 */ 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091,
  /*  9240 */ 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091,
  /*  9255 */ 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9270 */ 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132,
  /*  9285 */ 21132, 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132,
  /*  9300 */ 21132, 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031,
  /*  9315 */ 24886, 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132,
  /*  9330 */ 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617,
  /*  9345 */ 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9360 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9375 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9390 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9405 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9420 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9435 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9450 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9465 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132, 21132, 21132,
  /*  9480 */ 21893, 20090, 21132, 24117, 24118, 24134, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030, 18833,
  /*  9495 */ 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 27462, 19032, 18843, 18655,
  /*  9510 */ 19836, 18694, 18717, 19898, 19843, 18701, 24150, 19744, 18740, 18762, 33947, 21132, 21132, 26376, 18783,
  /*  9525 */ 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936,
  /*  9540 */ 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218,
  /*  9555 */ 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051,
  /*  9570 */ 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591,
  /*  9585 */ 19636, 24187, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177,
  /*  9600 */ 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132,
  /*  9615 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9630 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9645 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9660 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9675 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9690 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9705 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9720 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132, 21132,
  /*  9735 */ 21132, 21893, 20090, 21132, 21132, 21132, 28912, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030,
  /*  9750 */ 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843,
  /*  9765 */ 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376,
  /*  9780 */ 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156,
  /*  9795 */ 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199,
  /*  9810 */ 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414,
  /*  9825 */ 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575,
  /*  9840 */ 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859,
  /*  9855 */ 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132,
  /*  9870 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9885 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9900 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9915 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9930 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9945 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9960 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /*  9975 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 24203, 24247, 21132, 21132, 31077, 24224,
  /*  9990 */ 21132, 21132, 21893, 24265, 21132, 24215, 38958, 24286, 24302, 21132, 21132, 35234, 21132, 26022, 21132,
  /* 10005 */ 19030, 18833, 19177, 19117, 19201, 19202, 19177, 39802, 18555, 18579, 32600, 18635, 39840, 21132, 19032,
  /* 10020 */ 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132,
  /* 10035 */ 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125,
  /* 10050 */ 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177,
  /* 10065 */ 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233,
  /* 10080 */ 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552,
  /* 10095 */ 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668,
  /* 10110 */ 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132,
  /* 10125 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10140 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10155 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10170 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10185 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10200 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10215 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10230 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 24366, 24388, 21132, 21132, 31077,
  /* 10245 */ 21132, 21132, 21132, 21893, 20090, 21132, 24406, 24407, 24423, 24439, 21132, 21132, 35234, 21132, 26022,
  /* 10260 */ 25453, 19030, 18833, 19177, 19117, 19808, 19202, 19177, 39684, 18555, 18579, 32600, 18635, 39840, 21132,
  /* 10275 */ 19032, 18843, 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132,
  /* 10290 */ 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910,
  /* 10305 */ 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173,
  /* 10320 */ 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177,
  /* 10335 */ 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568,
  /* 10350 */ 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383,
  /* 10365 */ 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132,
  /* 10380 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10395 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10410 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10425 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10440 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10455 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10470 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10485 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 24475, 21132,
  /* 10500 */ 31077, 29284, 24493, 29264, 24512, 24528, 24541, 24557, 24588, 24572, 20074, 24604, 20046, 24330, 24627,
  /* 10515 */ 35517, 34798, 32396, 24670, 24710, 24752, 24778, 37786, 24794, 24810, 24839, 21132, 34784, 37840, 21132,
  /* 10530 */ 37025, 27788, 30655, 31115, 26091, 26091, 29021, 23849, 24961, 24961, 27749, 32501, 27743, 30314, 23558,
  /* 10545 */ 27086, 36978, 21132, 35719, 21132, 33276, 38753, 31646, 26091, 27308, 30721, 32092, 24961, 34703, 36797,
  /* 10560 */ 36520, 37886, 31712, 21132, 24858, 37497, 35724, 33403, 24879, 24902, 25795, 26092, 24925, 24941, 24960,
  /* 10575 */ 25682, 24978, 32277, 24998, 25088, 26260, 21367, 32662, 24885, 26091, 36124, 23871, 24961, 33080, 25037,
  /* 10590 */ 25057, 38682, 23809, 21132, 24031, 24886, 34512, 32842, 29244, 24961, 29589, 25073, 21132, 27786, 33412,
  /* 10605 */ 32981, 31504, 37411, 34311, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785,
  /* 10620 */ 25721, 25701, 25110, 38281, 29776, 21674, 25143, 21674, 28546, 21676, 25950, 25949, 28451, 21769, 21132,
  /* 10635 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10650 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10665 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10680 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10695 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10710 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10725 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10740 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 25170,
  /* 10755 */ 21132, 31077, 21132, 21132, 21132, 24654, 25191, 27533, 29975, 25215, 25230, 20074, 21132, 21132, 35234,
  /* 10770 */ 21132, 21132, 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132,
  /* 10785 */ 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314,
  /* 10800 */ 21132, 21132, 21132, 28883, 35719, 25246, 30655, 26683, 26091, 26091, 30887, 27189, 24961, 24961, 26162,
  /* 10815 */ 24961, 27868, 21549, 21132, 21132, 21132, 21132, 35724, 32660, 30599, 26091, 26091, 26092, 21541, 24961,
  /* 10830 */ 24961, 24961, 24961, 32277, 21132, 26878, 21132, 21132, 19615, 24683, 26091, 26091, 25263, 25279, 24961,
  /* 10845 */ 24982, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961, 24961, 27785, 21132, 27786,
  /* 10860 */ 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961,
  /* 10875 */ 27785, 25721, 29607, 37619, 34031, 39388, 25296, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769,
  /* 10890 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10905 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10920 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10935 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10950 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10965 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10980 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 10995 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132,
  /* 11010 */ 20610, 21132, 31077, 21132, 25337, 21132, 21893, 25358, 25371, 25387, 25403, 25417, 20074, 21132, 21132,
  /* 11025 */ 25433, 21132, 31721, 21132, 27786, 30655, 26226, 36348, 28252, 28190, 28244, 31983, 35344, 21132, 32600,
  /* 11040 */ 25469, 27078, 21132, 25495, 35912, 21525, 36111, 26091, 26091, 25536, 28941, 24961, 33044, 29875, 25552,
  /* 11055 */ 25568, 25588, 21132, 25606, 21132, 35719, 39313, 39502, 38878, 25127, 25625, 25645, 27189, 35192, 25665,
  /* 11070 */ 25681, 26134, 24961, 21549, 21132, 21132, 21132, 38719, 35724, 32660, 30599, 26091, 26091, 32741, 21541,
  /* 11085 */ 24961, 24961, 25698, 25741, 32277, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 23871, 24961,
  /* 11100 */ 24961, 30388, 24961, 30315, 21132, 21132, 24031, 25717, 26923, 32842, 30740, 24961, 24961, 36836, 21132,
  /* 11115 */ 27786, 37110, 29013, 28765, 25740, 25757, 21132, 27787, 24886, 34461, 21653, 29607, 21132, 30635, 25724,
  /* 11130 */ 24961, 27785, 25721, 29607, 37619, 34031, 25780, 28170, 25816, 21674, 29809, 21676, 25950, 25949, 31296,
  /* 11145 */ 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11160 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11175 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11190 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11205 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11220 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11235 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11250 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803,
  /* 11265 */ 21132, 30336, 21132, 31077, 21132, 25843, 23983, 21893, 25869, 25882, 25898, 25903, 25919, 20074, 21132,
  /* 11280 */ 21132, 35234, 21132, 21132, 21132, 27786, 30034, 25119, 29787, 28189, 25935, 25966, 22045, 21132, 25985,
  /* 11295 */ 29897, 26001, 26019, 21132, 37079, 31915, 26041, 24909, 29112, 26090, 26108, 26131, 30196, 32097, 32905,
  /* 11310 */ 26150, 26185, 21132, 21132, 26206, 27915, 35719, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961,
  /* 11325 */ 24961, 24961, 24961, 37752, 21549, 39654, 21132, 33772, 21320, 35724, 32660, 30599, 26223, 26091, 36646,
  /* 11340 */ 26242, 24961, 24961, 32492, 38977, 34542, 21132, 21132, 21132, 21132, 26276, 34131, 26091, 26296, 26314,
  /* 11355 */ 24961, 32536, 35396, 24961, 30315, 26351, 26372, 20425, 36587, 38128, 32842, 26392, 24961, 39449, 27785,
  /* 11370 */ 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21432, 27787, 24886, 26074, 29206, 29607, 21132, 30635,
  /* 11385 */ 25724, 24961, 27785, 25721, 29607, 20775, 37148, 37617, 26434, 29808, 21674, 29809, 21676, 25950, 25949,
  /* 11400 */ 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11415 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11430 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11445 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11460 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11475 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11490 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11505 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11520 */ 23803, 21132, 28722, 26483, 31077, 31884, 26593, 28498, 26500, 26516, 26529, 26545, 26555, 26565, 20074,
  /* 11535 */ 35538, 29224, 26581, 26619, 34622, 26655, 26818, 26671, 26720, 25321, 26736, 26791, 26834, 29733, 21132,
  /* 11550 */ 26871, 39602, 39706, 26894, 36028, 27788, 30655, 39509, 28215, 23930, 26910, 26945, 26967, 26988, 30769,
  /* 11565 */ 27016, 24961, 32296, 27041, 27067, 24823, 27102, 27141, 38627, 27165, 27214, 27230, 27288, 27324, 27360,
  /* 11580 */ 33644, 36722, 27401, 27429, 27445, 35117, 24611, 21132, 27461, 27478, 27497, 27513, 19620, 24725, 31351,
  /* 11595 */ 32466, 21541, 27549, 35326, 32061, 27572, 27593, 20198, 21132, 27609, 27633, 32662, 27659, 27680, 36150,
  /* 11610 */ 23871, 29693, 27696, 27733, 27765, 27782, 21132, 27804, 24031, 27828, 38222, 32842, 27856, 36186, 24961,
  /* 11625 */ 27785, 27891, 27939, 27978, 28005, 28021, 28057, 31612, 28093, 30064, 27954, 28111, 38040, 28077, 37819,
  /* 11640 */ 30635, 29967, 27272, 33106, 28162, 28186, 28206, 28231, 34320, 31433, 28268, 28299, 28315, 21676, 28341,
  /* 11655 */ 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11670 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11685 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11700 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11715 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11730 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11745 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11760 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11775 */ 21132, 23803, 21132, 21132, 21132, 31077, 28357, 33580, 21132, 31865, 28374, 28387, 28403, 28405, 28421,
  /* 11790 */ 20074, 21132, 30422, 35234, 21132, 26207, 21132, 27786, 30655, 34140, 25154, 28189, 28437, 28467, 36379,
  /* 11805 */ 26484, 21132, 32600, 33941, 21132, 28495, 21189, 28514, 38877, 38191, 26091, 26091, 28532, 24961, 24961,
  /* 11820 */ 28041, 32682, 24962, 30314, 21132, 21132, 21132, 21132, 35719, 21132, 30655, 38878, 26091, 26091, 34504,
  /* 11835 */ 27189, 24961, 24961, 33039, 24961, 24961, 21549, 21132, 21132, 21039, 21132, 35724, 32660, 30599, 26091,
  /* 11850 */ 26091, 26092, 21541, 24961, 24961, 24961, 37723, 32277, 21132, 20315, 21132, 21132, 32662, 28582, 26091,
  /* 11865 */ 27339, 23871, 24961, 37595, 27766, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32842, 24961, 24961,
  /* 11880 */ 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 28604, 27787, 24886, 25723, 24961, 32860,
  /* 11895 */ 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676,
  /* 11910 */ 28621, 25949, 35976, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11925 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11940 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11955 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11970 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 11985 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12000 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12015 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12030 */ 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 30825, 21132, 21893, 28656, 28669, 28685, 28687,
  /* 12045 */ 28703, 20074, 21132, 21132, 35234, 21132, 21132, 26633, 27786, 30655, 26091, 36348, 28189, 28190, 24961,
  /* 12060 */ 31983, 28719, 21132, 32600, 21132, 21132, 21132, 28738, 30655, 38877, 26091, 26091, 26091, 23849, 24961,
  /* 12075 */ 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091, 26091,
  /* 12090 */ 26091, 37953, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599,
  /* 12105 */ 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885,
  /* 12120 */ 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 28796, 24031, 24886, 26091, 32750, 24961,
  /* 12135 */ 24961, 28764, 21779, 28781, 28818, 24884, 26091, 24961, 31021, 28864, 28908, 32639, 28833, 28928, 28963,
  /* 12150 */ 29607, 21132, 28989, 30165, 34857, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809,
  /* 12165 */ 21676, 25950, 32127, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12180 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12195 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12210 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12225 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12240 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12255 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12270 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12285 */ 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032,
  /* 12300 */ 24961, 29844, 20074, 21132, 21132, 29037, 21132, 21132, 21132, 29065, 30656, 29128, 29147, 32544, 27385,
  /* 12315 */ 27375, 29153, 21132, 21132, 29169, 36242, 23566, 21132, 27788, 30655, 38877, 26091, 26091, 33829, 23849,
  /* 12330 */ 24961, 32366, 32097, 24961, 29205, 30314, 21132, 21132, 29222, 21132, 21132, 21132, 30655, 38878, 26091,
  /* 12345 */ 26091, 26091, 27189, 24961, 24961, 24961, 24961, 29240, 30311, 37489, 21132, 21132, 21132, 21132, 32660,
  /* 12360 */ 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 33074, 29608, 21132, 21132, 29260, 21132, 32662,
  /* 12375 */ 24885, 26091, 34148, 33664, 24961, 39106, 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750,
  /* 12390 */ 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723,
  /* 12405 */ 24961, 29607, 21132, 30635, 28146, 38162, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674,
  /* 12420 */ 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12435 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12450 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12465 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12480 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12495 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12510 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12525 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12540 */ 21132, 21132, 21132, 21132, 23803, 21132, 21132, 29280, 31077, 38849, 29300, 20339, 29336, 29352, 29365,
  /* 12555 */ 29381, 29412, 29396, 20074, 21132, 21132, 21160, 22100, 21132, 21132, 37006, 29428, 29447, 31681, 28189,
  /* 12570 */ 29467, 28036, 31687, 21132, 21132, 32600, 21132, 35264, 21132, 27788, 34829, 31921, 29497, 29516, 37117,
  /* 12585 */ 29535, 28947, 24961, 29570, 31472, 29605, 29624, 21461, 29645, 29668, 29746, 21132, 38839, 30655, 33312,
  /* 12600 */ 26091, 26091, 35064, 29684, 24961, 24961, 29718, 37758, 29762, 29803, 21132, 21132, 27812, 38308, 21132,
  /* 12615 */ 32660, 30864, 26091, 26091, 26092, 29825, 24961, 24961, 24961, 29860, 29913, 21132, 29931, 29991, 21468,
  /* 12630 */ 32662, 24885, 27962, 26091, 33664, 38645, 24961, 24961, 38909, 30057, 30080, 21132, 31001, 30117, 30150,
  /* 12645 */ 30181, 37373, 30230, 24961, 30254, 21132, 18619, 30272, 36557, 33972, 30288, 30308, 24101, 24372, 24886,
  /* 12660 */ 25723, 24961, 29607, 30331, 30635, 25724, 32218, 30352, 25721, 29607, 20465, 30369, 37617, 21674, 29808,
  /* 12675 */ 21674, 38258, 33901, 25950, 25949, 28451, 30404, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12690 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12705 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12720 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12735 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12750 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12765 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12780 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12795 */ 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 38519, 31077, 21132, 30844, 21132, 38521, 23825,
  /* 12810 */ 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091, 36348,
  /* 12825 */ 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091,
  /* 12840 */ 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655,
  /* 12855 */ 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132,
  /* 12870 */ 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132,
  /* 12885 */ 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031, 24886,
  /* 12900 */ 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787,
  /* 12915 */ 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674,
  /* 12930 */ 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12945 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12960 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12975 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 12990 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13005 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13020 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13035 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13050 */ 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893,
  /* 13065 */ 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132, 35887, 21132, 27786, 30655, 26091,
  /* 13080 */ 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091,
  /* 13095 */ 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13110 */ 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132,
  /* 13125 */ 21132, 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 38547, 30438, 29608, 21132, 21132,
  /* 13140 */ 21132, 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031,
  /* 13155 */ 24886, 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132,
  /* 13170 */ 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617,
  /* 13185 */ 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13200 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13215 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13230 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13245 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13260 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13275 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13290 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13305 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 20745, 31077, 21132, 29189, 21132,
  /* 13320 */ 30456, 30472, 30485, 30501, 30506, 30522, 20074, 33683, 21132, 35234, 21132, 30538, 30573, 27786, 30595,
  /* 13335 */ 32976, 25827, 28189, 38920, 27254, 24762, 30615, 21132, 31739, 36847, 20294, 21132, 30625, 30654, 30672,
  /* 13350 */ 30707, 33501, 28325, 30756, 37588, 36806, 31522, 30798, 37381, 30820, 30841, 21132, 21132, 27149, 21132,
  /* 13365 */ 21132, 30860, 38878, 30880, 30903, 26091, 37561, 30921, 24961, 24961, 27413, 24961, 30957, 21132, 30978,
  /* 13380 */ 21132, 34400, 32191, 32660, 27525, 26091, 34453, 26766, 21541, 24961, 31017, 31037, 38609, 34864, 22108,
  /* 13395 */ 21132, 21132, 21132, 38745, 24885, 31054, 26091, 33664, 30381, 24961, 24961, 24961, 25764, 22546, 33245,
  /* 13410 */ 29946, 23921, 26091, 26775, 24961, 30292, 21698, 27785, 31071, 29652, 24884, 26091, 24961, 24961, 31150,
  /* 13425 */ 21132, 31093, 24886, 36693, 31380, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031,
  /* 13440 */ 37617, 21674, 30962, 31131, 25310, 31166, 25950, 34254, 28451, 21769, 21132, 21132, 21132, 21132, 21132,
  /* 13455 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13470 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13485 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13500 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13515 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13530 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13545 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13560 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 27114, 31077, 24636, 24249,
  /* 13575 */ 21132, 21893, 31186, 31199, 31215, 31246, 31230, 20074, 23503, 21132, 35234, 21132, 22538, 21132, 27786,
  /* 13590 */ 31262, 28138, 26467, 28189, 31282, 31312, 39272, 21132, 24350, 32600, 21132, 20368, 35757, 27788, 30655,
  /* 13605 */ 38877, 31347, 33801, 31637, 31367, 24961, 29583, 31396, 31376, 31457, 34740, 33781, 21132, 21132, 21132,
  /* 13620 */ 21132, 21132, 30655, 38878, 26055, 38229, 26091, 27189, 31495, 30733, 24961, 24961, 24961, 30311, 18767,
  /* 13635 */ 18804, 21132, 39764, 38857, 31538, 30599, 39348, 26091, 31560, 31585, 39242, 32804, 38565, 27556, 37971,
  /* 13650 */ 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132,
  /* 13665 */ 21132, 24031, 24886, 26091, 32750, 24961, 24961, 24961, 34058, 21132, 27786, 24884, 26091, 24961, 24961,
  /* 13680 */ 38675, 21132, 27787, 24886, 25723, 24961, 31609, 21132, 30635, 25724, 24961, 28874, 27664, 26445, 31628,
  /* 13695 */ 34031, 31670, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132,
  /* 13710 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13725 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13740 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13755 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13770 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13785 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13800 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13815 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 30548, 18957, 21132,
  /* 13830 */ 33484, 31703, 31755, 31771, 31784, 31800, 31802, 31818, 20074, 21132, 31834, 35234, 31853, 31881, 21132,
  /* 13845 */ 31900, 31937, 31999, 32038, 32077, 32113, 32143, 32178, 30941, 21132, 37261, 21132, 21132, 31730, 30091,
  /* 13860 */ 30655, 38877, 29500, 26091, 26091, 23849, 30206, 24961, 32097, 32214, 30214, 32234, 24842, 36322, 21132,
  /* 13875 */ 21132, 38355, 21132, 32250, 38878, 36762, 26091, 26091, 27189, 32274, 24961, 24961, 35590, 24961, 32293,
  /* 13890 */ 21132, 21132, 28358, 21132, 24459, 32312, 31544, 26091, 38196, 35070, 32337, 24961, 37962, 29547, 32364,
  /* 13905 */ 29608, 38335, 32382, 36855, 30353, 32412, 24012, 32428, 32462, 33664, 32482, 32526, 38001, 32560, 32596,
  /* 13920 */ 32616, 23547, 32655, 30638, 26091, 32750, 32678, 24961, 32698, 25572, 32714, 18639, 34486, 32731, 32766,
  /* 13935 */ 32801, 36222, 21132, 19012, 32820, 28848, 32876, 29607, 21217, 36068, 25724, 32903, 27785, 32921, 32947,
  /* 13950 */ 32963, 32931, 32997, 33024, 29808, 21674, 29809, 21676, 33060, 25949, 28451, 33096, 21132, 21132, 21132,
  /* 13965 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13980 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 13995 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14010 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14025 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14040 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14055 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14070 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 35021, 31077,
  /* 14085 */ 21132, 24645, 33122, 21893, 33142, 33155, 33171, 33177, 33193, 20074, 33209, 24316, 37060, 21733, 33244,
  /* 14100 */ 37655, 33261, 33298, 33347, 33008, 33363, 33379, 33428, 33444, 21132, 20621, 32600, 21132, 33480, 38941,
  /* 14115 */ 36058, 33282, 38877, 26091, 33500, 33517, 23849, 31593, 35198, 28973, 24961, 24961, 30314, 25175, 21132,
  /* 14130 */ 33220, 24231, 33568, 36882, 30655, 30041, 26091, 30127, 37699, 27189, 24961, 33616, 34903, 33547, 33636,
  /* 14145 */ 28479, 33660, 18951, 33680, 21132, 21132, 32660, 30599, 37857, 26091, 26092, 21541, 37154, 24961, 24961,
  /* 14160 */ 24961, 33699, 21132, 28605, 21132, 33718, 32662, 24885, 26091, 26091, 33735, 24961, 24961, 24961, 31143,
  /* 14175 */ 30315, 33763, 21132, 24031, 36551, 33797, 21634, 33990, 39366, 24961, 21729, 21132, 27786, 33817, 26091,
  /* 14190 */ 33851, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 33872, 34435, 32446, 31038, 26329, 33891,
  /* 14205 */ 33927, 21269, 33963, 37617, 21674, 29808, 21674, 29809, 21676, 34024, 26407, 28451, 34048, 21132, 21132,
  /* 14220 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14235 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14250 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14265 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14280 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14295 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14310 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14325 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 31837,
  /* 14340 */ 31077, 21132, 21132, 34081, 34102, 34118, 34164, 34178, 34180, 34196, 20074, 21132, 23625, 34212, 21132,
  /* 14355 */ 21132, 21132, 27786, 30655, 26091, 36348, 28189, 34240, 34302, 34336, 34883, 34372, 32600, 21132, 25007,
  /* 14370 */ 34391, 34425, 34477, 38877, 31654, 36614, 29451, 23849, 34528, 34558, 22073, 34578, 27025, 34598, 39405,
  /* 14385 */ 21132, 21132, 34638, 25016, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961,
  /* 14400 */ 24961, 26855, 37461, 21132, 21132, 35277, 23534, 36462, 30599, 29519, 34677, 26092, 34695, 27875, 24961,
  /* 14415 */ 24961, 24961, 29608, 38996, 21132, 21132, 21132, 32662, 24885, 25629, 26091, 34719, 24961, 36217, 24961,
  /* 14430 */ 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884,
  /* 14445 */ 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 34756,
  /* 14460 */ 25721, 38589, 36675, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132,
  /* 14475 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14490 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14505 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14520 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14535 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14550 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14565 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14580 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132,
  /* 14595 */ 21132, 31077, 21132, 21132, 21132, 21893, 23825, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234,
  /* 14610 */ 21132, 21132, 29183, 27786, 34825, 29107, 34845, 30691, 32348, 32162, 26704, 34880, 21132, 32600, 21132,
  /* 14625 */ 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314,
  /* 14640 */ 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091, 26091, 26091, 38031, 24961, 24961, 24961,
  /* 14655 */ 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961,
  /* 14670 */ 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961,
  /* 14685 */ 24961, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786,
  /* 14700 */ 24884, 26091, 24961, 24961, 29915, 21132, 27787, 37939, 25723, 34899, 29607, 21132, 30635, 25724, 24961,
  /* 14715 */ 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769,
  /* 14730 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14745 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14760 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14775 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14790 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14805 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14820 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 14835 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132,
  /* 14850 */ 21132, 24390, 34919, 21132, 21008, 21007, 21893, 34935, 34948, 34964, 34969, 34985, 20074, 21132, 37189,
  /* 14865 */ 35234, 22021, 35001, 30256, 35037, 29080, 35086, 36625, 35102, 35133, 35164, 35214, 21132, 21132, 33126,
  /* 14880 */ 18592, 35250, 34356, 21375, 35920, 39192, 25649, 26091, 35300, 35318, 38155, 37225, 32097, 34280, 32053,
  /* 14895 */ 30314, 21132, 39213, 21132, 37649, 21132, 35342, 30655, 27177, 35360, 26091, 30134, 35376, 34562, 24961,
  /* 14910 */ 27000, 24961, 24961, 30311, 21132, 27904, 37682, 35412, 35428, 32660, 35445, 26091, 35467, 36398, 21541,
  /* 14925 */ 25280, 35483, 26115, 28068, 28640, 23619, 21132, 26806, 39535, 32662, 35451, 26091, 26091, 33664, 35390,
  /* 14940 */ 24961, 24961, 25041, 35511, 21132, 35533, 24031, 24886, 26091, 35554, 24961, 33999, 34008, 27785, 18610,
  /* 14955 */ 27786, 29958, 26091, 35588, 39248, 29915, 21997, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724,
  /* 14970 */ 24961, 37184, 35606, 35495, 37619, 34031, 28125, 31976, 39473, 21674, 29809, 21676, 35642, 35681, 26751,
  /* 14985 */ 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15000 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15015 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15030 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15045 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15060 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15075 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15090 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 23803,
  /* 15105 */ 21132, 21132, 21132, 35708, 19422, 24477, 35743, 35779, 35795, 35808, 35824, 35848, 35832, 20074, 35864,
  /* 15120 */ 35882, 35234, 21132, 23456, 35864, 34375, 35903, 35936, 36502, 28189, 35962, 35992, 36423, 32630, 36026,
  /* 15135 */ 36044, 20054, 21132, 21132, 36302, 36084, 38877, 36140, 32440, 26091, 36166, 36202, 24961, 33552, 28566,
  /* 15150 */ 33620, 30936, 36238, 21132, 34409, 36258, 21132, 21132, 30655, 38878, 26091, 26091, 26091, 27189, 24961,
  /* 15165 */ 24961, 24961, 24961, 38049, 36277, 21132, 36298, 29313, 36318, 25021, 32660, 29094, 26091, 23938, 36338,
  /* 15180 */ 36370, 24961, 35179, 32780, 29837, 32785, 37461, 21132, 21132, 21132, 28748, 24885, 27344, 36395, 33664,
  /* 15195 */ 24961, 36414, 24961, 24961, 30315, 38700, 36439, 36457, 24886, 36478, 28556, 36180, 36518, 24961, 27785,
  /* 15210 */ 21132, 36536, 24884, 26091, 24961, 24961, 29915, 20417, 36573, 36641, 27243, 34286, 24944, 36662, 30635,
  /* 15225 */ 25724, 23855, 27785, 36709, 36738, 37619, 34031, 36750, 30685, 29808, 36784, 31410, 36822, 25950, 25949,
  /* 15240 */ 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15255 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15270 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15285 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15300 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15315 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15330 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15345 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15360 */ 23803, 21132, 21132, 21132, 36871, 21132, 21132, 34610, 34086, 36898, 36911, 36927, 36958, 36942, 20074,
  /* 15375 */ 21132, 36974, 36994, 37022, 37041, 37076, 37095, 30021, 37133, 32022, 30782, 37170, 37205, 31331, 23018,
  /* 15390 */ 34770, 37241, 37277, 21132, 37296, 28892, 29431, 31952, 37325, 32832, 37342, 37363, 30440, 37397, 26972,
  /* 15405 */ 37433, 33331, 37449, 37478, 21132, 39660, 37513, 21132, 39293, 37531, 38878, 37547, 34495, 33835, 27840,
  /* 15420 */ 26169, 32575, 31322, 37577, 38488, 37611, 27617, 20630, 37635, 21132, 37671, 21197, 32258, 39341, 37698,
  /* 15435 */ 21625, 37715, 37739, 24961, 37774, 24961, 37802, 37835, 21132, 20537, 21132, 31104, 36098, 35946, 37856,
  /* 15450 */ 20673, 37873, 37902, 28632, 35564, 37980, 32715, 21132, 37925, 21596, 26091, 28283, 37996, 35572, 37219,
  /* 15465 */ 27785, 35014, 30006, 32321, 38017, 38074, 32155, 31170, 38100, 27787, 38121, 38144, 38084, 39431, 35227,
  /* 15480 */ 38178, 25520, 36001, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 26456, 33532, 38212, 38245, 38274,
  /* 15495 */ 25949, 28451, 38297, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15510 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15525 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15540 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15555 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15570 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15585 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15600 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15615 */ 21132, 23803, 21132, 21132, 21132, 38324, 21132, 21132, 38351, 29049, 38371, 38384, 38400, 38404, 38420,
  /* 15630 */ 20074, 21132, 21132, 18539, 21132, 24344, 21132, 27786, 30655, 26067, 24694, 28189, 28190, 32852, 31983,
  /* 15645 */ 37053, 21132, 32600, 21132, 21132, 33591, 33600, 38436, 38877, 38455, 26091, 26091, 38475, 24961, 24961,
  /* 15660 */ 35626, 38484, 30238, 35665, 21132, 38504, 21132, 21132, 36441, 30557, 38439, 35052, 28588, 36601, 29003,
  /* 15675 */ 27189, 27264, 38537, 38563, 24961, 38544, 30311, 37280, 21132, 21132, 21132, 21132, 25199, 30599, 34444,
  /* 15690 */ 26091, 26092, 38581, 38605, 24961, 24961, 24961, 29608, 38625, 21132, 21132, 21132, 32662, 24885, 26091,
  /* 15705 */ 26091, 33664, 24961, 24961, 24961, 30804, 37811, 21132, 20961, 24031, 25510, 26091, 31569, 24961, 21413,
  /* 15720 */ 29554, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607,
  /* 15735 */ 21132, 30101, 25724, 38643, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 38661, 29809, 21676,
  /* 15750 */ 25950, 29481, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15765 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15780 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15795 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15810 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15825 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15840 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15855 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 15870 */ 21132, 21132, 23803, 21132, 21132, 21132, 21356, 38698, 18984, 38716, 34224, 38735, 38769, 38783, 38809,
  /* 15885 */ 38793, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 36491, 24736, 28189, 32887, 23890,
  /* 15900 */ 27198, 21132, 21132, 38825, 21132, 21132, 21132, 27788, 38873, 38877, 32011, 26091, 26091, 38894, 24961,
  /* 15915 */ 24961, 27577, 25969, 24961, 38936, 21132, 21132, 21132, 21132, 38957, 21132, 28516, 38878, 26091, 31422,
  /* 15930 */ 26091, 27189, 24961, 38974, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599,
  /* 15945 */ 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885,
  /* 15960 */ 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 38993, 24031, 24886, 26091, 32750, 24961,
  /* 15975 */ 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961,
  /* 15990 */ 29607, 21496, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809,
  /* 16005 */ 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16020 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16035 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16050 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16065 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16080 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16095 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16110 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16125 */ 21132, 21132, 21132, 23803, 21132, 21132, 21132, 30990, 21132, 21133, 21132, 39012, 39028, 39041, 39057,
  /* 16140 */ 39088, 39072, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 29131, 36348, 27717, 28190,
  /* 16155 */ 27709, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091, 26091, 23849,
  /* 16170 */ 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878, 26091,
  /* 16185 */ 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 20095, 21132, 32660,
  /* 16200 */ 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 26951, 21132, 18601, 21132, 21132, 32662,
  /* 16215 */ 24885, 36684, 36768, 33664, 21753, 24961, 39104, 24961, 30315, 21132, 21132, 24031, 24886, 26091, 32750,
  /* 16230 */ 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886, 25723,
  /* 16245 */ 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808, 21674,
  /* 16260 */ 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16275 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16290 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16305 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16320 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16335 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16350 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16365 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16380 */ 21132, 21132, 21132, 21132, 24095, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825, 39122,
  /* 16395 */ 39136, 39138, 39154, 20074, 21132, 21132, 35234, 39170, 21132, 21132, 34809, 39188, 31965, 27989, 28189,
  /* 16410 */ 35692, 31441, 32510, 21132, 21132, 32600, 35866, 38105, 39208, 27788, 30655, 38877, 26091, 26091, 26929,
  /* 16425 */ 23849, 24961, 24961, 39229, 24961, 23883, 29886, 21132, 21132, 21132, 21132, 21132, 21132, 30655, 38878,
  /* 16440 */ 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132, 21132, 21132,
  /* 16455 */ 32660, 30599, 26091, 26091, 30905, 39264, 24961, 24961, 24961, 24961, 29608, 33457, 21132, 21132, 21132,
  /* 16470 */ 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 33981, 30315, 21132, 21132, 24031, 24886, 26091,
  /* 16485 */ 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132, 27787, 24886,
  /* 16500 */ 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674, 29808,
  /* 16515 */ 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16530 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16545 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16560 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16575 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16590 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16605 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16620 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16635 */ 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893, 23825,
  /* 16650 */ 27533, 34032, 24961, 29844, 20074, 39288, 21132, 35234, 21132, 21132, 39309, 27786, 30655, 31055, 36348,
  /* 16665 */ 26418, 33702, 36010, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091, 26091,
  /* 16680 */ 38459, 23849, 24961, 24961, 34267, 31513, 24961, 30314, 37255, 21132, 27923, 21132, 21132, 21132, 30655,
  /* 16695 */ 39329, 26091, 37326, 26091, 27189, 24961, 34582, 24961, 39364, 24961, 39382, 21132, 39404, 21132, 21132,
  /* 16710 */ 21132, 23833, 31266, 25800, 26091, 26092, 39421, 38058, 24961, 24961, 24961, 29608, 21132, 21326, 21132,
  /* 16725 */ 21132, 32662, 24885, 26091, 34679, 33664, 24961, 24961, 35620, 39447, 30315, 21132, 21132, 24031, 24886,
  /* 16740 */ 26091, 32750, 24961, 24961, 24961, 26257, 21132, 19603, 24884, 26091, 24961, 24961, 39465, 21132, 27787,
  /* 16755 */ 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617, 21674,
  /* 16770 */ 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16785 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16800 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16815 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16830 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16845 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16860 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16875 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16890 */ 21132, 21132, 21132, 21132, 21132, 21132, 23803, 21132, 21132, 21132, 31077, 21132, 21132, 21132, 21893,
  /* 16905 */ 39489, 27533, 34032, 24961, 29844, 20074, 21132, 21132, 35234, 21132, 21132, 21132, 27786, 30655, 26091,
  /* 16920 */ 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132, 27788, 30655, 38877, 26091,
  /* 16935 */ 26091, 26091, 23849, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 16950 */ 30655, 38878, 26091, 26091, 26091, 27189, 24961, 24961, 24961, 24961, 24961, 30311, 21132, 21132, 21132,
  /* 16965 */ 21132, 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961, 24961, 29608, 21132, 21132,
  /* 16980 */ 21132, 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961, 30315, 21132, 21132, 24031,
  /* 16995 */ 24886, 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091, 24961, 24961, 29915, 21132,
  /* 17010 */ 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721, 29607, 37619, 34031, 37617,
  /* 17025 */ 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17040 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17055 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17070 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17085 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17100 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17115 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17130 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17145 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 34661, 39532, 39525, 39574,
  /* 17160 */ 39551, 39567, 39590, 35284, 39618, 39624, 39640, 21132, 21132, 35234, 21132, 26022, 18532, 19030, 18833,
  /* 17175 */ 19177, 39676, 19201, 19202, 19177, 19469, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843, 18655,
  /* 17190 */ 19836, 18694, 18717, 18873, 19843, 18701, 18724, 19744, 18740, 39700, 33947, 21132, 21132, 26376, 18783,
  /* 17205 */ 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156, 18936,
  /* 17220 */ 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199, 19218,
  /* 17235 */ 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414, 27051,
  /* 17250 */ 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575, 19591,
  /* 17265 */ 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859, 19177,
  /* 17280 */ 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132, 21132,
  /* 17295 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17310 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17325 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17340 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17355 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17370 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17385 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17400 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 21132, 21132,
  /* 17415 */ 34653, 21893, 20090, 21132, 25609, 39722, 39728, 20142, 21132, 21132, 35234, 21132, 26022, 21132, 19030,
  /* 17430 */ 18833, 19177, 19117, 19201, 19904, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032, 18843,
  /* 17445 */ 18655, 19836, 18694, 18717, 19898, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132, 26376,
  /* 17460 */ 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125, 20156,
  /* 17475 */ 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177, 19199,
  /* 17490 */ 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233, 19414,
  /* 17505 */ 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552, 19575,
  /* 17520 */ 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668, 19859,
  /* 17535 */ 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132, 21132,
  /* 17550 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17565 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17580 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17595 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17610 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17625 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17640 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17655 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077, 29320,
  /* 17670 */ 21132, 21132, 28095, 39759, 21132, 26603, 39744, 39780, 20142, 21132, 21132, 35234, 21132, 26022, 25445,
  /* 17685 */ 19030, 18833, 19177, 19117, 19201, 19202, 19177, 23341, 18555, 18579, 32600, 18635, 39840, 21132, 19032,
  /* 17700 */ 18843, 18655, 19836, 18694, 18717, 39796, 19843, 18701, 18724, 19744, 18740, 18762, 33947, 21132, 21132,
  /* 17715 */ 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177, 18910, 19125,
  /* 17730 */ 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091, 19173, 19177,
  /* 17745 */ 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353, 19177, 19233,
  /* 17760 */ 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545, 19568, 19552,
  /* 17775 */ 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368, 19383, 18668,
  /* 17790 */ 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132, 21132, 21132,
  /* 17805 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17820 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17835 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17850 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17865 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17880 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17895 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 17910 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 20070, 21132, 21132, 21132, 31077,
  /* 17925 */ 21132, 21132, 21132, 21893, 20090, 21132, 21132, 21132, 32198, 20074, 21132, 21132, 35234, 21132, 21132,
  /* 17940 */ 21132, 27786, 30655, 26091, 36348, 28189, 28190, 24961, 31983, 21132, 21132, 32600, 21132, 21132, 21132,
  /* 17955 */ 27788, 30655, 26280, 26091, 26091, 26091, 21407, 24961, 24961, 32097, 24961, 24961, 30314, 21132, 21132,
  /* 17970 */ 21132, 21132, 21132, 21132, 30655, 38878, 26091, 26091, 26091, 26695, 24961, 24961, 24961, 24961, 24961,
  /* 17985 */ 30311, 21132, 21132, 21132, 21132, 21132, 32660, 30599, 26091, 26091, 26092, 21541, 24961, 24961, 24961,
  /* 18000 */ 24961, 29608, 21132, 21132, 21132, 21132, 32662, 24885, 26091, 26091, 33664, 24961, 24961, 24961, 24961,
  /* 18015 */ 30315, 21132, 21132, 24031, 24886, 26091, 32750, 24961, 24961, 24961, 27785, 21132, 27786, 24884, 26091,
  /* 18030 */ 24961, 24961, 29915, 21132, 27787, 24886, 25723, 24961, 29607, 21132, 30635, 25724, 24961, 27785, 25721,
  /* 18045 */ 29607, 37619, 34031, 37617, 21674, 29808, 21674, 29809, 21676, 25950, 25949, 28451, 21769, 21132, 21132,
  /* 18060 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18075 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18090 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18105 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18120 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18135 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18150 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18165 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18180 */ 21132, 21132, 21132, 21504, 21132, 39839, 21132, 25094, 39818, 39830, 26025, 21132, 21132, 21132, 21132,
  /* 18195 */ 26022, 21132, 19030, 18833, 19177, 19117, 19201, 19202, 19177, 19123, 18555, 18579, 21132, 18635, 39840,
  /* 18210 */ 21132, 19032, 18843, 18655, 19836, 18694, 18717, 18873, 19843, 18701, 18724, 19744, 18740, 18762, 33947,
  /* 18225 */ 21132, 21132, 26376, 18783, 18799, 18820, 18859, 20000, 18891, 19180, 18678, 20003, 18894, 19183, 19177,
  /* 18240 */ 18910, 19125, 20156, 18936, 18973, 19008, 19028, 21874, 19048, 19153, 19087, 19107, 19141, 19157, 19091,
  /* 18255 */ 19173, 19177, 19199, 19218, 20287, 19249, 19274, 23753, 19299, 19315, 19337, 25342, 19309, 19331, 19353,
  /* 18270 */ 19177, 19233, 19414, 27051, 20177, 19438, 19490, 19459, 19485, 19506, 19522, 19935, 35148, 21045, 19545,
  /* 18285 */ 19568, 19552, 19575, 19591, 19636, 19652, 19668, 19684, 19678, 19700, 19716, 19732, 19783, 19824, 19368,
  /* 18300 */ 19383, 18668, 19859, 19177, 19797, 19177, 19884, 24163, 19920, 19973, 18875, 19988, 20019, 20035, 21132,
  /* 18315 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18330 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18345 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18360 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18375 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18390 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18405 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132,
  /* 18420 */ 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 21132, 0, 2, 3, 94212, 5, 6,
  /* 18438 */ 0, 0, 0, 0, 0, 0, 73959, 73959, 73959, 73959, 0, 0, 78058, 78058, 73959, 73959, 78058, 78058, 78058,
  /* 18457 */ 78058, 78058, 78058, 78058, 78058, 78058, 78058, 0, 0, 2, 2, 3, 94212, 78058, 78058, 78058, 78058, 40960,
  /* 18475 */ 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058, 78058,
  /* 18490 */ 78058, 45056, 49152, 78058, 78058, 78058, 78058, 0, 0, 73959, 78058, 73959, 78058, 78058, 78058, 78058,
  /* 18506 */ 78058, 78058, 78058, 78058, 78058, 78058, 282, 78058, 78058, 78058, 78058, 78058, 5, 6, 0, 0, 0, 0, 73959,
  /* 18525 */ 0, 0, 78058, 0, 1056768, 237, 238, 0, 0, 0, 0, 0, 0, 950272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 282,
  /* 18551 */ 511, 0, 0, 0, 0, 0, 0, 0, 1388544, 0, 0, 1421312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 204800, 0, 0, 0, 0,
  /* 18579 */ 0, 0, 0, 0, 1630208, 0, 0, 0, 0, 0, 0, 0, 1757184, 0, 0, 0, 0, 0, 0, 809, 0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18609 */ 1544, 0, 0, 0, 0, 0, 0, 0, 0, 1820, 0, 0, 0, 0, 0, 0, 0, 0, 1833, 0, 0, 0, 0, 0, 1838, 352, 0, 0, 0,
  /* 18638 */ 1396736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1837, 0, 1839, 1699840, 1110016, 1732608, 1110016,
  /* 18659 */ 1769472, 1110016, 1110016, 1110016, 1908736, 1110016, 1110016, 1110016, 0, 1114112, 1114112, 1114112,
  /* 18671 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1933312, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0,
  /* 18684 */ 0, 0, 0, 1114112, 1376256, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1613824, 1114112,
  /* 18697 */ 1622016, 1114112, 1114112, 1662976, 1114112, 1683456, 1699840, 1114112, 1114112, 1114112, 1732608,
  /* 18708 */ 1114112, 1114112, 1769472, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1769472, 1114112,
  /* 18719 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1908736, 1114112,
  /* 18730 */ 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18743 */ 1114112, 1114112, 1757184, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18754 */ 1114112, 1114112, 0, 0, 253952, 266240, 1114112, 0, 1769472, 1114112, 1114112, 1114112, 1630208, 0, 0, 0,
  /* 18770 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1321, 0, 0, 0, 0, 0, 1064960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1589248, 0,
  /* 18798 */ 1691648, 0, 0, 0, 0, 1331200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1334, 0, 0, 0, 1376256, 1110016,
  /* 18822 */ 1110016, 1110016, 1110016, 1110016, 1110016, 1515520, 1110016, 1110016, 1548288, 1110016, 1589248,
  /* 18833 */ 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016,
  /* 18844 */ 1110016, 1110016, 1110016, 1110016, 1110016, 1552384, 1110016, 1110016, 1597440, 1110016, 1613824,
  /* 18855 */ 1110016, 1110016, 1662976, 1683456, 1110016, 1691648, 1712128, 1110016, 1110016, 1110016, 1110016,
  /* 18866 */ 1110016, 1110016, 1110016, 1110016, 1114112, 1114112, 1376256, 1114112, 1114112, 0, 0, 0, 0, 1114112,
  /* 18880 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 18891 */ 1114112, 1114112, 1589248, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1691648,
  /* 18902 */ 1703936, 1712128, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1712128,
  /* 18913 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1679360, 1114112, 1114112, 1114112, 1114112,
  /* 18924 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 245760, 0, 0, 1114112, 0, 0, 1667072, 0, 0,
  /* 18940 */ 1748992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1904640, 0, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 264,
  /* 18969 */ 0, 0, 0, 0, 0, 1966080, 0, 0, 0, 0, 0, 0, 0, 0, 1761280, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19000 */ 0, 2060, 369, 369, 369, 369, 369, 369, 1736704, 0, 0, 1748992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19025 */ 1923, 352, 352, 0, 1929216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110016, 1110016, 1110016,
  /* 19048 */ 1617920, 1110016, 1110016, 1761280, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016,
  /* 19059 */ 1110016, 1114112, 1114112, 1114112, 1114112, 1216, 0, 0, 1221, 0, 1114112, 1376256, 1114112, 1114112,
  /* 19073 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 716, 0, 0, 0, 1114112,
  /* 19087 */ 1114112, 1114112, 1617920, 1114112, 1114112, 1114112, 1667072, 1114112, 1114112, 1748992, 1761280,
  /* 19098 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1863680, 1875968, 1114112, 1114112,
  /* 19109 */ 1863680, 1875968, 1114112, 1114112, 1114112, 1900544, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19120 */ 1114112, 1114112, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19132 */ 1114112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073152, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1114112,
  /* 19153 */ 1425408, 1429504, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19164 */ 1531904, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1617920, 1114112, 1114112, 1114112,
  /* 19175 */ 1114112, 1900544, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19186 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1921024, 1114112, 1114112, 1114112,
  /* 19197 */ 1114112, 1114112, 1929216, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19208 */ 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 0, 1114112, 0, 0, 0, 0, 1437696, 0, 0, 0, 0, 0, 0, 0,
  /* 19229 */ 1536000, 0, 0, 0, 1773568, 1114112, 1114112, 1114112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1720320, 0, 1765376, 0,
  /* 19250 */ 1687552, 0, 0, 0, 0, 0, 0, 1892352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131005, 1131005, 1131005, 0, 0, 0, 0, 0,
  /* 19275 */ 0, 1474560, 1605632, 0, 1970176, 0, 0, 1511424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131006, 151552, 1131006, 0, 0,
  /* 19297 */ 151552, 0, 1110016, 1110016, 1884160, 1916928, 1937408, 1970176, 1114112, 1384448, 1114112, 1114112,
  /* 19309 */ 1114112, 1441792, 1114112, 1114112, 1474560, 1114112, 1114112, 1114112, 1114112, 1114112, 1536000,
  /* 19320 */ 1556480, 1114112, 1114112, 1114112, 1605632, 1114112, 1114112, 1114112, 1114112, 1114112, 1773568,
  /* 19331 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1773568, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19342 */ 1114112, 1114112, 1884160, 1114112, 1916928, 1114112, 1937408, 1114112, 1114112, 1970176, 1114112,
  /* 19353 */ 1114112, 1937408, 1114112, 1114112, 1970176, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19364 */ 1114112, 1114112, 1114112, 1437696, 1114112, 0, 0, 0, 0, 0, 1740800, 0, 0, 0, 0, 0, 1708032, 0, 1990656,
  /* 19383 */ 1507328, 1114112, 1499136, 1507328, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19394 */ 1114112, 1933312, 1114112, 1499136, 1507328, 1114717, 1499741, 1507933, 1114717, 1114717, 1114717,
  /* 19405 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1933917, 1114773, 1499797, 1507989, 0, 0, 1835008, 0, 0,
  /* 19419 */ 1851392, 0, 1978368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0, 0, 0, 0, 0, 1110016, 1110016, 1835008, 1110016,
  /* 19442 */ 1880064, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19453 */ 1114112, 0, 0, 0, 192512, 1114112, 1880064, 1896448, 1114112, 1114112, 1114112, 1986560, 0, 0, 0, 0,
  /* 19469 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 2166784, 6,
  /* 19482 */ 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1560576, 1114112, 1114112, 1626112,
  /* 19495 */ 1114112, 1114112, 1720320, 1114112, 1114112, 1785856, 1114112, 1114112, 1835008, 1114112, 1114112,
  /* 19506 */ 1114112, 1114112, 1835008, 1114112, 1114112, 1880064, 1896448, 1114112, 1114112, 1114112, 1986560,
  /* 19517 */ 1114112, 1114112, 1114112, 1114112, 1851392, 1114112, 1114112, 1114112, 1114112, 1888256, 1114112,
  /* 19528 */ 1765376, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 716,
  /* 19541 */ 0, 0, 1114112, 0, 1110016, 1110016, 1490944, 1110016, 1110016, 1110016, 1110016, 1114112, 1114112,
  /* 19554 */ 1114112, 1114112, 1114112, 1449984, 1486848, 1490944, 1114112, 1114112, 1527808, 1114112, 1114112,
  /* 19565 */ 1114112, 1114112, 1114112, 1114112, 1527808, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19576 */ 1777664, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19587 */ 1871872, 1114112, 1114112, 1961984, 1458176, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19598 */ 1114112, 1114112, 1114112, 1114112, 1404928, 0, 0, 0, 0, 0, 0, 0, 1832, 0, 0, 0, 0, 0, 0, 0, 352, 1580,
  /* 19620 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1398, 369, 369, 369, 369, 0, 0, 1781760, 0, 0,
  /* 19641 */ 1593344, 1957888, 0, 1572864, 1544192, 1601536, 0, 0, 1814528, 0, 1925120, 0, 1363968, 1818624, 0, 0, 0,
  /* 19658 */ 0, 1634304, 0, 0, 0, 0, 0, 0, 1110016, 1433600, 1110016, 1110016, 1646592, 1110016, 1110016, 1368064,
  /* 19674 */ 1114112, 1114112, 1433600, 1114112, 1114112, 1114112, 1519616, 1114112, 1114112, 1593344, 1646592,
  /* 19685 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1949696, 1368064,
  /* 19696 */ 1114112, 1114112, 1433600, 1114112, 1949696, 1957888, 1114112, 1925120, 1544192, 1404928, 1114112,
  /* 19707 */ 1114112, 1114112, 1114112, 1781760, 1114112, 1363968, 1572864, 0, 1445888, 0, 0, 0, 1724416, 0, 1847296,
  /* 19722 */ 0, 0, 1941504, 0, 0, 0, 0, 0, 0, 1794048, 0, 1392640, 0, 1392640, 1445888, 1110016, 1650688, 1847296,
  /* 19740 */ 1114112, 1392640, 1400832, 1445888, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19751 */ 1114112, 1114112, 1114112, 1388544, 1396736, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 0, 90112,
  /* 19765 */ 1114112, 1376256, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19776 */ 1114112, 1114112, 245760, 0, 0, 0, 1114112, 1581056, 1650688, 1724416, 1806336, 1114112, 1847296, 1114112,
  /* 19790 */ 1114112, 1114112, 1941504, 1114112, 1392640, 1400832, 1445888, 1114112, 1114112, 0, 1454080, 0, 0, 0, 0,
  /* 19805 */ 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19818 */ 1114112, 0, 717, 0, 0, 1114112, 1114112, 1114112, 1581056, 1650688, 1724416, 1806336, 1114112, 1847296,
  /* 19832 */ 1114112, 1114112, 1114112, 1941504, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 19843 */ 1114112, 1114112, 1114112, 1552384, 1114112, 1114112, 1114112, 1114112, 1597440, 1114112, 1613824,
  /* 19854 */ 1114112, 1622016, 1114112, 1114112, 1662976, 0, 0, 0, 1744896, 0, 0, 0, 0, 0, 1114112, 1114112, 1114112,
  /* 19871 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 237568, 0, 0, 1114112, 0, 1454080,
  /* 19885 */ 1114112, 1114112, 0, 0, 0, 0, 0, 0, 0, 0, 1114112, 1114112, 1523712, 1114112, 1114112, 659, 0, 0, 662,
  /* 19904 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 0, 0, 0,
  /* 19918 */ 1114112, 958464, 1114112, 1114112, 1413120, 0, 1478656, 1859584, 0, 0, 0, 0, 1114112, 1114112, 1540096,
  /* 19933 */ 1114112, 1728512, 1114112, 0, 0, 0, 0, 1458176, 0, 0, 1490944, 1527808, 0, 0, 0, 0, 0, 0, 0, 0, 36864, 0,
  /* 19955 */ 0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114112, 1114112, 1859584, 1114112, 1114112,
  /* 19978 */ 1540096, 1114112, 1728512, 1114112, 1114112, 1114112, 1859584, 1413120, 1114112, 1478656, 1470464, 0, 0,
  /* 19991 */ 0, 0, 1372160, 1114112, 1114112, 1114112, 1114112, 1855488, 1372160, 1114112, 1114112, 1114112, 1114112,
  /* 20004 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1515520, 1114112, 1114112, 1114112, 1114112, 1548288,
  /* 20015 */ 1114112, 1114112, 1114112, 1589248, 1855488, 1482752, 0, 0, 1789952, 1114112, 1585152, 1810432, 1114112,
  /* 20028 */ 1114112, 1585152, 1810432, 1114112, 1568768, 1609728, 1503232, 1114112, 1503232, 1114112, 1114112,
  /* 20039 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1822720, 1822720, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
  /* 20060 */ 0, 0, 0, 812, 0, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 238, 0, 0, 0, 0,
  /* 20092 */ 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1359, 0, 0, 0, 111019, 111019, 111019, 111019, 111019,
  /* 20116 */ 111019, 111019, 111019, 111019, 111019, 111019, 111019, 111019, 111019, 111019, 427, 427, 111019, 111019,
  /* 20130 */ 111019, 111019, 427, 111019, 111019, 111019, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20153 */ 1056768, 237, 238, 0, 0, 0, 0, 0, 0, 1425408, 0, 0, 0, 0, 0, 0, 0, 0, 1531904, 0, 0, 560, 0, 0, 0, 0, 0,
  /* 20180 */ 0, 0, 0, 0, 0, 0, 0, 1110016, 1110016, 1110016, 1110016, 1110016, 1560576, 118784, 0, 0, 237, 118784, 0,
  /* 20199 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1534, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 0,
  /* 20231 */ 0, 0, 0, 0, 0, 0, 0, 119109, 49152, 0, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
  /* 20254 */ 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0,
  /* 20279 */ 0, 0, 0, 0, 0, 1056768, 20945, 238, 0, 0, 0, 0, 0, 0, 1884160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 829, 0, 0, 0,
  /* 20308 */ 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1547, 0, 0, 0, 237, 0, 0, 0, 1388544, 0, 0,
  /* 20338 */ 1421312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 2, 1134815, 94212, 5, 6, 227, 0, 0, 0, 0, 0,
  /* 20367 */ 227, 0, 0, 0, 0, 0, 0, 825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 122880, 122880, 0,
  /* 20394 */ 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 122880,
  /* 20408 */ 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 1910, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1727, 352, 352, 352,
  /* 20438 */ 352, 1732, 352, 0, 0, 122880, 0, 122880, 0, 0, 122880, 122880, 122880, 0, 0, 2, 2, 1134815, 94212, 0, 759,
  /* 20459 */ 763, 0, 1388544, 0, 0, 1421312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 369, 369, 369, 2064, 369, 2066, 0, 131072,
  /* 20483 */ 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072,
  /* 20496 */ 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 2,
  /* 20511 */ 2, 3, 94212, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 241, 0, 135168, 0, 0, 40960,
  /* 20537 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1561, 0, 0, 1564, 135168, 135168, 135168, 135168, 135168, 135168,
  /* 20559 */ 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 2, 2, 3, 94212, 0,
  /* 20576 */ 0, 0, 0, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1572, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056768,
  /* 20608 */ 466, 467, 0, 0, 0, 0, 0, 246, 247, 248, 249, 250, 251, 0, 0, 0, 0, 0, 0, 0, 783, 784, 0, 0, 0, 0, 0, 0, 0,
  /* 20637 */ 0, 1330, 0, 0, 0, 0, 1335, 0, 1336, 1114112, 1114112, 949, 0, 0, 952, 1114112, 1114112, 1114112, 1114112,
  /* 20656 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 2, 0, 176128, 294912, 0, 139264, 0, 0, 238,
  /* 20672 */ 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 391, 391, 391, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0,
  /* 20701 */ 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 139593, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 0,
  /* 20726 */ 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056768, 237, 20948, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0,
  /* 20755 */ 0, 0, 0, 0, 0, 0, 282, 0, 122880, 122880, 0, 0, 0, 0, 0, 238, 1388544, 0, 0, 1421312, 0, 0, 0, 0, 0, 0, 0,
  /* 20782 */ 0, 0, 369, 369, 2062, 369, 369, 369, 369, 0, 0, 235, 235, 0, 0, 235, 235, 143595, 235, 235, 235, 235, 235,
  /* 20805 */ 235, 235, 235, 235, 235, 143595, 235, 235, 235, 235, 235, 235, 235, 287, 235, 235, 235, 235, 235, 235,
  /* 20825 */ 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 143595, 45056, 49152, 235, 235, 235, 235, 40960, 235,
  /* 20844 */ 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 283, 235, 143595, 235, 235, 235, 235, 143595, 143595,
  /* 20863 */ 143595, 0, 0, 0, 235, 0, 235, 235, 235, 143595, 143595, 235, 143595, 143595, 143595, 143595, 143647,
  /* 20880 */ 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647,
  /* 20893 */ 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 143647, 0, 0, 2,
  /* 20908 */ 2, 3, 94212, 155648, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20937 */ 155648, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0,
  /* 20964 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1715, 0, 0, 0, 155648, 155648, 0, 155648, 155648, 155648, 155648, 155648,
  /* 20985 */ 155648, 155648, 0, 0, 2, 2, 0, 94212, 5, 6, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 1056768, 237, 238, 0, 0, 0, 0,
  /* 21011 */ 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 159744, 0, 0, 0, 0, 0, 90502, 0, 0, 0, 0, 159744,
  /* 21039 */ 0, 0, 0, 0, 0, 1340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1798144, 0, 0, 0, 1110016, 0, 0, 90502, 90502,
  /* 21065 */ 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502,
  /* 21080 */ 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 90502, 0, 0, 2, 2, 3, 94212, 0, 0, 0, 0, 163840,
  /* 21100 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 21113 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 2,
  /* 21128 */ 2, 3, 94212, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 279, 0, 0, 0, 167936, 0, 167936, 167936,
  /* 21156 */ 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 507, 508, 282, 282, 282, 0, 0, 0, 0, 167936, 0, 0, 0,
  /* 21180 */ 40960, 167936, 0, 167936, 0, 167936, 167936, 0, 167936, 0, 0, 0, 0, 0, 0, 858, 0, 0, 0, 0, 0, 0, 352, 352,
  /* 21204 */ 352, 352, 1383, 352, 352, 352, 352, 352, 352, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21230 */ 1981, 0, 0, 0, 167936, 167936, 0, 167936, 167936, 0, 167936, 167936, 167936, 167936, 0, 167936, 167936,
  /* 21247 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 2, 2, 3, 94212, 0, 2, 3, 224, 5, 6,
  /* 21267 */ 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 2061, 369, 369, 369, 2065, 369, 0, 0, 0, 0, 172032, 172032,
  /* 21291 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21304 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 53467, 53467, 2,
  /* 21318 */ 2, 3, 0, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 667648, 0, 0, 0, 0, 5, 6, 0, 462, 0, 0, 0, 0,
  /* 21350 */ 0, 0, 0, 1056768, 237, 238, 0, 0, 0, 0, 0, 278, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 1568, 0, 0, 0, 0, 0,
  /* 21380 */ 0, 0, 0, 0, 861, 862, 0, 0, 352, 352, 352, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 851, 369, 369,
  /* 21409 */ 659, 0, 0, 662, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1786, 391, 391, 391, 0, 0,
  /* 21431 */ 1064960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1913, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
  /* 21461 */ 0, 0, 0, 0, 0, 0, 1069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1570, 1571, 0, 0, 1574, 0, 0, 0, 0, 0, 1314, 0, 0,
  /* 21491 */ 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 1976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21522 */ 1377, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 892, 893, 369, 896, 0, 0, 0, 1220,
  /* 21545 */ 0, 0, 0, 0, 391, 391, 391, 391, 391, 391, 391, 391, 0, 1310, 0, 0, 0, 0, 0, 1312, 391, 391, 391, 391,
  /* 21569 */ 1782, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1782, 0, 0, 0, 0, 1829, 0, 0, 0, 0, 1834, 0, 0, 0,
  /* 21594 */ 0, 0, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 1741, 369, 1743, 369, 369, 1746, 352, 352, 352,
  /* 21615 */ 352, 352, 1929, 369, 369, 369, 369, 369, 369, 1935, 369, 369, 369, 369, 369, 1432, 369, 369, 1434, 369,
  /* 21635 */ 369, 369, 369, 369, 369, 0, 0, 0, 0, 1761, 391, 391, 391, 391, 391, 391, 391, 1953, 391, 391, 391, 391,
  /* 21657 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1963, 391, 1991, 369, 1992, 1993, 369, 369, 369, 369,
  /* 21677 */ 369, 369, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 391, 391, 2003, 391, 2004, 2005,
  /* 21698 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1799, 391, 391, 391, 352, 369, 2027, 369, 369,
  /* 21719 */ 369, 369, 369, 369, 2033, 369, 369, 369, 391, 2037, 391, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21745 */ 526, 0, 528, 0, 369, 369, 369, 2070, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 21766 */ 1640, 391, 391, 369, 391, 391, 369, 391, 369, 391, 369, 391, 369, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811,
  /* 21791 */ 0, 0, 0, 897024, 0, 180542, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638,
  /* 21806 */ 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638, 180638,
  /* 21819 */ 180638, 180638, 180638, 180638, 53467, 53467, 2, 2, 3, 94212, 0, 0, 0, 188831, 188831, 188831, 188831,
  /* 21836 */ 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831,
  /* 21849 */ 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 188831, 0, 0, 2, 2, 3, 94212, 0, 0,
  /* 21866 */ 233472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110016, 1425408, 1429504, 1110016, 1110016, 1110016, 1110016,
  /* 21886 */ 1531904, 1110016, 1110016, 1110016, 0, 0, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0,
  /* 21910 */ 236, 0, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 0, 319, 319, 319, 319, 319, 319,
  /* 21936 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 53467,
  /* 21957 */ 53467, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 237, 238, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0,
  /* 21987 */ 0, 0, 0, 45056, 49152, 835, 0, 0, 0, 839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912, 0, 0, 0, 0, 835, 835,
  /* 22016 */ 0, 0, 0, 839, 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 523, 0, 0, 0, 0, 0, 529, 0, 0, 0, 1220, 1447, 0, 0, 0, 391,
  /* 22046 */ 391, 391, 391, 391, 391, 391, 391, 391, 684, 53467, 2, 6, 0, 0, 0, 1441, 1623, 0, 0, 0, 0, 1447, 1625, 0,
  /* 22070 */ 0, 0, 0, 391, 391, 391, 391, 391, 391, 1004, 391, 391, 391, 391, 0, 0, 1010, 391, 391, 0, 0, 0, 0, 40960,
  /* 22094 */ 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1532, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22127 */ 240, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 200704, 200704, 0, 200704, 200704, 200944, 200945, 200944, 200704,
  /* 22148 */ 200704, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 1056768, 237, 238, 0, 208896, 1699840,
  /* 22172 */ 1110016, 1732608, 1110016, 1769472, 1110016, 1110016, 1110016, 1908736, 1110016, 1110016, 1110016, 0,
  /* 22184 */ 1114717, 1114717, 1114717, 659, 0, 0, 662, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22198 */ 1114773, 1114773, 1114773, 1389205, 1397397, 1114773, 1114773, 1114773, 1114773, 1770077, 1114717,
  /* 22209 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1909341, 1114717,
  /* 22220 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1884765, 1114717, 1917533, 1114717, 1938013,
  /* 22231 */ 1114717, 1114717, 1970781, 1114717, 1114773, 1684117, 1700501, 1114773, 1114773, 1114773, 1733269,
  /* 22242 */ 1114773, 1114773, 1770133, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1692309,
  /* 22253 */ 1704597, 1712789, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1516181, 1114773, 1114773,
  /* 22264 */ 1114773, 1114773, 1548949, 1114773, 1114773, 1114773, 1589909, 1770133, 1114773, 1114773, 1114773,
  /* 22275 */ 1630869, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 1110016, 1691648, 1712128, 1110016,
  /* 22296 */ 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1114112, 1114717, 1376861, 1114717,
  /* 22307 */ 1114717, 1860189, 1114773, 1114773, 1540757, 1114773, 1729173, 1114773, 1114773, 1114773, 1860245,
  /* 22318 */ 1413781, 1114773, 1479317, 1470464, 1114773, 1114773, 1712789, 1114773, 1114773, 1114773, 1114773,
  /* 22329 */ 1114773, 1114773, 1680021, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1561237, 1114773,
  /* 22340 */ 1114773, 1626773, 1114773, 1114773, 1720981, 1114773, 1114773, 1786517, 1617920, 1110016, 1110016,
  /* 22351 */ 1761280, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1110016, 1114717, 1114717,
  /* 22362 */ 1114717, 1114717, 1114717, 1114773, 1114773, 1524373, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22373 */ 1114773, 1114773, 1114773, 1532565, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1618581,
  /* 22384 */ 1114773, 1426013, 1430109, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717,
  /* 22395 */ 1114717, 1532509, 1114717, 1114717, 1114717, 1114717, 1536605, 1557085, 1114717, 1114717, 1114717,
  /* 22406 */ 1606237, 1114717, 1114717, 1114717, 1114717, 1114717, 1774173, 0, 0, 0, 1073152, 0, 0, 0, 0, 1114773,
  /* 22422 */ 1114773, 1114773, 1114773, 1426069, 1430165, 1114773, 1114773, 0, 1454080, 0, 0, 0, 0, 0, 0, 0, 1114717,
  /* 22439 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22450 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1667733, 1114773,
  /* 22461 */ 1114773, 1749653, 1761941, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1864341,
  /* 22472 */ 1876629, 1114773, 1114773, 1114773, 1901205, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22483 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1929877,
  /* 22494 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22505 */ 1114773, 0, 0, 0, 0, 1114773, 0, 1110016, 1110016, 1884160, 1916928, 1937408, 1970176, 1114717, 1385053,
  /* 22520 */ 1114717, 1114717, 1114717, 1442397, 1114717, 1114717, 1475165, 1114717, 1503893, 1114773, 1114717,
  /* 22531 */ 1114773, 1114717, 1114773, 1114717, 1114773, 1823325, 1823381, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
  /* 22552 */ 0, 0, 0, 1698, 0, 0, 0, 0, 0, 0, 1114773, 1442453, 1114773, 1114773, 1475221, 1114773, 1114773, 1114773,
  /* 22570 */ 1114773, 1114773, 1536661, 1557141, 1114773, 1114773, 1114773, 1606293, 1114773, 1938069, 1114773,
  /* 22581 */ 1114773, 1970837, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22592 */ 1438357, 1114773, 0, 0, 0, 0, 0, 1740800, 0, 0, 0, 0, 0, 1708032, 0, 1990656, 1507328, 1774229, 1114773,
  /* 22611 */ 1114773, 1114773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1720320, 0, 1765376, 1110016, 1110016, 1835008, 1110016,
  /* 22629 */ 1880064, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717,
  /* 22640 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1921629, 1114717, 1114717, 1880669, 1897053,
  /* 22651 */ 1114717, 1114717, 1114717, 1987165, 0, 0, 0, 0, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22665 */ 1774229, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1884821, 1114773, 1917589,
  /* 22676 */ 1114773, 1114773, 1835669, 1114773, 1114773, 1880725, 1897109, 1114773, 1114773, 1114773, 1987221,
  /* 22687 */ 1114773, 1114773, 1114773, 1114773, 1852053, 1110016, 1110016, 1490944, 1110016, 1110016, 1110016,
  /* 22698 */ 1110016, 1114717, 1114717, 1114717, 1114717, 1114717, 1450589, 1487453, 1491549, 1114717, 1528413,
  /* 22709 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1778269, 1114717, 1114717, 1114717, 1114717,
  /* 22720 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1552989, 1114717, 1114717, 1114717, 1114717,
  /* 22731 */ 1598045, 1114773, 1778325, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22742 */ 1114773, 1114773, 1872533, 1114773, 1114773, 1962645, 1458837, 1114773, 1114773, 1114773, 1114773,
  /* 22753 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1404928, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 0, 0,
  /* 22773 */ 0, 45056, 49152, 1110016, 1110016, 1646592, 1110016, 1110016, 1368669, 1114717, 1114717, 1434205, 1114717,
  /* 22786 */ 1114717, 1114717, 1520221, 1114717, 1114717, 1593949, 1647197, 1114717, 1114717, 1114717, 1114717,
  /* 22797 */ 1114717, 1114717, 1114717, 1114717, 1114717, 1950301, 1368725, 1114773, 1114773, 1434261, 1114773, 0, 0,
  /* 22810 */ 0, 0, 1458176, 0, 0, 1490944, 1527808, 0, 0, 0, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22836 */ 1114773, 1114773, 1520277, 1114773, 1114773, 1594005, 1647253, 1114773, 1114773, 1114773, 1114773,
  /* 22847 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1933973, 1114773, 1114773, 1114773, 1114773, 1114773, 0, 0,
  /* 22860 */ 1950357, 1958549, 1114773, 1925781, 1544853, 1405589, 1114773, 1114773, 1114773, 1114773, 1782421,
  /* 22871 */ 1114773, 1364629, 1573525, 0, 1445888, 0, 1392640, 0, 1392640, 1445888, 1110016, 1650688, 1847296,
  /* 22884 */ 1114717, 1393245, 1401437, 1446493, 1114717, 1114717, 1114717, 1114717, 1561181, 1114717, 1114717,
  /* 22895 */ 1626717, 1114717, 1114717, 1720925, 1114717, 1114717, 1786461, 1114717, 1114717, 1835613, 1114717,
  /* 22906 */ 1114717, 1864285, 1876573, 1114717, 1114717, 1114717, 1901149, 1114717, 1114717, 1114717, 1114717,
  /* 22917 */ 1114717, 1114717, 1114717, 0, 0, 0, 0, 0, 1114773, 1376917, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22932 */ 1450645, 1487509, 1491605, 1114773, 1114773, 1528469, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22943 */ 1757845, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773,
  /* 22954 */ 1921685, 1114773, 1114773, 1114773, 1114773, 1114773, 1581661, 1651293, 1725021, 1806941, 1114717,
  /* 22965 */ 1847901, 1114717, 1114717, 1114717, 1942109, 1114773, 1393301, 1401493, 1446549, 1114773, 1114773,
  /* 22976 */ 1114773, 1553045, 1114773, 1114773, 1114773, 1114773, 1598101, 1114773, 1614485, 1114773, 1622677,
  /* 22987 */ 1114773, 1114773, 1663637, 1114773, 1114773, 1581717, 1651349, 1725077, 1806997, 1114773, 1847957,
  /* 22998 */ 1114773, 1114773, 1114773, 1942165, 1114773, 1114773, 1114773, 1114773, 1888917, 1114773, 1766037,
  /* 23009 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23026 */ 0, 770, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744896, 0, 0, 0, 0, 0, 1114717, 1114717, 1114717, 1114717, 1114717,
  /* 23048 */ 1114717, 1114717, 1114717, 1114717, 1516125, 1114717, 1114717, 1114717, 1114717, 1548893, 1114717,
  /* 23059 */ 1454741, 1114773, 1114773, 0, 0, 0, 0, 0, 0, 0, 0, 1114717, 1114717, 1524317, 1114717, 1114717, 1614429,
  /* 23076 */ 1114717, 1622621, 1114717, 1114717, 1663581, 1114717, 1684061, 1700445, 1114717, 1114717, 1114717,
  /* 23087 */ 1733213, 1114717, 1114717, 1589853, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717, 1114717,
  /* 23098 */ 1692253, 1704541, 1712733, 1114717, 1114717, 1114717, 1618525, 1114717, 1114717, 1114717, 1667677,
  /* 23109 */ 1114717, 1114717, 1749597, 1761885, 1114717, 1114717, 1114717, 1114717, 1114717, 660, 1114773, 1114773,
  /* 23121 */ 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 0, 2, 6, 0, 0, 0, 1114773,
  /* 23136 */ 1114773, 1413120, 0, 1478656, 1859584, 0, 0, 0, 0, 1114717, 1114717, 1540701, 1114717, 1729117, 1114717,
  /* 23151 */ 1471125, 0, 0, 0, 0, 1372765, 1114717, 1114717, 1114717, 1114717, 1856093, 1372821, 1114773, 1114773,
  /* 23165 */ 1114773, 1114773, 1909397, 1114773, 1114773, 1114773, 1114773, 1114773, 1114773, 0, 0, 1114773, 1114773,
  /* 23178 */ 1114773, 1856149, 1482752, 0, 0, 1789952, 1114717, 1585757, 1811037, 1114717, 1114773, 1585813, 1811093,
  /* 23191 */ 1114773, 1568768, 1609728, 1503837, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 0, 0, 217088, 0,
  /* 23214 */ 0, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088,
  /* 23228 */ 217088, 217088, 217088, 217088, 217088, 0, 0, 2, 2, 3, 94212, 0, 0, 1064960, 0, 0, 0, 57344, 0, 0, 0,
  /* 23249 */ 28672, 0, 0, 1589248, 0, 1691648, 0, 0, 238, 0, 0, 0, 1425408, 0, 0, 0, 0, 0, 0, 0, 0, 1531904, 0,
  /* 23272 */ 1929216, 57344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250285, 0, 1929216, 1114112, 1114112, 1114112,
  /* 23294 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 237, 0, 238, 238, 238,
  /* 23308 */ 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 659, 0, 0, 0, 659, 0, 662, 0, 0, 0, 662,
  /* 23332 */ 0, 1114112, 1384448, 1114112, 1114112, 659, 0, 90112, 662, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 23346 */ 1114112, 1114112, 1114112, 1114112, 1114112, 0, 2, 6, 0, 0, 0, 1880064, 1896448, 1114112, 1114112,
  /* 23361 */ 1114112, 1986560, 659, 0, 662, 0, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 23375 */ 1114112, 1114112, 114688, 241664, 0, 262144, 1114112, 0, 0, 0, 0, 0, 221523, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23398 */ 0, 0, 131072, 0, 45056, 49152, 0, 221596, 221596, 221596, 221596, 221596, 221596, 221596, 221596, 221596,
  /* 23414 */ 221596, 221596, 221596, 221596, 221612, 221596, 221612, 221612, 221612, 221612, 221612, 221612, 221612,
  /* 23427 */ 221612, 221612, 221612, 221612, 221612, 221612, 221612, 221612, 221612, 0, 0, 2, 2, 3, 94212, 0, 2, 3,
  /* 23445 */ 94212, 5, 6, 0, 0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 469, 250285,
  /* 23473 */ 250285, 250285, 250285, 250285, 250285, 250285, 250285, 250285, 250285, 250285, 250285, 250285, 250285,
  /* 23486 */ 250285, 249856, 250285, 250285, 250285, 250285, 249856, 250285, 250285, 250285, 0, 0, 2, 2, 3, 94212,
  /* 23502 */ 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0,
  /* 23532 */ 0, 258048, 0, 0, 0, 0, 0, 1364, 0, 0, 0, 0, 0, 0, 1371, 0, 0, 0, 0, 0, 0, 1711, 0, 0, 0, 1714, 0, 0, 0, 0,
  /* 23562 */ 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 828, 0, 0, 0, 0, 0, 0, 258478, 258478, 258478, 258478, 258478,
  /* 23587 */ 258478, 258478, 258478, 258478, 258478, 258478, 258478, 258478, 258478, 258478, 258478, 0, 0, 2, 2, 3,
  /* 23603 */ 94212, 0, 6, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 1056768, 237, 238, 196608, 0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
  /* 23629 */ 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 1147105, 6, 0, 0, 0, 0, 229, 0, 0, 0, 0, 229, 0, 0,
  /* 23659 */ 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 270336, 270336, 270336, 270336,
  /* 23683 */ 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336,
  /* 23696 */ 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 0, 0, 2, 2, 3, 94212, 1147105, 6,
  /* 23713 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056768, 237, 238, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0,
  /* 23742 */ 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110016, 1110016, 1110016, 1474560, 1110016, 1110016,
  /* 23762 */ 1536000, 1110016, 1605632, 1110016, 1110016, 1773568, 1110016, 0, 0, 278528, 278528, 278528, 278528,
  /* 23775 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
  /* 23788 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 0, 0, 2, 2, 3, 94212, 53467, 2, 3,
  /* 23806 */ 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23838 */ 352, 352, 352, 352, 352, 352, 352, 352, 1386, 352, 352, 369, 369, 659, 91063, 892, 662, 391, 391, 391,
  /* 23858 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 2010, 391, 2012, 391, 0, 1623, 0, 0, 0, 0, 0, 1625, 0, 0, 0,
  /* 23882 */ 0, 391, 391, 391, 391, 391, 391, 1034, 391, 391, 391, 391, 391, 391, 391, 391, 391, 677, 391, 391, 391,
  /* 23903 */ 391, 391, 391, 0, 0, 0, 1828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 369, 369, 369,
  /* 23929 */ 1739, 369, 369, 369, 369, 369, 369, 369, 922, 369, 369, 369, 369, 369, 369, 369, 369, 1423, 369, 369, 369,
  /* 23950 */ 369, 369, 369, 369, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131006, 0, 0, 0, 0, 1123, 0, 0,
  /* 23979 */ 0, 0, 0, 1367, 0, 0, 0, 0, 0, 0, 0, 0, 253, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0,
  /* 24010 */ 342, 0, 352, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 1595, 369, 369, 0, 853, 0, 0, 0,
  /* 24033 */ 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 369, 389, 389, 389, 369, 392,
  /* 24057 */ 389, 389, 389, 389, 389, 389, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
  /* 24078 */ 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 53467, 53467, 2, 2, 3, 94212, 53468, 2, 3, 94212,
  /* 24099 */ 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1911, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720,
  /* 24123 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 24136 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 2, 2, 3, 94212, 1114112, 1114112,
  /* 24152 */ 1114112, 1114112, 1908736, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 303104, 1114112,
  /* 24164 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1523712, 1114112, 1114112, 1114112, 1114112,
  /* 24175 */ 1114112, 1114112, 1114112, 1114112, 237, 0, 0, 0, 237, 0, 238, 0, 0, 1363968, 1818624, 229376, 0, 0, 0,
  /* 24194 */ 1634304, 0, 0, 0, 0, 0, 0, 1110016, 1433600, 0, 221, 3, 94212, 5, 226, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0,
  /* 24220 */ 0, 0, 290816, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1115, 0, 1117, 0, 0, 0, 0, 232,
  /* 24249 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 0, 290816, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24281 */ 0, 167936, 0, 167936, 0, 290816, 290816, 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0,
  /* 24298 */ 221, 221, 3, 94212, 5, 2200013, 0, 0, 0, 463, 0, 0, 0, 0, 0, 1056768, 237, 238, 0, 0, 0, 0, 0, 489, 490,
  /* 24323 */ 0, 492, 0, 0, 0, 0, 497, 0, 0, 0, 0, 0, 505, 0, 0, 0, 282, 282, 282, 0, 512, 0, 0, 0, 0, 0, 535, 0, 0, 0,
  /* 24353 */ 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 222, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1921, 0,
  /* 24385 */ 0, 352, 352, 0, 233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 271, 272, 0, 413, 413, 413, 413, 413, 413,
  /* 24413 */ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 0, 0,
  /* 24435 */ 2167244, 222, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 464, 0, 0, 0, 1056768, 237, 238, 0, 0, 0, 0, 0, 549, 0, 0, 0,
  /* 24462 */ 0, 0, 0, 0, 0, 0, 0, 0, 1370, 0, 1372, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
  /* 24493 */ 242, 242, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258478, 0, 314, 242, 0, 0, 0, 0, 0, 242, 320,
  /* 24521 */ 322, 291, 0, 291, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 242, 0, 350, 353, 353, 353, 353, 370,
  /* 24546 */ 370, 370, 370, 370, 393, 370, 370, 370, 370, 370, 370, 370, 370, 393, 393, 393, 393, 393, 393, 393, 393,
  /* 24567 */ 420, 420, 420, 420, 420, 433, 433, 420, 433, 433, 433, 456, 433, 433, 433, 53467, 53467, 2, 2, 3, 94212,
  /* 24588 */ 420, 420, 420, 420, 420, 420, 420, 420, 441, 420, 420, 420, 420, 420, 420, 433, 0, 0, 470, 0, 0, 473, 474,
  /* 24611 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1319, 0, 0, 0, 1323, 0, 514, 0, 0, 0, 0, 0, 0, 0, 522, 0, 0, 0, 0, 0, 0, 0,
  /* 24643 */ 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0, 45056, 49152, 352, 576,
  /* 24672 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 599, 352, 352, 352, 352, 352, 352, 369, 369, 369, 1592,
  /* 24693 */ 1593, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 391, 391, 680, 391, 391, 391, 369, 369, 610, 369,
  /* 24714 */ 369, 369, 369, 369, 369, 635, 637, 369, 642, 369, 645, 369, 369, 369, 369, 1406, 369, 369, 369, 1410, 369,
  /* 24735 */ 1412, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 391, 677, 391, 391, 391, 391, 369, 656, 369, 369,
  /* 24756 */ 369, 0, 391, 391, 391, 667, 391, 391, 391, 391, 391, 391, 391, 755, 673, 391, 219, 2, 6, 0, 0, 0, 692,
  /* 24779 */ 694, 391, 699, 391, 702, 391, 391, 713, 391, 391, 0, 0, 0, 0, 667, 391, 391, 391, 692, 391, 702, 702, 391,
  /* 24802 */ 391, 391, 726, 391, 743, 702, 391, 667, 391, 391, 749, 667, 391, 391, 391, 391, 391, 391, 53467, 2, 6, 0,
  /* 24824 */ 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 760, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24856 */ 622592, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 240, 241, 0, 352, 1389, 352, 352,
  /* 24883 */ 352, 352, 352, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1403,
  /* 24904 */ 369, 1405, 369, 369, 1408, 369, 369, 369, 369, 369, 369, 369, 369, 369, 911, 369, 369, 369, 369, 369, 369,
  /* 24925 */ 0, 0, 0, 1220, 0, 0, 0, 0, 391, 391, 391, 391, 391, 1457, 391, 1459, 391, 391, 1462, 391, 391, 391, 391,
  /* 24948 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1970, 0, 1474, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 24969 */ 391, 391, 391, 391, 391, 391, 391, 391, 965, 391, 391, 391, 1502, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 24990 */ 391, 391, 391, 391, 391, 1662, 391, 391, 0, 0, 1526, 0, 0, 0, 0, 0, 1531, 0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
  /* 25017 */ 0, 0, 0, 0, 0, 0, 0, 843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1373, 0, 391, 391, 391, 1658, 391, 391, 391, 391,
  /* 25045 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 1675, 391, 391, 391, 391, 1664, 391, 391, 391, 391, 391, 391,
  /* 25066 */ 391, 391, 391, 1674, 391, 391, 1677, 1803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1813, 0, 0, 0, 0, 0,
  /* 25093 */ 1542, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 106496, 2053, 0, 0, 0, 0, 2056, 0, 0, 2059, 369,
  /* 25120 */ 369, 369, 369, 369, 369, 369, 627, 369, 369, 369, 369, 369, 369, 369, 369, 1177, 369, 369, 369, 369, 369,
  /* 25141 */ 369, 369, 391, 391, 2114, 0, 0, 0, 0, 2119, 0, 0, 2122, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391,
  /* 25164 */ 391, 391, 391, 391, 685, 391, 0, 0, 243, 244, 245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 606208, 0, 0, 0, 0,
  /* 25192 */ 0, 331, 0, 40960, 0, 331, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 1384, 352, 352, 352, 352, 352, 421,
  /* 25216 */ 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 434, 434, 451, 434, 434, 434, 434,
  /* 25237 */ 434, 434, 434, 53467, 53467, 2, 2, 3, 94212, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 0,
  /* 25264 */ 1623, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 391, 391, 391, 1629, 1630, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 25288 */ 391, 391, 391, 391, 391, 391, 391, 1473, 369, 2098, 369, 2100, 369, 391, 391, 391, 391, 2106, 391, 2108,
  /* 25308 */ 391, 2110, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 2149, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 670,
  /* 25332 */ 391, 391, 681, 391, 690, 0, 0, 0, 246, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114112, 1384448, 1114112,
  /* 25357 */ 1114112, 0, 250, 332, 333, 40960, 333, 332, 340, 333, 340, 340, 0, 340, 354, 354, 354, 354, 371, 371, 371,
  /* 25378 */ 371, 371, 394, 371, 371, 371, 371, 371, 371, 371, 371, 394, 394, 394, 416, 416, 416, 416, 416, 422, 422,
  /* 25399 */ 422, 426, 422, 426, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 448, 422, 422, 422, 452,
  /* 25420 */ 422, 422, 422, 422, 422, 422, 422, 53467, 53467, 2, 2, 3, 94212, 0, 501, 0, 0, 0, 0, 0, 0, 0, 282, 282,
  /* 25444 */ 282, 0, 0, 0, 0, 0, 0, 0, 970752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 808,
  /* 25474 */ 775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 854, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25506 */ 863, 0, 352, 866, 352, 352, 352, 352, 352, 369, 369, 1738, 369, 369, 369, 369, 369, 369, 369, 369, 1995,
  /* 25527 */ 369, 369, 369, 391, 391, 391, 391, 1999, 391, 369, 369, 659, 91063, 892, 662, 954, 391, 957, 391, 391,
  /* 25547 */ 391, 391, 964, 391, 968, 391, 391, 391, 1032, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1044,
  /* 25568 */ 391, 391, 391, 974, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753664, 1812, 0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
  /* 25596 */ 0, 0, 0, 0, 0, 0, 0, 0, 326, 326, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 954800, 0, 369,
  /* 25626 */ 369, 369, 1185, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1609, 369, 369, 369,
  /* 25647 */ 1198, 1199, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 915, 369, 369, 1245, 391,
  /* 25667 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1258, 1259, 391, 391, 391, 391, 391, 391,
  /* 25688 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 1499, 391, 391, 1487, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 25709 */ 391, 391, 391, 391, 391, 391, 2051, 0, 1733, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 25730 */ 369, 369, 369, 369, 391, 391, 391, 391, 391, 391, 1881, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 25751 */ 391, 391, 391, 391, 391, 1512, 391, 391, 391, 391, 1896, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0,
  /* 25774 */ 1688, 0, 0, 0, 0, 0, 391, 391, 2084, 0, 2085, 0, 0, 0, 0, 0, 0, 369, 369, 369, 2095, 369, 369, 369, 369,
  /* 25799 */ 1420, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1413, 1414, 369, 369, 391, 2113, 391, 0,
  /* 25820 */ 0, 0, 0, 0, 0, 0, 0, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 391, 673, 391, 391, 391, 391, 0, 0,
  /* 25845 */ 0, 253, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 293, 0,
  /* 25873 */ 40960, 0, 293, 0, 0, 0, 0, 343, 351, 355, 355, 355, 355, 372, 372, 372, 372, 372, 395, 372, 372, 372, 372,
  /* 25896 */ 372, 372, 372, 372, 395, 395, 395, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
  /* 25917 */ 417, 417, 417, 417, 453, 417, 417, 417, 417, 417, 417, 417, 53467, 53467, 2, 2, 3, 94212, 391, 684, 391,
  /* 25938 */ 391, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 369, 369, 369, 369, 369, 369, 391, 391,
  /* 25962 */ 391, 391, 391, 391, 391, 391, 684, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1013,
  /* 25983 */ 391, 391, 0, 0, 0, 780, 0, 0, 0, 0, 0, 785, 0, 787, 0, 0, 789, 790, 805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26013 */ 0, 0, 0, 0, 545, 0, 0, 820, 821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056768, 0, 0, 0, 0, 352, 883,
  /* 26043 */ 352, 352, 885, 352, 352, 352, 352, 352, 352, 352, 892, 894, 369, 369, 369, 369, 1173, 369, 369, 369, 369,
  /* 26064 */ 369, 369, 1179, 369, 369, 369, 369, 369, 623, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1946, 369,
  /* 26085 */ 391, 391, 391, 391, 391, 929, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 26106 */ 369, 0, 369, 369, 659, 91063, 892, 662, 955, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1494, 391,
  /* 26127 */ 1496, 391, 391, 391, 391, 391, 972, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1286,
  /* 26148 */ 391, 391, 391, 391, 391, 972, 391, 391, 391, 391, 391, 391, 391, 1039, 391, 391, 391, 391, 391, 391, 1265,
  /* 26169 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1241, 391, 391, 391, 391, 391, 1045, 391, 391, 391, 391,
  /* 26190 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114773, 1385109, 1114773, 1114773, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26216 */ 0, 0, 0, 0, 0, 0, 546, 369, 369, 1404, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 26239 */ 369, 646, 369, 0, 0, 0, 1220, 0, 0, 0, 0, 391, 391, 391, 391, 391, 391, 1458, 391, 0, 1805, 0, 0, 0, 0, 0,
  /* 26265 */ 0, 0, 0, 0, 0, 0, 0, 0, 1562, 0, 0, 1576, 1577, 0, 1579, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 26290 */ 352, 352, 0, 369, 369, 369, 369, 1612, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 26311 */ 369, 369, 1441, 0, 1623, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 391, 391, 1628, 391, 0, 2016, 0, 0, 2019, 0, 0,
  /* 26337 */ 0, 0, 0, 0, 0, 0, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1131005,
  /* 26369 */ 1131005, 0, 0, 0, 0, 0, 1708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679360, 0, 0, 391, 391, 1769, 391,
  /* 26396 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1778, 391, 0, 2179, 2180, 0, 369, 369, 369, 369, 369,
  /* 26417 */ 369, 391, 391, 391, 391, 391, 391, 711, 391, 391, 391, 391, 0, 0, 0, 0, 391, 2097, 369, 369, 369, 369,
  /* 26439 */ 391, 391, 391, 391, 391, 2107, 391, 391, 391, 391, 391, 391, 391, 2045, 391, 391, 391, 391, 391, 391, 0,
  /* 26460 */ 0, 2117, 2118, 0, 0, 0, 0, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 391, 674, 391, 391, 686, 391,
  /* 26483 */ 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 776, 0, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056,
  /* 26515 */ 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 257, 256, 0, 344, 256, 356, 356, 356, 356, 373, 373, 373, 373, 373,
  /* 26538 */ 396, 373, 373, 373, 373, 373, 373, 373, 373, 396, 396, 396, 396, 396, 396, 396, 396, 423, 423, 423, 423,
  /* 26559 */ 423, 423, 423, 423, 423, 442, 423, 423, 423, 423, 423, 423, 457, 423, 423, 423, 53467, 53467, 2, 2, 3,
  /* 26580 */ 94212, 500, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 282, 0, 0, 0, 0, 0, 0, 254, 292, 257, 290, 0, 0, 0, 0, 0, 0,
  /* 26609 */ 0, 0, 962560, 330, 0, 0, 962560, 962560, 962560, 962890, 0, 0, 0, 0, 518, 519, 0, 0, 0, 0, 524, 0, 0, 527,
  /* 26633 */ 0, 0, 0, 0, 0, 551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 131072, 131072, 547, 0, 0, 0, 0, 0, 0, 0,
  /* 26663 */ 0, 0, 0, 0, 0, 0, 0, 557, 352, 352, 578, 352, 352, 586, 352, 592, 352, 595, 352, 598, 352, 352, 352, 352,
  /* 26687 */ 352, 352, 352, 1160, 352, 352, 352, 892, 369, 369, 369, 369, 0, 0, 91063, 0, 0, 391, 391, 391, 391, 391,
  /* 26709 */ 391, 391, 391, 676, 391, 53467, 2, 6, 0, 0, 0, 369, 369, 369, 613, 369, 369, 624, 369, 633, 369, 638, 369,
  /* 26732 */ 369, 644, 647, 651, 391, 695, 391, 391, 701, 704, 708, 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 2190, 2191,
  /* 26755 */ 0, 369, 369, 369, 369, 391, 391, 391, 391, 0, 0, 369, 369, 369, 369, 1431, 369, 369, 369, 369, 369, 369,
  /* 26777 */ 369, 369, 369, 369, 0, 0, 0, 0, 391, 391, 391, 1764, 391, 391, 719, 391, 721, 391, 391, 391, 391, 391,
  /* 26799 */ 391, 391, 0, 0, 0, 0, 708, 0, 0, 0, 0, 0, 1555, 0, 0, 0, 0, 0, 1560, 0, 0, 0, 0, 0, 0, 563, 0, 0, 0, 0,
  /* 26829 */ 570, 571, 0, 573, 352, 391, 733, 391, 391, 391, 704, 704, 708, 391, 391, 741, 391, 690, 704, 708, 391,
  /* 26850 */ 391, 391, 391, 391, 2043, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 1053, 0, 0, 0, 0, 0, 777, 0, 0, 0,
  /* 26875 */ 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1546, 0, 0, 0, 0, 0, 819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26908 */ 833, 545, 369, 369, 931, 369, 369, 369, 369, 369, 369, 369, 369, 369, 941, 369, 369, 369, 369, 369, 1750,
  /* 26929 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 940, 369, 369, 369, 369, 369, 947, 369, 659, 91063, 892,
  /* 26950 */ 662, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1523, 391, 0, 0, 0, 969, 391, 391, 391, 973,
  /* 26972 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 391, 391, 982, 983, 391, 391, 391, 391, 391,
  /* 26994 */ 391, 391, 391, 391, 391, 992, 391, 391, 391, 391, 391, 391, 1266, 391, 391, 391, 391, 391, 391, 1272, 391,
  /* 27015 */ 1274, 391, 391, 1017, 391, 391, 391, 1008, 391, 1002, 391, 391, 391, 391, 391, 391, 391, 391, 1036, 1010,
  /* 27035 */ 391, 391, 391, 391, 1043, 391, 1063, 0, 0, 0, 0, 0, 0, 0, 0, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 1626112, 0, 0,
  /* 27062 */ 1888256, 0, 1880064, 0, 0, 0, 1076, 1077, 0, 1079, 1080, 0, 0, 0, 0, 1085, 0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
  /* 27088 */ 0, 0, 0, 0, 0, 0, 0, 1084, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 1108, 1109, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
  /* 27118 */ 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0, 1122, 0,
  /* 27148 */ 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 352, 1142, 1143, 352, 352, 352, 352, 352, 1149,
  /* 27174 */ 352, 352, 1151, 352, 352, 352, 352, 352, 352, 352, 1161, 352, 352, 1164, 892, 369, 369, 369, 369, 0, 1220,
  /* 27195 */ 91063, 0, 1220, 391, 391, 391, 391, 391, 391, 391, 391, 677, 391, 53467, 2, 6, 0, 0, 0, 1155, 352, 352,
  /* 27217 */ 352, 1157, 352, 352, 352, 352, 352, 352, 892, 1165, 369, 369, 1167, 369, 1169, 369, 369, 369, 369, 369,
  /* 27237 */ 369, 369, 369, 369, 369, 1180, 369, 369, 369, 369, 369, 1942, 369, 369, 369, 369, 369, 391, 391, 391, 391,
  /* 27258 */ 391, 391, 738, 391, 391, 673, 391, 391, 391, 391, 391, 391, 391, 1238, 391, 391, 391, 391, 391, 391, 391,
  /* 27279 */ 391, 391, 2008, 391, 391, 391, 391, 391, 391, 1183, 369, 369, 369, 369, 369, 369, 369, 1190, 369, 369,
  /* 27299 */ 369, 369, 1193, 1194, 369, 369, 369, 369, 1601, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 27319 */ 369, 1209, 369, 369, 369, 1196, 1197, 369, 369, 369, 369, 1202, 369, 1204, 369, 369, 369, 369, 369, 1210,
  /* 27339 */ 369, 369, 369, 369, 1615, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1607, 369, 369, 369,
  /* 27360 */ 369, 369, 369, 1215, 0, 1220, 91063, 0, 1220, 1225, 391, 391, 1227, 391, 1229, 391, 391, 391, 391, 727,
  /* 27380 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 668, 391, 391, 727, 668, 0, 0, 0, 0, 391, 0, 391, 391,
  /* 27403 */ 391, 1262, 391, 1264, 391, 391, 391, 391, 391, 1270, 391, 391, 391, 391, 391, 391, 1280, 391, 391, 391,
  /* 27423 */ 391, 391, 1285, 391, 391, 391, 1275, 391, 1276, 1277, 391, 391, 391, 1281, 391, 391, 391, 391, 391, 391,
  /* 27443 */ 391, 1288, 391, 1250, 391, 391, 1291, 391, 391, 391, 391, 391, 391, 1297, 391, 391, 391, 1301, 905216, 0,
  /* 27463 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 852, 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27495 */ 1057312, 0, 0, 0, 1123, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 1376, 0, 0, 1379, 352, 352, 352,
  /* 27521 */ 352, 352, 352, 1385, 352, 352, 352, 352, 352, 352, 352, 1394, 352, 352, 352, 352, 369, 369, 369, 369, 369,
  /* 27542 */ 391, 369, 369, 369, 369, 369, 369, 1460, 391, 391, 391, 1464, 391, 1466, 391, 391, 391, 391, 391, 391,
  /* 27562 */ 391, 391, 391, 391, 1507, 391, 391, 391, 391, 391, 391, 391, 391, 391, 926087, 391, 391, 391, 391, 391,
  /* 27582 */ 391, 391, 391, 391, 391, 391, 0, 0, 391, 391, 1013, 391, 1513, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 27603 */ 391, 391, 391, 1310, 0, 1312, 1551, 0, 0, 0, 1554, 0, 1556, 1557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
  /* 27629 */ 0, 0, 0, 0, 0, 360448, 0, 0, 1566, 0, 0, 0, 0, 1569, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 45056,
  /* 27658 */ 49152, 352, 1589, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 2035, 369, 391,
  /* 27678 */ 391, 391, 369, 369, 1599, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1608, 369, 1610, 391, 391,
  /* 27698 */ 391, 1645, 391, 1647, 391, 391, 391, 391, 391, 391, 1654, 391, 391, 391, 391, 391, 707, 707, 391, 391,
  /* 27718 */ 391, 391, 391, 391, 707, 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 391, 391, 1657, 391, 391, 391, 446855,
  /* 27740 */ 391, 610695, 778631, 391, 391, 391, 391, 391, 391, 391, 999, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 27760 */ 0, 0, 391, 391, 391, 360839, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 27781 */ 1663, 1647, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 1705, 0, 0, 0, 0,
  /* 27809 */ 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1344, 0, 0, 0, 0, 0, 0, 352, 1734, 352, 352, 352, 369, 369, 369,
  /* 27836 */ 369, 369, 369, 1742, 369, 369, 369, 369, 0, 1220, 91063, 0, 1220, 391, 391, 391, 391, 391, 1230, 391,
  /* 27856 */ 1767, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1776, 391, 391, 391, 391, 391, 391, 1293, 391,
  /* 27876 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 1469, 391, 391, 1472, 391, 391, 0, 1815, 1816, 0, 0, 0, 0, 0,
  /* 27899 */ 0, 1821, 1822, 0, 1823, 0, 0, 0, 0, 0, 0, 1328, 1329, 0, 1331, 1332, 0, 0, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
  /* 27926 */ 0, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 1825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352,
  /* 27957 */ 352, 352, 369, 369, 1931, 369, 369, 369, 369, 369, 369, 369, 369, 1604, 369, 369, 369, 369, 369, 369, 369,
  /* 27978 */ 1840, 352, 352, 352, 1843, 352, 1845, 369, 369, 369, 1849, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391,
  /* 27999 */ 391, 678, 391, 391, 391, 391, 369, 369, 1854, 369, 369, 1857, 369, 369, 369, 369, 369, 1862, 1864, 369,
  /* 28019 */ 1866, 1867, 391, 391, 391, 1871, 391, 391, 391, 391, 391, 391, 391, 1876, 391, 391, 1879, 391, 391, 391,
  /* 28039 */ 391, 736, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 391, 965, 391, 391, 391, 391, 391,
  /* 28061 */ 1884, 1886, 391, 1888, 1889, 414087, 1890, 391, 391, 391, 391, 391, 391, 391, 311687, 1505, 391, 391, 391,
  /* 28080 */ 391, 391, 391, 391, 391, 1967, 391, 391, 391, 391, 391, 0, 0, 0, 1908, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28107 */ 0, 0, 328, 328, 369, 369, 1939, 369, 369, 369, 369, 369, 369, 369, 369, 391, 391, 1949, 391, 391, 0, 0, 0,
  /* 28130 */ 0, 0, 2088, 0, 0, 2091, 369, 2093, 369, 369, 369, 369, 617, 369, 369, 629, 369, 369, 369, 369, 369, 369,
  /* 28152 */ 369, 369, 1997, 369, 391, 391, 391, 391, 391, 391, 352, 369, 369, 369, 369, 2029, 369, 369, 369, 369, 369,
  /* 28173 */ 369, 369, 391, 391, 391, 2105, 391, 391, 391, 391, 391, 391, 2112, 391, 2039, 391, 391, 391, 391, 391,
  /* 28193 */ 391, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 0, 2055, 0, 0, 0, 0, 369, 369, 369, 369,
  /* 28219 */ 369, 369, 369, 908, 369, 369, 369, 912, 369, 369, 369, 369, 369, 369, 2069, 391, 391, 391, 391, 391, 391,
  /* 28240 */ 391, 391, 391, 2079, 391, 391, 391, 391, 391, 737, 703, 391, 391, 391, 391, 391, 391, 703, 391, 391, 391,
  /* 28261 */ 391, 391, 0, 0, 0, 0, 391, 391, 391, 391, 2115, 2116, 0, 0, 0, 0, 0, 0, 2123, 369, 369, 2125, 369, 369,
  /* 28285 */ 369, 369, 1760, 369, 0, 0, 0, 0, 391, 391, 391, 391, 391, 1766, 2127, 369, 369, 369, 369, 2132, 391, 391,
  /* 28307 */ 2134, 391, 2136, 391, 391, 391, 391, 2141, 2142, 391, 0, 0, 0, 0, 0, 0, 0, 0, 369, 369, 369, 369, 369,
  /* 28330 */ 369, 936, 369, 369, 369, 369, 369, 369, 369, 369, 946, 0, 0, 0, 0, 369, 2167, 369, 369, 369, 2171, 391,
  /* 28352 */ 2173, 391, 391, 391, 2177, 285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1348, 0, 285, 0, 334, 40960,
  /* 28379 */ 334, 0, 334, 334, 334, 334, 0, 334, 357, 357, 357, 357, 374, 374, 374, 374, 374, 397, 374, 374, 374, 374,
  /* 28401 */ 374, 374, 374, 374, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
  /* 28422 */ 397, 397, 397, 397, 397, 397, 397, 397, 397, 53467, 53467, 2, 2, 3, 94212, 391, 685, 391, 391, 391, 391,
  /* 28443 */ 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 369, 369, 369, 369, 391, 391, 391, 391, 0, 0, 369, 730,
  /* 28468 */ 391, 685, 391, 391, 391, 391, 391, 391, 391, 391, 742, 391, 391, 391, 391, 391, 391, 1308, 391, 0, 0, 0,
  /* 28490 */ 1311, 0, 761, 0, 0, 0, 0, 837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 290, 352, 870, 352, 352,
  /* 28518 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1153, 352, 369, 369, 659, 91063, 892, 662,
  /* 28538 */ 391, 391, 391, 391, 391, 391, 391, 965, 391, 391, 0, 0, 0, 0, 0, 2146, 2147, 0, 369, 369, 369, 369, 369,
  /* 28561 */ 369, 0, 1445, 0, 1451, 391, 391, 391, 391, 391, 391, 391, 959, 391, 391, 391, 391, 391, 1012, 391, 391,
  /* 28582 */ 1588, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1178, 369, 369, 369, 369,
  /* 28603 */ 369, 1907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1550, 0, 0, 0, 0, 2166, 369, 369, 369, 369, 369,
  /* 28631 */ 2172, 391, 391, 391, 391, 391, 391, 391, 594311, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1521, 391,
  /* 28651 */ 391, 1524, 0, 0, 0, 0, 0, 0, 335, 40960, 335, 0, 335, 335, 335, 335, 345, 335, 358, 358, 358, 358, 375,
  /* 28674 */ 375, 375, 375, 375, 398, 375, 375, 375, 375, 375, 375, 375, 375, 398, 398, 398, 398, 398, 398, 398, 398,
  /* 28695 */ 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 53467, 53467, 2,
  /* 28716 */ 2, 3, 94212, 0, 761, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 256, 0, 0, 0, 855, 0, 0, 0, 0,
  /* 28746 */ 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1586, 352, 352, 1789, 391, 391, 391, 391,
  /* 28769 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1880, 0, 0, 0, 0, 1818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28795 */ 1824, 0, 0, 0, 0, 0, 1710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 155648, 0, 0, 1826, 0, 0, 0, 0,
  /* 28824 */ 1831, 0, 0, 0, 0, 0, 1836, 0, 0, 352, 352, 352, 352, 352, 369, 1930, 369, 369, 369, 369, 369, 369, 369,
  /* 28847 */ 1937, 369, 369, 369, 369, 1941, 369, 369, 369, 369, 369, 369, 391, 391, 391, 391, 1950, 391, 897415, 391,
  /* 28867 */ 391, 391, 391, 391, 1899, 391, 1901, 391, 0, 0, 0, 0, 0, 0, 0, 2021, 0, 0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
  /* 28894 */ 0, 0, 0, 0, 0, 0, 860, 0, 0, 0, 0, 352, 352, 352, 0, 0, 0, 790528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
  /* 28925 */ 2, 3, 94212, 369, 369, 369, 1940, 369, 369, 369, 369, 369, 369, 369, 391, 1948, 391, 391, 391, 391, 391,
  /* 28946 */ 974, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 979, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 28967 */ 1955, 391, 391, 391, 391, 1958, 391, 391, 391, 391, 391, 391, 391, 1006, 391, 391, 391, 0, 0, 391, 391,
  /* 28988 */ 391, 0, 0, 1984, 352, 352, 1985, 352, 352, 369, 369, 369, 369, 369, 1988, 369, 369, 369, 369, 1200, 369,
  /* 29009 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1858, 1859, 369, 369, 369, 369, 369, 369, 369, 369, 938,
  /* 29030 */ 369, 369, 369, 369, 369, 369, 369, 0, 0, 0, 503, 0, 0, 506, 0, 0, 282, 282, 282, 0, 0, 0, 0, 0, 0, 277, 0,
  /* 29057 */ 0, 0, 0, 0, 0, 277, 45056, 49152, 0, 559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352,
  /* 29085 */ 587, 352, 352, 352, 352, 597, 352, 352, 602, 352, 352, 352, 352, 352, 352, 1393, 352, 352, 352, 352, 352,
  /* 29106 */ 1399, 369, 369, 369, 369, 619, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 925, 369, 369, 927,
  /* 29127 */ 369, 369, 369, 611, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 650, 369, 369,
  /* 29148 */ 369, 657, 369, 369, 0, 391, 391, 391, 668, 391, 391, 391, 391, 391, 391, 53467, 2, 6, 0, 0, 0, 0, 0, 0, 0,
  /* 29173 */ 795, 0, 0, 0, 0, 0, 0, 0, 282, 282, 0, 0, 0, 0, 0, 552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 299, 0, 0, 0,
  /* 29204 */ 0, 1029, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1964, 0, 933888, 0, 0,
  /* 29226 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 499, 391, 391, 391, 934279, 391, 391, 391, 391, 391, 391, 391,
  /* 29251 */ 391, 391, 391, 391, 391, 391, 1777, 391, 391, 0, 0, 0, 1553, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0,
  /* 29278 */ 0, 242, 0, 258, 259, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 291, 0, 258, 0, 258, 0, 0, 0, 0, 0,
  /* 29308 */ 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 1341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 962560, 0, 0, 0, 0, 0, 258, 0, 0,
  /* 29339 */ 0, 0, 0, 0, 0, 259, 258, 0, 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 346, 0, 359, 359,
  /* 29367 */ 359, 359, 376, 376, 376, 376, 376, 399, 376, 376, 376, 376, 376, 376, 376, 376, 399, 399, 399, 418, 418,
  /* 29388 */ 418, 418, 418, 418, 418, 418, 418, 418, 435, 435, 418, 435, 435, 435, 458, 435, 435, 435, 53467, 53467, 2,
  /* 29409 */ 2, 3, 94212, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 435, 352, 352,
  /* 29430 */ 579, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 881, 352, 882, 369, 369, 369, 614,
  /* 29451 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 943, 369, 369, 671, 391, 391, 391, 391,
  /* 29472 */ 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 369, 369, 369, 369, 2185, 369, 391, 391, 391, 391,
  /* 29496 */ 2189, 369, 369, 899, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 916, 369, 369,
  /* 29517 */ 369, 918, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1415, 369, 369, 369, 659,
  /* 29538 */ 91063, 892, 662, 391, 391, 391, 391, 391, 960, 391, 391, 391, 391, 391, 391, 1490, 391, 391, 391, 391,
  /* 29558 */ 391, 391, 391, 391, 391, 391, 1797, 391, 391, 391, 391, 391, 391, 391, 1000, 391, 391, 391, 391, 1005,
  /* 29578 */ 391, 391, 391, 0, 0, 391, 391, 391, 391, 391, 987, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 29600 */ 1798, 391, 391, 391, 391, 391, 1030, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 29621 */ 0, 0, 0, 391, 391, 391, 1019, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 241, 241, 0, 0, 0, 0, 0, 1078, 0,
  /* 29650 */ 0, 1081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1835, 0, 0, 0, 0, 352, 0, 0, 0, 1093, 1094, 1095, 0, 0, 0, 0, 0, 0,
  /* 29680 */ 0, 0, 0, 1104, 369, 1213, 369, 369, 0, 1220, 91063, 0, 1220, 391, 391, 391, 391, 391, 391, 391, 391, 1636,
  /* 29702 */ 391, 391, 391, 391, 391, 391, 391, 391, 1049, 1310, 0, 0, 0, 0, 1055, 1312, 391, 391, 1261, 391, 391, 391,
  /* 29724 */ 391, 391, 391, 391, 391, 391, 391, 391, 1273, 391, 391, 391, 391, 752, 391, 754, 391, 391, 391, 53467, 2,
  /* 29745 */ 6, 0, 0, 0, 0, 0, 0, 1111, 0, 0, 0, 0, 0, 0, 0, 0, 1118, 391, 391, 1290, 391, 391, 391, 391, 391, 391,
  /* 29771 */ 391, 1296, 391, 391, 1299, 391, 391, 0, 0, 0, 2086, 0, 0, 2089, 2090, 0, 369, 369, 369, 369, 369, 0, 391,
  /* 29794 */ 391, 391, 391, 391, 391, 391, 391, 684, 391, 391, 391, 391, 1305, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0,
  /* 29818 */ 0, 369, 369, 369, 369, 369, 369, 0, 0, 0, 1220, 0, 0, 0, 0, 391, 391, 391, 1456, 391, 391, 391, 391, 391,
  /* 29842 */ 391, 1504, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 53467, 53467, 2, 2, 3, 94212, 391, 391, 1501,
  /* 29863 */ 391, 391, 391, 391, 391, 391, 391, 391, 1508, 391, 391, 1511, 391, 391, 391, 391, 974, 391, 391, 391, 391,
  /* 29884 */ 391, 957, 391, 391, 391, 391, 391, 0, 1050, 0, 0, 0, 1056, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 282, 282,
  /* 29911 */ 0, 0, 391, 1501, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 1537, 1538, 0, 0,
  /* 29935 */ 1541, 0, 0, 1543, 0, 1545, 0, 0, 0, 0, 1549, 0, 0, 0, 0, 0, 1723, 0, 0, 0, 0, 352, 1729, 352, 352, 352,
  /* 29961 */ 352, 352, 352, 352, 1846, 369, 369, 369, 369, 369, 369, 369, 369, 1996, 369, 369, 391, 391, 391, 391, 391,
  /* 29982 */ 391, 391, 391, 421, 421, 421, 421, 421, 434, 0, 0, 1552, 0, 0, 0, 0, 0, 0, 0, 1559, 0, 0, 0, 1563, 0, 0,
  /* 30008 */ 0, 0, 0, 1830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 588, 352, 593, 352, 352, 352, 352, 600,
  /* 30034 */ 352, 352, 352, 352, 352, 352, 589, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1163, 352, 892, 369, 369,
  /* 30055 */ 369, 369, 1678, 1679, 1680, 391, 0, 0, 1684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920, 0, 0, 0, 352, 352, 0, 0,
  /* 30082 */ 0, 1694, 0, 0, 0, 0, 0, 0, 1699, 0, 0, 0, 0, 0, 0, 0, 859, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 369,
  /* 30110 */ 369, 369, 369, 369, 369, 369, 1990, 352, 352, 352, 1735, 352, 369, 1737, 369, 369, 1740, 369, 369, 369,
  /* 30130 */ 369, 369, 369, 1188, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1206, 369, 369, 369, 369, 369, 369, 369,
  /* 30151 */ 369, 1748, 369, 369, 369, 369, 369, 369, 369, 369, 1754, 369, 369, 1756, 369, 369, 369, 369, 1994, 369,
  /* 30171 */ 369, 369, 369, 369, 391, 391, 391, 391, 391, 2000, 369, 369, 1758, 369, 369, 369, 0, 0, 0, 0, 391, 1762,
  /* 30193 */ 391, 391, 1765, 391, 391, 391, 391, 986, 391, 391, 988, 391, 990, 391, 391, 391, 391, 391, 391, 391, 977,
  /* 30214 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 1037, 391, 391, 391, 391, 1042, 391, 1779, 391, 391, 1781,
  /* 30234 */ 391, 391, 391, 1783, 391, 391, 391, 391, 391, 391, 391, 391, 391, 963, 391, 391, 391, 1041, 963, 391, 391,
  /* 30255 */ 1804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 556, 0, 352, 352, 352, 1842, 352, 352, 352, 369, 369, 369,
  /* 30282 */ 369, 369, 369, 369, 369, 1852, 391, 391, 391, 1883, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 30303 */ 391, 391, 1787, 391, 391, 391, 391, 1894, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30327 */ 0, 0, 0, 0, 1971, 0, 0, 0, 1974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 253, 0, 0, 0, 2014, 0, 0, 0, 0, 0,
  /* 30358 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1575, 2067, 2068, 369, 391, 391, 391, 391, 2074, 391, 2076, 2077, 2078, 391,
  /* 30382 */ 391, 391, 391, 391, 391, 1634, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1660, 391, 391, 391, 391,
  /* 30403 */ 391, 369, 391, 391, 2198, 2199, 369, 391, 369, 391, 369, 391, 0, 0, 0, 0, 0, 0, 1809, 0, 0, 0, 0, 0, 0, 0,
  /* 30429 */ 0, 0, 493, 0, 0, 0, 0, 0, 0, 391, 369031, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 30453 */ 391, 982, 391, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 45056, 49152, 0, 0, 0, 336, 40960, 336, 0,
  /* 30479 */ 336, 336, 336, 336, 0, 336, 360, 360, 360, 360, 377, 377, 377, 377, 377, 400, 377, 377, 377, 377, 377,
  /* 30500 */ 377, 377, 377, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 445, 400, 400, 445,
  /* 30521 */ 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 445, 53467, 53467, 2, 2, 3, 94212, 0, 0, 0, 0, 534, 0,
  /* 30544 */ 0, 0, 0, 539, 0, 0, 0, 0, 0, 0, 0, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 0, 1135, 0, 0, 0, 0, 0, 0, 539,
  /* 30575 */ 0, 0, 0, 551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 237, 0, 0, 0, 0, 352, 352, 352, 580, 352, 352, 352, 352,
  /* 30603 */ 352, 352, 352, 352, 352, 352, 352, 352, 369, 369, 369, 369, 0, 761, 765, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0,
  /* 30628 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1745,
  /* 30653 */ 369, 868, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 604, 352, 352,
  /* 30674 */ 352, 884, 352, 352, 352, 352, 352, 352, 352, 352, 892, 369, 369, 369, 369, 369, 2102, 391, 391, 391, 391,
  /* 30695 */ 391, 391, 391, 391, 391, 391, 715, 0, 0, 0, 0, 391, 369, 369, 369, 900, 369, 369, 369, 369, 369, 369, 369,
  /* 30718 */ 369, 369, 914, 369, 369, 369, 369, 1217, 1220, 91063, 1222, 1220, 391, 391, 1226, 391, 391, 391, 391, 391,
  /* 30738 */ 391, 1251, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1775, 391, 391, 391, 391, 391, 369, 369, 659,
  /* 30759 */ 91063, 892, 662, 391, 391, 391, 391, 391, 391, 961, 391, 391, 391, 391, 391, 1002, 391, 391, 391, 1008,
  /* 30779 */ 391, 0, 0, 391, 391, 391, 391, 391, 706, 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 391, 391, 391, 961,
  /* 30802 */ 391, 1007, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1673, 391, 391, 391, 391, 391, 391,
  /* 30822 */ 1047, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30853 */ 0, 0, 0, 0, 261, 0, 0, 352, 352, 352, 1145, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 30876 */ 369, 369, 369, 1402, 369, 369, 1171, 1172, 369, 369, 1175, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 30896 */ 1205, 369, 369, 369, 369, 369, 369, 369, 1184, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 30917 */ 369, 369, 369, 1442, 1232, 391, 391, 1235, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1244, 391,
  /* 30937 */ 391, 391, 391, 1012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 772, 773, 0, 0, 0, 391, 391, 391, 1235, 391, 391,
  /* 30963 */ 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 369, 369, 369, 369, 2126, 0, 0, 1325, 0, 0, 0, 0, 0, 0, 0, 0, 1333, 0,
  /* 30991 */ 0, 0, 0, 0, 0, 279, 280, 281, 0, 282, 0, 0, 0, 0, 0, 0, 0, 1725, 1726, 0, 1728, 352, 1730, 352, 352, 352,
  /* 31017 */ 391, 391, 391, 1476, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1892, 1893, 391,
  /* 31037 */ 1485, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 2013, 1597, 369, 369,
  /* 31057 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 654, 0, 0, 0, 1817, 0, 0, 0, 0, 0, 0, 0,
  /* 31082 */ 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 1914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 1581, 352, 352,
  /* 31112 */ 352, 352, 1584, 352, 352, 352, 352, 352, 352, 352, 888, 352, 352, 352, 352, 892, 369, 369, 369, 369, 2128,
  /* 31133 */ 369, 369, 369, 391, 391, 391, 391, 2135, 391, 2137, 391, 391, 391, 391, 391, 391, 1668, 391, 391, 391,
  /* 31153 */ 391, 391, 391, 391, 391, 391, 391, 1902, 0, 0, 0, 0, 0, 369, 369, 369, 2155, 391, 391, 391, 391, 391, 391,
  /* 31176 */ 391, 391, 391, 391, 391, 0, 0, 0, 1905, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 347, 0, 361, 361, 361,
  /* 31202 */ 361, 378, 378, 378, 378, 378, 401, 378, 378, 378, 378, 378, 378, 378, 378, 401, 401, 401, 401, 401, 401,
  /* 31223 */ 401, 401, 401, 401, 401, 401, 401, 436, 436, 401, 436, 436, 436, 436, 436, 436, 436, 53467, 53707, 2, 2,
  /* 31244 */ 3, 94212, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 436, 352, 352, 352,
  /* 31265 */ 581, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 369, 1400, 369, 369, 391, 686, 391, 391,
  /* 31286 */ 391, 391, 674, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 369, 369, 369, 2193, 391, 391, 391, 2195, 0, 0,
  /* 31311 */ 369, 391, 391, 686, 391, 391, 391, 391, 391, 391, 674, 391, 391, 391, 391, 391, 391, 391, 1267, 1268, 391,
  /* 31332 */ 391, 391, 391, 391, 391, 391, 732, 391, 689, 53467, 2, 6, 0, 0, 0, 369, 369, 369, 901, 369, 369, 369, 369,
  /* 31355 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 1426, 1427, 369, 369, 369, 659, 91063, 892, 662, 391, 391,
  /* 31375 */ 391, 391, 391, 391, 962, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1962, 391, 391,
  /* 31396 */ 998, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 962, 391, 391, 0, 2144, 0, 0, 0, 0, 0, 0,
  /* 31420 */ 369, 2150, 369, 369, 369, 369, 369, 1187, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 391, 391,
  /* 31440 */ 2104, 391, 391, 391, 391, 391, 391, 391, 391, 391, 725, 391, 391, 391, 391, 391, 391, 391, 391, 1031, 391,
  /* 31461 */ 391, 391, 391, 391, 391, 962, 391, 391, 391, 391, 962, 391, 391, 391, 391, 1019, 391, 1021, 391, 391, 391,
  /* 31482 */ 391, 391, 391, 391, 391, 391, 391, 1638, 391, 391, 391, 391, 391, 391, 1233, 391, 391, 391, 391, 391, 391,
  /* 31503 */ 1239, 391, 391, 391, 391, 391, 391, 391, 391, 1873, 391, 391, 391, 391, 391, 391, 391, 391, 1003, 391,
  /* 31523 */ 391, 391, 391, 391, 391, 391, 391, 1007, 391, 391, 0, 0, 961, 1011, 391, 1375, 0, 0, 0, 0, 352, 352, 352,
  /* 31546 */ 352, 352, 352, 352, 352, 352, 352, 352, 1397, 352, 369, 369, 1401, 369, 369, 1430, 369, 369, 369, 369,
  /* 31566 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 0, 0, 0, 0, 391, 391, 1763, 391, 391, 391, 1443, 0, 0, 1220,
  /* 31589 */ 0, 1449, 0, 0, 391, 391, 391, 391, 391, 391, 391, 391, 391, 978, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 31611 */ 864647, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 1906, 0, 2054, 0, 0, 0, 0, 0,
  /* 31635 */ 0, 0, 369, 369, 369, 369, 369, 369, 369, 937, 369, 369, 369, 369, 369, 369, 369, 369, 1176, 369, 369, 369,
  /* 31657 */ 369, 369, 369, 369, 369, 910, 369, 369, 369, 369, 369, 369, 369, 2083, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31681 */ 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 671, 391, 391, 391, 391, 391, 53467, 2, 6, 0, 0, 0, 303,
  /* 31704 */ 305, 265, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0,
  /* 31736 */ 0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 282, 282, 0, 0, 0, 0, 305, 0, 302, 0, 0, 0, 0, 0, 302, 0,
  /* 31767 */ 302, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 264, 0, 0, 0, 0, 0, 0, 362, 362, 362, 362, 379, 379, 379, 379,
  /* 31792 */ 379, 402, 379, 379, 379, 379, 379, 379, 379, 379, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
  /* 31813 */ 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 53467, 53467, 2, 2, 3, 94212,
  /* 31834 */ 484, 485, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 517, 0, 0, 520, 0, 0, 0, 0, 525,
  /* 31865 */ 0, 0, 0, 0, 0, 0, 285, 0, 0, 0, 0, 0, 0, 285, 45056, 49152, 0, 0, 532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31896 */ 0, 290, 0, 292, 0, 0, 0, 0, 520, 0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 875, 352, 352,
  /* 31923 */ 352, 352, 352, 352, 352, 352, 352, 352, 890, 352, 892, 369, 369, 369, 574, 352, 352, 582, 352, 352, 590,
  /* 31944 */ 352, 352, 352, 596, 352, 352, 352, 603, 352, 352, 352, 352, 352, 886, 887, 352, 352, 352, 352, 352, 892,
  /* 31965 */ 369, 369, 369, 369, 621, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 391, 2103, 391, 391, 391,
  /* 31986 */ 391, 391, 391, 391, 391, 391, 391, 53467, 2, 6, 0, 0, 0, 369, 606, 369, 369, 618, 369, 369, 630, 369, 369,
  /* 32009 */ 369, 640, 369, 369, 369, 369, 369, 906, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 0, 391, 391,
  /* 32030 */ 666, 391, 391, 391, 391, 683, 689, 691, 655, 369, 369, 369, 369, 0, 391, 391, 663, 391, 391, 675, 391,
  /* 32051 */ 391, 687, 391, 391, 391, 391, 1033, 391, 391, 1035, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1493,
  /* 32071 */ 391, 391, 391, 391, 391, 391, 391, 391, 697, 391, 391, 391, 391, 712, 391, 391, 391, 0, 0, 0, 0, 391, 391,
  /* 32094 */ 391, 391, 1236, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 391, 391, 391, 391, 720, 391,
  /* 32116 */ 663, 391, 391, 675, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 369, 369, 2183, 2184, 369, 369, 391, 391,
  /* 32140 */ 2187, 2188, 391, 663, 391, 734, 391, 391, 391, 391, 391, 663, 740, 391, 697, 391, 391, 391, 391, 391, 391,
  /* 32161 */ 1887, 391, 391, 391, 391, 391, 391, 391, 391, 391, 676, 391, 391, 391, 391, 391, 391, 697, 712, 391, 391,
  /* 32182 */ 391, 697, 391, 663, 675, 757, 53467, 2, 6, 0, 0, 0, 0, 0, 0, 1365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53467,
  /* 32209 */ 53467, 2, 2, 3, 94212, 1014, 391, 391, 1018, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 32230 */ 391, 2011, 391, 391, 391, 1014, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1062, 352, 352, 352, 352,
  /* 32254 */ 1146, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1395, 1396, 352, 352, 369, 369, 369, 369,
  /* 32274 */ 391, 391, 1234, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1310, 0, 1312, 1302, 391,
  /* 32295 */ 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 0, 0, 0, 0, 1378, 0, 1380, 352, 352, 352,
  /* 32321 */ 352, 352, 352, 352, 352, 352, 352, 369, 369, 1848, 369, 369, 369, 369, 369, 369, 0, 0, 0, 1220, 0, 0, 0,
  /* 32344 */ 0, 391, 391, 1455, 391, 391, 391, 391, 391, 391, 676, 391, 391, 391, 0, 0, 0, 0, 391, 0, 1500, 391, 391,
  /* 32367 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 996, 391, 0, 0, 1539, 1540, 0, 0, 0, 0,
  /* 32390 */ 0, 0, 0, 0, 0, 1548, 0, 0, 0, 0, 0, 562, 0, 0, 0, 0, 0, 569, 0, 0, 0, 352, 0, 0, 1578, 352, 352, 352, 352,
  /* 32419 */ 352, 1583, 352, 352, 352, 1585, 352, 352, 1587, 369, 1598, 369, 1600, 369, 369, 369, 369, 369, 369, 369,
  /* 32439 */ 1606, 369, 369, 369, 369, 369, 920, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1998, 391, 391, 391,
  /* 32460 */ 391, 391, 369, 369, 369, 1614, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1439, 369,
  /* 32481 */ 0, 391, 391, 391, 1632, 391, 391, 391, 1635, 391, 1637, 391, 391, 391, 391, 391, 391, 391, 1491, 1492,
  /* 32501 */ 391, 391, 391, 391, 391, 391, 391, 391, 1023, 391, 391, 391, 391, 391, 391, 391, 391, 756, 391, 53467, 2,
  /* 32522 */ 6, 0, 0, 0, 391, 1643, 391, 391, 391, 391, 391, 391, 391, 1651, 391, 391, 391, 391, 391, 391, 391, 1649,
  /* 32544 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 714, 391, 0, 0, 0, 0, 668, 391, 391, 391, 1665, 391, 391,
  /* 32566 */ 391, 391, 391, 1671, 391, 391, 391, 391, 1676, 391, 391, 391, 391, 1249, 391, 391, 391, 391, 391, 391,
  /* 32586 */ 391, 391, 391, 391, 391, 0, 0, 184320, 0, 391, 391, 391, 391, 1681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32612 */ 282, 282, 0, 0, 1692, 0, 0, 0, 0, 0, 1696, 0, 0, 0, 0, 0, 1701, 1702, 0, 0, 0, 0, 0, 767, 0, 0, 769, 0, 0,
  /* 32641 */ 0, 0, 0, 0, 0, 0, 1918, 0, 0, 0, 1922, 0, 1924, 352, 1718, 1719, 0, 0, 1722, 0, 0, 0, 0, 0, 352, 352, 352,
  /* 32668 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 391, 391, 391, 1770, 391, 391, 391, 391, 391, 391, 391,
  /* 32689 */ 391, 391, 391, 391, 391, 1025, 391, 391, 391, 391, 1790, 1791, 1792, 391, 391, 391, 1794, 391, 391, 391,
  /* 32709 */ 391, 391, 1800, 391, 1802, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1704, 369, 369, 369, 1855,
  /* 32735 */ 1856, 369, 369, 369, 369, 1860, 369, 369, 369, 369, 369, 369, 1433, 369, 369, 369, 369, 369, 369, 369,
  /* 32755 */ 369, 0, 0, 0, 0, 391, 391, 391, 391, 391, 391, 391, 1869, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 32777 */ 391, 1877, 1878, 391, 391, 391, 391, 391, 1489, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 32797 */ 391, 0, 1053, 0, 391, 391, 1882, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1484,
  /* 32818 */ 391, 391, 1925, 1926, 352, 352, 352, 369, 369, 369, 369, 1932, 1933, 1934, 369, 369, 369, 369, 369, 921,
  /* 32838 */ 369, 369, 923, 369, 369, 369, 369, 369, 369, 369, 1623, 0, 1625, 0, 391, 391, 391, 391, 391, 391, 391,
  /* 32859 */ 739, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1968, 391, 391, 391, 391, 0, 0, 1951, 1952, 391, 391,
  /* 32880 */ 391, 391, 391, 391, 391, 391, 1959, 391, 391, 391, 391, 391, 391, 677, 391, 391, 391, 0, 0, 0, 0, 391, 0,
  /* 32903 */ 2001, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1027, 391, 352, 369, 369,
  /* 32924 */ 369, 369, 369, 369, 2031, 369, 369, 369, 369, 369, 391, 391, 391, 2073, 391, 391, 391, 391, 391, 391, 391,
  /* 32945 */ 2081, 391, 391, 391, 391, 2041, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 2052, 0, 0, 794624,
  /* 32966 */ 0, 0, 0, 0, 0, 0, 369, 369, 369, 2063, 369, 369, 369, 369, 616, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 32989 */ 369, 369, 369, 369, 1863, 369, 369, 369, 391, 795015, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 369, 369, 369, 369,
  /* 33012 */ 369, 0, 391, 391, 391, 669, 672, 391, 679, 391, 391, 391, 369, 369, 2099, 369, 2101, 391, 391, 391, 391,
  /* 33033 */ 391, 391, 391, 2109, 391, 2111, 391, 391, 391, 391, 1263, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 33053 */ 391, 391, 0, 0, 391, 964, 391, 0, 0, 0, 0, 369, 369, 2168, 2169, 369, 369, 391, 391, 2174, 2175, 391, 391,
  /* 33076 */ 391, 391, 391, 1503, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1653, 391, 391, 391, 391, 369,
  /* 33097 */ 391, 391, 369, 391, 369, 391, 2202, 2203, 369, 391, 0, 0, 0, 0, 0, 0, 2020, 0, 0, 2023, 2024, 0, 0, 0, 0,
  /* 33122 */ 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 0, 804, 0, 267, 269, 268, 40960, 268, 269,
  /* 33149 */ 268, 341, 268, 268, 0, 268, 363, 363, 363, 363, 380, 380, 380, 380, 380, 403, 380, 380, 380, 380, 380,
  /* 33170 */ 380, 380, 380, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 444, 403, 449, 403,
  /* 33191 */ 403, 403, 403, 403, 454, 403, 403, 403, 403, 403, 403, 403, 53467, 53467, 2, 2, 3, 94212, 0, 0, 0, 471, 0,
  /* 33214 */ 0, 0, 475, 476, 477, 478, 0, 0, 0, 0, 0, 0, 0, 1097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1713, 0, 0, 0, 0, 0, 0,
  /* 33244 */ 530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1717, 0, 0, 0, 561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33276 */ 352, 352, 352, 352, 352, 1147, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 878, 352, 352, 352, 352,
  /* 33297 */ 352, 352, 577, 352, 352, 585, 352, 352, 352, 594, 352, 352, 352, 352, 601, 352, 352, 352, 352, 352, 352,
  /* 33318 */ 1159, 352, 352, 352, 352, 892, 369, 369, 369, 369, 369, 391, 2133, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 33339 */ 391, 391, 1038, 391, 391, 391, 391, 391, 369, 369, 612, 615, 369, 622, 369, 369, 369, 636, 639, 369, 369,
  /* 33360 */ 369, 648, 652, 693, 696, 391, 391, 391, 705, 709, 391, 391, 391, 391, 0, 0, 0, 0, 718, 672, 391, 391, 391,
  /* 33383 */ 391, 724, 391, 391, 391, 724, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0, 1916, 1917, 0, 0, 0, 0, 0, 0, 0, 352, 352,
  /* 33410 */ 1381, 1382, 352, 352, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369, 1851, 391, 391,
  /* 33430 */ 391, 735, 391, 705, 705, 709, 391, 391, 391, 391, 391, 705, 709, 746, 391, 391, 750, 751, 672, 391, 391,
  /* 33451 */ 391, 391, 391, 53467, 2, 6, 0, 0, 0, 0, 0, 0, 1529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 282, 0, 0,
  /* 33478 */ 147456, 0, 0, 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 265, 0, 302, 917, 369, 369, 369, 369,
  /* 33505 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 928, 369, 369, 932, 369, 369, 369, 369, 369, 369,
  /* 33526 */ 369, 369, 369, 369, 369, 945, 369, 369, 369, 369, 2131, 391, 391, 391, 391, 391, 391, 391, 391, 391, 2140,
  /* 33547 */ 391, 391, 391, 391, 1278, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 391, 966, 1012, 0,
  /* 33569 */ 0, 0, 0, 1121, 0, 0, 0, 0, 1124, 0, 551, 0, 0, 0, 0, 0, 0, 285, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 844, 0,
  /* 33600 */ 845, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 391, 391, 391, 1248, 391, 391, 391, 391, 391, 391,
  /* 33626 */ 391, 391, 391, 391, 391, 391, 1040, 391, 391, 966, 1289, 606599, 391, 391, 391, 391, 391, 1294, 391, 391,
  /* 33646 */ 391, 391, 391, 391, 391, 391, 391, 1240, 391, 391, 391, 1243, 391, 391, 0, 1313, 0, 765, 0, 0, 0, 0, 0, 0,
  /* 33670 */ 0, 0, 0, 0, 0, 0, 391, 391, 391, 391, 0, 0, 1337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 481, 482, 0, 391,
  /* 33700 */ 391, 1514, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 711, 0, 1565, 0, 0, 0, 0, 0, 0,
  /* 33725 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 1624, 0, 1218, 0, 0, 0, 1626, 0, 1223, 391, 391, 391, 391,
  /* 33751 */ 391, 391, 1898, 391, 391, 391, 391, 0, 1903, 0, 0, 0, 0, 1693, 0, 0, 0, 0, 0, 0, 1697, 0, 0, 0, 0, 0, 0,
  /* 33778 */ 0, 0, 1343, 0, 0, 0, 0, 0, 0, 0, 0, 1071, 0, 0, 0, 0, 1074, 0, 0, 369, 369, 369, 1749, 369, 369, 369, 369,
  /* 33805 */ 369, 369, 369, 369, 369, 369, 369, 369, 926, 369, 369, 369, 352, 1841, 352, 352, 352, 352, 352, 369, 369,
  /* 33826 */ 369, 369, 1850, 369, 369, 369, 369, 369, 935, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1207,
  /* 33846 */ 1208, 369, 369, 369, 369, 391, 391, 391, 391, 1872, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 33867 */ 0, 0, 544, 0, 391, 0, 0, 1973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 319, 0, 352, 369, 369, 369,
  /* 33895 */ 2028, 369, 369, 369, 369, 369, 369, 369, 369, 391, 391, 391, 2157, 391, 2158, 391, 391, 391, 391, 391,
  /* 33915 */ 391, 0, 1049, 0, 0, 0, 1055, 0, 0, 0, 0, 0, 2038, 391, 391, 391, 391, 391, 391, 391, 391, 391, 2047, 391,
  /* 33939 */ 391, 2050, 0, 0, 0, 0, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1548288, 0, 0, 0, 0, 369, 369, 369, 391,
  /* 33967 */ 2071, 391, 391, 391, 2075, 391, 391, 391, 391, 391, 391, 391, 391, 1874, 391, 391, 391, 391, 391, 391,
  /* 33987 */ 391, 391, 1670, 391, 391, 391, 391, 391, 391, 391, 391, 1774, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 34007 */ 1784, 391, 391, 391, 391, 391, 391, 391, 391, 1795, 1796, 391, 391, 391, 391, 391, 391, 2162, 0, 0, 2165,
  /* 34028 */ 369, 369, 369, 369, 369, 369, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 369,
  /* 34049 */ 391, 391, 369, 391, 2200, 2201, 369, 391, 369, 391, 0, 0, 0, 0, 0, 1808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34075 */ 217088, 217088, 217088, 217088, 217088, 217088, 304, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
  /* 34098 */ 0, 0, 45056, 49152, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 317, 0, 317, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0,
  /* 34125 */ 0, 0, 0, 0, 348, 0, 352, 352, 352, 352, 352, 352, 369, 369, 1591, 369, 369, 369, 369, 369, 369, 369, 628,
  /* 34148 */ 369, 369, 369, 369, 369, 369, 369, 369, 1618, 369, 369, 369, 369, 369, 369, 369, 352, 352, 352, 352, 381,
  /* 34169 */ 381, 381, 381, 381, 404, 381, 381, 381, 381, 381, 381, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
  /* 34190 */ 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 53467, 53467, 2, 2, 3,
  /* 34211 */ 94212, 0, 0, 0, 0, 504, 0, 0, 0, 0, 282, 282, 282, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 286, 45056,
  /* 34239 */ 49152, 391, 391, 391, 722, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 369, 2182, 369, 369,
  /* 34263 */ 369, 369, 391, 2186, 391, 391, 391, 391, 391, 1003, 391, 391, 391, 391, 391, 0, 0, 391, 391, 391, 391,
  /* 34284 */ 391, 1020, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1960, 391, 391, 391, 391, 722, 391, 391,
  /* 34305 */ 391, 391, 391, 391, 391, 722, 391, 391, 391, 391, 391, 391, 391, 391, 1900, 391, 391, 0, 0, 0, 0, 0, 0, 0,
  /* 34329 */ 0, 0, 369, 369, 2094, 369, 369, 747, 748, 391, 391, 391, 747, 391, 722, 391, 391, 53467, 2, 6, 0, 0, 0, 0,
  /* 34353 */ 0, 0, 1567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 846, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34386 */ 0, 0, 572, 0, 352, 0, 0, 0, 838, 0, 842, 0, 0, 774, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34417 */ 1098, 0, 1100, 0, 0, 1102, 0, 0, 0, 0, 0, 0, 856, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 1986,
  /* 34444 */ 369, 369, 369, 369, 369, 369, 369, 1409, 369, 369, 369, 369, 369, 369, 369, 369, 1422, 369, 369, 369, 369,
  /* 34465 */ 369, 369, 369, 369, 1945, 369, 369, 391, 391, 391, 391, 391, 352, 352, 352, 352, 874, 352, 352, 352, 352,
  /* 34486 */ 352, 352, 352, 352, 352, 352, 352, 369, 1847, 369, 369, 369, 369, 369, 369, 369, 1189, 369, 369, 369, 369,
  /* 34507 */ 369, 369, 369, 369, 1203, 369, 369, 369, 369, 369, 369, 369, 369, 1752, 369, 369, 369, 369, 369, 369, 369,
  /* 34528 */ 391, 971, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 980, 391, 391, 391, 391, 391, 1517, 391,
  /* 34549 */ 391, 391, 391, 391, 391, 391, 1310, 0, 1312, 391, 391, 391, 985, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 34570 */ 391, 391, 391, 391, 1242, 391, 391, 391, 1015, 1016, 391, 1010, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 34590 */ 391, 391, 391, 391, 1255, 391, 391, 391, 391, 1015, 391, 391, 391, 0, 0, 1052, 0, 0, 0, 1058, 0, 0, 0, 0,
  /* 34614 */ 0, 0, 310, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 536, 0, 0, 0, 0, 0, 0, 0, 545, 0, 0, 1106, 0, 0, 0, 0, 0, 0,
  /* 34646 */ 0, 0, 0, 0, 0, 0, 819200, 0, 0, 0, 0, 0, 954368, 0, 954368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 946176, 282, 0, 0,
  /* 34674 */ 946176, 0, 0, 369, 1418, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1622,
  /* 34695 */ 1444, 0, 0, 1220, 0, 1450, 0, 0, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1269, 391, 391, 391, 391,
  /* 34717 */ 391, 391, 0, 0, 1445, 0, 0, 0, 0, 0, 1451, 0, 0, 0, 391, 391, 391, 391, 391, 391, 1965, 391, 391, 391,
  /* 34741 */ 391, 391, 391, 391, 0, 0, 1051, 0, 0, 0, 1057, 0, 0, 0, 0, 391, 2015, 0, 2017, 0, 0, 0, 0, 0, 2022, 0, 0,
  /* 34768 */ 0, 2025, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 282, 282, 0,
  /* 34799 */ 0, 0, 0, 0, 550, 0, 0, 0, 0, 470, 0, 0, 0, 0, 0, 0, 0, 565, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 583,
  /* 34829 */ 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 879, 352, 352, 352, 369, 369, 369, 658, 369,
  /* 34850 */ 0, 391, 391, 391, 391, 391, 676, 391, 391, 391, 391, 391, 391, 2006, 391, 391, 391, 391, 391, 391, 391,
  /* 34871 */ 391, 391, 391, 1522, 391, 391, 0, 0, 0, 0, 762, 766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
  /* 34899 */ 391, 391, 391, 1954, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1271, 391, 391, 391, 273,
  /* 34920 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 271, 0, 0, 273, 271, 40960, 271, 273, 271, 271, 271, 271, 0,
  /* 34947 */ 271, 364, 364, 364, 364, 382, 382, 382, 382, 382, 405, 382, 382, 382, 382, 382, 382, 382, 382, 405, 405,
  /* 34968 */ 405, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 455, 419,
  /* 34989 */ 419, 419, 419, 419, 419, 419, 53467, 53467, 2, 2, 3, 94212, 0, 531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 0,
  /* 35015 */ 0, 0, 0, 0, 0, 1819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 268, 269, 0, 0, 0, 0, 0, 0, 0, 495, 0, 0, 0,
  /* 35045 */ 566, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 1158, 352, 352, 352, 352, 352, 892, 369, 369, 369, 369,
  /* 35068 */ 369, 1201, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1436, 369, 369, 369, 369, 0, 369, 607, 369,
  /* 35089 */ 369, 369, 369, 625, 369, 369, 369, 369, 641, 643, 369, 369, 653, 391, 391, 698, 700, 391, 391, 710, 391,
  /* 35110 */ 391, 391, 391, 0, 0, 0, 0, 391, 391, 391, 391, 1306, 391, 391, 1309, 0, 1310, 0, 0, 0, 0, 0, 1312, 391,
  /* 35134 */ 391, 391, 664, 723, 391, 391, 391, 391, 391, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 1961984, 0, 1638400, 0, 0, 0,
  /* 35159 */ 1777664, 0, 1871872, 0, 1486848, 664, 723, 391, 391, 391, 391, 391, 729, 664, 391, 391, 698, 391, 391,
  /* 35178 */ 729, 391, 391, 391, 391, 1477, 391, 391, 391, 391, 391, 391, 391, 1483, 391, 391, 391, 391, 391, 1237,
  /* 35198 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 993, 391, 391, 391, 391, 698, 391, 723, 391, 391,
  /* 35219 */ 753, 391, 664, 391, 391, 53467, 2, 6, 0, 0, 0, 0, 0, 0, 1975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 282, 0,
  /* 35247 */ 0, 0, 0, 0, 0, 0, 0, 823, 0, 0, 0, 0, 0, 0, 0, 0, 832, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 831, 0, 0, 0,
  /* 35280 */ 0, 0, 0, 1353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 946176, 946176, 946176, 946176, 946176, 946176, 369, 930,
  /* 35302 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1757, 369, 369, 659, 91063,
  /* 35322 */ 892, 662, 391, 956, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1480, 1481, 391, 391, 391, 391, 391, 0,
  /* 35343 */ 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 775, 0, 1168, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 35370 */ 369, 369, 369, 369, 369, 1182, 1212, 369, 1214, 369, 0, 1220, 91063, 0, 1220, 391, 391, 391, 391, 1228,
  /* 35390 */ 391, 391, 391, 391, 391, 1633, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 332167, 391, 391,
  /* 35410 */ 391, 391, 0, 1349, 0, 0, 1351, 0, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 311296, 1362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35438 */ 0, 0, 0, 0, 0, 0, 200704, 352, 352, 1390, 352, 1391, 1392, 352, 352, 352, 352, 352, 352, 369, 369, 369,
  /* 35460 */ 369, 369, 369, 369, 369, 369, 1596, 369, 369, 369, 1419, 369, 1421, 369, 369, 369, 369, 369, 1424, 369,
  /* 35480 */ 369, 369, 1428, 391, 1475, 391, 391, 391, 391, 391, 1478, 391, 391, 391, 1482, 391, 391, 391, 391, 391,
  /* 35500 */ 391, 2044, 391, 391, 391, 391, 391, 2049, 391, 0, 0, 391, 391, 391, 391, 1682, 1683, 0, 0, 0, 0, 0, 0, 0,
  /* 35524 */ 0, 0, 0, 540, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 479, 480, 0, 0, 0, 369,
  /* 35555 */ 369, 369, 1759, 369, 369, 0, 0, 0, 0, 391, 391, 391, 391, 391, 391, 391, 1669, 391, 391, 391, 391, 391,
  /* 35577 */ 391, 391, 391, 391, 1785, 391, 391, 391, 391, 391, 391, 1868, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 35598 */ 391, 391, 391, 391, 391, 391, 1287, 391, 352, 2026, 369, 369, 369, 369, 369, 369, 369, 369, 2034, 369,
  /* 35618 */ 369, 2036, 391, 391, 391, 391, 391, 1659, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1009, 0, 0,
  /* 35639 */ 963, 391, 391, 0, 0, 0, 0, 369, 369, 369, 369, 2170, 369, 391, 391, 391, 391, 2176, 391, 391, 391, 391,
  /* 35661 */ 1516, 391, 391, 1519, 391, 391, 391, 391, 391, 0, 0, 0, 0, 1054, 0, 0, 0, 1060, 0, 0, 391, 2178, 0, 0,
  /* 35685 */ 2181, 369, 369, 369, 369, 369, 369, 391, 391, 391, 391, 391, 391, 725, 391, 391, 391, 0, 0, 0, 0, 391, 0,
  /* 35708 */ 0, 274, 275, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35740 */ 0, 111019, 0, 0, 0, 0, 0, 308, 0, 309, 0, 0, 0, 0, 309, 0, 313, 0, 0, 0, 0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
  /* 35770 */ 0, 0, 0, 282, 238, 0, 0, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 323, 0, 0, 45056, 49152, 0, 0, 0, 337,
  /* 35799 */ 40960, 337, 0, 337, 337, 337, 337, 0, 337, 365, 365, 365, 365, 383, 383, 383, 383, 383, 406, 383, 383,
  /* 35820 */ 383, 383, 383, 383, 383, 383, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 439,
  /* 35841 */ 446, 53467, 53467, 2, 2, 3, 94212, 406, 406, 406, 406, 438, 406, 439, 406, 406, 406, 406, 446, 406, 439,
  /* 35862 */ 446, 406, 0, 469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 817, 0, 0, 0, 0, 0, 488, 0, 0, 0, 0, 0, 0, 0,
  /* 35894 */ 0, 0, 0, 0, 541, 0, 0, 0, 0, 575, 352, 352, 352, 352, 352, 591, 352, 352, 352, 352, 352, 352, 352, 352,
  /* 35918 */ 352, 876, 352, 352, 352, 352, 352, 352, 352, 352, 877, 352, 352, 352, 352, 352, 352, 352, 369, 608, 369,
  /* 35939 */ 369, 369, 369, 369, 631, 369, 369, 369, 369, 369, 369, 369, 369, 1602, 369, 369, 369, 1605, 369, 369, 369,
  /* 35960 */ 369, 369, 391, 688, 391, 665, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 0, 2192, 369, 369,
  /* 35984 */ 369, 2194, 391, 391, 391, 0, 0, 369, 731, 391, 688, 391, 391, 391, 391, 391, 731, 391, 391, 391, 391, 391,
  /* 36006 */ 391, 391, 391, 2007, 391, 391, 391, 391, 391, 391, 391, 711, 391, 391, 391, 391, 391, 391, 745, 391, 0,
  /* 36027 */ 778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 850, 0, 791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 0,
  /* 36059 */ 0, 0, 0, 0, 857, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 1989, 369,
  /* 36084 */ 352, 871, 352, 873, 352, 352, 352, 352, 352, 352, 352, 352, 352, 880, 352, 352, 352, 352, 352, 352, 1590,
  /* 36105 */ 369, 369, 369, 369, 369, 1594, 369, 369, 369, 369, 903, 369, 907, 369, 369, 369, 369, 369, 913, 369, 369,
  /* 36126 */ 369, 369, 369, 1616, 369, 369, 369, 369, 369, 369, 369, 1621, 369, 369, 369, 898, 369, 369, 905, 369, 369,
  /* 36147 */ 909, 369, 369, 369, 369, 369, 369, 369, 369, 1617, 369, 369, 369, 369, 369, 1620, 369, 369, 369, 369, 369,
  /* 36168 */ 659, 91063, 892, 662, 391, 391, 391, 391, 959, 391, 391, 966, 391, 391, 391, 391, 391, 1772, 391, 391,
  /* 36188 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 782727, 391, 391, 391, 391, 970, 391, 391, 391, 391, 391,
  /* 36208 */ 391, 391, 391, 391, 391, 391, 391, 391, 981, 391, 391, 391, 391, 1646, 391, 391, 391, 391, 391, 391, 391,
  /* 36229 */ 391, 391, 391, 391, 0, 0, 1904, 0, 0, 0, 0, 0, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 815, 0, 0, 0, 0,
  /* 36259 */ 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 816, 0, 818, 391, 1303, 391, 391, 391, 391, 391, 391, 0,
  /* 36286 */ 0, 0, 0, 0, 0, 0, 0, 369, 2124, 369, 369, 369, 0, 0, 0, 1326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
  /* 36315 */ 352, 352, 867, 0, 0, 0, 704512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1087, 0, 0, 1090, 1429, 369, 369, 369,
  /* 36342 */ 369, 369, 369, 369, 369, 1435, 369, 369, 369, 369, 369, 0, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 36363 */ 391, 219, 2, 6, 0, 0, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 1453, 391, 391, 391, 391, 391, 391, 391, 730, 391,
  /* 36388 */ 685, 53467, 2, 6, 0, 0, 0, 369, 369, 1613, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 36410 */ 369, 369, 1440, 0, 391, 391, 1644, 391, 391, 391, 391, 391, 1650, 391, 391, 391, 391, 391, 391, 391, 731,
  /* 36431 */ 391, 688, 53467, 2, 6, 0, 0, 0, 0, 1706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 1721,
  /* 36461 */ 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1387, 1388, 1747, 369, 369, 369, 369, 369,
  /* 36484 */ 369, 369, 369, 369, 369, 369, 1755, 369, 369, 369, 369, 620, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 36505 */ 369, 369, 0, 391, 391, 665, 391, 391, 391, 391, 391, 688, 391, 391, 1780, 391, 391, 391, 391, 391, 391,
  /* 36526 */ 391, 391, 391, 391, 391, 391, 391, 391, 1300, 391, 0, 0, 1827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
  /* 36552 */ 352, 352, 352, 352, 1736, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1861, 369, 369, 369, 369, 369,
  /* 36573 */ 0, 0, 0, 0, 1915, 0, 0, 0, 0, 1919, 0, 0, 0, 0, 352, 352, 352, 352, 352, 369, 369, 369, 369, 369, 369,
  /* 36598 */ 369, 369, 1744, 369, 369, 369, 369, 1186, 369, 369, 369, 369, 369, 369, 369, 1192, 369, 369, 369, 369,
  /* 36618 */ 919, 369, 369, 369, 369, 369, 924, 369, 369, 369, 369, 369, 0, 391, 391, 664, 391, 391, 391, 391, 682,
  /* 36639 */ 391, 391, 352, 352, 352, 352, 1928, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1437, 1438,
  /* 36659 */ 369, 369, 0, 0, 1972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1979, 1980, 0, 0, 0, 0, 0, 0, 2057, 2058, 0, 369, 369,
  /* 36686 */ 369, 369, 369, 369, 369, 1603, 369, 369, 369, 369, 369, 369, 369, 369, 1944, 369, 369, 369, 391, 391, 391,
  /* 36707 */ 391, 391, 352, 369, 369, 369, 369, 369, 2030, 369, 2032, 369, 369, 369, 369, 391, 391, 391, 391, 391,
  /* 36727 */ 1250, 391, 391, 391, 391, 1253, 1254, 391, 1256, 1257, 391, 391, 391, 2040, 391, 2042, 391, 391, 391, 391,
  /* 36747 */ 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2092, 369, 369, 369, 369, 369, 1174, 369, 369, 369,
  /* 36771 */ 369, 369, 369, 369, 369, 369, 369, 1619, 369, 369, 369, 369, 369, 369, 369, 2129, 369, 369, 391, 391, 391,
  /* 36792 */ 391, 391, 391, 391, 2138, 391, 391, 391, 391, 391, 1279, 391, 391, 1282, 391, 391, 391, 391, 391, 391,
  /* 36812 */ 391, 391, 989, 391, 391, 391, 391, 391, 391, 997, 369, 369, 369, 391, 2156, 391, 391, 391, 391, 391, 391,
  /* 36833 */ 391, 391, 2161, 391, 0, 0, 0, 1807, 0, 0, 0, 0, 0, 1810, 0, 0, 0, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36863 */ 0, 1558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 0, 0,
  /* 36895 */ 1139, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 366, 366, 366, 366, 384, 384, 384, 384, 384, 407,
  /* 36921 */ 384, 384, 384, 384, 384, 384, 384, 384, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 431,
  /* 36942 */ 407, 431, 431, 431, 431, 431, 407, 431, 440, 447, 53467, 53467, 2, 2, 3, 94212, 431, 431, 431, 431, 431,
  /* 36963 */ 431, 440, 431, 431, 431, 431, 447, 431, 440, 447, 407, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36990 */ 1101, 0, 0, 0, 0, 0, 502, 0, 0, 0, 0, 0, 0, 282, 282, 282, 0, 0, 0, 0, 0, 0, 564, 0, 0, 0, 568, 0, 0, 0,
  /* 37020 */ 0, 352, 0, 0, 516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 849, 0, 0, 0, 0, 0, 533, 0, 0, 0, 0, 0, 516, 0,
  /* 37052 */ 542, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 282, 0, 0, 0, 513, 0, 516, 542, 0, 0, 0,
  /* 37082 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 865, 352, 352, 558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352,
  /* 37113 */ 352, 352, 1844, 352, 369, 369, 369, 369, 369, 369, 369, 369, 369, 939, 369, 369, 369, 369, 944, 369, 369,
  /* 37134 */ 609, 369, 369, 369, 369, 626, 632, 634, 369, 369, 369, 369, 369, 649, 369, 369, 369, 391, 391, 2072, 391,
  /* 37155 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1470, 391, 391, 391, 391, 391, 689, 391, 666, 391, 391,
  /* 37176 */ 391, 391, 391, 391, 0, 0, 0, 0, 391, 0, 0, 0, 2018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 495, 496, 0, 0, 0,
  /* 37205 */ 732, 391, 689, 391, 391, 706, 706, 391, 666, 391, 391, 391, 691, 744, 391, 391, 391, 391, 391, 1793, 391,
  /* 37226 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 991, 391, 391, 391, 391, 391, 0, 792, 793, 0, 0, 0, 0, 0, 0,
  /* 37250 */ 0, 0, 802, 282, 282, 0, 0, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 282, 282, 803, 0, 0, 806,
  /* 37279 */ 807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1322, 0, 0, 0, 836, 0, 0, 0, 0, 843, 0, 0, 0, 0, 0, 848, 0, 0,
  /* 37311 */ 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 135168, 45056, 49152, 897, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 37334 */ 369, 369, 369, 369, 369, 369, 369, 1195, 369, 369, 369, 933, 934, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 37355 */ 369, 369, 369, 1947, 391, 391, 391, 391, 369, 369, 659, 91063, 892, 662, 391, 391, 391, 958, 391, 391,
  /* 37375 */ 391, 391, 391, 391, 391, 1773, 391, 391, 391, 391, 391, 391, 391, 391, 391, 961, 391, 391, 391, 391, 961,
  /* 37396 */ 1011, 391, 984, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 994, 995, 391, 391, 391, 391, 391, 1885,
  /* 37417 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 851, 0, 391, 391, 391, 994, 391, 391, 391, 391,
  /* 37438 */ 391, 391, 1022, 391, 1024, 391, 958, 391, 1026, 391, 1028, 391, 994, 391, 1048, 1026, 0, 0, 0, 1053, 0, 0,
  /* 37460 */ 0, 1059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 1067, 0, 0, 0, 0, 0, 1073, 0, 0,
  /* 37491 */ 0, 0, 0, 0, 0, 1316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1356, 0, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37523 */ 0, 0, 0, 0, 0, 0, 217088, 0, 352, 352, 1144, 352, 352, 352, 352, 352, 352, 1150, 352, 352, 352, 352, 352,
  /* 37546 */ 1154, 369, 1170, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1181, 369, 369, 369, 369, 1218,
  /* 37566 */ 1220, 91063, 1223, 1220, 391, 391, 391, 391, 391, 391, 1231, 391, 391, 391, 1249, 391, 391, 391, 391, 391,
  /* 37586 */ 1283, 516487, 391, 391, 391, 391, 391, 391, 975, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1652,
  /* 37606 */ 391, 391, 391, 391, 391, 391, 1298, 391, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 369,
  /* 37630 */ 369, 369, 369, 369, 369, 0, 0, 0, 1338, 0, 0, 0, 0, 0, 0, 0, 528384, 1345, 1346, 0, 0, 0, 0, 0, 1110, 0,
  /* 37656 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 471, 553, 554, 555, 0, 0, 0, 0, 0, 0, 1363, 0, 0, 0, 0, 0, 1369, 0, 0, 0, 0, 0,
  /* 37687 */ 0, 0, 1342, 0, 0, 0, 0, 0, 0, 1347, 0, 1417, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 37711 */ 369, 369, 369, 1211, 0, 1445, 0, 1220, 0, 0, 1451, 0, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1506,
  /* 37733 */ 391, 391, 391, 391, 391, 391, 391, 1461, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1471, 391, 391,
  /* 37754 */ 391, 391, 391, 1292, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1284, 391, 391, 391, 391, 391,
  /* 37775 */ 1486, 391, 391, 1488, 391, 391, 391, 391, 391, 391, 1495, 391, 391, 391, 391, 391, 667, 391, 726, 391,
  /* 37795 */ 728, 0, 0, 0, 0, 391, 0, 391, 391, 391, 1515, 391, 391, 1518, 391, 391, 391, 391, 391, 391, 0, 0, 0, 1685,
  /* 37819 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1977, 1978, 0, 0, 0, 1982, 0, 0, 0, 0, 0, 1527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37850 */ 0, 814, 0, 0, 0, 0, 1611, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1416,
  /* 37873 */ 391, 391, 1631, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1639, 391, 391, 391, 391, 391, 1307, 391,
  /* 37893 */ 391, 0, 1310, 0, 0, 0, 0, 0, 1312, 1642, 391, 391, 391, 391, 391, 1648, 391, 391, 391, 391, 391, 391, 391,
  /* 37916 */ 391, 391, 391, 53467, 53707, 2, 2, 3, 94212, 0, 0, 1720, 0, 0, 0, 1724, 0, 0, 0, 352, 352, 352, 1731, 352,
  /* 37940 */ 352, 352, 352, 352, 369, 369, 369, 369, 369, 369, 369, 369, 1936, 369, 369, 369, 369, 1218, 1220, 91063,
  /* 37960 */ 1223, 1220, 391, 391, 391, 391, 391, 391, 391, 391, 1479, 391, 391, 391, 391, 391, 391, 391, 391, 1520,
  /* 37980 */ 391, 391, 391, 391, 0, 0, 0, 0, 1686, 0, 0, 1689, 1690, 0, 0, 0, 391, 1768, 391, 391, 1771, 391, 391, 391,
  /* 38004 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 1661, 391, 391, 391, 1853, 369, 369, 369, 369, 369, 369, 369,
  /* 38025 */ 369, 369, 369, 369, 369, 1865, 369, 369, 369, 369, 1219, 1220, 91063, 1224, 1220, 391, 391, 391, 391, 391,
  /* 38045 */ 391, 391, 391, 1957, 391, 391, 391, 391, 391, 391, 391, 391, 1295, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 38066 */ 1467, 1468, 391, 391, 391, 391, 391, 391, 391, 391, 1870, 391, 391, 391, 391, 391, 391, 1875, 391, 391,
  /* 38086 */ 391, 391, 391, 391, 391, 1956, 391, 391, 391, 391, 1961, 391, 391, 391, 0, 0, 0, 0, 1909, 0, 0, 0, 0, 0,
  /* 38110 */ 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 352, 352, 352, 1927, 352, 369, 369, 369, 369, 369, 369, 369, 369, 369,
  /* 38135 */ 369, 369, 1753, 369, 369, 369, 369, 369, 369, 369, 1938, 369, 369, 369, 369, 1943, 369, 369, 369, 369,
  /* 38155 */ 391, 391, 391, 391, 391, 391, 976, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 2009, 391, 391, 391,
  /* 38176 */ 391, 391, 1983, 0, 0, 352, 352, 352, 352, 352, 369, 369, 369, 369, 1987, 369, 369, 369, 369, 904, 369,
  /* 38197 */ 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1425, 369, 369, 369, 391, 2143, 0, 0, 0, 0, 2145,
  /* 38219 */ 0, 0, 2148, 369, 369, 369, 369, 369, 369, 1751, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1191, 369,
  /* 38240 */ 369, 369, 369, 369, 369, 2153, 2154, 369, 391, 391, 391, 391, 391, 391, 2159, 2160, 391, 391, 391, 391, 0,
  /* 38261 */ 0, 0, 0, 0, 0, 0, 0, 369, 369, 369, 2151, 369, 2152, 0, 2163, 2164, 0, 369, 369, 369, 369, 369, 369, 391,
  /* 38285 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 2080, 391, 2082, 2196, 391, 2197, 369, 391, 369, 391, 369,
  /* 38305 */ 391, 369, 391, 0, 0, 0, 0, 0, 0, 0, 1354, 0, 0, 0, 0, 0, 0, 1361, 0, 0, 0, 0, 0, 277, 0, 0, 0, 0, 0, 282,
  /* 38335 */ 0, 0, 0, 0, 0, 0, 0, 1530, 0, 0, 1533, 0, 0, 0, 1536, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38367 */ 1125, 0, 0, 0, 0, 277, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 367, 385, 385, 385, 385, 385,
  /* 38393 */ 408, 385, 385, 385, 385, 385, 385, 385, 385, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
  /* 38414 */ 408, 408, 450, 408, 408, 408, 408, 408, 450, 408, 408, 408, 408, 408, 408, 408, 53467, 53467, 2, 2, 3,
  /* 38435 */ 94212, 869, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 1152, 352, 352,
  /* 38455 */ 369, 369, 369, 902, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 942, 369, 369, 369, 369,
  /* 38476 */ 948, 659, 91063, 892, 662, 391, 391, 391, 391, 391, 391, 963, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 38497 */ 391, 391, 391, 1298, 391, 391, 391, 1075, 0, 0, 0, 0, 0, 0, 1082, 1083, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
  /* 38523 */ 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 391, 1246, 391, 391, 391, 391, 391, 391, 391, 1252,
  /* 38547 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1497, 391, 391, 391, 1260, 391, 391, 391,
  /* 38568 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1498, 391, 0, 0, 1446, 1220, 0, 0, 0, 1452, 391,
  /* 38590 */ 391, 391, 391, 391, 391, 391, 391, 391, 2046, 391, 2048, 391, 391, 0, 0, 391, 391, 391, 1463, 391, 391,
  /* 38611 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1509, 391, 391, 391, 0, 1525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38636 */ 0, 0, 0, 0, 0, 1140, 0, 391, 2002, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 38659 */ 1641, 391, 369, 369, 369, 2130, 369, 391, 391, 391, 391, 391, 391, 391, 391, 2139, 391, 391, 391, 391,
  /* 38679 */ 391, 1897, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 1687, 0, 0, 0, 0, 1691, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
  /* 38707 */ 0, 0, 0, 0, 0, 0, 0, 1703, 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1360, 0, 0, 0, 286, 0, 0,
  /* 38739 */ 40960, 0, 0, 0, 0, 0, 0, 0, 0, 352, 352, 352, 352, 1582, 352, 352, 352, 352, 352, 352, 352, 352, 1162,
  /* 38762 */ 352, 352, 892, 369, 369, 1166, 369, 352, 352, 352, 352, 386, 386, 386, 386, 386, 409, 386, 386, 386, 386,
  /* 38783 */ 386, 386, 409, 409, 409, 409, 409, 409, 409, 409, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 53467,
  /* 38804 */ 53467, 2, 2, 3, 94212, 424, 424, 424, 424, 424, 424, 424, 424, 424, 443, 424, 424, 424, 424, 424, 424, 0,
  /* 38826 */ 0, 0, 794, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 0, 0, 0, 0, 0, 1130, 1131, 0, 0, 1134, 0, 0, 0, 0, 0, 0, 0,
  /* 38856 */ 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1368, 0, 0, 0, 0, 0, 0, 352, 352, 872, 352, 352, 352, 352, 352, 352, 352,
  /* 38883 */ 352, 352, 352, 352, 352, 352, 892, 369, 369, 369, 369, 369, 369, 659, 91063, 892, 662, 391, 391, 391, 391,
  /* 38904 */ 391, 391, 391, 391, 967, 391, 391, 391, 391, 1666, 1667, 391, 391, 391, 391, 1672, 391, 391, 391, 391,
  /* 38924 */ 391, 391, 673, 391, 391, 391, 0, 0, 0, 0, 391, 0, 391, 1046, 391, 391, 1013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38951 */ 0, 847, 0, 0, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 391, 391, 1247, 391, 391,
  /* 38979 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1510, 391, 391, 0, 0, 1707, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39004 */ 0, 0, 0, 0, 0, 1535, 0, 0, 0, 0, 0, 0, 279, 0, 0, 0, 0, 0, 279, 0, 279, 0, 45056, 49152, 0, 0, 0, 338,
  /* 39032 */ 40960, 338, 0, 338, 338, 338, 338, 0, 338, 368, 368, 368, 368, 387, 387, 387, 387, 387, 410, 387, 387,
  /* 39053 */ 387, 387, 387, 387, 387, 387, 410, 410, 410, 410, 410, 410, 410, 410, 425, 425, 425, 425, 425, 437, 437,
  /* 39074 */ 425, 437, 437, 437, 437, 437, 437, 437, 53467, 53467, 2, 2, 3, 94212, 425, 425, 425, 425, 425, 425, 425,
  /* 39095 */ 425, 425, 425, 425, 425, 425, 425, 425, 437, 1656, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 39116 */ 391, 391, 391, 391, 1655, 391, 352, 352, 352, 352, 388, 388, 388, 388, 388, 411, 388, 388, 388, 388, 388,
  /* 39137 */ 388, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
  /* 39158 */ 411, 411, 411, 411, 411, 411, 53467, 53467, 2, 2, 3, 94212, 0, 515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39185 */ 0, 1716, 0, 352, 352, 352, 584, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 892, 369, 895,
  /* 39207 */ 369, 0, 0, 0, 0, 840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0, 0, 0, 391, 391, 391, 1001, 391, 391,
  /* 39235 */ 391, 391, 391, 391, 391, 0, 0, 391, 391, 391, 391, 391, 1465, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 39257 */ 391, 391, 1891, 391, 391, 391, 391, 0, 0, 0, 1220, 1448, 0, 0, 0, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 39280 */ 674, 686, 53467, 2, 6, 0, 0, 0, 0, 0, 0, 0, 472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
  /* 39311 */ 0, 548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 1141, 352, 352, 352, 1156, 352, 352, 352, 352,
  /* 39337 */ 352, 352, 352, 892, 369, 369, 369, 369, 369, 1407, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 1411,
  /* 39358 */ 369, 369, 369, 369, 369, 369, 391, 418183, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  /* 39378 */ 391, 391, 1788, 391, 391, 391, 419096, 391, 391, 391, 391, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 369, 369,
  /* 39402 */ 369, 2096, 1324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 647168, 0, 0, 0, 1220, 0, 0, 0, 0, 391,
  /* 39430 */ 1454, 391, 391, 391, 391, 391, 391, 391, 1966, 391, 391, 391, 1969, 391, 391, 0, 0, 391, 668039, 391, 391,
  /* 39451 */ 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 1801, 391, 391, 391, 391, 1895, 391, 391, 391,
  /* 39472 */ 391, 391, 391, 391, 0, 0, 0, 0, 0, 2120, 2121, 0, 369, 369, 369, 369, 369, 0, 0, 0, 0, 40960, 0, 0, 0, 0,
  /* 39498 */ 0, 0, 349, 0, 352, 352, 352, 352, 352, 352, 1148, 352, 352, 352, 352, 352, 352, 352, 352, 352, 889, 352,
  /* 39520 */ 891, 892, 369, 369, 369, 0, 946176, 0, 0, 0, 0, 0, 0, 0, 946176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39548 */ 1573, 0, 0, 0, 946176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 946176, 0, 0, 946503, 946503, 0, 0, 0, 0, 946503, 0, 0,
  /* 39574 */ 0, 0, 0, 0, 0, 0, 0, 946176, 0, 0, 946176, 0, 0, 0, 0, 0, 946176, 0, 946176, 0, 0, 0, 0, 0, 0, 0, 946176,
  /* 39601 */ 946176, 0, 0, 0, 0, 0, 0, 797, 0, 0, 800, 0, 0, 282, 282, 0, 0, 946176, 946176, 946176, 946176, 946176,
  /* 39623 */ 946176, 946176, 946176, 946176, 946176, 946176, 946176, 946176, 946176, 946176, 946176, 0, 0, 2, 2166784,
  /* 39638 */ 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 307200, 0, 0, 1056768, 237, 238, 0, 0, 0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
  /* 39666 */ 0, 0, 0, 0, 0, 626688, 0, 0, 0, 0, 1114112, 1114112, 1114112, 1114112, 1114771, 0, 1114112, 1114774,
  /* 39684 */ 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112, 0, 758, 6, 0, 0,
  /* 39699 */ 299008, 1769472, 1114112, 1114112, 1114112, 1630208, 2166784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 813, 0, 0, 0,
  /* 39720 */ 0, 0, 954800, 954800, 954800, 954800, 954800, 954800, 954800, 954800, 954800, 954800, 954800, 954800,
  /* 39734 */ 954800, 954800, 954800, 954800, 0, 0, 2, 2, 3, 94212, 962560, 0, 962560, 962560, 0, 962560, 962560,
  /* 39751 */ 962560, 962560, 0, 962560, 962560, 0, 962560, 962560, 962890, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39774 */ 0, 1358, 0, 0, 0, 0, 962890, 962890, 0, 962890, 962890, 962890, 962890, 962890, 962890, 962890, 0, 0, 2,
  /* 39793 */ 2, 3, 94212, 1114112, 1114112, 950, 0, 0, 953, 1114112, 1114112, 1114112, 1114112, 1114112, 1114112,
  /* 39808 */ 1114112, 1114112, 1114112, 1114112, 0, 221, 2200013, 0, 0, 0, 0, 106496, 106496, 0, 106496, 106496, 0,
  /* 39825 */ 106496, 106496, 106496, 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 39839 */ 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060864
];

XQueryParser.EXPECTED =
[
  /*    0 */ 551, 556, 554, 557, 561, 565, 569, 573, 1255, 1535, 579, 586, 592, 678, 1446, 1876, 1430, 596, 615, 643,
  /*   20 */ 588, 624, 669, 680, 1254, 1254, 600, 608, 643, 632, 624, 624, 671, 1448, 1254, 612, 617, 644, 623, 624,
  /*   40 */ 625, 1824, 1254, 629, 643, 636, 624, 638, 1254, 804, 619, 624, 809, 746, 642, 624, 648, 1734, 807, 660,
  /*   60 */ 654, 809, 658, 1443, 666, 675, 684, 688, 692, 696, 700, 706, 702, 710, 714, 718, 722, 650, 1254, 728, 1254,
  /*   81 */ 977, 734, 914, 1254, 1254, 1690, 1254, 1254, 1254, 1254, 740, 1254, 1254, 1254, 1463, 1254, 1254, 1254,
  /*   99 */ 1254, 1254, 1254, 1254, 1254, 745, 1254, 1254, 1254, 1254, 1254, 1254, 1450, 1254, 1254, 1254, 1254, 1254,
  /*  117 */ 1449, 1254, 1254, 1254, 1254, 975, 1254, 1254, 858, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
  /*  135 */ 1254, 1254, 1254, 750, 1254, 823, 662, 761, 765, 769, 752, 1160, 1437, 773, 780, 892, 784, 788, 741, 730,
  /*  155 */ 604, 794, 1254, 1809, 1254, 801, 813, 1254, 1029, 1084, 1501, 1254, 820, 1254, 827, 834, 1254, 1035, 1633,
  /*  174 */ 838, 1281, 844, 849, 1911, 1254, 853, 1680, 1254, 857, 1692, 862, 736, 868, 1465, 845, 874, 886, 880, 757,
  /*  194 */ 884, 890, 896, 900, 904, 911, 920, 1188, 1419, 927, 931, 935, 1254, 1073, 1072, 942, 963, 946, 950, 954,
  /*  214 */ 1070, 916, 1591, 960, 981, 790, 1652, 1001, 870, 907, 985, 992, 1254, 1630, 1197, 996, 1000, 1755, 1568,
  /*  233 */ 1005, 1635, 1009, 956, 1254, 1015, 1019, 1023, 830, 1027, 1033, 1254, 1039, 1480, 1045, 938, 1049, 1460,
  /*  251 */ 1254, 1053, 1059, 1063, 1683, 1185, 1067, 1077, 1081, 1088, 1092, 1623, 1096, 1100, 1106, 1110, 1114, 1118,
  /*  269 */ 1122, 1126, 582, 923, 1130, 1134, 1138, 1881, 1920, 1143, 1147, 1151, 1155, 1159, 1918, 1171, 1164, 1168,
  /*  287 */ 1178, 1598, 1609, 1041, 1174, 1182, 1192, 1214, 1196, 1055, 1260, 1649, 1201, 1612, 1205, 1209, 1932, 1213,
  /*  305 */ 1323, 1218, 1222, 1887, 1812, 1229, 1499, 1233, 1254, 1271, 1753, 1254, 1240, 1244, 1248, 1254, 1252, 1259,
  /*  323 */ 1921, 1264, 1440, 1102, 1254, 1922, 1268, 1277, 1254, 1285, 1838, 1280, 816, 1710, 1289, 1296, 1303, 1300,
  /*  341 */ 1900, 1310, 1306, 1254, 1840, 1844, 1337, 1868, 1314, 1318, 1322, 1842, 1292, 1327, 1331, 1341, 1345, 1349,
  /*  359 */ 1273, 1355, 1359, 1363, 1254, 1367, 1825, 1373, 1380, 1938, 1384, 1429, 1388, 1254, 1392, 1254, 1398, 1699,
  /*  377 */ 1927, 797, 1402, 1406, 966, 1254, 1457, 1416, 1423, 1427, 1434, 724, 1254, 972, 1454, 1469, 1473, 969, 575,
  /*  396 */ 1477, 1484, 1488, 1492, 1894, 1496, 1511, 1505, 1509, 1236, 1515, 1376, 1522, 1519, 1526, 988, 1530, 1534,
  /*  414 */ 1254, 1539, 1543, 1547, 1551, 1555, 1254, 1559, 1563, 1567, 1334, 1572, 1576, 1580, 1011, 1586, 1590, 1582,
  /*  432 */ 1254, 1595, 1668, 1602, 1606, 1139, 1616, 1620, 1662, 1254, 1627, 1254, 1639, 1646, 1010, 1656, 1660, 1666,
  /*  450 */ 864, 1254, 1225, 1642, 1673, 1677, 1687, 840, 1254, 1851, 1696, 1703, 1707, 1716, 1723, 1727, 1731, 1738,
  /*  468 */ 1742, 1746, 1750, 1759, 1763, 1719, 1767, 776, 1771, 1775, 1779, 1783, 1787, 756, 1254, 1254, 1791, 1794,
  /*  486 */ 1798, 1802, 1806, 1254, 876, 1254, 1816, 1820, 1829, 1835, 1254, 1669, 1254, 1848, 1408, 1254, 1855, 1254,
  /*  504 */ 1831, 1254, 1857, 1254, 1861, 1865, 1254, 1822, 1254, 1872, 1880, 1668, 1254, 1885, 1410, 1412, 1254, 1891,
  /*  522 */ 1875, 1898, 1904, 1908, 1712, 1254, 1915, 1254, 1926, 1931, 754, 602, 1254, 1394, 1254, 1254, 1254, 1936,
  /*  540 */ 1254, 1351, 1254, 1369, 1254, 1254, 1254, 1254, 1254, 1254, 1255, 1942, 2008, 2635, 1957, 2260, 1957, 1957,
  /*  558 */ 1957, 1957, 1948, 2257, 1959, 1954, 1950, 1963, 1967, 1971, 1974, 1978, 1982, 1986, 1990, 1944, 1994, 3384,
  /*  576 */ 3384, 1997, 2001, 3604, 2225, 3384, 2389, 2856, 2578, 2614, 2094, 2094, 2104, 2104, 2029, 2065, 2012, 2065,
  /*  594 */ 2065, 2016, 2060, 3384, 3384, 3172, 2052, 2056, 3384, 3384, 2088, 3384, 2374, 3384, 2094, 2094, 2094, 2102,
  /*  612 */ 2070, 3384, 3172, 2094, 2094, 2094, 2096, 2104, 2104, 2105, 2084, 2079, 2065, 2065, 2065, 2065, 2118, 3173,
  /*  630 */ 2094, 2095, 2104, 2104, 2106, 2064, 2078, 2083, 2065, 2065, 2086, 3384, 2100, 2104, 2104, 2104, 2104, 2048,
  /*  648 */ 2065, 2110, 3384, 3384, 2089, 2024, 3173, 2104, 2104, 2116, 2103, 2122, 2065, 2085, 3384, 3384, 2271, 2825,
  /*  666 */ 2087, 2046, 2122, 2065, 2039, 2065, 2065, 2065, 2156, 2110, 2046, 2122, 2065, 2042, 2065, 2065, 2032, 2157,
  /*  684 */ 2087, 3752, 2123, 2066, 3751, 2116, 2045, 2123, 2045, 2127, 2137, 2140, 3129, 2146, 2150, 2154, 2156, 2156,
  /*  702 */ 2156, 2156, 2172, 2176, 2178, 2162, 2166, 2170, 2182, 2186, 2190, 2035, 3278, 2194, 2198, 2202, 2206, 2210,
  /*  720 */ 2214, 2284, 3731, 2130, 3384, 3384, 2326, 3358, 3384, 3290, 3384, 3384, 2365, 2382, 2468, 3018, 3384, 3384,
  /*  738 */ 2388, 2383, 2444, 3384, 3384, 3384, 2355, 2230, 3384, 3384, 3384, 2389, 2236, 3384, 2824, 2240, 3384, 3384,
  /*  756 */ 2529, 3384, 3384, 3384, 3238, 2275, 2281, 2293, 2296, 2297, 2301, 2305, 2308, 2312, 2316, 3384, 3548, 2283,
  /*  774 */ 3732, 2320, 3384, 2072, 3384, 2074, 3271, 2324, 3384, 3295, 2335, 2487, 3865, 2339, 2789, 2351, 3384, 3384,
  /*  792 */ 2551, 2555, 3384, 3384, 3658, 3018, 2711, 2547, 3299, 2813, 2593, 2381, 3384, 2093, 2101, 2104, 2123, 2065,
  /*  810 */ 2065, 2111, 3384, 3237, 2388, 2396, 3384, 2225, 3214, 3065, 3384, 3595, 2401, 3384, 2247, 2254, 2264, 3384,
  /*  828 */ 3307, 3624, 3384, 2286, 2357, 2696, 3591, 2920, 3384, 2397, 2417, 3018, 3384, 3384, 2585, 3007, 2419, 3384,
  /*  846 */ 3384, 3384, 2395, 3384, 3384, 3796, 3624, 2361, 3384, 2844, 2450, 3041, 3384, 3384, 3384, 2404, 3593, 3729,
  /*  864 */ 3384, 3384, 2587, 3639, 2993, 3597, 3384, 3384, 2597, 3384, 3239, 3594, 3384, 3384, 2674, 3384, 2451, 3384,
  /*  882 */ 2767, 2443, 3593, 3384, 2998, 3384, 2448, 3596, 2991, 3597, 3384, 3384, 2684, 2331, 3598, 3384, 3384, 3592,
  /*  900 */ 2966, 3384, 2844, 2871, 2459, 3384, 2458, 3384, 2287, 3384, 2601, 2464, 3384, 2389, 3384, 2287, 3384, 3384,
  /*  918 */ 2413, 3384, 3180, 3444, 3378, 2389, 2856, 2580, 3131, 2472, 3180, 3445, 3594, 2865, 2472, 3379, 2837, 2865,
  /*  936 */ 3180, 2472, 3384, 2288, 3384, 2285, 3384, 3427, 2968, 3615, 2491, 2495, 2498, 2501, 2502, 2506, 2508, 2512,
  /*  954 */ 2522, 2515, 3384, 3384, 2739, 2662, 2984, 2698, 2526, 3384, 2368, 3017, 3384, 2325, 3312, 3384, 2325, 3357,
  /*  972 */ 3384, 2327, 3018, 3384, 2404, 3384, 3384, 2473, 2221, 2975, 3384, 3384, 2537, 2607, 2453, 2618, 2766, 2370,
  /*  990 */ 3431, 3436, 3384, 3384, 3395, 2622, 3572, 3384, 3230, 2639, 2643, 3384, 2722, 2591, 3384, 3086, 3701, 2783,
  /* 1008 */ 2652, 2709, 3384, 3384, 3384, 2567, 3539, 2666, 2672, 3384, 2022, 2678, 3018, 3384, 2723, 3346, 3384, 3384,
  /* 1026 */ 2691, 2453, 2702, 3384, 3384, 2921, 3626, 2557, 2706, 3384, 3384, 2953, 3384, 2559, 2708, 3384, 3384, 2972,
  /* 1044 */ 3384, 2575, 2716, 2721, 2728, 2358, 2697, 2454, 2759, 2738, 2744, 3384, 3384, 3024, 3028, 2998, 3731, 3377,
  /* 1062 */ 2748, 2752, 2724, 3384, 2289, 3384, 3408, 2771, 3384, 2477, 2486, 3384, 3384, 3384, 2477, 3384, 3731, 3446,
  /* 1080 */ 2801, 2806, 2775, 2289, 3384, 2529, 2384, 2394, 3551, 2452, 2781, 2517, 2787, 3384, 2793, 2561, 2823, 2810,
  /* 1098 */ 3806, 3137, 3794, 2817, 3384, 3384, 3123, 3384, 2818, 3384, 3445, 2751, 2822, 3552, 3792, 2959, 2382, 2958,
  /* 1116 */ 2850, 2692, 2829, 2842, 2848, 3595, 2850, 2801, 2833, 3114, 3113, 3702, 2831, 2614, 2390, 2025, 2861, 3781,
  /* 1134 */ 2613, 3179, 2835, 3782, 2864, 3384, 3384, 3384, 2568, 2870, 3859, 2533, 2875, 2999, 3145, 2342, 2880, 2883,
  /* 1152 */ 2887, 2891, 2891, 2895, 2900, 2896, 2903, 2907, 3384, 3384, 3384, 2776, 3000, 3384, 3384, 2918, 2995, 3384,
  /* 1170 */ 2926, 3384, 2530, 2914, 3384, 2529, 3251, 3795, 2932, 3384, 3384, 2939, 2928, 3384, 3301, 2766, 2518, 2765,
  /* 1188 */ 3384, 2472, 2466, 3594, 2982, 3384, 2603, 2988, 3014, 3384, 3384, 3384, 2876, 3045, 3384, 3384, 3050, 2360,
  /* 1206 */ 3092, 3384, 2918, 2995, 3384, 3384, 3056, 3069, 3384, 3384, 3384, 3004, 3126, 3384, 3384, 2866, 2776, 3566,
  /* 1224 */ 3090, 3384, 2585, 3637, 3641, 2360, 3384, 2359, 2997, 3384, 3775, 3084, 3384, 2625, 3384, 3094, 3731, 3103,
  /* 1242 */ 3384, 2922, 2994, 3384, 2356, 3143, 3384, 3384, 3813, 3136, 3384, 3814, 3384, 3384, 3384, 3384, 2006, 3402,
  /* 1260 */ 3384, 3384, 3384, 3032, 2920, 3768, 3384, 2267, 2996, 3384, 3143, 3347, 3082, 3384, 3384, 3266, 3018, 3135,
  /* 1278 */ 3384, 3384, 3142, 3384, 3384, 3384, 3039, 3733, 3384, 2996, 2266, 3093, 3384, 3766, 2710, 2545, 3218, 3339,
  /* 1296 */ 3384, 3384, 3521, 3075, 3517, 3384, 3520, 3518, 3384, 3520, 3518, 3519, 3764, 2224, 3766, 2222, 3766, 3767,
  /* 1314 */ 3189, 3192, 3194, 3196, 3199, 3198, 3203, 3207, 3211, 3384, 3384, 3384, 3080, 3674, 3384, 3384, 3579, 3222,
  /* 1332 */ 3423, 3228, 3384, 2628, 3594, 3384, 2717, 3157, 3161, 3234, 3384, 2226, 3243, 3384, 3249, 3384, 2543, 3255,
  /* 1350 */ 3259, 3384, 3384, 3384, 3416, 3702, 3144, 3458, 3300, 3673, 3384, 3384, 3333, 3270, 3384, 3384, 3275, 2687,
  /* 1368 */ 3282, 3384, 3384, 3384, 3417, 3288, 3384, 2460, 3384, 2731, 3020, 3019, 3061, 2920, 3181, 3294, 3384, 3518,
  /* 1386 */ 3457, 3299, 3305, 3384, 3384, 3789, 2250, 2000, 3384, 3384, 3384, 3418, 3311, 3018, 3384, 3643, 3673, 3384,
  /* 1404 */ 3327, 3085, 3384, 3655, 3384, 3384, 3384, 3422, 3384, 3384, 3384, 3505, 3617, 3384, 3671, 2472, 3180, 3445,
  /* 1422 */ 2467, 3332, 3384, 2217, 3151, 3766, 2681, 3672, 3384, 3384, 3384, 3152, 3328, 3384, 3318, 3384, 2857, 3541,
  /* 1440 */ 3384, 2002, 3118, 3384, 2047, 2123, 2065, 2020, 2158, 3384, 3384, 3384, 2231, 3384, 3645, 3671, 2838, 3384,
  /* 1458 */ 2910, 3358, 3384, 2737, 2743, 3384, 2424, 3384, 3384, 2442, 3384, 2761, 3151, 3093, 3338, 3674, 3344, 3384,
  /* 1476 */ 3352, 3700, 3179, 3213, 3384, 2920, 3732, 3377, 3164, 3093, 3338, 3675, 2480, 3384, 3384, 2429, 2627, 3384,
  /* 1494 */ 2232, 3362, 2646, 3675, 3376, 3384, 2942, 3384, 3384, 3262, 3018, 2627, 3384, 3383, 2377, 3334, 3384, 3384,
  /* 1512 */ 2626, 3384, 2232, 3390, 3353, 2766, 3399, 3406, 3384, 3415, 3407, 3384, 3415, 3407, 3406, 3384, 3404, 3353,
  /* 1530 */ 2654, 2733, 3432, 3440, 3443, 3384, 3384, 3384, 3153, 3450, 3018, 3648, 3518, 3384, 3710, 3454, 3462, 3581,
  /* 1548 */ 3466, 3470, 2796, 3474, 3477, 3477, 3479, 3483, 3487, 3491, 3495, 3384, 3384, 3450, 3616, 2712, 3384, 2482,
  /* 1566 */ 2540, 3224, 3384, 2286, 3384, 2357, 3501, 3384, 2434, 3509, 3384, 3515, 3525, 3529, 3533, 3664, 3384, 3384,
  /* 1584 */ 3384, 3545, 3074, 3701, 3712, 3586, 3871, 3099, 3384, 3384, 2852, 2585, 3556, 3502, 3384, 2950, 3384, 3046,
  /* 1602 */ 3560, 3564, 3372, 3570, 2946, 3576, 3425, 3384, 2957, 2963, 3384, 2531, 3250, 3105, 3072, 3700, 3711, 3585,
  /* 1620 */ 3590, 3384, 2286, 3384, 2978, 2800, 2805, 3702, 3608, 3009, 3384, 3034, 2632, 3384, 2408, 3384, 3384, 2557,
  /* 1638 */ 2658, 2586, 3612, 2265, 3647, 2945, 3652, 3662, 3119, 3621, 2648, 3384, 3038, 3393, 3384, 2565, 2572, 2584,
  /* 1656 */ 3633, 3709, 3711, 2346, 3872, 2287, 3384, 3384, 3384, 3602, 3384, 3685, 3384, 3384, 3384, 3702, 3863, 3384,
  /* 1674 */ 3384, 3676, 3668, 3710, 2345, 3680, 3384, 3040, 2433, 3384, 2287, 2843, 2756, 3384, 3384, 3684, 3384, 3059,
  /* 1692 */ 3384, 3384, 2438, 3384, 3689, 3697, 3425, 3384, 3063, 3781, 3316, 3676, 3707, 3052, 2347, 3384, 3384, 3497,
  /* 1710 */ 3384, 3064, 3384, 3384, 3384, 3410, 3384, 3384, 3716, 3384, 3075, 3702, 3367, 3384, 3384, 3511, 3722, 3726,
  /* 1728 */ 3741, 3664, 3408, 3737, 3052, 3692, 3384, 3076, 2101, 2104, 3384, 3671, 3384, 3535, 3010, 3384, 2585, 3718,
  /* 1746 */ 3740, 3663, 3745, 3749, 3756, 3384, 2710, 3384, 3098, 3384, 3384, 3340, 3594, 3702, 3761, 3384, 3364, 3772,
  /* 1764 */ 3424, 2777, 3779, 3384, 3366, 3786, 2133, 3800, 3384, 3629, 3628, 3425, 3757, 3628, 2088, 3757, 3757, 3628,
  /* 1782 */ 2088, 3693, 3384, 3629, 2142, 3384, 3732, 3804, 2532, 2668, 2277, 3099, 2112, 3384, 2610, 2112, 3384, 3810,
  /* 1800 */ 3818, 3822, 3826, 3830, 3832, 3836, 3840, 3844, 3848, 3384, 3107, 2403, 3384, 2088, 3408, 3105, 2935, 3419,
  /* 1818 */ 3384, 3418, 3384, 3420, 3384, 3408, 2530, 3384, 3384, 3384, 2243, 2530, 3384, 3503, 3384, 3853, 2058, 3852,
  /* 1836 */ 2812, 3857, 3384, 3141, 3384, 3384, 3384, 3386, 3149, 3384, 2411, 3702, 3384, 3869, 3019, 3384, 3166, 3008,
  /* 1854 */ 3646, 3384, 3409, 3384, 3384, 3384, 3703, 3384, 3419, 3384, 2133, 3384, 3384, 3408, 3384, 3170, 3177, 3185,
  /* 1872 */ 3384, 3504, 3384, 3426, 3384, 3384, 3384, 3284, 3863, 3384, 3384, 3384, 3245, 3420, 3019, 3384, 3384, 3384,
  /* 1890 */ 3871, 3384, 3384, 3503, 3384, 3212, 3384, 3371, 3384, 3384, 3517, 3384, 2223, 3075, 3384, 3384, 3421, 3416,
  /* 1908 */ 3384, 3384, 3421, 3384, 3237, 2423, 2428, 3384, 3384, 3411, 3384, 3245, 3051, 3384, 3384, 2532, 3111, 3384,
  /* 1926 */ 2711, 3384, 3384, 3384, 3322, 2132, 3384, 3384, 3384, 3348, 3384, 3757, 3384, 3384, 3385, 3323, 4437, 4141,
  /* 1944 */ 4585, 4235, 4587, 3877, 4299, 3935, 4301, 4301, 3976, 3977, 4300, 4301, 3975, 4301, 4301, 4301, 4301, 3937,
  /* 1962 */ 3973, 3979, 3979, 4410, 3981, 3986, 3988, 3983, 3982, 3984, 3990, 3990, 3990, 3991, 3990, 3993, 3997, 4002,
  /* 1980 */ 3995, 3997, 3995, 3996, 3995, 3998, 3999, 4001, 4001, 4000, 3995, 4416, 4438, 4141, 4315, 4590, 3929, 4587,
  /* 1998 */ 3878, 4086, 4537, 4040, 4587, 4587, 4587, 4465, 4297, 4130, 4587, 4587, 3876, 3922, 4409, 4409, 4411, 4004,
  /* 2016 */ 4006, 4136, 4527, 4407, 4006, 4437, 4586, 4587, 3897, 4587, 4587, 4587, 3907, 4409, 4505, 4023, 4006, 4006,
  /* 2034 */ 4026, 3929, 3882, 4072, 4074, 4006, 4136, 4407, 4006, 4125, 4587, 4136, 4587, 4117, 4409, 4409, 4409, 4435,
  /* 2052 */ 3878, 3879, 4587, 4232, 3906, 3906, 4587, 4587, 3879, 4587, 4318, 3906, 4135, 4006, 4006, 4006, 4006, 4136,
  /* 2070 */ 4587, 4318, 4587, 4587, 3889, 4014, 4587, 4590, 3915, 3915, 3915, 4134, 4134, 4134, 4134, 4006, 4006, 4006,
  /* 2088 */ 4587, 4587, 4587, 3893, 3877, 4587, 4433, 4433, 4433, 4433, 4409, 4409, 4433, 4433, 4433, 4434, 4409, 4409,
  /* 2106 */ 4409, 4409, 3915, 4133, 4006, 4136, 4587, 4587, 4587, 3896, 4409, 4006, 4006, 4006, 4007, 3929, 4409, 4409,
  /* 2124 */ 4025, 4006, 4006, 4025, 4006, 4136, 4117, 4316, 4587, 4587, 3890, 4587, 4587, 4025, 4408, 4408, 4408, 4136,
  /* 2142 */ 4587, 4587, 3889, 4587, 4256, 4590, 3893, 3925, 4083, 3932, 3919, 4070, 3887, 4042, 3929, 3929, 3929, 3929,
  /* 2160 */ 4587, 4587, 3894, 3930, 4632, 4085, 4044, 4069, 4069, 4049, 4050, 4051, 3929, 3929, 3932, 4084, 4222, 3888,
  /* 2178 */ 3929, 3929, 4466, 3932, 3930, 4223, 3929, 3929, 4059, 4062, 3931, 4064, 4045, 4045, 4066, 4068, 4090, 4092,
  /* 2196 */ 4094, 4096, 4098, 4097, 4100, 4105, 4101, 4107, 4110, 4109, 4103, 4112, 4110, 4102, 4110, 4114, 4147, 4115,
  /* 2214 */ 4149, 4151, 4116, 4587, 3878, 4224, 4439, 4417, 4587, 4587, 4587, 3908, 4587, 4587, 4587, 3880, 4587, 4584,
  /* 2232 */ 4587, 4587, 4587, 3918, 4168, 4587, 4236, 4426, 4054, 4609, 4235, 4587, 3880, 3895, 4424, 4587, 4591, 3896,
  /* 2250 */ 4587, 3880, 3955, 4539, 4587, 4440, 4422, 4301, 4301, 4302, 4301, 4298, 3934, 3936, 4524, 4125, 4587, 4587,
  /* 2268 */ 4587, 3923, 4587, 4587, 4440, 4315, 4327, 4422, 4422, 4587, 3896, 4587, 3944, 4173, 4587, 4173, 4587, 4587,
  /* 2286 */ 4587, 3947, 4587, 4587, 4587, 3904, 4587, 3924, 4176, 4177, 4177, 4179, 4179, 4179, 4180, 4182, 4182, 4183,
  /* 2304 */ 4182, 4185, 4186, 4188, 4191, 4191, 4191, 4190, 4191, 4191, 4192, 4193, 4195, 4193, 4197, 4193, 4587, 4297,
  /* 2322 */ 4587, 4199, 4444, 4587, 4587, 4587, 3954, 4202, 4254, 4474, 4323, 4587, 4145, 4587, 4588, 4587, 4206, 4211,
  /* 2340 */ 4587, 4496, 4587, 3883, 4317, 4607, 4127, 4412, 3909, 4137, 4423, 4587, 4328, 4449, 4499, 4312, 4587, 4587,
  /* 2358 */ 4587, 3959, 4587, 4587, 4587, 3962, 4584, 3962, 4587, 4587, 4428, 3947, 4587, 4422, 4587, 4550, 4297, 4117,
  /* 2376 */ 4213, 4587, 3883, 4413, 3943, 4158, 4014, 4587, 4587, 4587, 3969, 4077, 3962, 4587, 4587, 4587, 4029, 4014,
  /* 2394 */ 4200, 4587, 4587, 4587, 4054, 4499, 4587, 4118, 4078, 4080, 4587, 4587, 4587, 4014, 4297, 4297, 4531, 4587,
  /* 2412 */ 3883, 4587, 4442, 4055, 4587, 4587, 4370, 4078, 4531, 4442, 4587, 4137, 4587, 4587, 4502, 4014, 4453, 4587,
  /* 2430 */ 4587, 4587, 4086, 4261, 4587, 4587, 4587, 4121, 4162, 4587, 4235, 4014, 4228, 4260, 4587, 4587, 4587, 4142,
  /* 2448 */ 4587, 4297, 4297, 4165, 4587, 4587, 4587, 4117, 4587, 4349, 4129, 4412, 4587, 4587, 4587, 4143, 4587, 4586,
  /* 2466 */ 4587, 4595, 4587, 4587, 4587, 4164, 4029, 4587, 4587, 4587, 4155, 4243, 4248, 4414, 4132, 4142, 4587, 4587,
  /* 2484 */ 4231, 4332, 4503, 4587, 4587, 4587, 4208, 4587, 4263, 3917, 4169, 4265, 4267, 4270, 4272, 4272, 4273, 4274,
  /* 2502 */ 4274, 4274, 4274, 4276, 4276, 4277, 4281, 4281, 4281, 4281, 4281, 4280, 4285, 4281, 4282, 4587, 4587, 3912,
  /* 2520 */ 3957, 4157, 4281, 4287, 4281, 4278, 4587, 4268, 4289, 4587, 3883, 4587, 4587, 4587, 3883, 4587, 4372, 4587,
  /* 2538 */ 4294, 4296, 4587, 3890, 4037, 4587, 3892, 4587, 4587, 4126, 4587, 4587, 3940, 4304, 4587, 4587, 4306, 4587,
  /* 2556 */ 4308, 4587, 4587, 3912, 3960, 4010, 4140, 4014, 4587, 4587, 4311, 4587, 4587, 3912, 4599, 4027, 4325, 4587,
  /* 2574 */ 3971, 4587, 3898, 4587, 4236, 3907, 3944, 3908, 3907, 4419, 4445, 4587, 4587, 4587, 4221, 3945, 3957, 4334,
  /* 2592 */ 4032, 4161, 4587, 4215, 4428, 4587, 4441, 4595, 4056, 3948, 3917, 4587, 4587, 3914, 3950, 3963, 4419, 4234,
  /* 2610 */ 4587, 3908, 4623, 3944, 4361, 4587, 4029, 4229, 3963, 4337, 4032, 4608, 4159, 4608, 4525, 4587, 3918, 4254,
  /* 2628 */ 4587, 4587, 4587, 4574, 4158, 4160, 4609, 4526, 3886, 3921, 3935, 4587, 4325, 4587, 3970, 4343, 4587, 4346,
  /* 2646 */ 4587, 3942, 4028, 4587, 4587, 4590, 4018, 4503, 4526, 4587, 4607, 4526, 4010, 4139, 4132, 4160, 4140, 4019,
  /* 2664 */ 4544, 4526, 4587, 4436, 4587, 4587, 3927, 3896, 4587, 4356, 4587, 4587, 3927, 4587, 4587, 4359, 4427, 4587,
  /* 2682 */ 3942, 4450, 4587, 3943, 4443, 4587, 3881, 4319, 4535, 3904, 4587, 4587, 4587, 4244, 4587, 4420, 4235, 4587,
  /* 2700 */ 4587, 4117, 4588, 4009, 4246, 4329, 4010, 4140, 4019, 4525, 4587, 4587, 4587, 4237, 4587, 4217, 3907, 4587,
  /* 2718 */ 4441, 4587, 4126, 4587, 4587, 4588, 3927, 3907, 4334, 4587, 3907, 4334, 4142, 4587, 3943, 4587, 4312, 4587,
  /* 2736 */ 4550, 4587, 4587, 4588, 4353, 3957, 4011, 3957, 4157, 4335, 4525, 4587, 3878, 4587, 4587, 4244, 3908, 4587,
  /* 2754 */ 4442, 4588, 4587, 4430, 4588, 4429, 4329, 4587, 4587, 3928, 4030, 4252, 4526, 4587, 4587, 4587, 4228, 4363,
  /* 2772 */ 4010, 4140, 4548, 4414, 4422, 4587, 4587, 4587, 3926, 4587, 4366, 4430, 4587, 4349, 4429, 4157, 4252, 4587,
  /* 2790 */ 4587, 3941, 4587, 4587, 4587, 4588, 4363, 3956, 3947, 4614, 3878, 4587, 4236, 3907, 4587, 4587, 4441, 4587,
  /* 2808 */ 4243, 4248, 4441, 4586, 4587, 4587, 3943, 4587, 4162, 4587, 4369, 4611, 4014, 4587, 4243, 3907, 4587, 4587,
  /* 2826 */ 4587, 4315, 4171, 3908, 4236, 3907, 4587, 4244, 3908, 4587, 4361, 4587, 4418, 4587, 4587, 4290, 4587, 4361,
  /* 2844 */ 4587, 4587, 4587, 4297, 4409, 4075, 4077, 4014, 4587, 4587, 3949, 4587, 4229, 4587, 4587, 4587, 4326, 3945,
  /* 2862 */ 4235, 4587, 4418, 4418, 4587, 4587, 4587, 4201, 4587, 4297, 4587, 4587, 4129, 4374, 4587, 4587, 4587, 4339,
  /* 2880 */ 3893, 4587, 3893, 4377, 4377, 4380, 4378, 4381, 4382, 4382, 4382, 4384, 4384, 4384, 4384, 4385, 4386, 4386,
  /* 2898 */ 4386, 4391, 4386, 4387, 4386, 4386, 4392, 4388, 4387, 4388, 4394, 4389, 4587, 3954, 4424, 4202, 4587, 4588,
  /* 2916 */ 3905, 4610, 3878, 4396, 4587, 4587, 3962, 4587, 4587, 3959, 4398, 4400, 4587, 4587, 3962, 4607, 3899, 3901,
  /* 2934 */ 3903, 4587, 3959, 3962, 3958, 3900, 3902, 4442, 4587, 3959, 4047, 4440, 4587, 3939, 4412, 4235, 4587, 4587,
  /* 2952 */ 4516, 4587, 3962, 4428, 4014, 4404, 4587, 4587, 4587, 4369, 4077, 4587, 4587, 4579, 4587, 3962, 4586, 4587,
  /* 2970 */ 3958, 4251, 4447, 4033, 4165, 4587, 3965, 4295, 4587, 3883, 4587, 4595, 4413, 4418, 4587, 4587, 3964, 4166,
  /* 2988 */ 4364, 4506, 4235, 4587, 3969, 4219, 4587, 4587, 4587, 4128, 4587, 4587, 4587, 4137, 4587, 4161, 3891, 3889,
  /* 3006 */ 3950, 3957, 4129, 4585, 4544, 4587, 4587, 4587, 4258, 4032, 4507, 4442, 4442, 4587, 4587, 4587, 3909, 4550,
  /* 3024 */ 4587, 4458, 3916, 3946, 4415, 4259, 4204, 4508, 4587, 4344, 4587, 4587, 3965, 3967, 4347, 4587, 4587, 4587,
  /* 3042 */ 4370, 4078, 4261, 4461, 4587, 4587, 4587, 4402, 4203, 4375, 4587, 4587, 4587, 4331, 4455, 4047, 4469, 4587,
  /* 3060 */ 4020, 4587, 4587, 3891, 4587, 4587, 4587, 4468, 4587, 3960, 4138, 4328, 4040, 4587, 4541, 4236, 4587, 4587,
  /* 3078 */ 4587, 4433, 4587, 4239, 4008, 3961, 3923, 4142, 4587, 4587, 4587, 4420, 4587, 4587, 4607, 4587, 4587, 4587,
  /* 3096 */ 4413, 3943, 4421, 4587, 4587, 4587, 4423, 4587, 4587, 4530, 4430, 4587, 4587, 4011, 4078, 4587, 4245, 4587,
  /* 3114 */ 4587, 4029, 4229, 4587, 4138, 4440, 4587, 4587, 3939, 4587, 4238, 4052, 3923, 4329, 4442, 4587, 4039, 4235,
  /* 3132 */ 4587, 4225, 4587, 4459, 4440, 4587, 4587, 4587, 4430, 4587, 4465, 3923, 4587, 4587, 4587, 4425, 4230, 4417,
  /* 3150 */ 4439, 4034, 4587, 4587, 4587, 4527, 3892, 4587, 4413, 3953, 4456, 3952, 4087, 4442, 3893, 4547, 4587, 4587,
  /* 3168 */ 4221, 3957, 4431, 4471, 4587, 4587, 4029, 4433, 4433, 4471, 4471, 4587, 4587, 4029, 4587, 4587, 4292, 4030,
  /* 3186 */ 4473, 4476, 4480, 4479, 4478, 4482, 4482, 4483, 4484, 4484, 4484, 4484, 4490, 4490, 4490, 4490, 4489, 4491,
  /* 3204 */ 4486, 4490, 4488, 4493, 4488, 4488, 4488, 4495, 4587, 4587, 4587, 4440, 4587, 4587, 4587, 4413, 3950, 4088,
  /* 3222 */ 4588, 4501, 4587, 4587, 4053, 4587, 4249, 4442, 4587, 4587, 4120, 4587, 4510, 4512, 4442, 4587, 4054, 4587,
  /* 3240 */ 4587, 4137, 4502, 4511, 4513, 4587, 4587, 4126, 4203, 4143, 4587, 4587, 4587, 4452, 4530, 4587, 4515, 4587,
  /* 3258 */ 4209, 4587, 4587, 4518, 4587, 4076, 3968, 4079, 3928, 3961, 4321, 4547, 4314, 4587, 4587, 4587, 4462, 4529,
  /* 3276 */ 4533, 4442, 4587, 4082, 3929, 3932, 4601, 4442, 4587, 4587, 4130, 4587, 4536, 4602, 4587, 4587, 4153, 4587,
  /* 3294 */ 4144, 4587, 4587, 4587, 4463, 4520, 4017, 4587, 4587, 4587, 4455, 4588, 4313, 4587, 4587, 4162, 4161, 3881,
  /* 3312 */ 4424, 4202, 4254, 4442, 4587, 4290, 4587, 4587, 4162, 4442, 3878, 4046, 4321, 4547, 4442, 4587, 4587, 4588,
  /* 3330 */ 4132, 4142, 4291, 4587, 4587, 4587, 4523, 4412, 4520, 3877, 4587, 4587, 4587, 4441, 4587, 4523, 4032, 4587,
  /* 3348 */ 4587, 4587, 4238, 3928, 4441, 4587, 4587, 4587, 4543, 3968, 4254, 4442, 4587, 4587, 4119, 4526, 4587, 4587,
  /* 3366 */ 4236, 3889, 4230, 4587, 4587, 4654, 4587, 4587, 4587, 4576, 4132, 4587, 4587, 4587, 4586, 4587, 4587, 4315,
  /* 3384 */ 4587, 4587, 4587, 4587, 3878, 4046, 4587, 4588, 4422, 4587, 4161, 4587, 4587, 3966, 4139, 4587, 4543, 4526,
  /* 3402 */ 4587, 4162, 4422, 4587, 3909, 4550, 4587, 4587, 4587, 4588, 3883, 4587, 4587, 4312, 4587, 4587, 3909, 4587,
  /* 3420 */ 4587, 4587, 4589, 4587, 4587, 4587, 4590, 4587, 4587, 4587, 4442, 4587, 4587, 4550, 4587, 4552, 4587, 4312,
  /* 3438 */ 4587, 4607, 4552, 4255, 4255, 4255, 4587, 4587, 4587, 4595, 4587, 3879, 4588, 3913, 4367, 4521, 4240, 4587,
  /* 3456 */ 4330, 4425, 4587, 4587, 3940, 4520, 4406, 4587, 4405, 3909, 4036, 4587, 4241, 4035, 4587, 4554, 4363, 4423,
  /* 3474 */ 4615, 4615, 4615, 4556, 4556, 4556, 4556, 4562, 4562, 4564, 4559, 4559, 4558, 4567, 4568, 4560, 4566, 4561,
  /* 3492 */ 4563, 4570, 4559, 4563, 4572, 4587, 4587, 4236, 3947, 4122, 4124, 4587, 4587, 4587, 4653, 4587, 4587, 4123,
  /* 3510 */ 4125, 4587, 4587, 4236, 3955, 4576, 4587, 4587, 4587, 4236, 4587, 4587, 4413, 4587, 4587, 4578, 4587, 4587,
  /* 3528 */ 4057, 4581, 4587, 4583, 4060, 4594, 4649, 4587, 4587, 4236, 4621, 4027, 4040, 4587, 4587, 4283, 4226, 4604,
  /* 3546 */ 3968, 4586, 4587, 4168, 4413, 3947, 4587, 4419, 4235, 4587, 3945, 4432, 4118, 4013, 3895, 3951, 4434, 4012,
  /* 3564 */ 4253, 4125, 4587, 4587, 4309, 4587, 4587, 4606, 4587, 4587, 4341, 4587, 4021, 4020, 4624, 4587, 4174, 4587,
  /* 3582 */ 4587, 4037, 4442, 4127, 4412, 3909, 4587, 4350, 4350, 4587, 4587, 4502, 4586, 4587, 4587, 4587, 4075, 4078,
  /* 3600 */ 4165, 4587, 4604, 4448, 4587, 4587, 4354, 4587, 3895, 3951, 4434, 4131, 4432, 4077, 4252, 4596, 4442, 4587,
  /* 3618 */ 4587, 4541, 4235, 4412, 4235, 4351, 4587, 4217, 4428, 4014, 4587, 4587, 3893, 3890, 4587, 4027, 4040, 4587,
  /* 3636 */ 4165, 3945, 3957, 4434, 4229, 4596, 4125, 4587, 4587, 4357, 4587, 4587, 4587, 4541, 4587, 4587, 4257, 4020,
  /* 3654 */ 4624, 4587, 4233, 4442, 4587, 4156, 3968, 4079, 4587, 4587, 4591, 4587, 4587, 4587, 4617, 4587, 4165, 4237,
  /* 3672 */ 4587, 4587, 4587, 4498, 4587, 4587, 4588, 3913, 4137, 4587, 4587, 3947, 4587, 4613, 4600, 4586, 4587, 4315,
  /* 3690 */ 4587, 3939, 4412, 3890, 4587, 4587, 3909, 4257, 4587, 4028, 4587, 4235, 4587, 4587, 4587, 4236, 3879, 4028,
  /* 3708 */ 4541, 4237, 4217, 4587, 4587, 4587, 4607, 4127, 4221, 4320, 4230, 4125, 4546, 4332, 4225, 4544, 4587, 4541,
  /* 3726 */ 3938, 4332, 4217, 3962, 4054, 4587, 4587, 3893, 4587, 4587, 3896, 4619, 4541, 4237, 4217, 4624, 4587, 4587,
  /* 3744 */ 4587, 4587, 4587, 4588, 4591, 4220, 4587, 4587, 4587, 4409, 4409, 4409, 4597, 3890, 4587, 4587, 4587, 3889,
  /* 3762 */ 4230, 4125, 4587, 4237, 4587, 4237, 4587, 4587, 4413, 4418, 4230, 4545, 4031, 4587, 4238, 4008, 3961, 4587,
  /* 3780 */ 4504, 4587, 4587, 4418, 4587, 4235, 4587, 4591, 4587, 4590, 4233, 4442, 4587, 4117, 4588, 4430, 4587, 4587,
  /* 3798 */ 4587, 4322, 4587, 4587, 4591, 3890, 3893, 4587, 4587, 4587, 4419, 4235, 3896, 4015, 4016, 4587, 4238, 4008,
  /* 3816 */ 4138, 4440, 4626, 4589, 3911, 3911, 3910, 4628, 4628, 4628, 4630, 4631, 4631, 4634, 4635, 4631, 4631, 4631,
  /* 3834 */ 4636, 4638, 4639, 4640, 4645, 4642, 4641, 4643, 4643, 4642, 4641, 4643, 4647, 4651, 4647, 4647, 4647, 4648,
  /* 3852 */ 4587, 4587, 4592, 4587, 4587, 3884, 4587, 4587, 4587, 4425, 4425, 3879, 4587, 4587, 4587, 4443, 4587, 4587,
  /* 3870 */ 4588, 4587, 4587, 4502, 4587, 4587, 1073872896, 131072, 0, 8, 0, 10, 48, 16, 0, 11, 262146, 262160, 524304,
  /* 3889 */ 16, 32, 0, 14, 0, 16, 48, 64, 0, 24, 0, 30, 672, 6691840, 1409286144, 0x80000000, 16777216, 64, 64, 256, 0,
  /* 3910 */ 32, 1, 1, 2, 8, 32, 32, 128, 0, 48, 80, 268566528, 131072, 131072, 262144, 16, 2, 4, 8, 16, 16, 17, 16, 20,
  /* 3934 */ 537133056, 537133056, -2147221504, -2147221504, 262144, 56, 256, 128, 256, 512, 0, 64, 512, 1024, 0, 68,
  /* 3950 */ 128, 512, 3072, 1024, 8, 48, 1024, 1024, 2048, 0, 128, 1024, 4096, 0, 129, 0, 131, 60416, 131072, 524288,
  /* 3970 */ 0, 255, 982272, 268444864, 10560, 8768, 262144, 278528, 278544, 537149440, 278530, 163872, 294944,
  /* 3983 */ -2147188704, 294944, -2147188674, 163840, 2392096, 294944, 537165856, -2145091522, -2145091522,
  /* 3992 */ -2111537090, -1943764930, -2111537090, -1373339586, -1373339586, -1406894018, -1373339586, -1977319362,
  /* 4000 */ -1977319362, -1373339586, -1910210498, -1406894018, 2129920, 2129952, 2129920, 2129920, 16, 128, 2048,
  /* 4011 */ 57344, 131072, 1572864, 8388608, 0, 4288, 3072, 131072, 2097152, 12582912, 0, 7168, 2129920, 2097184,
  /* 4025 */ 32768, 2129920, 65536, 67108864, 0, 16384, 262144, 2097152, 4194304, 8388608, 0x80000000, 603979776, 0,
  /* 4038 */ 4224, 1024, 268435456, 0x80000000, 1048592, 268435472, 1048848, 272, 16, 1024, 131072, 1572880, 524304,
  /* 4051 */ 1048592, 16, 4096, 4194304, 16777216, 2304, 0, 20092, 21, 0, 24180, 2, 304, 16, 165675008, 272, 524560,
  /* 4068 */ 1048592, 272, 272, 65552, 84, 20, 372, 0, 24576, 32768, 524288, 2097152, 939524096, 0x80000000, 16,
  /* 4083 */ 1073774592, 16, 304, 48, 131072, 67108864, 3072, 21, 112, 21, 53, 140511253, 140515349, 140539925,
  /* 4097 */ 140540573, 140540573, 140540605, 140540573, 141589149, -26183011, -26182755, -26183011, 141589149,
  /* 4106 */ 141589149, 141654973, -26183011, -25920867, -26182755, -26182755, -25920611, -26182755, -562988099,
  /* 4115 */ -26117187, -26117187, 0, 32768, 131072, 50331648, 0, 20084, 10125312, 50331648, 134217728, 0, 8192, 256,
  /* 4129 */ 16384, 524288, 524288, 1048576, 2097152, 2097184, 2097184, 2129920, 0, 4096, 131072, 786432, 1048576,
  /* 4142 */ 4194304, 0, -536870912, 0, -134217728, -562988099, -26182755, -25855043, -562463811, -25855043, -26117187,
  /* 4153 */ 0, 163577856, 138412032, 0, 57344, 786432, 3145728, 12582912, 33554432, 0, 65536, 239075328, 536870912, 0,
  /* 4167 */ 66048, 4, 128, 2372, 8652800, 1314816, 20971520, 0, 73728, 524288, 940081152, 940081152, -1205149696,
  /* 4180 */ -1205149696, -1205149150, -1205149142, -1205149142, -1205149078, -1171529174, -1171529174, -97787350,
  /* 4188 */ -1171529173, -88085910, -1171267029, -1171529173, -1171529173, -1161827733, -1161827733, -1150557653,
  /* 4196 */ -1161827733, -1161823637, -1161827733, 557056, 939524096, 0, 196608, 524288, 4194304, 335544320, 4188160,
  /* 4207 */ 41943040, 3137536, 0, 253952, 54525952, -1207959552, 524288, 939524096, 0, 2013265920, 0, 1073741824,
  /* 4219 */ 524288, 536870912, 4, 48, 1573136, 16, 16384, 8388608, 1314816, 24576, 524288, 8388608, 33554432, 8192,
  /* 4233 */ 8192, 65536, 1073741824, 0, 4, 0, 6, 8, 0x80000000, 4198400, 1, 4, 64, 32768, 2097152, 8, 64, 106496, 2304,
  /* 4252 */ 1048576, 8388608, 50331648, 268435456, 268435456, 1073741824, 4096, 393216, 2097152, 536870912,
  /* 4262 */ 0x80000000, 8, 2372, 129, 33554560, 4194433, 129, 165888, 1073807872, 4227201, 375556225, 375556225,
  /* 4274 */ 520023171, 520023171, 520027299, 520027299, 1056898227, -1090585421, 1073675443, 1056898227, 1056898227, 0,
  /* 4284 */ 264192, 1056898227, 1056898235, 1056898227, 1056898559, 375390208, 0, 458752, 0, 491520, 131, 977920,
  /* 4296 */ 519045120, 0, 524288, 262160, 33816576, 262144, 262144, 262174, 163, 982016, 179, 1055916032, 179, 0,
  /* 4310 */ 786432, 1072693248, 0, 1048576, 6291456, 0, 262144, 524288, 8192, 64, 1024, 16384, 65536, 33554432,
  /* 4324 */ -1207959552, 187, 0, 1052672, 262144, 4194304, 268435456, 33554432, 256, 2097152, 2048, 1048576, 12582912,
  /* 4337 */ 34816, 131072, 163, 64512, 179, 805306368, 64768, 0, 1507328, -1342177280, 0, 2031616, 1, 128, 4096,
  /* 4352 */ 12582912, 2, 128, 8256, 16, 536870912, 1073741824, 28, 96, 512, 1073741824, 2, 1024, 393216, 1, 2048,
  /* 4368 */ 65536, 1, 24576, 131072, 16777217, 134217792, 32768, 8388608, 536870912, 0, 268435592, 16640, 268435592,
  /* 4381 */ 268435592, 1411778216, 1411778216, -731504962, -731504962, -730390850, -730390850, -729866562, -729866562,
  /* 4390 */ -696312130, -730390850, -696836418, -729866562, -729858370, -729866562, 128, 268435456, 8, 672, 2491392,
  /* 4401 */ 1409286144, 8330240, 0x80000000, 1442840576, 0, 2097408, 0, 2129920, 32768, 32768, 32800, 2097152, 0, 256,
  /* 4415 */ 2048, 4096, 4096, 16384, 0, 512, 65536, 1048576, 0, 1024, 8192, 0, 1280, 0, 2048, 32768, 0, 3072, 16384,
  /* 4434 */ 16384, 32768, 32, 4096, 65536, 65536, 262144, 0, 0x80000000, 0, -1207959552, 0, -1091567616, 8192, 524288,
  /* 4449 */ 16777216, 67108864, 131072, 1, 16777216, 1073741824, 8, 128, 67109376, 14, 16, 131072, 2039808, 0, 2809856,
  /* 4464 */ -1207959552, 6, 16, 131088, 6, 262144, 268435456, 0, 134217856, -2147418112, 0, 2875392, -2147418112,
  /* 4477 */ 262160, 7340033, -2147418112, -2147418112, -2147409920, -2147377086, -2147377086, -1827953542, -1827953542,
  /* 4486 */ -217340806, -217324422, -217340802, -217340802, -217340806, -217340806, -217336710, -217340802, -217062278,
  /* 4495 */ -217340802, 0, 4192256, 0, 134217728, 1073741824, 7340032, 0, 4194304, 33554432, 32, 2097152, 335544320,
  /* 4508 */ 1073741824, 0x80000000, 10, 1136, 237568, 319291392, 0x80000000, 241664, 0, 7805952, 516096, -536870912,
  /* 4520 */ 512, 67108864, 268435456, 1, 1048576, 134217728, 268435456, 0, 12, 2, 64, 134217728, 805306368, 8192,
  /* 4534 */ 98304, 8192, 229376, 524288, 50331648, 8192, 196608, 0, 536870912, 32, 33554432, 134217728, 536870912,
  /* 4547 */ 262144, 8388608, 268435456, 33554432, 268435456, 0, 268435456, 0, 603979776, 194694772, 194694772,
  /* 4558 */ 731827836, 731827828, 731827828, 736026228, 731565684, 731565684, 731827828, 731565684, 798936692,
  /* 4567 */ 733925236, 731827828, 1805569652, 798936694, 731827828, 733925236, 736026228, 3076, 655360, 0, 671088640,
  /* 4578 */ 10387456, 0, 8338432, 20340, 12484608, 1744830464, 0, 8388608, 16777216, 0, 0, 1, 0, 2, 0, 3, 14581760, 0,
  /* 4596 */ 16777216, 33554432, 2097152, 8, 2048, 524288, 318767104, 0x80000000, 4, 3072, 1835008, 0, 33554432,
  /* 4609 */ 67108864, 134217728, 32768, 786432, 4, 1024, 17435652, 17435652, 2048, 67108864, 2, 67108864, 48, 8388608,
  /* 4623 */ 320, 0, 67108864, 1, 4288, 1, 65, 1, 17, 17, 24, 17, 81, 17, 1041, 2065, 83, 1107, 1875, 851, 1875, 1875,
  /* 4645 */ 3163, 1875, 3931, 3931, 0, 117440512, 3931, 851, 1, 16, 262144
];

XQueryParser.TOKEN =
[
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'digit'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'exit'",
  "'exponent-separator'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'json'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'loop'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'self'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'updating'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'when'",
  "'where'",
  "'while'",
  "'window'",
  "'with'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
